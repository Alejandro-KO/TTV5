
TTV5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115f8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080118c8  080118c8  000218c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011dbc  08011dbc  00021dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011dc4  08011dc4  00021dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011dc8  08011dc8  00021dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004f0  24000000  08011dcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ec  240004f0  080122bc  000304f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000bdc  080122bc  00030bdc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000304f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d0cc  00000000  00000000  0003051e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d74  00000000  00000000  0004d5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001670  00000000  00000000  00050360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001568  00000000  00000000  000519d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c53  00000000  00000000  00052f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c2ff  00000000  00000000  00088b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001641b6  00000000  00000000  000a4e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00209040  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007344  00000000  00000000  00209090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004f0 	.word	0x240004f0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080118b0 	.word	0x080118b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004f4 	.word	0x240004f4
 800030c:	080118b0 	.word	0x080118b0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <radianes_a_valor>:
char q2[BUFFER_SIZE] = {'1','1','2'};
char q3[BUFFER_SIZE] = {0};
char q4[BUFFER_SIZE] = {'1','.','5','7','0','7'};
char q5[BUFFER_SIZE] = {'1','.','5','7','0','7'};

uint32_t radianes_a_valor(float radianes) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ajusta los radianes negativos a su equivalente positivo en el rango de 0 a 2PI
    if (radianes < 0) {
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	d50b      	bpl.n	8000ae0 <radianes_a_valor+0x30>
        radianes += M_PI;
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000b28 <radianes_a_valor+0x78>
 8000ad4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ad8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000adc:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes > M_PI) {
 8000ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000b28 <radianes_a_valor+0x78>
 8000aec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af4:	dd01      	ble.n	8000afa <radianes_a_valor+0x4a>
        radianes = M_PI;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <radianes_a_valor+0x88>)
 8000af8:	607b      	str	r3, [r7, #4]
    }

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000afe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b02:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000b28 <radianes_a_valor+0x78>
 8000b06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b0a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000b30 <radianes_a_valor+0x80>
 8000b0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b16:	ee17 3a90 	vmov	r3, s15
 8000b1a:	3341      	adds	r3, #65	; 0x41
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	54442d18 	.word	0x54442d18
 8000b2c:	400921fb 	.word	0x400921fb
 8000b30:	00000000 	.word	0x00000000
 8000b34:	406cc000 	.word	0x406cc000
 8000b38:	40490fdb 	.word	0x40490fdb

08000b3c <milimetros_a_pasos>:

uint32_t milimetros_a_pasos(float milimetros) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calcular el número de pasos necesarios para mover la distancia en milímetros
    float pasos_por_mm = 200.0 / 8.0; // 200 pasos por 8 mm
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <milimetros_a_pasos+0x3c>)
 8000b48:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(fabs(milimetros) * pasos_por_mm);
 8000b4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b4e:	eef0 7ae7 	vabs.f32	s15, s15
 8000b52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b66:	ee17 3a90 	vmov	r3, s15
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	41c80000 	.word	0x41c80000

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b598      	push	{r3, r4, r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f001 fd46 	bl	8002610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f8da 	bl	8000d3c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b88:	f000 f946 	bl	8000e18 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f000 fbaa 	bl	80012e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b90:	f000 fae8 	bl	8001164 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8000b94:	f000 fb7e 	bl	8001294 <MX_DMA_Init>
  MX_TIM2_Init();
 8000b98:	f000 fa48 	bl	800102c <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b9c:	f000 f96a 	bl	8000e74 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ba0:	f000 f9e0 	bl	8000f64 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000ba4:	f000 fb2a 	bl	80011fc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000ba8:	f000 faa4 	bl	80010f4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000bac:	210c      	movs	r1, #12
 8000bae:	4853      	ldr	r0, [pc, #332]	; (8000cfc <main+0x180>)
 8000bb0:	f009 facc 	bl	800a14c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4851      	ldr	r0, [pc, #324]	; (8000cfc <main+0x180>)
 8000bb8:	f009 fac8 	bl	800a14c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3,&byte,bufersize);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4950      	ldr	r1, [pc, #320]	; (8000d00 <main+0x184>)
 8000bc0:	4850      	ldr	r0, [pc, #320]	; (8000d04 <main+0x188>)
 8000bc2:	f00a fb7d 	bl	800b2c0 <HAL_UART_Receive_IT>

  A4988_q1();
 8000bc6:	f000 fded 	bl	80017a4 <A4988_q1>
  A4988_q2();
 8000bca:	f000 fe09 	bl	80017e0 <A4988_q2>
  A4988_q3();
 8000bce:	f000 fe25 	bl	800181c <A4988_q3>
  Home();
 8000bd2:	f000 fe45 	bl	8001860 <Home>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(Paro_emergencia == 1)
 8000bd6:	4b4c      	ldr	r3, [pc, #304]	; (8000d08 <main+0x18c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d1fa      	bne.n	8000bd6 <main+0x5a>
	{
		q1_float = atof(q1);
 8000be0:	484a      	ldr	r0, [pc, #296]	; (8000d0c <main+0x190>)
 8000be2:	f00c fef3 	bl	800d9cc <atof>
 8000be6:	eeb0 7b40 	vmov.f64	d7, d0
 8000bea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bee:	4b48      	ldr	r3, [pc, #288]	; (8000d10 <main+0x194>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
		q4_float = atof(q4);
 8000bf4:	4847      	ldr	r0, [pc, #284]	; (8000d14 <main+0x198>)
 8000bf6:	f00c fee9 	bl	800d9cc <atof>
 8000bfa:	eeb0 7b40 	vmov.f64	d7, d0
 8000bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c02:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <main+0x19c>)
 8000c04:	edc3 7a00 	vstr	s15, [r3]
		q5_float = atof(q5);
 8000c08:	4844      	ldr	r0, [pc, #272]	; (8000d1c <main+0x1a0>)
 8000c0a:	f00c fedf 	bl	800d9cc <atof>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c16:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <main+0x1a4>)
 8000c18:	edc3 7a00 	vstr	s15, [r3]

		// Conversión de q2 y q3 a int (truncando los valores decimales)
		q2_int = (int)atof(q2);
 8000c1c:	4841      	ldr	r0, [pc, #260]	; (8000d24 <main+0x1a8>)
 8000c1e:	f00c fed5 	bl	800d9cc <atof>
 8000c22:	eeb0 7b40 	vmov.f64	d7, d0
 8000c26:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c2a:	ee17 2a90 	vmov	r2, s15
 8000c2e:	4b3e      	ldr	r3, [pc, #248]	; (8000d28 <main+0x1ac>)
 8000c30:	601a      	str	r2, [r3, #0]
		q3_int = (int)atof(q3);
 8000c32:	483e      	ldr	r0, [pc, #248]	; (8000d2c <main+0x1b0>)
 8000c34:	f00c feca 	bl	800d9cc <atof>
 8000c38:	eeb0 7b40 	vmov.f64	d7, d0
 8000c3c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c40:	ee17 2a90 	vmov	r2, s15
 8000c44:	4b3a      	ldr	r3, [pc, #232]	; (8000d30 <main+0x1b4>)
 8000c46:	601a      	str	r2, [r3, #0]

		mover_motorq1_rad(q1_float);
 8000c48:	4b31      	ldr	r3, [pc, #196]	; (8000d10 <main+0x194>)
 8000c4a:	edd3 7a00 	vldr	s15, [r3]
 8000c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c52:	f000 ff05 	bl	8001a60 <mover_motorq1_rad>
		HAL_Delay(100);
 8000c56:	2064      	movs	r0, #100	; 0x64
 8000c58:	f001 fd6c 	bl	8002734 <HAL_Delay>
		mover_motorq2_mm(q2_int);
 8000c5c:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <main+0x1ac>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c68:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6c:	f000 ff76 	bl	8001b5c <mover_motorq2_mm>
		HAL_Delay(100);
 8000c70:	2064      	movs	r0, #100	; 0x64
 8000c72:	f001 fd5f 	bl	8002734 <HAL_Delay>
		mover_motorq3_mm(q3_int);
 8000c76:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <main+0x1b4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	ee07 3a90 	vmov	s15, r3
 8000c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c82:	eeb0 0a67 	vmov.f32	s0, s15
 8000c86:	f000 ffd5 	bl	8001c34 <mover_motorq3_mm>
		HAL_Delay(200);
 8000c8a:	20c8      	movs	r0, #200	; 0xc8
 8000c8c:	f001 fd52 	bl	8002734 <HAL_Delay>
		TIM2->CCR4 = radianes_a_valor(q4_float); //q4
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <main+0x19c>)
 8000c92:	edd3 7a00 	vldr	s15, [r3]
 8000c96:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c9e:	f7ff ff07 	bl	8000ab0 <radianes_a_valor>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6423      	str	r3, [r4, #64]	; 0x40
		HAL_Delay(200);
 8000ca6:	20c8      	movs	r0, #200	; 0xc8
 8000ca8:	f001 fd44 	bl	8002734 <HAL_Delay>
		TIM2->CCR2 = radianes_a_valor(q5_float); //q5
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <main+0x1a4>)
 8000cae:	edd3 7a00 	vldr	s15, [r3]
 8000cb2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cba:	f7ff fef9 	bl	8000ab0 <radianes_a_valor>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	63a3      	str	r3, [r4, #56]	; 0x38

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // Enciende el LED
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	2108      	movs	r1, #8
 8000cc6:	481b      	ldr	r0, [pc, #108]	; (8000d34 <main+0x1b8>)
 8000cc8:	f006 f886 	bl	8006dd8 <HAL_GPIO_WritePin>
		HAL_Delay(1000); // Retardo de 1 segundo (1000 milisegundos)
 8000ccc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd0:	f001 fd30 	bl	8002734 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // Apaga el LED
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4816      	ldr	r0, [pc, #88]	; (8000d34 <main+0x1b8>)
 8000cda:	f006 f87d 	bl	8006dd8 <HAL_GPIO_WritePin>
		HAL_Delay(1000); // Retardo de 1 segundo (1000 milisegundos)
 8000cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce2:	f001 fd27 	bl	8002734 <HAL_Delay>

		HAL_UART_Transmit(&huart3, data, 1, 100); // Transmite un byte
 8000ce6:	2364      	movs	r3, #100	; 0x64
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4913      	ldr	r1, [pc, #76]	; (8000d38 <main+0x1bc>)
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <main+0x188>)
 8000cee:	f00a fa51 	bl	800b194 <HAL_UART_Transmit>
		HAL_Delay(1500); // Retardo de 1 segundo (1000 milisegundos)
 8000cf2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000cf6:	f001 fd1d 	bl	8002734 <HAL_Delay>
	if(Paro_emergencia == 1)
 8000cfa:	e76c      	b.n	8000bd6 <main+0x5a>
 8000cfc:	240006dc 	.word	0x240006dc
 8000d00:	24000894 	.word	0x24000894
 8000d04:	24000804 	.word	0x24000804
 8000d08:	24000302 	.word	0x24000302
 8000d0c:	2400099c 	.word	0x2400099c
 8000d10:	24000bac 	.word	0x24000bac
 8000d14:	24000100 	.word	0x24000100
 8000d18:	24000bb0 	.word	0x24000bb0
 8000d1c:	24000200 	.word	0x24000200
 8000d20:	24000bb4 	.word	0x24000bb4
 8000d24:	24000000 	.word	0x24000000
 8000d28:	24000bb8 	.word	0x24000bb8
 8000d2c:	24000a9c 	.word	0x24000a9c
 8000d30:	24000bbc 	.word	0x24000bbc
 8000d34:	58020800 	.word	0x58020800
 8000d38:	24000308 	.word	0x24000308

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09c      	sub	sp, #112	; 0x70
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	224c      	movs	r2, #76	; 0x4c
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00c fe6c 	bl	800da28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2220      	movs	r2, #32
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f00c fe66 	bl	800da28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f006 f889 	bl	8006e74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d6e:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d82:	bf00      	nop
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <SystemClock_Config+0xd4>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d90:	d1f8      	bne.n	8000d84 <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <SystemClock_Config+0xd8>)
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f023 0303 	bic.w	r3, r3, #3
 8000d9a:	4a1e      	ldr	r2, [pc, #120]	; (8000e14 <SystemClock_Config+0xd8>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000da2:	2303      	movs	r3, #3
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	2340      	movs	r3, #64	; 0x40
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db8:	2302      	movs	r3, #2
 8000dba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f006 f891 	bl	8006ee8 <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dcc:	f000 ffba 	bl	8001d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	233f      	movs	r3, #63	; 0x3f
 8000dd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 8000dd8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000de2:	2340      	movs	r3, #64	; 0x40
 8000de4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000de6:	2340      	movs	r3, #64	; 0x40
 8000de8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f006 fc23 	bl	8007644 <HAL_RCC_ClockConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e04:	f000 ff9e 	bl	8001d44 <Error_Handler>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3770      	adds	r7, #112	; 0x70
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	58024800 	.word	0x58024800
 8000e14:	58024400 	.word	0x58024400

08000e18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ae      	sub	sp, #184	; 0xb8
 8000e1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	22b4      	movs	r2, #180	; 0xb4
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00c fdff 	bl	800da28 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e2e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8000e34:	230f      	movs	r3, #15
 8000e36:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e44:	23c0      	movs	r3, #192	; 0xc0
 8000e46:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8000e4c:	f640 3386 	movw	r3, #2950	; 0xb86
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 ff7e 	bl	8007d5c <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000e66:	f000 ff6d 	bl	8001d44 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	37b8      	adds	r7, #184	; 0xb8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08c      	sub	sp, #48	; 0x30
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2224      	movs	r2, #36	; 0x24
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f00c fdcb 	bl	800da28 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000e94:	4a31      	ldr	r2, [pc, #196]	; (8000f5c <MX_ADC1_Init+0xe8>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eca:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef0:	4819      	ldr	r0, [pc, #100]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000ef2:	f001 fecb 	bl	8002c8c <HAL_ADC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000efc:	f000 ff22 	bl	8001d44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000f0c:	f003 f98e 	bl	800422c <HAL_ADCEx_MultiModeConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f16:	f000 ff15 	bl	8001d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_ADC1_Init+0xec>)
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f26:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f2a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <MX_ADC1_Init+0xe4>)
 8000f40:	f002 fb04 	bl	800354c <HAL_ADC_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000f4a:	f000 fefb 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	3730      	adds	r7, #48	; 0x30
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	2400050c 	.word	0x2400050c
 8000f5c:	40022000 	.word	0x40022000
 8000f60:	1d500080 	.word	0x1d500080

08000f64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2224      	movs	r2, #36	; 0x24
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00c fd59 	bl	800da28 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000f78:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <MX_ADC2_Init+0xc0>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fd4:	4812      	ldr	r0, [pc, #72]	; (8001020 <MX_ADC2_Init+0xbc>)
 8000fd6:	f001 fe59 	bl	8002c8c <HAL_ADC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000fe0:	f000 feb0 	bl	8001d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_ADC2_Init+0xc4>)
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe8:	2306      	movs	r3, #6
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ff4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_ADC2_Init+0xbc>)
 800100a:	f002 fa9f 	bl	800354c <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8001014:	f000 fe96 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2400057c 	.word	0x2400057c
 8001024:	40022100 	.word	0x40022100
 8001028:	21800100 	.word	0x21800100

0800102c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <MX_TIM2_Init+0xc4>)
 800105a:	2240      	movs	r2, #64	; 0x40
 800105c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8001064:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001066:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800106a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106c:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_TIM2_Init+0xc4>)
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001072:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001078:	481d      	ldr	r0, [pc, #116]	; (80010f0 <MX_TIM2_Init+0xc4>)
 800107a:	f009 f810 	bl	800a09e <HAL_TIM_PWM_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001084:	f000 fe5e 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4816      	ldr	r0, [pc, #88]	; (80010f0 <MX_TIM2_Init+0xc4>)
 8001098:	f009 ff72 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80010a2:	f000 fe4f 	bl	8001d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	; 0x60
 80010a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	2204      	movs	r2, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_TIM2_Init+0xc4>)
 80010be:	f009 fa81 	bl	800a5c4 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80010c8:	f000 fe3c 	bl	8001d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	220c      	movs	r2, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <MX_TIM2_Init+0xc4>)
 80010d4:	f009 fa76 	bl	800a5c4 <HAL_TIM_PWM_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80010de:	f000 fe31 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010e2:	4803      	ldr	r0, [pc, #12]	; (80010f0 <MX_TIM2_Init+0xc4>)
 80010e4:	f000 ffaa 	bl	800203c <HAL_TIM_MspPostInit>

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	240006dc 	.word	0x240006dc

080010f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_TIM6_Init+0x68>)
 8001106:	4a16      	ldr	r2, [pc, #88]	; (8001160 <MX_TIM6_Init+0x6c>)
 8001108:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_TIM6_Init+0x68>)
 800110c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001110:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <MX_TIM6_Init+0x68>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_TIM6_Init+0x68>)
 800111a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800111e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_TIM6_Init+0x68>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_TIM6_Init+0x68>)
 8001128:	f008 feac 	bl	8009e84 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001132:	f000 fe07 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_TIM6_Init+0x68>)
 8001144:	f009 ff1c 	bl	800af80 <HAL_TIMEx_MasterConfigSynchronization>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800114e:	f000 fdf9 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	24000728 	.word	0x24000728
 8001160:	40001000 	.word	0x40001000

08001164 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <MX_USART1_UART_Init+0x94>)
 800116c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ac:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011ae:	f009 ffa1 	bl	800b0f4 <HAL_UART_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011b8:	f000 fdc4 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011bc:	2100      	movs	r1, #0
 80011be:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011c0:	f00c fb39 	bl	800d836 <HAL_UARTEx_SetTxFifoThreshold>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011ca:	f000 fdbb 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ce:	2100      	movs	r1, #0
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011d2:	f00c fb6e 	bl	800d8b2 <HAL_UARTEx_SetRxFifoThreshold>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011dc:	f000 fdb2 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_USART1_UART_Init+0x90>)
 80011e2:	f00c faef 	bl	800d7c4 <HAL_UARTEx_DisableFifoMode>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011ec:	f000 fdaa 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	24000774 	.word	0x24000774
 80011f8:	40011000 	.word	0x40011000

080011fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001202:	4a23      	ldr	r2, [pc, #140]	; (8001290 <MX_USART3_UART_Init+0x94>)
 8001204:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001206:	4b21      	ldr	r3, [pc, #132]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800120c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_USART3_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001220:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001222:	220c      	movs	r2, #12
 8001224:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001226:	4b19      	ldr	r3, [pc, #100]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_USART3_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART3_UART_Init+0x90>)
 800123a:	2200      	movs	r2, #0
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001244:	4811      	ldr	r0, [pc, #68]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001246:	f009 ff55 	bl	800b0f4 <HAL_UART_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001250:	f000 fd78 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001254:	2100      	movs	r1, #0
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_USART3_UART_Init+0x90>)
 8001258:	f00c faed 	bl	800d836 <HAL_UARTEx_SetTxFifoThreshold>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001262:	f000 fd6f 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <MX_USART3_UART_Init+0x90>)
 800126a:	f00c fb22 	bl	800d8b2 <HAL_UARTEx_SetRxFifoThreshold>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001274:	f000 fd66 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_USART3_UART_Init+0x90>)
 800127a:	f00c faa3 	bl	800d7c4 <HAL_UARTEx_DisableFifoMode>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001284:	f000 fd5e 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	24000804 	.word	0x24000804
 8001290:	40004800 	.word	0x40004800

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_DMA_Init+0x4c>)
 800129c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <MX_DMA_Init+0x4c>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <MX_DMA_Init+0x4c>)
 80012ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	200b      	movs	r0, #11
 80012be:	f003 f972 	bl	80045a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012c2:	200b      	movs	r0, #11
 80012c4:	f003 f989 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	200c      	movs	r0, #12
 80012ce:	f003 f96a 	bl	80045a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012d2:	200c      	movs	r0, #12
 80012d4:	f003 f981 	bl	80045da <HAL_NVIC_EnableIRQ>

}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	58024400 	.word	0x58024400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012fa:	4b71      	ldr	r3, [pc, #452]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	4a6f      	ldr	r2, [pc, #444]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130a:	4b6d      	ldr	r3, [pc, #436]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001318:	4b69      	ldr	r3, [pc, #420]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	4a68      	ldr	r2, [pc, #416]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001328:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	4a60      	ldr	r2, [pc, #384]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001346:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135a:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001364:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	4b53      	ldr	r3, [pc, #332]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001378:	4a51      	ldr	r2, [pc, #324]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001390:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001396:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <MX_GPIO_Init+0x1dc>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	210a      	movs	r1, #10
 80013b2:	4844      	ldr	r0, [pc, #272]	; (80014c4 <MX_GPIO_Init+0x1e0>)
 80013b4:	f005 fd10 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f640 2188 	movw	r1, #2696	; 0xa88
 80013be:	4842      	ldr	r0, [pc, #264]	; (80014c8 <MX_GPIO_Init+0x1e4>)
 80013c0:	f005 fd0a 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 80013c4:	2200      	movs	r2, #0
 80013c6:	f64a 0155 	movw	r1, #43093	; 0xa855
 80013ca:	4840      	ldr	r0, [pc, #256]	; (80014cc <MX_GPIO_Init+0x1e8>)
 80013cc:	f005 fd04 	bl	8006dd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80013d6:	483e      	ldr	r0, [pc, #248]	; (80014d0 <MX_GPIO_Init+0x1ec>)
 80013d8:	f005 fcfe 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 80013e2:	483c      	ldr	r0, [pc, #240]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 80013e4:	f005 fcf8 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1;
 80013e8:	230a      	movs	r3, #10
 80013ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	4831      	ldr	r0, [pc, #196]	; (80014c4 <MX_GPIO_Init+0x1e0>)
 8001400:	f005 fb2a 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC7 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8001404:	f640 2388 	movw	r3, #2696	; 0xa88
 8001408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	482a      	ldr	r0, [pc, #168]	; (80014c8 <MX_GPIO_Init+0x1e4>)
 800141e:	f005 fb1b 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001422:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001428:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800142c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	4822      	ldr	r0, [pc, #136]	; (80014c4 <MX_GPIO_Init+0x1e0>)
 800143a:	f005 fb0d 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD13 PD15 PD0
                           PD2 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 800143e:	f64a 0355 	movw	r3, #43093	; 0xa855
 8001442:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <MX_GPIO_Init+0x1e8>)
 8001458:	f005 fafe 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 800145c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4816      	ldr	r0, [pc, #88]	; (80014d0 <MX_GPIO_Init+0x1ec>)
 8001476:	f005 faef 	bl	8006a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 800147a:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4810      	ldr	r0, [pc, #64]	; (80014d4 <MX_GPIO_Init+0x1f0>)
 8001494:	f005 fae0 	bl	8006a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	2017      	movs	r0, #23
 800149e:	f003 f882 	bl	80045a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014a2:	2017      	movs	r0, #23
 80014a4:	f003 f899 	bl	80045da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2028      	movs	r0, #40	; 0x28
 80014ae:	f003 f87a 	bl	80045a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014b2:	2028      	movs	r0, #40	; 0x28
 80014b4:	f003 f891 	bl	80045da <HAL_NVIC_EnableIRQ>

}
 80014b8:	bf00      	nop
 80014ba:	3730      	adds	r7, #48	; 0x30
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024400 	.word	0x58024400
 80014c4:	58021000 	.word	0x58021000
 80014c8:	58020800 	.word	0x58020800
 80014cc:	58020c00 	.word	0x58020c00
 80014d0:	58020000 	.word	0x58020000
 80014d4:	58020400 	.word	0x58020400

080014d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	2b80      	cmp	r3, #128	; 0x80
 80014e6:	d102      	bne.n	80014ee <HAL_GPIO_EXTI_Callback+0x16>
    	FC_Home_q2 = 0;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_GPIO_EXTI_Callback+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_9) {
 80014ee:	88fb      	ldrh	r3, [r7, #6]
 80014f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_EXTI_Callback+0x24>
    	FC_Home_q3 = 0;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_GPIO_EXTI_Callback+0x5c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_11) { //rojo
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001502:	d102      	bne.n	800150a <HAL_GPIO_EXTI_Callback+0x32>
//    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
//    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_SET);
//    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_SET);
//    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_SET);
    	Paro_emergencia = 0;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_GPIO_EXTI_Callback+0x60>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_13) { //verde
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001510:	d109      	bne.n	8001526 <HAL_GPIO_EXTI_Callback+0x4e>
//    	Paro_emergencia = Paro_emergencia + 1;
//    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
//    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
//    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
//    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
    	Paro_emergencia = 1;
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_GPIO_EXTI_Callback+0x60>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
    	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_GPIO_EXTI_Callback+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
    	HAL_TIM_Base_Start_IT(&htim6);
 8001520:	4806      	ldr	r0, [pc, #24]	; (800153c <HAL_GPIO_EXTI_Callback+0x64>)
 8001522:	f008 fd07 	bl	8009f34 <HAL_TIM_Base_Start_IT>
    }
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	24000300 	.word	0x24000300
 8001534:	24000301 	.word	0x24000301
 8001538:	24000302 	.word	0x24000302
 800153c:	24000728 	.word	0x24000728

08001540 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) { // Asegúrate de que este es el timer correcto
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a2c      	ldr	r2, [pc, #176]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d151      	bne.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0xb6>
        uint8_t current_state = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13); // Leer el pin del botón
 8001552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001556:	482b      	ldr	r0, [pc, #172]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001558:	f005 fc26 	bl	8006da8 <HAL_GPIO_ReadPin>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]

        if (current_state == stable_state) {
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	429a      	cmp	r2, r3
 800156a:	d13e      	bne.n	80015ea <HAL_TIM_PeriodElapsedCallback+0xaa>
            if (debounce_counter < DEBOUNCE_THRESHOLD) {
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b04      	cmp	r3, #4
 8001574:	d807      	bhi.n	8001586 <HAL_TIM_PeriodElapsedCallback+0x46>
                debounce_counter++;
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e034      	b.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0xb0>
            } else {
                if (button_state != current_state) {
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	429a      	cmp	r2, r3
 8001590:	d027      	beq.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
                    button_state = current_state;
 8001592:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	7013      	strb	r3, [r2, #0]
                    event_count++; // Incrementar el contador de eventos
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015a0:	6013      	str	r3, [r2, #0]

                    // Toggle de los LEDs según el contador de eventos
                    if (event_count % 3 == 0) {
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015a8:	fba3 2301 	umull	r2, r3, r3, r1
 80015ac:	085a      	lsrs	r2, r3, #1
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	1aca      	subs	r2, r1, r3
 80015b6:	2a00      	cmp	r2, #0
 80015b8:	d103      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0x82>
                        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3); // Toggle del LED1
 80015ba:	2108      	movs	r1, #8
 80015bc:	4817      	ldr	r0, [pc, #92]	; (800161c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015be:	f005 fc24 	bl	8006e0a <HAL_GPIO_TogglePin>
                    }
                    if (event_count % 5 == 0) {
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015c8:	fba3 2301 	umull	r2, r3, r3, r1
 80015cc:	089a      	lsrs	r2, r3, #2
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	1aca      	subs	r2, r1, r3
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d103      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0xa2>
                        HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3); // Toggle del LED2
 80015da:	2108      	movs	r1, #8
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015de:	f005 fc14 	bl	8006e0a <HAL_GPIO_TogglePin>
                    }
                }
                // Detener el timer si el estado es estable
                HAL_TIM_Base_Stop_IT(&htim6);
 80015e2:	4810      	ldr	r0, [pc, #64]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80015e4:	f008 fd2c 	bl	800a040 <HAL_TIM_Base_Stop_IT>
 80015e8:	e002      	b.n	80015f0 <HAL_TIM_PeriodElapsedCallback+0xb0>
            }
        } else {
            debounce_counter = 0;
 80015ea:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
        }
        stable_state = current_state;
 80015f0:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	7013      	strb	r3, [r2, #0]
    }
}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40001000 	.word	0x40001000
 8001604:	58021000 	.word	0x58021000
 8001608:	24000b9d 	.word	0x24000b9d
 800160c:	24000b9e 	.word	0x24000b9e
 8001610:	24000b9c 	.word	0x24000b9c
 8001614:	24000ba0 	.word	0x24000ba0
 8001618:	aaaaaaab 	.word	0xaaaaaaab
 800161c:	58020800 	.word	0x58020800
 8001620:	cccccccd 	.word	0xcccccccd
 8001624:	24000728 	.word	0x24000728

08001628 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_UART_RxCpltCallback+0x6c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d128      	bne.n	800168c <HAL_UART_RxCpltCallback+0x64>
    {
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_LED, GPIO_PIN_SET); // Enciende el LED
        //HAL_UART_Transmit(&huart3,&byte,1, 100); // Envía la cadena a través de UART

        // Almacenar el byte recibido en el buffer si no es '>'
        if (byte != 62) // 62 es el código ASCII para '>'
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_UART_RxCpltCallback+0x70>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b3e      	cmp	r3, #62	; 0x3e
 8001640:	d016      	beq.n	8001670 <HAL_UART_RxCpltCallback+0x48>
        {

            if (bufferIndex < BUFFER_SIZE)
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_UART_RxCpltCallback+0x74>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d80b      	bhi.n	8001662 <HAL_UART_RxCpltCallback+0x3a>
            {

                buffer[bufferIndex++] = byte;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_UART_RxCpltCallback+0x74>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	b291      	uxth	r1, r2
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_UART_RxCpltCallback+0x74>)
 8001654:	8011      	strh	r1, [r2, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_UART_RxCpltCallback+0x70>)
 800165a:	7819      	ldrb	r1, [r3, #0]
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_UART_RxCpltCallback+0x78>)
 800165e:	5499      	strb	r1, [r3, r2]
 8001660:	e00f      	b.n	8001682 <HAL_UART_RxCpltCallback+0x5a>

            }
            else
            {
                // Manejar el caso de desbordamiento del buffer
                bufferOverflowFlag = 1; // Establecer la bandera de desbordamiento
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <HAL_UART_RxCpltCallback+0x7c>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
                bufferIndex = 0; // Opcional: restablecer el índice del buffer
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_UART_RxCpltCallback+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	801a      	strh	r2, [r3, #0]
 800166e:	e008      	b.n	8001682 <HAL_UART_RxCpltCallback+0x5a>
        {
            // Aquí puedes manejar el caso cuando se recibe '>'
            // Por ejemplo, procesar el buffer y restablecer bufferIndex
        	 //HAL_UART_Transmit(&huart1, prueba_1, sizeof(prueba_1) - 1, 100);
        	 //HAL_UART_Transmit(&huart1, buffer,bufferIndex, 100);// Envía la cadena a través de UART
            processBuffer(buffer, bufferIndex);
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_UART_RxCpltCallback+0x74>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <HAL_UART_RxCpltCallback+0x78>)
 8001678:	f000 f818 	bl	80016ac <processBuffer>
            bufferIndex = 0;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_UART_RxCpltCallback+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart3, &byte, 1);
 8001682:	2201      	movs	r2, #1
 8001684:	4904      	ldr	r1, [pc, #16]	; (8001698 <HAL_UART_RxCpltCallback+0x70>)
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <HAL_UART_RxCpltCallback+0x80>)
 8001688:	f009 fe1a 	bl	800b2c0 <HAL_UART_Receive_IT>


        // Vuelve a habilitar la recepción por interrupción

    }
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40004800 	.word	0x40004800
 8001698:	24000894 	.word	0x24000894
 800169c:	24000998 	.word	0x24000998
 80016a0:	24000898 	.word	0x24000898
 80016a4:	2400099a 	.word	0x2400099a
 80016a8:	24000804 	.word	0x24000804

080016ac <processBuffer>:

void processBuffer(uint8_t *buffer, uint16_t length)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
    if (bufferOverflowFlag)
 80016b8:	4b32      	ldr	r3, [pc, #200]	; (8001784 <processBuffer+0xd8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <processBuffer+0x28>
    {
        // Manejar el desbordamiento del buffer
        // Por ejemplo, enviar un mensaje de error o realizar acciones correctivas
        HAL_UART_Transmit(&huart3, (uint8_t *)"Buffer overflow\n", 16, 100);
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	2210      	movs	r2, #16
 80016c4:	4930      	ldr	r1, [pc, #192]	; (8001788 <processBuffer+0xdc>)
 80016c6:	4831      	ldr	r0, [pc, #196]	; (800178c <processBuffer+0xe0>)
 80016c8:	f009 fd64 	bl	800b194 <HAL_UART_Transmit>
        bufferOverflowFlag = 0; // Restablecer la bandera de desbordamiento
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <processBuffer+0xd8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
        return;
 80016d2:	e053      	b.n	800177c <processBuffer+0xd0>
//    char q2[BUFFER_SIZE] = {0};
//    char q3[BUFFER_SIZE] = {0};
//    char q4[BUFFER_SIZE] = {0};

    // Punteros para la división de la cadena
    char *ptr = (char *)buffer;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	617b      	str	r3, [r7, #20]
    char *start = ptr;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
    char *end = strchr(start, 'a');
 80016dc:	2161      	movs	r1, #97	; 0x61
 80016de:	6938      	ldr	r0, [r7, #16]
 80016e0:	f00c fdec 	bl	800e2bc <strchr>
 80016e4:	60f8      	str	r0, [r7, #12]

    if (end != NULL)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d047      	beq.n	800177c <processBuffer+0xd0>
    {
        strncpy(q1, start, end - start);
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	6939      	ldr	r1, [r7, #16]
 80016f6:	4826      	ldr	r0, [pc, #152]	; (8001790 <processBuffer+0xe4>)
 80016f8:	f00c fdf5 	bl	800e2e6 <strncpy>
        start = end + 1;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	613b      	str	r3, [r7, #16]
        end = strchr(start, 'b');
 8001702:	2162      	movs	r1, #98	; 0x62
 8001704:	6938      	ldr	r0, [r7, #16]
 8001706:	f00c fdd9 	bl	800e2bc <strchr>
 800170a:	60f8      	str	r0, [r7, #12]

        if (end != NULL)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d034      	beq.n	800177c <processBuffer+0xd0>
        {
            strncpy(q2, start, end - start);
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	461a      	mov	r2, r3
 800171a:	6939      	ldr	r1, [r7, #16]
 800171c:	481d      	ldr	r0, [pc, #116]	; (8001794 <processBuffer+0xe8>)
 800171e:	f00c fde2 	bl	800e2e6 <strncpy>
            start = end + 1;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
            end = strchr(start, 'c');
 8001728:	2163      	movs	r1, #99	; 0x63
 800172a:	6938      	ldr	r0, [r7, #16]
 800172c:	f00c fdc6 	bl	800e2bc <strchr>
 8001730:	60f8      	str	r0, [r7, #12]

            if (end != NULL)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d021      	beq.n	800177c <processBuffer+0xd0>
            {
                strncpy(q3, start, end - start);
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	461a      	mov	r2, r3
 8001740:	6939      	ldr	r1, [r7, #16]
 8001742:	4815      	ldr	r0, [pc, #84]	; (8001798 <processBuffer+0xec>)
 8001744:	f00c fdcf 	bl	800e2e6 <strncpy>
                start = end + 1;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
                end = strchr(start, 'd');
 800174e:	2164      	movs	r1, #100	; 0x64
 8001750:	6938      	ldr	r0, [r7, #16]
 8001752:	f00c fdb3 	bl	800e2bc <strchr>
 8001756:	60f8      	str	r0, [r7, #12]

                if(end != NULL){
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00e      	beq.n	800177c <processBuffer+0xd0>
                	 strncpy(q4, start, end - start);
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	461a      	mov	r2, r3
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <processBuffer+0xf0>)
 800176a:	f00c fdbc 	bl	800e2e6 <strncpy>
                	 start = end + 1;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3301      	adds	r3, #1
 8001772:	613b      	str	r3, [r7, #16]
                	 strcpy(q5, start);
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	480a      	ldr	r0, [pc, #40]	; (80017a0 <processBuffer+0xf4>)
 8001778:	f00c fdad 	bl	800e2d6 <strcpy>
    //HAL_UART_Transmit(&huart3, (uint8_t *)q1, strlen(q1), 100); // 0 puntos desfazados
    //HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100); // 5 puntos desfazados
    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); // 2 puntos malos
    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100); // Enviar q4 si hay datos

}
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2400099a 	.word	0x2400099a
 8001788:	080118c8 	.word	0x080118c8
 800178c:	24000804 	.word	0x24000804
 8001790:	2400099c 	.word	0x2400099c
 8001794:	24000000 	.word	0x24000000
 8001798:	24000a9c 	.word	0x24000a9c
 800179c:	24000100 	.word	0x24000100
 80017a0:	24000200 	.word	0x24000200

080017a4 <A4988_q1>:

void A4988_q1(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2102      	movs	r1, #2
 80017ac:	480a      	ldr	r0, [pc, #40]	; (80017d8 <A4988_q1+0x34>)
 80017ae:	f005 fb13 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS0_PIN_q1, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017b8:	4808      	ldr	r0, [pc, #32]	; (80017dc <A4988_q1+0x38>)
 80017ba:	f005 fb0d 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS1_PIN_q1, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <A4988_q1+0x38>)
 80017c4:	f005 fb08 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS2_PIN_q1, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2120      	movs	r1, #32
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <A4988_q1+0x38>)
 80017ce:	f005 fb03 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	58021000 	.word	0x58021000
 80017dc:	58020400 	.word	0x58020400

080017e0 <A4988_q2>:

void A4988_q2(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2110      	movs	r1, #16
 80017e8:	480a      	ldr	r0, [pc, #40]	; (8001814 <A4988_q2+0x34>)
 80017ea:	f005 faf5 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS0_PIN_q2, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2104      	movs	r1, #4
 80017f2:	4808      	ldr	r0, [pc, #32]	; (8001814 <A4988_q2+0x34>)
 80017f4:	f005 faf0 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS1_PIN_q2, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2101      	movs	r1, #1
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <A4988_q2+0x34>)
 80017fe:	f005 faeb 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS2_PIN_q2, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <A4988_q2+0x38>)
 800180a:	f005 fae5 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	58020c00 	.word	0x58020c00
 8001818:	58020800 	.word	0x58020800

0800181c <A4988_q3>:

void A4988_q3(){
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001826:	480b      	ldr	r0, [pc, #44]	; (8001854 <A4988_q3+0x38>)
 8001828:	f005 fad6 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS0_PIN_q3, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <A4988_q3+0x3c>)
 8001834:	f005 fad0 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS1_PIN_q3, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <A4988_q3+0x3c>)
 800183e:	f005 facb 	bl	8006dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS2_PIN_q3, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <A4988_q3+0x40>)
 800184a:	f005 fac5 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	58020000 	.word	0x58020000
 8001858:	58020800 	.word	0x58020800
 800185c:	58020c00 	.word	0x58020c00

08001860 <Home>:

void Home (void){
 8001860:	b598      	push	{r3, r4, r7, lr}
 8001862:	af00      	add	r7, sp, #0
	Home_q2();
 8001864:	f000 f816 	bl	8001894 <Home_q2>
	Home_q3();
 8001868:	f000 f88a 	bl	8001980 <Home_q3>
	TIM2->CCR2 = radianes_a_valor(M_PI/2); //q5
 800186c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001870:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001890 <Home+0x30>
 8001874:	f7ff f91c 	bl	8000ab0 <radianes_a_valor>
 8001878:	4603      	mov	r3, r0
 800187a:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CCR4 = radianes_a_valor(M_PI/2); //q4
 800187c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001880:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001890 <Home+0x30>
 8001884:	f7ff f914 	bl	8000ab0 <radianes_a_valor>
 8001888:	4603      	mov	r3, r0
 800188a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800188c:	bf00      	nop
 800188e:	bd98      	pop	{r3, r4, r7, pc}
 8001890:	3fc90fdb 	.word	0x3fc90fdb

08001894 <Home_q2>:

void Home_q2(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	while(FC_Home_q2){
 800189a:	e02f      	b.n	80018fc <Home_q2+0x68>
		HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET);  //Retroceso
 800189c:	2200      	movs	r2, #0
 800189e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a2:	4833      	ldr	r0, [pc, #204]	; (8001970 <Home_q2+0xdc>)
 80018a4:	f005 fa98 	bl	8006dd8 <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	e014      	b.n	80018d8 <Home_q2+0x44>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b4:	482e      	ldr	r0, [pc, #184]	; (8001970 <Home_q2+0xdc>)
 80018b6:	f005 fa8f 	bl	8006dd8 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 ff3a 	bl	8002734 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	482a      	ldr	r0, [pc, #168]	; (8001970 <Home_q2+0xdc>)
 80018c8:	f005 fa86 	bl	8006dd8 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f000 ff31 	bl	8002734 <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3301      	adds	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a26      	ldr	r2, [pc, #152]	; (8001974 <Home_q2+0xe0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	dc04      	bgt.n	80018ea <Home_q2+0x56>
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <Home_q2+0xe4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1e1      	bne.n	80018ae <Home_q2+0x1a>
		}
		if (!FC_Home_q2) break;
 80018ea:	4b23      	ldr	r3, [pc, #140]	; (8001978 <Home_q2+0xe4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <Home_q2+0x74>
		HAL_Delay(500);
 80018f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018f8:	f000 ff1c 	bl	8002734 <HAL_Delay>
	while(FC_Home_q2){
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <Home_q2+0xe4>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ca      	bne.n	800189c <Home_q2+0x8>
 8001906:	e000      	b.n	800190a <Home_q2+0x76>
		if (!FC_Home_q2) break;
 8001908:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 800190a:	2201      	movs	r2, #1
 800190c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001910:	4817      	ldr	r0, [pc, #92]	; (8001970 <Home_q2+0xdc>)
 8001912:	f005 fa61 	bl	8006dd8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 2500; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	e019      	b.n	8001950 <Home_q2+0xbc>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001922:	4813      	ldr	r0, [pc, #76]	; (8001970 <Home_q2+0xdc>)
 8001924:	f005 fa58 	bl	8006dd8 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 8001928:	2000      	movs	r0, #0
 800192a:	f000 ff03 	bl	8002734 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001934:	480e      	ldr	r0, [pc, #56]	; (8001970 <Home_q2+0xdc>)
 8001936:	f005 fa4f 	bl	8006dd8 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800193a:	2000      	movs	r0, #0
 800193c:	f000 fefa 	bl	8002734 <HAL_Delay>
		paso_actual_q2--;
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <Home_q2+0xe8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3b01      	subs	r3, #1
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <Home_q2+0xe8>)
 8001948:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 2500; i++) {
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001956:	4293      	cmp	r3, r2
 8001958:	dde0      	ble.n	800191c <Home_q2+0x88>
	}
	HAL_Delay(500);
 800195a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195e:	f000 fee9 	bl	8002734 <HAL_Delay>
	FC_Home_q2 = 1;
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <Home_q2+0xe4>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	58020000 	.word	0x58020000
 8001974:	0001869f 	.word	0x0001869f
 8001978:	24000300 	.word	0x24000300
 800197c:	24000304 	.word	0x24000304

08001980 <Home_q3>:

void Home_q3(void){
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
	while(FC_Home_q3){
 8001986:	e02f      	b.n	80019e8 <Home_q3+0x68>
		HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800198e:	4830      	ldr	r0, [pc, #192]	; (8001a50 <Home_q3+0xd0>)
 8001990:	f005 fa22 	bl	8006dd8 <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	e014      	b.n	80019c4 <Home_q3+0x44>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 800199a:	2201      	movs	r2, #1
 800199c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a0:	482b      	ldr	r0, [pc, #172]	; (8001a50 <Home_q3+0xd0>)
 80019a2:	f005 fa19 	bl	8006dd8 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f000 fec4 	bl	8002734 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	4827      	ldr	r0, [pc, #156]	; (8001a50 <Home_q3+0xd0>)
 80019b4:	f005 fa10 	bl	8006dd8 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 febb 	bl	8002734 <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	3301      	adds	r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <Home_q3+0xd4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	dc04      	bgt.n	80019d6 <Home_q3+0x56>
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <Home_q3+0xd8>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1e1      	bne.n	800199a <Home_q3+0x1a>
		}
		if (!FC_Home_q3) break;
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <Home_q3+0xd8>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d009      	beq.n	80019f4 <Home_q3+0x74>
		HAL_Delay(500);
 80019e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019e4:	f000 fea6 	bl	8002734 <HAL_Delay>
	while(FC_Home_q3){
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <Home_q3+0xd8>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ca      	bne.n	8001988 <Home_q3+0x8>
 80019f2:	e000      	b.n	80019f6 <Home_q3+0x76>
		if (!FC_Home_q3) break;
 80019f4:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 80019f6:	2201      	movs	r2, #1
 80019f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fc:	4814      	ldr	r0, [pc, #80]	; (8001a50 <Home_q3+0xd0>)
 80019fe:	f005 f9eb 	bl	8006dd8 <HAL_GPIO_WritePin>
	for (int i = 0; i < 80; i++) {
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	e014      	b.n	8001a32 <Home_q3+0xb2>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0e:	4810      	ldr	r0, [pc, #64]	; (8001a50 <Home_q3+0xd0>)
 8001a10:	f005 f9e2 	bl	8006dd8 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f000 fe8d 	bl	8002734 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a20:	480b      	ldr	r0, [pc, #44]	; (8001a50 <Home_q3+0xd0>)
 8001a22:	f005 f9d9 	bl	8006dd8 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 fe84 	bl	8002734 <HAL_Delay>
	for (int i = 0; i < 80; i++) {
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2b4f      	cmp	r3, #79	; 0x4f
 8001a36:	dde7      	ble.n	8001a08 <Home_q3+0x88>
	}
	HAL_Delay(500);
 8001a38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a3c:	f000 fe7a 	bl	8002734 <HAL_Delay>
	FC_Home_q3 = 1;
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <Home_q3+0xd8>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	701a      	strb	r2, [r3, #0]
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	58020c00 	.word	0x58020c00
 8001a54:	0001869f 	.word	0x0001869f
 8001a58:	24000301 	.word	0x24000301
 8001a5c:	00000000 	.word	0x00000000

08001a60 <mover_motorq1_rad>:

void mover_motorq1_rad(float radianes){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	ed87 0a01 	vstr	s0, [r7, #4]

    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 8001a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a6e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a72:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001b40 <mover_motorq1_rad+0xe0>
 8001a76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a7a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001b48 <mover_motorq1_rad+0xe8>
 8001a7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a82:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001a86:	ee17 3a90 	vmov	r3, s15
 8001a8a:	617b      	str	r3, [r7, #20]
    int nuevo_paso = pasos;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	613b      	str	r3, [r7, #16]
    int diferencia_pasos = nuevo_paso - paso_actual_q1;
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <mover_motorq1_rad+0xf0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	dd1f      	ble.n	8001ae0 <mover_motorq1_rad+0x80>
        // Movimiento hacia adelante
    	HAL_GPIO_WritePin(GPIOD, DIR_q1, GPIO_PIN_RESET); //Antihorario
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	482b      	ldr	r0, [pc, #172]	; (8001b54 <mover_motorq1_rad+0xf4>)
 8001aa6:	f005 f997 	bl	8006dd8 <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	e012      	b.n	8001ad6 <mover_motorq1_rad+0x76>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	4828      	ldr	r0, [pc, #160]	; (8001b58 <mover_motorq1_rad+0xf8>)
 8001ab6:	f005 f98f 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 fe3a 	bl	8002734 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2108      	movs	r1, #8
 8001ac4:	4824      	ldr	r0, [pc, #144]	; (8001b58 <mover_motorq1_rad+0xf8>)
 8001ac6:	f005 f987 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 fe32 	bl	8002734 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbe8      	blt.n	8001ab0 <mover_motorq1_rad+0x50>
 8001ade:	e024      	b.n	8001b2a <mover_motorq1_rad+0xca>
//    if(radianes == (2*M_PI))
//    {
//    	radianes = 0;
//    }

    else if (diferencia_pasos < 0) {
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	da21      	bge.n	8001b2a <mover_motorq1_rad+0xca>
        // Movimiento hacia atrás
    	HAL_GPIO_WritePin(GPIOD, DIR_q1, GPIO_PIN_SET); //Horario
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2140      	movs	r1, #64	; 0x40
 8001aea:	481a      	ldr	r0, [pc, #104]	; (8001b54 <mover_motorq1_rad+0xf4>)
 8001aec:	f005 f974 	bl	8006dd8 <HAL_GPIO_WritePin>
    	diferencia_pasos = -diferencia_pasos;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	425b      	negs	r3, r3
 8001af4:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < diferencia_pasos ; i++) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	e012      	b.n	8001b22 <mover_motorq1_rad+0xc2>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2108      	movs	r1, #8
 8001b00:	4815      	ldr	r0, [pc, #84]	; (8001b58 <mover_motorq1_rad+0xf8>)
 8001b02:	f005 f969 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f000 fe14 	bl	8002734 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2108      	movs	r1, #8
 8001b10:	4811      	ldr	r0, [pc, #68]	; (8001b58 <mover_motorq1_rad+0xf8>)
 8001b12:	f005 f961 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 fe0c 	bl	8002734 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos ; i++) {
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dbe8      	blt.n	8001afc <mover_motorq1_rad+0x9c>
    	}
    }

    paso_actual_q1 = nuevo_paso;
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <mover_motorq1_rad+0xf0>)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 8001b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b34:	f000 fdfe 	bl	8002734 <HAL_Delay>
}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	54442d18 	.word	0x54442d18
 8001b44:	401921fb 	.word	0x401921fb
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40790000 	.word	0x40790000
 8001b50:	24000ba4 	.word	0x24000ba4
 8001b54:	58020c00 	.word	0x58020c00
 8001b58:	58020400 	.word	0x58020400

08001b5c <mover_motorq2_mm>:

void mover_motorq2_mm(float milimetros){
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	ed87 0a01 	vstr	s0, [r7, #4]

	//milimetros = milimetros - 500;

    if (milimetros < 0) {
 8001b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	d503      	bpl.n	8001b7c <mover_motorq2_mm+0x20>
        milimetros = 0;
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	e00a      	b.n	8001b92 <mover_motorq2_mm+0x36>
    }
    else if (milimetros > 210) {
 8001b7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b80:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001c24 <mover_motorq2_mm+0xc8>
 8001b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	dd01      	ble.n	8001b92 <mover_motorq2_mm+0x36>
        milimetros = 210;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <mover_motorq2_mm+0xcc>)
 8001b90:	607b      	str	r3, [r7, #4]
    }

    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001b92:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b96:	f7fe ffd1 	bl	8000b3c <milimetros_a_pasos>
 8001b9a:	60f8      	str	r0, [r7, #12]
    int diferencia_pasos = pasos - paso_actual_q2;
 8001b9c:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <mover_motorq2_mm+0xd0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	617b      	str	r3, [r7, #20]

    if (diferencia_pasos != 0) {
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d031      	beq.n	8001c12 <mover_motorq2_mm+0xb6>
        if (diferencia_pasos > 0) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dd06      	ble.n	8001bc2 <mover_motorq2_mm+0x66>
        	 HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET); //Retroceso
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bba:	481d      	ldr	r0, [pc, #116]	; (8001c30 <mover_motorq2_mm+0xd4>)
 8001bbc:	f005 f90c 	bl	8006dd8 <HAL_GPIO_WritePin>
 8001bc0:	e008      	b.n	8001bd4 <mover_motorq2_mm+0x78>
        }
        else {
        	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc8:	4819      	ldr	r0, [pc, #100]	; (8001c30 <mover_motorq2_mm+0xd4>)
 8001bca:	f005 f905 	bl	8006dd8 <HAL_GPIO_WritePin>
            diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	425b      	negs	r3, r3
 8001bd2:	617b      	str	r3, [r7, #20]
        }

        for (int i = 0; i < diferencia_pasos; i++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e014      	b.n	8001c04 <mover_motorq2_mm+0xa8>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001be0:	4813      	ldr	r0, [pc, #76]	; (8001c30 <mover_motorq2_mm+0xd4>)
 8001be2:	f005 f8f9 	bl	8006dd8 <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f000 fda4 	bl	8002734 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf2:	480f      	ldr	r0, [pc, #60]	; (8001c30 <mover_motorq2_mm+0xd4>)
 8001bf4:	f005 f8f0 	bl	8006dd8 <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 fd9b 	bl	8002734 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	3301      	adds	r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbe6      	blt.n	8001bda <mover_motorq2_mm+0x7e>
        }

        paso_actual_q2 = pasos;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a07      	ldr	r2, [pc, #28]	; (8001c2c <mover_motorq2_mm+0xd0>)
 8001c10:	6013      	str	r3, [r2, #0]
    }

    HAL_Delay(500);
 8001c12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c16:	f000 fd8d 	bl	8002734 <HAL_Delay>
}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	43520000 	.word	0x43520000
 8001c28:	43520000 	.word	0x43520000
 8001c2c:	24000304 	.word	0x24000304
 8001c30:	58020000 	.word	0x58020000

08001c34 <mover_motorq3_mm>:

void mover_motorq3_mm(float milimetros){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	ed87 0a01 	vstr	s0, [r7, #4]

	if (milimetros < 0) {
 8001c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d503      	bpl.n	8001c54 <mover_motorq3_mm+0x20>
		milimetros = 0;
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	e00a      	b.n	8001c6a <mover_motorq3_mm+0x36>
	}
	else if (milimetros > 215) {
 8001c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c58:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001d34 <mover_motorq3_mm+0x100>
 8001c5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c64:	dd01      	ble.n	8001c6a <mover_motorq3_mm+0x36>
		milimetros = 215 ;
 8001c66:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <mover_motorq3_mm+0x104>)
 8001c68:	607b      	str	r3, [r7, #4]
	}

    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001c6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c6e:	f7fe ff65 	bl	8000b3c <milimetros_a_pasos>
 8001c72:	6178      	str	r0, [r7, #20]
    int nuevo_paso = pasos;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
    int diferencia_pasos = nuevo_paso - paso_actual_q3;
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <mover_motorq3_mm+0x108>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	dd22      	ble.n	8001cce <mover_motorq3_mm+0x9a>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c8e:	482c      	ldr	r0, [pc, #176]	; (8001d40 <mover_motorq3_mm+0x10c>)
 8001c90:	f005 f8a2 	bl	8006dd8 <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	e014      	b.n	8001cc4 <mover_motorq3_mm+0x90>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca0:	4827      	ldr	r0, [pc, #156]	; (8001d40 <mover_motorq3_mm+0x10c>)
 8001ca2:	f005 f899 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 fd44 	bl	8002734 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	4823      	ldr	r0, [pc, #140]	; (8001d40 <mover_motorq3_mm+0x10c>)
 8001cb4:	f005 f890 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f000 fd3b 	bl	8002734 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbe6      	blt.n	8001c9a <mover_motorq3_mm+0x66>
 8001ccc:	e027      	b.n	8001d1e <mover_motorq3_mm+0xea>
    	}
    }

    else if (diferencia_pasos < 0) {
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	da24      	bge.n	8001d1e <mover_motorq3_mm+0xea>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cda:	4819      	ldr	r0, [pc, #100]	; (8001d40 <mover_motorq3_mm+0x10c>)
 8001cdc:	f005 f87c 	bl	8006dd8 <HAL_GPIO_WritePin>
    	diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	e014      	b.n	8001d16 <mover_motorq3_mm+0xe2>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf2:	4813      	ldr	r0, [pc, #76]	; (8001d40 <mover_motorq3_mm+0x10c>)
 8001cf4:	f005 f870 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 fd1b 	bl	8002734 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d04:	480e      	ldr	r0, [pc, #56]	; (8001d40 <mover_motorq3_mm+0x10c>)
 8001d06:	f005 f867 	bl	8006dd8 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f000 fd12 	bl	8002734 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dbe6      	blt.n	8001cec <mover_motorq3_mm+0xb8>
    	}
    }

    paso_actual_q3 = nuevo_paso;
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <mover_motorq3_mm+0x108>)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f000 fd04 	bl	8002734 <HAL_Delay>
}
 8001d2c:	bf00      	nop
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	43570000 	.word	0x43570000
 8001d38:	43570000 	.word	0x43570000
 8001d3c:	24000ba8 	.word	0x24000ba8
 8001d40:	58020c00 	.word	0x58020c00

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d5c:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2005      	movs	r0, #5
 8001d7a:	f002 fc14 	bl	80045a6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d7e:	2005      	movs	r0, #5
 8001d80:	f002 fc2b 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2005      	movs	r0, #5
 8001d8a:	f002 fc0c 	bl	80045a6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d8e:	2005      	movs	r0, #5
 8001d90:	f002 fc23 	bl	80045da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	58024400 	.word	0x58024400

08001da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_ADC_MspInit+0x1e4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d16b      	bne.n	8001e9a <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dc2:	4b71      	ldr	r3, [pc, #452]	; (8001f88 <HAL_ADC_MspInit+0x1e8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a6f      	ldr	r2, [pc, #444]	; (8001f88 <HAL_ADC_MspInit+0x1e8>)
 8001dca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dcc:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <HAL_ADC_MspInit+0x1e8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10e      	bne.n	8001df2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001dd4:	4b6d      	ldr	r3, [pc, #436]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dda:	4a6c      	ldr	r2, [pc, #432]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001de4:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	4a64      	ldr	r2, [pc, #400]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e02:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e14:	2303      	movs	r3, #3
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	4619      	mov	r1, r3
 8001e22:	485b      	ldr	r0, [pc, #364]	; (8001f90 <HAL_ADC_MspInit+0x1f0>)
 8001e24:	f004 fe18 	bl	8006a58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e2a:	4a5b      	ldr	r2, [pc, #364]	; (8001f98 <HAL_ADC_MspInit+0x1f8>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001e2e:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e30:	2209      	movs	r2, #9
 8001e32:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e34:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3a:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e40:	4b54      	ldr	r3, [pc, #336]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e48:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e50:	4b50      	ldr	r3, [pc, #320]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e58:	4b4e      	ldr	r3, [pc, #312]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e66:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e6c:	4849      	ldr	r0, [pc, #292]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e6e:	f002 fbcf 	bl	8004610 <HAL_DMA_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8001e78:	f7ff ff64 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a45      	ldr	r2, [pc, #276]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e80:	659a      	str	r2, [r3, #88]	; 0x58
 8001e82:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <HAL_ADC_MspInit+0x1f4>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	2012      	movs	r0, #18
 8001e8e:	f002 fb8a 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e92:	2012      	movs	r0, #18
 8001e94:	f002 fba1 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e98:	e06f      	b.n	8001f7a <HAL_ADC_MspInit+0x1da>
  else if(hadc->Instance==ADC2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a3f      	ldr	r2, [pc, #252]	; (8001f9c <HAL_ADC_MspInit+0x1fc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d16a      	bne.n	8001f7a <HAL_ADC_MspInit+0x1da>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_ADC_MspInit+0x1e8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <HAL_ADC_MspInit+0x1e8>)
 8001eac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001eae:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_ADC_MspInit+0x1e8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001eb6:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001eb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ebc:	4a33      	ldr	r2, [pc, #204]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ec6:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001ec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eda:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee4:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <HAL_ADC_MspInit+0x1ec>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4826      	ldr	r0, [pc, #152]	; (8001fa0 <HAL_ADC_MspInit+0x200>)
 8001f06:	f004 fda7 	bl	8006a58 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream0;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f0c:	4a26      	ldr	r2, [pc, #152]	; (8001fa8 <HAL_ADC_MspInit+0x208>)
 8001f0e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f12:	220a      	movs	r2, #10
 8001f14:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f28:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f30:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001f42:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001f4e:	4815      	ldr	r0, [pc, #84]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f50:	f002 fb5e 	bl	8004610 <HAL_DMA_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_ADC_MspInit+0x1be>
      Error_Handler();
 8001f5a:	f7ff fef3 	bl	8001d44 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f62:	659a      	str	r2, [r3, #88]	; 0x58
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_ADC_MspInit+0x204>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2012      	movs	r0, #18
 8001f70:	f002 fb19 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f74:	2012      	movs	r0, #18
 8001f76:	f002 fb30 	bl	80045da <HAL_NVIC_EnableIRQ>
}
 8001f7a:	bf00      	nop
 8001f7c:	3730      	adds	r7, #48	; 0x30
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000
 8001f88:	24000bc0 	.word	0x24000bc0
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	58020000 	.word	0x58020000
 8001f94:	240005ec 	.word	0x240005ec
 8001f98:	40020028 	.word	0x40020028
 8001f9c:	40022100 	.word	0x40022100
 8001fa0:	58020800 	.word	0x58020800
 8001fa4:	24000664 	.word	0x24000664
 8001fa8:	40020010 	.word	0x40020010

08001fac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc4:	4a08      	ldr	r2, [pc, #32]	; (8001fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58024400 	.word	0x58024400

08001fec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_TIM_Base_MspInit+0x48>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d116      	bne.n	800202c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002006:	f043 0310 	orr.w	r3, r3, #16
 800200a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_TIM_Base_MspInit+0x4c>)
 8002010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2036      	movs	r0, #54	; 0x36
 8002022:	f002 fac0 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002026:	2036      	movs	r0, #54	; 0x36
 8002028:	f002 fad7 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40001000 	.word	0x40001000
 8002038:	58024400 	.word	0x58024400

0800203c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d11e      	bne.n	800209c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_TIM_MspPostInit+0x68>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	4a0f      	ldr	r2, [pc, #60]	; (80020a4 <HAL_TIM_MspPostInit+0x68>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <HAL_TIM_MspPostInit+0x68>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800207c:	230a      	movs	r3, #10
 800207e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4619      	mov	r1, r3
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <HAL_TIM_MspPostInit+0x6c>)
 8002098:	f004 fcde 	bl	8006a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800209c:	bf00      	nop
 800209e:	3720      	adds	r7, #32
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58020000 	.word	0x58020000

080020ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b0b8      	sub	sp, #224	; 0xe0
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	22b4      	movs	r2, #180	; 0xb4
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00b fcab 	bl	800da28 <memset>
  if(huart->Instance==USART1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_UART_MspInit+0x170>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d14b      	bne.n	8002174 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020dc:	2301      	movs	r3, #1
 80020de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e6:	f107 0318 	add.w	r3, r7, #24
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 fe36 	bl	8007d5c <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020f6:	f7ff fe25 	bl	8001d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fa:	4b49      	ldr	r3, [pc, #292]	; (8002220 <HAL_UART_MspInit+0x174>)
 80020fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002100:	4a47      	ldr	r2, [pc, #284]	; (8002220 <HAL_UART_MspInit+0x174>)
 8002102:	f043 0310 	orr.w	r3, r3, #16
 8002106:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800210a:	4b45      	ldr	r3, [pc, #276]	; (8002220 <HAL_UART_MspInit+0x174>)
 800210c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	617b      	str	r3, [r7, #20]
 8002116:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_UART_MspInit+0x174>)
 800211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211e:	4a40      	ldr	r2, [pc, #256]	; (8002220 <HAL_UART_MspInit+0x174>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002128:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_UART_MspInit+0x174>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002136:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800213a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002150:	2304      	movs	r3, #4
 8002152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800215a:	4619      	mov	r1, r3
 800215c:	4831      	ldr	r0, [pc, #196]	; (8002224 <HAL_UART_MspInit+0x178>)
 800215e:	f004 fc7b 	bl	8006a58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2025      	movs	r0, #37	; 0x25
 8002168:	f002 fa1d 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800216c:	2025      	movs	r0, #37	; 0x25
 800216e:	f002 fa34 	bl	80045da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002172:	e04f      	b.n	8002214 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <HAL_UART_MspInit+0x17c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d14a      	bne.n	8002214 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800217e:	2302      	movs	r3, #2
 8002180:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	4618      	mov	r0, r3
 800218e:	f005 fde5 	bl	8007d5c <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002198:	f7ff fdd4 	bl	8001d44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_UART_MspInit+0x174>)
 800219e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_UART_MspInit+0x174>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ac:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_UART_MspInit+0x174>)
 80021ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_UART_MspInit+0x174>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_UART_MspInit+0x174>)
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_UART_MspInit+0x174>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021f2:	2307      	movs	r3, #7
 80021f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021fc:	4619      	mov	r1, r3
 80021fe:	4809      	ldr	r0, [pc, #36]	; (8002224 <HAL_UART_MspInit+0x178>)
 8002200:	f004 fc2a 	bl	8006a58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	2027      	movs	r0, #39	; 0x27
 800220a:	f002 f9cc 	bl	80045a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800220e:	2027      	movs	r0, #39	; 0x27
 8002210:	f002 f9e3 	bl	80045da <HAL_NVIC_EnableIRQ>
}
 8002214:	bf00      	nop
 8002216:	37e0      	adds	r7, #224	; 0xe0
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40011000 	.word	0x40011000
 8002220:	58024400 	.word	0x58024400
 8002224:	58020400 	.word	0x58020400
 8002228:	40004800 	.word	0x40004800

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <NMI_Handler+0x4>

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002278:	f000 fa3c 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002296:	f003 fa79 	bl	800578c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	24000664 	.word	0x24000664

080022a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <DMA1_Stream1_IRQHandler+0x10>)
 80022aa:	f003 fa6f 	bl	800578c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	240005ec 	.word	0x240005ec

080022b8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <ADC_IRQHandler+0x14>)
 80022be:	f000 feed 	bl	800309c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <ADC_IRQHandler+0x18>)
 80022c4:	f000 feea 	bl	800309c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	2400050c 	.word	0x2400050c
 80022d0:	2400057c 	.word	0x2400057c

080022d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80022d8:	2080      	movs	r0, #128	; 0x80
 80022da:	f004 fdb0 	bl	8006e3e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80022de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80022e2:	f004 fdac 	bl	8006e3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <USART1_IRQHandler+0x10>)
 80022f2:	f009 f83b 	bl	800b36c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24000774 	.word	0x24000774

08002300 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <USART3_IRQHandler+0x10>)
 8002306:	f009 f831 	bl	800b36c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	24000804 	.word	0x24000804

08002314 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002318:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800231c:	f004 fd8f 	bl	8006e3e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002324:	f004 fd8b 	bl	8006e3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM6_DAC_IRQHandler+0x10>)
 8002332:	f008 f827 	bl	800a384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	24000728 	.word	0x24000728

08002340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
	return 1;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_kill>:

int _kill(int pid, int sig)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800235a:	f00b fb3b 	bl	800d9d4 <__errno>
 800235e:	4603      	mov	r3, r0
 8002360:	2216      	movs	r2, #22
 8002362:	601a      	str	r2, [r3, #0]
	return -1;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_exit>:

void _exit (int status)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff ffe7 	bl	8002350 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002382:	e7fe      	b.n	8002382 <_exit+0x12>

08002384 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	e00a      	b.n	80023ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002396:	f3af 8000 	nop.w
 800239a:	4601      	mov	r1, r0
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	60ba      	str	r2, [r7, #8]
 80023a2:	b2ca      	uxtb	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf0      	blt.n	8002396 <_read+0x12>
	}

return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e009      	b.n	80023e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf1      	blt.n	80023d0 <_write+0x12>
	}
	return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_close>:

int _close(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241e:	605a      	str	r2, [r3, #4]
	return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_isatty>:

int _isatty(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	return 1;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <_sbrk+0x5c>)
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <_sbrk+0x60>)
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <_sbrk+0x64>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <_sbrk+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d207      	bcs.n	80024a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002490:	f00b faa0 	bl	800d9d4 <__errno>
 8002494:	4603      	mov	r3, r0
 8002496:	220c      	movs	r2, #12
 8002498:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e009      	b.n	80024b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <_sbrk+0x64>)
 80024b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	24050000 	.word	0x24050000
 80024c0:	00000400 	.word	0x00000400
 80024c4:	24000bc4 	.word	0x24000bc4
 80024c8:	24000be0 	.word	0x24000be0

080024cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <SystemInit+0xd0>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	4a31      	ldr	r2, [pc, #196]	; (800259c <SystemInit+0xd0>)
 80024d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <SystemInit+0xd4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	2b06      	cmp	r3, #6
 80024ea:	d807      	bhi.n	80024fc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024ec:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <SystemInit+0xd4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 030f 	bic.w	r3, r3, #15
 80024f4:	4a2a      	ldr	r2, [pc, #168]	; (80025a0 <SystemInit+0xd4>)
 80024f6:	f043 0307 	orr.w	r3, r3, #7
 80024fa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024fc:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <SystemInit+0xd8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a28      	ldr	r2, [pc, #160]	; (80025a4 <SystemInit+0xd8>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <SystemInit+0xd8>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800250e:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <SystemInit+0xd8>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4924      	ldr	r1, [pc, #144]	; (80025a4 <SystemInit+0xd8>)
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <SystemInit+0xdc>)
 8002516:	4013      	ands	r3, r2
 8002518:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800251a:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <SystemInit+0xd4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <SystemInit+0xd4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 030f 	bic.w	r3, r3, #15
 800252e:	4a1c      	ldr	r2, [pc, #112]	; (80025a0 <SystemInit+0xd4>)
 8002530:	f043 0307 	orr.w	r3, r3, #7
 8002534:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <SystemInit+0xd8>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <SystemInit+0xd8>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <SystemInit+0xd8>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <SystemInit+0xd8>)
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <SystemInit+0xe0>)
 800254c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <SystemInit+0xd8>)
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <SystemInit+0xe4>)
 8002552:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <SystemInit+0xd8>)
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <SystemInit+0xe8>)
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <SystemInit+0xd8>)
 800255c:	2200      	movs	r2, #0
 800255e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <SystemInit+0xd8>)
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <SystemInit+0xe8>)
 8002564:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <SystemInit+0xd8>)
 8002568:	2200      	movs	r2, #0
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <SystemInit+0xd8>)
 800256e:	4a11      	ldr	r2, [pc, #68]	; (80025b4 <SystemInit+0xe8>)
 8002570:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <SystemInit+0xd8>)
 8002574:	2200      	movs	r2, #0
 8002576:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <SystemInit+0xd8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <SystemInit+0xd8>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <SystemInit+0xd8>)
 8002586:	2200      	movs	r2, #0
 8002588:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <SystemInit+0xec>)
 800258c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002590:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00
 80025a0:	52002000 	.word	0x52002000
 80025a4:	58024400 	.word	0x58024400
 80025a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80025ac:	02020200 	.word	0x02020200
 80025b0:	01ff0000 	.word	0x01ff0000
 80025b4:	01010280 	.word	0x01010280
 80025b8:	52004000 	.word	0x52004000

080025bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025c0:	f7ff ff84 	bl	80024cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025c4:	480c      	ldr	r0, [pc, #48]	; (80025f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025c6:	490d      	ldr	r1, [pc, #52]	; (80025fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025c8:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025cc:	e002      	b.n	80025d4 <LoopCopyDataInit>

080025ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d2:	3304      	adds	r3, #4

080025d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025d8:	d3f9      	bcc.n	80025ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025da:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025dc:	4c0a      	ldr	r4, [pc, #40]	; (8002608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e0:	e001      	b.n	80025e6 <LoopFillZerobss>

080025e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e4:	3204      	adds	r2, #4

080025e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025e8:	d3fb      	bcc.n	80025e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ea:	f00b f9f9 	bl	800d9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ee:	f7fe fac5 	bl	8000b7c <main>
  bx  lr
 80025f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80025f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025fc:	240004f0 	.word	0x240004f0
  ldr r2, =_sidata
 8002600:	08011dcc 	.word	0x08011dcc
  ldr r2, =_sbss
 8002604:	240004f0 	.word	0x240004f0
  ldr r4, =_ebss
 8002608:	24000bdc 	.word	0x24000bdc

0800260c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800260c:	e7fe      	b.n	800260c <ADC3_IRQHandler>
	...

08002610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002616:	2003      	movs	r0, #3
 8002618:	f001 ffba 	bl	8004590 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800261c:	f005 f9c8 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_Init+0x68>)
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	4913      	ldr	r1, [pc, #76]	; (800267c <HAL_Init+0x6c>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	f003 031f 	and.w	r3, r3, #31
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_Init+0x68>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	4a0e      	ldr	r2, [pc, #56]	; (800267c <HAL_Init+0x6c>)
 8002644:	5cd3      	ldrb	r3, [r2, r3]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	4a0b      	ldr	r2, [pc, #44]	; (8002680 <HAL_Init+0x70>)
 8002652:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002654:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <HAL_Init+0x74>)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800265a:	200f      	movs	r0, #15
 800265c:	f000 f814 	bl	8002688 <HAL_InitTick>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e002      	b.n	8002670 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800266a:	f7ff fb71 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	58024400 	.word	0x58024400
 800267c:	080118dc 	.word	0x080118dc
 8002680:	24000310 	.word	0x24000310
 8002684:	2400030c 	.word	0x2400030c

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <HAL_InitTick+0x60>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e021      	b.n	80026e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_InitTick+0x64>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_InitTick+0x60>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 ff9f 	bl	80045f6 <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00e      	b.n	80026e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d80a      	bhi.n	80026de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f001 ff69 	bl	80045a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <HAL_InitTick+0x68>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	24000318 	.word	0x24000318
 80026ec:	2400030c 	.word	0x2400030c
 80026f0:	24000314 	.word	0x24000314

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	24000318 	.word	0x24000318
 8002718:	24000bc8 	.word	0x24000bc8

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	24000bc8 	.word	0x24000bc8

08002734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff ffee 	bl	800271c <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d005      	beq.n	800275a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_Delay+0x44>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800275a:	bf00      	nop
 800275c:	f7ff ffde 	bl	800271c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d8f7      	bhi.n	800275c <HAL_Delay+0x28>
  {
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	24000318 	.word	0x24000318

0800277c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	609a      	str	r2, [r3, #8]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a10      	ldr	r2, [pc, #64]	; (8002844 <LL_ADC_SetOffset+0x60>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10b      	bne.n	8002820 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	4313      	orrs	r3, r2
 8002816:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800281e:	e00b      	b.n	8002838 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	601a      	str	r2, [r3, #0]
}
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	58026000 	.word	0x58026000

08002848 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3360      	adds	r3, #96	; 0x60
 8002856:	461a      	mov	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	611a      	str	r2, [r3, #16]
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00e      	beq.n	80028da <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3360      	adds	r3, #96	; 0x60
 80028c0:	461a      	mov	r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	431a      	orrs	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	601a      	str	r2, [r3, #0]
  }
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	58026000 	.word	0x58026000

080028ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a0c      	ldr	r2, [pc, #48]	; (800292c <LL_ADC_SetOffsetSaturation+0x40>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d10e      	bne.n	800291e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3360      	adds	r3, #96	; 0x60
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	58026000 	.word	0x58026000

08002930 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <LL_ADC_SetOffsetSign+0x40>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d10e      	bne.n	8002962 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3360      	adds	r3, #96	; 0x60
 8002948:	461a      	mov	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	58026000 	.word	0x58026000

08002974 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3360      	adds	r3, #96	; 0x60
 8002984:	461a      	mov	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a0c      	ldr	r2, [pc, #48]	; (80029c4 <LL_ADC_SetOffsetState+0x50>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d108      	bne.n	80029a8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80029a6:	e007      	b.n	80029b8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	601a      	str	r2, [r3, #0]
}
 80029b8:	bf00      	nop
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	58026000 	.word	0x58026000

080029c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b087      	sub	sp, #28
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	3330      	adds	r3, #48	; 0x30
 80029fe:	461a      	mov	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	4413      	add	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	211f      	movs	r1, #31
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	401a      	ands	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	f003 011f 	and.w	r1, r3, #31
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	431a      	orrs	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a52:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	0e5b      	lsrs	r3, r3, #25
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	4413      	add	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	0d1b      	lsrs	r3, r3, #20
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	2107      	movs	r1, #7
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	401a      	ands	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	0d1b      	lsrs	r3, r3, #20
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ab6:	bf00      	nop
 8002ab8:	371c      	adds	r7, #28
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a1a      	ldr	r2, [pc, #104]	; (8002b3c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d115      	bne.n	8002b04 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0318 	and.w	r3, r3, #24
 8002aee:	4914      	ldr	r1, [pc, #80]	; (8002b40 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002af0:	40d9      	lsrs	r1, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	400b      	ands	r3, r1
 8002af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002afa:	431a      	orrs	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002b02:	e014      	b.n	8002b2e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b10:	43db      	mvns	r3, r3
 8002b12:	401a      	ands	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f003 0318 	and.w	r3, r3, #24
 8002b1a:	4909      	ldr	r1, [pc, #36]	; (8002b40 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002b1c:	40d9      	lsrs	r1, r3
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	400b      	ands	r3, r1
 8002b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b26:	431a      	orrs	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	58026000 	.word	0x58026000
 8002b40:	000fffff 	.word	0x000fffff

08002b44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 031f 	and.w	r3, r3, #31
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6093      	str	r3, [r2, #8]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	5fffffc0 	.word	0x5fffffc0

08002ba0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb4:	d101      	bne.n	8002bba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <LL_ADC_EnableInternalRegulator+0x24>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	6fffffc0 	.word	0x6fffffc0

08002bf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_IsEnabled+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_IsEnabled+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1ee      	b.n	8003084 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff f873 	bl	8001da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff67 	bl	8002ba0 <LL_ADC_IsDeepPowerDownEnabled>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff4d 	bl	8002b7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff82 	bl	8002bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d114      	bne.n	8002d1c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff66 	bl	8002bc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cfc:	4b8e      	ldr	r3, [pc, #568]	; (8002f38 <HAL_ADC_Init+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	4a8e      	ldr	r2, [pc, #568]	; (8002f3c <HAL_ADC_Init+0x2b0>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d0e:	e002      	b.n	8002d16 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f9      	bne.n	8002d10 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff65 	bl	8002bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10d      	bne.n	8002d48 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	f043 0210 	orr.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff76 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 8002d52:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8188 	bne.w	8003072 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 8184 	bne.w	8003072 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d72:	f043 0202 	orr.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff4a 	bl	8002c18 <LL_ADC_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d136      	bne.n	8002df8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6c      	ldr	r2, [pc, #432]	; (8002f40 <HAL_ADC_Init+0x2b4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_ADC_Init+0x112>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6a      	ldr	r2, [pc, #424]	; (8002f44 <HAL_ADC_Init+0x2b8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d10e      	bne.n	8002dbc <HAL_ADC_Init+0x130>
 8002d9e:	4868      	ldr	r0, [pc, #416]	; (8002f40 <HAL_ADC_Init+0x2b4>)
 8002da0:	f7ff ff3a 	bl	8002c18 <LL_ADC_IsEnabled>
 8002da4:	4604      	mov	r4, r0
 8002da6:	4867      	ldr	r0, [pc, #412]	; (8002f44 <HAL_ADC_Init+0x2b8>)
 8002da8:	f7ff ff36 	bl	8002c18 <LL_ADC_IsEnabled>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4323      	orrs	r3, r4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	e008      	b.n	8002dce <HAL_ADC_Init+0x142>
 8002dbc:	4862      	ldr	r0, [pc, #392]	; (8002f48 <HAL_ADC_Init+0x2bc>)
 8002dbe:	f7ff ff2b 	bl	8002c18 <LL_ADC_IsEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf0c      	ite	eq
 8002dc8:	2301      	moveq	r3, #1
 8002dca:	2300      	movne	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5a      	ldr	r2, [pc, #360]	; (8002f40 <HAL_ADC_Init+0x2b4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <HAL_ADC_Init+0x15a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_ADC_Init+0x2b8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Init+0x15e>
 8002de6:	4a59      	ldr	r2, [pc, #356]	; (8002f4c <HAL_ADC_Init+0x2c0>)
 8002de8:	e000      	b.n	8002dec <HAL_ADC_Init+0x160>
 8002dea:	4a59      	ldr	r2, [pc, #356]	; (8002f50 <HAL_ADC_Init+0x2c4>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4619      	mov	r1, r3
 8002df2:	4610      	mov	r0, r2
 8002df4:	f7ff fcc2 	bl	800277c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	; (8002f48 <HAL_ADC_Init+0x2bc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d129      	bne.n	8002e56 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7e5b      	ldrb	r3, [r3, #25]
 8002e06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e0c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002e12:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d013      	beq.n	8002e44 <HAL_ADC_Init+0x1b8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d00d      	beq.n	8002e40 <HAL_ADC_Init+0x1b4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2b1c      	cmp	r3, #28
 8002e2a:	d007      	beq.n	8002e3c <HAL_ADC_Init+0x1b0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b18      	cmp	r3, #24
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_Init+0x1ac>
 8002e34:	2318      	movs	r3, #24
 8002e36:	e006      	b.n	8002e46 <HAL_ADC_Init+0x1ba>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e004      	b.n	8002e46 <HAL_ADC_Init+0x1ba>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	e002      	b.n	8002e46 <HAL_ADC_Init+0x1ba>
 8002e40:	2308      	movs	r3, #8
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_Init+0x1ba>
 8002e44:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002e46:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e4e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
 8002e54:	e00e      	b.n	8002e74 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7e5b      	ldrb	r3, [r3, #25]
 8002e5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e60:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e66:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d106      	bne.n	8002e8c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	3b01      	subs	r3, #1
 8002e84:	045b      	lsls	r3, r3, #17
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <HAL_ADC_Init+0x2bc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d115      	bne.n	8002ede <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_ADC_Init+0x2c8>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	69b9      	ldr	r1, [r7, #24]
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	611a      	str	r2, [r3, #16]
 8002edc:	e009      	b.n	8002ef2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_ADC_Init+0x2cc>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	69b9      	ldr	r1, [r7, #24]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fea1 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 8002efc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff feae 	bl	8002c64 <LL_ADC_INJ_IsConversionOngoing>
 8002f08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f040 808e 	bne.w	800302e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f040 808a 	bne.w	800302e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <HAL_ADC_Init+0x2bc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d11b      	bne.n	8002f5c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7e1b      	ldrb	r3, [r3, #24]
 8002f28:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f30:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
 8002f36:	e018      	b.n	8002f6a <HAL_ADC_Init+0x2de>
 8002f38:	2400030c 	.word	0x2400030c
 8002f3c:	053e2d63 	.word	0x053e2d63
 8002f40:	40022000 	.word	0x40022000
 8002f44:	40022100 	.word	0x40022100
 8002f48:	58026000 	.word	0x58026000
 8002f4c:	40022300 	.word	0x40022300
 8002f50:	58026300 	.word	0x58026300
 8002f54:	fff04007 	.word	0xfff04007
 8002f58:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e1b      	ldrb	r3, [r3, #24]
 8002f60:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	4b46      	ldr	r3, [pc, #280]	; (800308c <HAL_ADC_Init+0x400>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	69b9      	ldr	r1, [r7, #24]
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d137      	bne.n	8002ff8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <HAL_ADC_Init+0x404>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d116      	bne.n	8002fc6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	4b3d      	ldr	r3, [pc, #244]	; (8003094 <HAL_ADC_Init+0x408>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002faa:	4311      	orrs	r1, r2
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fb0:	4311      	orrs	r1, r2
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	611a      	str	r2, [r3, #16]
 8002fc4:	e020      	b.n	8003008 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_ADC_Init+0x40c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fd4:	3a01      	subs	r2, #1
 8002fd6:	0411      	lsls	r1, r2, #16
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fdc:	4311      	orrs	r1, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	611a      	str	r2, [r3, #16]
 8002ff6:	e007      	b.n	8003008 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <HAL_ADC_Init+0x404>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d002      	beq.n	800302e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 ffbb 	bl	8003fa4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10c      	bne.n	8003050 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f023 010f 	bic.w	r1, r3, #15
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
 800304e:	e007      	b.n	8003060 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 020f 	bic.w	r2, r2, #15
 800305e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	f023 0303 	bic.w	r3, r3, #3
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	661a      	str	r2, [r3, #96]	; 0x60
 8003070:	e007      	b.n	8003082 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003082:	7ffb      	ldrb	r3, [r7, #31]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3724      	adds	r7, #36	; 0x24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}
 800308c:	ffffbffc 	.word	0xffffbffc
 8003090:	58026000 	.word	0x58026000
 8003094:	fc00f81f 	.word	0xfc00f81f
 8003098:	fc00f81e 	.word	0xfc00f81e

0800309c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80030a4:	2300      	movs	r3, #0
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a87      	ldr	r2, [pc, #540]	; (80032dc <HAL_ADC_IRQHandler+0x240>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_ADC_IRQHandler+0x30>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a86      	ldr	r2, [pc, #536]	; (80032e0 <HAL_ADC_IRQHandler+0x244>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_IRQHandler+0x34>
 80030cc:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_ADC_IRQHandler+0x248>)
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_IRQHandler+0x36>
 80030d0:	4b85      	ldr	r3, [pc, #532]	; (80032e8 <HAL_ADC_IRQHandler+0x24c>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fd36 	bl	8002b44 <LL_ADC_GetMultimode>
 80030d8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d017      	beq.n	8003114 <HAL_ADC_IRQHandler+0x78>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f001 f886 	bl	8004218 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2202      	movs	r2, #2
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d004      	beq.n	8003128 <HAL_ADC_IRQHandler+0x8c>
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8083 	beq.w	800323a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d07d      	beq.n	800323a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fc34 	bl	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d062      	beq.n	800322c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a5d      	ldr	r2, [pc, #372]	; (80032e0 <HAL_ADC_IRQHandler+0x244>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d002      	beq.n	8003176 <HAL_ADC_IRQHandler+0xda>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	e000      	b.n	8003178 <HAL_ADC_IRQHandler+0xdc>
 8003176:	4b59      	ldr	r3, [pc, #356]	; (80032dc <HAL_ADC_IRQHandler+0x240>)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	4293      	cmp	r3, r2
 800317e:	d008      	beq.n	8003192 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d002      	beq.n	8003192 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b09      	cmp	r3, #9
 8003190:	d104      	bne.n	800319c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	e00c      	b.n	80031b6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_ADC_IRQHandler+0x244>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d002      	beq.n	80031ac <HAL_ADC_IRQHandler+0x110>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e000      	b.n	80031ae <HAL_ADC_IRQHandler+0x112>
 80031ac:	4b4b      	ldr	r3, [pc, #300]	; (80032dc <HAL_ADC_IRQHandler+0x240>)
 80031ae:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d135      	bne.n	800322c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d12e      	bne.n	800322c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fd33 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d11a      	bne.n	8003214 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 020c 	bic.w	r2, r2, #12
 80031ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d112      	bne.n	800322c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320a:	f043 0201 	orr.w	r2, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	661a      	str	r2, [r3, #96]	; 0x60
 8003212:	e00b      	b.n	800322c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003218:	f043 0210 	orr.w	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 f96f 	bl	8003510 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	220c      	movs	r2, #12
 8003238:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <HAL_ADC_IRQHandler+0x1b2>
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 80a0 	beq.w	800339a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 809a 	beq.w	800339a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fbdf 	bl	8002a46 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003288:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb9a 	bl	80029c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003294:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_ADC_IRQHandler+0x244>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d002      	beq.n	80032a6 <HAL_ADC_IRQHandler+0x20a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e000      	b.n	80032a8 <HAL_ADC_IRQHandler+0x20c>
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_ADC_IRQHandler+0x240>)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d008      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2b06      	cmp	r3, #6
 80032ba:	d002      	beq.n	80032c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b07      	cmp	r3, #7
 80032c0:	d104      	bne.n	80032cc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	e014      	b.n	80032f6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a03      	ldr	r2, [pc, #12]	; (80032e0 <HAL_ADC_IRQHandler+0x244>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00a      	beq.n	80032ec <HAL_ADC_IRQHandler+0x250>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	e008      	b.n	80032ee <HAL_ADC_IRQHandler+0x252>
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40022100 	.word	0x40022100
 80032e4:	40022300 	.word	0x40022300
 80032e8:	58026300 	.word	0x58026300
 80032ec:	4b84      	ldr	r3, [pc, #528]	; (8003500 <HAL_ADC_IRQHandler+0x464>)
 80032ee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d047      	beq.n	800338c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d007      	beq.n	8003316 <HAL_ADC_IRQHandler+0x27a>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d03f      	beq.n	800338c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003312:	2b00      	cmp	r3, #0
 8003314:	d13a      	bne.n	800338c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d133      	bne.n	800338c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d12e      	bne.n	800338c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fc96 	bl	8002c64 <LL_ADC_INJ_IsConversionOngoing>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11a      	bne.n	8003374 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800334c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d112      	bne.n	800338c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60
 8003372:	e00b      	b.n	800338c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003378:	f043 0210 	orr.w	r2, r3, #16
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 ff1b 	bl	80041c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2260      	movs	r2, #96	; 0x60
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d011      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x32c>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8b2 	bl	8003524 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x35c>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00d      	beq.n	80033f8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 ff01 	bl	80041f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d012      	beq.n	8003428 <HAL_ADC_IRQHandler+0x38c>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00d      	beq.n	8003428 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003410:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fef3 	bl	8004204 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003426:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b00      	cmp	r3, #0
 8003430:	d043      	beq.n	80034ba <HAL_ADC_IRQHandler+0x41e>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d03e      	beq.n	80034ba <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003444:	2301      	movs	r3, #1
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
 8003448:	e021      	b.n	800348e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d015      	beq.n	800347c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2a      	ldr	r2, [pc, #168]	; (8003500 <HAL_ADC_IRQHandler+0x464>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_ADC_IRQHandler+0x3c8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <HAL_ADC_IRQHandler+0x468>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <HAL_ADC_IRQHandler+0x3cc>
 8003464:	4b28      	ldr	r3, [pc, #160]	; (8003508 <HAL_ADC_IRQHandler+0x46c>)
 8003466:	e000      	b.n	800346a <HAL_ADC_IRQHandler+0x3ce>
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_ADC_IRQHandler+0x470>)
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fb78 	bl	8002b60 <LL_ADC_GetMultiDMATransfer>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003476:	2301      	movs	r3, #1
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	e008      	b.n	800348e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10e      	bne.n	80034b2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003498:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a4:	f043 0202 	orr.w	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f843 	bl	8003538 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2210      	movs	r2, #16
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d018      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x45a>
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d013      	beq.n	80034f6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034de:	f043 0208 	orr.w	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034ee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fe73 	bl	80041dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3728      	adds	r7, #40	; 0x28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40022000 	.word	0x40022000
 8003504:	40022100 	.word	0x40022100
 8003508:	40022300 	.word	0x40022300
 800350c:	58026300 	.word	0x58026300

08003510 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b0b9      	sub	sp, #228	; 0xe4
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003566:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4aa9      	ldr	r2, [pc, #676]	; (8003814 <HAL_ADC_ConfigChannel+0x2c8>)
 800356e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d102      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x34>
 800357a:	2302      	movs	r3, #2
 800357c:	f000 bcfa 	b.w	8003f74 <HAL_ADC_ConfigChannel+0xa28>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fb56 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 84de 	bne.w	8003f56 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a9e      	ldr	r2, [pc, #632]	; (8003818 <HAL_ADC_ConfigChannel+0x2cc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d033      	beq.n	800360c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x76>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	e01d      	b.n	80035fe <HAL_ADC_ConfigChannel+0xb2>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80035e6:	2320      	movs	r3, #32
 80035e8:	e004      	b.n	80035f4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80035ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	2201      	movs	r2, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	69d1      	ldr	r1, [r2, #28]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	f7ff f9e8 	bl	80029ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff fb0b 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 8003628:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fb17 	bl	8002c64 <LL_ADC_INJ_IsConversionOngoing>
 8003636:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800363a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 8270 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003644:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 826b 	bne.w	8003b24 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	461a      	mov	r2, r3
 800365c:	f7ff fa06 	bl	8002a6c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6c      	ldr	r2, [pc, #432]	; (8003818 <HAL_ADC_ConfigChannel+0x2cc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10d      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	08db      	lsrs	r3, r3, #3
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003684:	e032      	b.n	80036ec <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003686:	4b65      	ldr	r3, [pc, #404]	; (800381c <HAL_ADC_ConfigChannel+0x2d0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800368e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003692:	d10b      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x160>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	e01d      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x19c>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x186>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	e00a      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x19c>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d048      	beq.n	8003786 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6919      	ldr	r1, [r3, #16]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003704:	f7ff f86e 	bl	80027e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a42      	ldr	r2, [pc, #264]	; (8003818 <HAL_ADC_ConfigChannel+0x2cc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d119      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6919      	ldr	r1, [r3, #16]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	461a      	mov	r2, r3
 8003720:	f7ff f906 	bl	8002930 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	6919      	ldr	r1, [r3, #16]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_ADC_ConfigChannel+0x1f0>
 8003736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800373a:	e000      	b.n	800373e <HAL_ADC_ConfigChannel+0x1f2>
 800373c:	2300      	movs	r3, #0
 800373e:	461a      	mov	r2, r3
 8003740:	f7ff f8d4 	bl	80028ec <LL_ADC_SetOffsetSaturation>
 8003744:	e1ee      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003754:	2b01      	cmp	r3, #1
 8003756:	d102      	bne.n	800375e <HAL_ADC_ConfigChannel+0x212>
 8003758:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800375c:	e000      	b.n	8003760 <HAL_ADC_ConfigChannel+0x214>
 800375e:	2300      	movs	r3, #0
 8003760:	461a      	mov	r2, r3
 8003762:	f7ff f8a1 	bl	80028a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	6919      	ldr	r1, [r3, #16]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	7e1b      	ldrb	r3, [r3, #24]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <HAL_ADC_ConfigChannel+0x230>
 8003776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800377a:	e000      	b.n	800377e <HAL_ADC_ConfigChannel+0x232>
 800377c:	2300      	movs	r3, #0
 800377e:	461a      	mov	r2, r3
 8003780:	f7ff f878 	bl	8002874 <LL_ADC_SetDataRightShift>
 8003784:	e1ce      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_ADC_ConfigChannel+0x2cc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	f040 8181 	bne.w	8003a94 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff f855 	bl	8002848 <LL_ADC_GetOffsetChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_ADC_ConfigChannel+0x272>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff f84a 	bl	8002848 <LL_ADC_GetOffsetChannel>
 80037b4:	4603      	mov	r3, r0
 80037b6:	0e9b      	lsrs	r3, r3, #26
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	e01e      	b.n	80037fc <HAL_ADC_ConfigChannel+0x2b0>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2100      	movs	r1, #0
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff f83f 	bl	8002848 <LL_ADC_GetOffsetChannel>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80037dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80037e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e004      	b.n	80037fa <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80037f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10b      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x2d4>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	0e9b      	lsrs	r3, r3, #26
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	e01e      	b.n	8003852 <HAL_ADC_ConfigChannel+0x306>
 8003814:	47ff0000 	.word	0x47ff0000
 8003818:	58026000 	.word	0x58026000
 800381c:	5c001000 	.word	0x5c001000
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800382c:	fa93 f3a3 	rbit	r3, r3
 8003830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800383c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003844:	2320      	movs	r3, #32
 8003846:	e004      	b.n	8003852 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003848:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	429a      	cmp	r2, r3
 8003854:	d106      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff f888 	bl	8002974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2101      	movs	r1, #1
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe ffec 	bl	8002848 <LL_ADC_GetOffsetChannel>
 8003870:	4603      	mov	r3, r0
 8003872:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x344>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f7fe ffe1 	bl	8002848 <LL_ADC_GetOffsetChannel>
 8003886:	4603      	mov	r3, r0
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	f003 021f 	and.w	r2, r3, #31
 800388e:	e01e      	b.n	80038ce <HAL_ADC_ConfigChannel+0x382>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe ffd6 	bl	8002848 <LL_ADC_GetOffsetChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038a6:	fa93 f3a3 	rbit	r3, r3
 80038aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80038ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80038b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80038be:	2320      	movs	r3, #32
 80038c0:	e004      	b.n	80038cc <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80038c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038c6:	fab3 f383 	clz	r3, r3
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d105      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x39a>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	0e9b      	lsrs	r3, r3, #26
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	e018      	b.n	8003918 <HAL_ADC_ConfigChannel+0x3cc>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038f2:	fa93 f3a3 	rbit	r3, r3
 80038f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80038fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003902:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800390a:	2320      	movs	r3, #32
 800390c:	e004      	b.n	8003918 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800390e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003912:	fab3 f383 	clz	r3, r3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	429a      	cmp	r2, r3
 800391a:	d106      	bne.n	800392a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2200      	movs	r2, #0
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff f825 	bl	8002974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2102      	movs	r1, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe ff89 	bl	8002848 <LL_ADC_GetOffsetChannel>
 8003936:	4603      	mov	r3, r0
 8003938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10a      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x40a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2102      	movs	r1, #2
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe ff7e 	bl	8002848 <LL_ADC_GetOffsetChannel>
 800394c:	4603      	mov	r3, r0
 800394e:	0e9b      	lsrs	r3, r3, #26
 8003950:	f003 021f 	and.w	r2, r3, #31
 8003954:	e01e      	b.n	8003994 <HAL_ADC_ConfigChannel+0x448>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2102      	movs	r1, #2
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe ff73 	bl	8002848 <LL_ADC_GetOffsetChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800396c:	fa93 f3a3 	rbit	r3, r3
 8003970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003974:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800397c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003984:	2320      	movs	r3, #32
 8003986:	e004      	b.n	8003992 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800398c:	fab3 f383 	clz	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x460>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	0e9b      	lsrs	r3, r3, #26
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	e014      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x48a>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80039ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80039c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80039c8:	2320      	movs	r3, #32
 80039ca:	e004      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80039cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d106      	bne.n	80039e8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2200      	movs	r2, #0
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fe ffc6 	bl	8002974 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2103      	movs	r1, #3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe ff2a 	bl	8002848 <LL_ADC_GetOffsetChannel>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10a      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x4c8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2103      	movs	r1, #3
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ff1f 	bl	8002848 <LL_ADC_GetOffsetChannel>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	0e9b      	lsrs	r3, r3, #26
 8003a0e:	f003 021f 	and.w	r2, r3, #31
 8003a12:	e017      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x4f8>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2103      	movs	r1, #3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe ff14 	bl	8002848 <LL_ADC_GetOffsetChannel>
 8003a20:	4603      	mov	r3, r0
 8003a22:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003a36:	2320      	movs	r3, #32
 8003a38:	e003      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	461a      	mov	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d105      	bne.n	8003a5c <HAL_ADC_ConfigChannel+0x510>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0e9b      	lsrs	r3, r3, #26
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	e011      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x534>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a64:	fa93 f3a3 	rbit	r3, r3
 8003a68:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a6c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003a74:	2320      	movs	r3, #32
 8003a76:	e003      	b.n	8003a80 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a7a:	fab3 f383 	clz	r3, r3
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d14f      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	2103      	movs	r1, #3
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe ff71 	bl	8002974 <LL_ADC_SetOffsetState>
 8003a92:	e047      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	069b      	lsls	r3, r3, #26
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d107      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003abe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	069b      	lsls	r3, r3, #26
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d107      	bne.n	8003adc <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ada:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	069b      	lsls	r3, r3, #26
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d107      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003afe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	069b      	lsls	r3, r3, #26
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b22:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f875 	bl	8002c18 <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 8219 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fe ffbe 	bl	8002ac4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4aa1      	ldr	r2, [pc, #644]	; (8003dd4 <HAL_ADC_ConfigChannel+0x888>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	f040 812e 	bne.w	8003db0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x630>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	0e9b      	lsrs	r3, r3, #26
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f003 031f 	and.w	r3, r3, #31
 8003b70:	2b09      	cmp	r3, #9
 8003b72:	bf94      	ite	ls
 8003b74:	2301      	movls	r3, #1
 8003b76:	2300      	movhi	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	e019      	b.n	8003bb0 <HAL_ADC_ConfigChannel+0x664>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b84:	fa93 f3a3 	rbit	r3, r3
 8003b88:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003b94:	2320      	movs	r3, #32
 8003b96:	e003      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b9a:	fab3 f383 	clz	r3, r3
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2b09      	cmp	r3, #9
 8003ba8:	bf94      	ite	ls
 8003baa:	2301      	movls	r3, #1
 8003bac:	2300      	movhi	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d079      	beq.n	8003ca8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x684>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e9b      	lsrs	r3, r3, #26
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	069b      	lsls	r3, r3, #26
 8003bca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bce:	e015      	b.n	8003bfc <HAL_ADC_ConfigChannel+0x6b0>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd8:	fa93 f3a3 	rbit	r3, r3
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003be8:	2320      	movs	r3, #32
 8003bea:	e003      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	069b      	lsls	r3, r3, #26
 8003bf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x6d0>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0e9b      	lsrs	r3, r3, #26
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	e017      	b.n	8003c4c <HAL_ADC_ConfigChannel+0x700>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003c34:	2320      	movs	r3, #32
 8003c36:	e003      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	ea42 0103 	orr.w	r1, r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x726>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	0e9b      	lsrs	r3, r3, #26
 8003c62:	3301      	adds	r3, #1
 8003c64:	f003 021f 	and.w	r2, r3, #31
 8003c68:	4613      	mov	r3, r2
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	4413      	add	r3, r2
 8003c6e:	051b      	lsls	r3, r3, #20
 8003c70:	e018      	b.n	8003ca4 <HAL_ADC_ConfigChannel+0x758>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	e003      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	e07e      	b.n	8003da6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_ADC_ConfigChannel+0x778>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	0e9b      	lsrs	r3, r3, #26
 8003cba:	3301      	adds	r3, #1
 8003cbc:	069b      	lsls	r3, r3, #26
 8003cbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cc2:	e015      	b.n	8003cf0 <HAL_ADC_ConfigChannel+0x7a4>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	fa93 f3a3 	rbit	r3, r3
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003cdc:	2320      	movs	r3, #32
 8003cde:	e003      	b.n	8003ce8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	fab3 f383 	clz	r3, r3
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	069b      	lsls	r3, r3, #26
 8003cec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x7c4>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	0e9b      	lsrs	r3, r3, #26
 8003d02:	3301      	adds	r3, #1
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	e017      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x7f4>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003d28:	2320      	movs	r3, #32
 8003d2a:	e003      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	ea42 0103 	orr.w	r1, r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x820>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	0e9b      	lsrs	r3, r3, #26
 8003d56:	3301      	adds	r3, #1
 8003d58:	f003 021f 	and.w	r2, r3, #31
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	3b1e      	subs	r3, #30
 8003d64:	051b      	lsls	r3, r3, #20
 8003d66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	e01b      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x858>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
  return result;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003d84:	2320      	movs	r3, #32
 8003d86:	e003      	b.n	8003d90 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	fab3 f383 	clz	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f003 021f 	and.w	r2, r3, #31
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b1e      	subs	r3, #30
 8003d9e:	051b      	lsls	r3, r3, #20
 8003da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da4:	430b      	orrs	r3, r1
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6892      	ldr	r2, [r2, #8]
 8003daa:	4619      	mov	r1, r3
 8003dac:	f7fe fe5e 	bl	8002a6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f280 80d7 	bge.w	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <HAL_ADC_ConfigChannel+0x88c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_ADC_ConfigChannel+0x882>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <HAL_ADC_ConfigChannel+0x890>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10a      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x898>
 8003dce:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <HAL_ADC_ConfigChannel+0x894>)
 8003dd0:	e009      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x89a>
 8003dd2:	bf00      	nop
 8003dd4:	47ff0000 	.word	0x47ff0000
 8003dd8:	40022000 	.word	0x40022000
 8003ddc:	40022100 	.word	0x40022100
 8003de0:	40022300 	.word	0x40022300
 8003de4:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_ADC_ConfigChannel+0xa30>)
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fcee 	bl	80027c8 <LL_ADC_GetCommonPathInternalCh>
 8003dec:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a62      	ldr	r2, [pc, #392]	; (8003f80 <HAL_ADC_ConfigChannel+0xa34>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_ADC_ConfigChannel+0x8b8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a61      	ldr	r2, [pc, #388]	; (8003f84 <HAL_ADC_ConfigChannel+0xa38>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10e      	bne.n	8003e22 <HAL_ADC_ConfigChannel+0x8d6>
 8003e04:	485e      	ldr	r0, [pc, #376]	; (8003f80 <HAL_ADC_ConfigChannel+0xa34>)
 8003e06:	f7fe ff07 	bl	8002c18 <LL_ADC_IsEnabled>
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	485d      	ldr	r0, [pc, #372]	; (8003f84 <HAL_ADC_ConfigChannel+0xa38>)
 8003e0e:	f7fe ff03 	bl	8002c18 <LL_ADC_IsEnabled>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4323      	orrs	r3, r4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	e008      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x8e8>
 8003e22:	4859      	ldr	r0, [pc, #356]	; (8003f88 <HAL_ADC_ConfigChannel+0xa3c>)
 8003e24:	f7fe fef8 	bl	8002c18 <LL_ADC_IsEnabled>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8084 	beq.w	8003f42 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a53      	ldr	r2, [pc, #332]	; (8003f8c <HAL_ADC_ConfigChannel+0xa40>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d132      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x95e>
 8003e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d12c      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4c      	ldr	r2, [pc, #304]	; (8003f88 <HAL_ADC_ConfigChannel+0xa3c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	f040 8086 	bne.w	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a47      	ldr	r2, [pc, #284]	; (8003f80 <HAL_ADC_ConfigChannel+0xa34>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_ADC_ConfigChannel+0x924>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a46      	ldr	r2, [pc, #280]	; (8003f84 <HAL_ADC_ConfigChannel+0xa38>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x928>
 8003e70:	4a47      	ldr	r2, [pc, #284]	; (8003f90 <HAL_ADC_ConfigChannel+0xa44>)
 8003e72:	e000      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x92a>
 8003e74:	4a41      	ldr	r2, [pc, #260]	; (8003f7c <HAL_ADC_ConfigChannel+0xa30>)
 8003e76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f7fe fc8e 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e86:	4b43      	ldr	r3, [pc, #268]	; (8003f94 <HAL_ADC_ConfigChannel+0xa48>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_ADC_ConfigChannel+0xa4c>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	3301      	adds	r3, #1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e9a:	e002      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f9      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ea8:	e05e      	b.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <HAL_ADC_ConfigChannel+0xa50>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d120      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x9aa>
 8003eb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11a      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_ADC_ConfigChannel+0xa3c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d14e      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a2c      	ldr	r2, [pc, #176]	; (8003f80 <HAL_ADC_ConfigChannel+0xa34>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_ADC_ConfigChannel+0x992>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <HAL_ADC_ConfigChannel+0xa38>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x996>
 8003ede:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <HAL_ADC_ConfigChannel+0xa44>)
 8003ee0:	e000      	b.n	8003ee4 <HAL_ADC_ConfigChannel+0x998>
 8003ee2:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <HAL_ADC_ConfigChannel+0xa30>)
 8003ee4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe fc57 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ef4:	e038      	b.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <HAL_ADC_ConfigChannel+0xa54>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d133      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
 8003f00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d12d      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_ADC_ConfigChannel+0xa3c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d128      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <HAL_ADC_ConfigChannel+0xa34>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d004      	beq.n	8003f2a <HAL_ADC_ConfigChannel+0x9de>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_ADC_ConfigChannel+0xa38>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d101      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x9e2>
 8003f2a:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <HAL_ADC_ConfigChannel+0xa44>)
 8003f2c:	e000      	b.n	8003f30 <HAL_ADC_ConfigChannel+0x9e4>
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <HAL_ADC_ConfigChannel+0xa30>)
 8003f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe fc31 	bl	80027a2 <LL_ADC_SetCommonPathInternalCh>
 8003f40:	e012      	b.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003f54:	e008      	b.n	8003f68 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	f043 0220 	orr.w	r2, r3, #32
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003f70:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	37e4      	adds	r7, #228	; 0xe4
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd90      	pop	{r4, r7, pc}
 8003f7c:	58026300 	.word	0x58026300
 8003f80:	40022000 	.word	0x40022000
 8003f84:	40022100 	.word	0x40022100
 8003f88:	58026000 	.word	0x58026000
 8003f8c:	c7520000 	.word	0xc7520000
 8003f90:	40022300 	.word	0x40022300
 8003f94:	2400030c 	.word	0x2400030c
 8003f98:	053e2d63 	.word	0x053e2d63
 8003f9c:	c3210000 	.word	0xc3210000
 8003fa0:	cb840000 	.word	0xcb840000

08003fa4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a6b      	ldr	r2, [pc, #428]	; (8004160 <ADC_ConfigureBoostMode+0x1bc>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <ADC_ConfigureBoostMode+0x1c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6a      	ldr	r2, [pc, #424]	; (8004164 <ADC_ConfigureBoostMode+0x1c0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d109      	bne.n	8003fd4 <ADC_ConfigureBoostMode+0x30>
 8003fc0:	4b69      	ldr	r3, [pc, #420]	; (8004168 <ADC_ConfigureBoostMode+0x1c4>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e008      	b.n	8003fe6 <ADC_ConfigureBoostMode+0x42>
 8003fd4:	4b65      	ldr	r3, [pc, #404]	; (800416c <ADC_ConfigureBoostMode+0x1c8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01c      	beq.n	8004024 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003fea:	f003 fe5b 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8003fee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ff8:	d010      	beq.n	800401c <ADC_ConfigureBoostMode+0x78>
 8003ffa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ffe:	d871      	bhi.n	80040e4 <ADC_ConfigureBoostMode+0x140>
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004004:	d002      	beq.n	800400c <ADC_ConfigureBoostMode+0x68>
 8004006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400a:	d16b      	bne.n	80040e4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	fbb2 f3f3 	udiv	r3, r2, r3
 8004018:	60fb      	str	r3, [r7, #12]
        break;
 800401a:	e066      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	60fb      	str	r3, [r7, #12]
        break;
 8004022:	e062      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004024:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004028:	f004 fd92 	bl	8008b50 <HAL_RCCEx_GetPeriphCLKFreq>
 800402c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004036:	d051      	beq.n	80040dc <ADC_ConfigureBoostMode+0x138>
 8004038:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800403c:	d854      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 800403e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004042:	d047      	beq.n	80040d4 <ADC_ConfigureBoostMode+0x130>
 8004044:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004048:	d84e      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 800404a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800404e:	d03d      	beq.n	80040cc <ADC_ConfigureBoostMode+0x128>
 8004050:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004054:	d848      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 8004056:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800405a:	d033      	beq.n	80040c4 <ADC_ConfigureBoostMode+0x120>
 800405c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004060:	d842      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 8004062:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004066:	d029      	beq.n	80040bc <ADC_ConfigureBoostMode+0x118>
 8004068:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800406c:	d83c      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 800406e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004072:	d01a      	beq.n	80040aa <ADC_ConfigureBoostMode+0x106>
 8004074:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004078:	d836      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 800407a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800407e:	d014      	beq.n	80040aa <ADC_ConfigureBoostMode+0x106>
 8004080:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004084:	d830      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 8004086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408a:	d00e      	beq.n	80040aa <ADC_ConfigureBoostMode+0x106>
 800408c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004090:	d82a      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 8004092:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004096:	d008      	beq.n	80040aa <ADC_ConfigureBoostMode+0x106>
 8004098:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800409c:	d824      	bhi.n	80040e8 <ADC_ConfigureBoostMode+0x144>
 800409e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040a2:	d002      	beq.n	80040aa <ADC_ConfigureBoostMode+0x106>
 80040a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040a8:	d11e      	bne.n	80040e8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	0c9b      	lsrs	r3, r3, #18
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	60fb      	str	r3, [r7, #12]
        break;
 80040ba:	e016      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	60fb      	str	r3, [r7, #12]
        break;
 80040c2:	e012      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	60fb      	str	r3, [r7, #12]
        break;
 80040ca:	e00e      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	60fb      	str	r3, [r7, #12]
        break;
 80040d2:	e00a      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	09db      	lsrs	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
        break;
 80040da:	e006      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e002      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
        break;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80040e8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <ADC_ConfigureBoostMode+0x1cc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d808      	bhi.n	800410a <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004106:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004108:	e025      	b.n	8004156 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <ADC_ConfigureBoostMode+0x1d0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d80a      	bhi.n	8004128 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004124:	609a      	str	r2, [r3, #8]
}
 8004126:	e016      	b.n	8004156 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <ADC_ConfigureBoostMode+0x1d4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d80a      	bhi.n	8004146 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	e007      	b.n	8004156 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004154:	609a      	str	r2, [r3, #8]
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40022000 	.word	0x40022000
 8004164:	40022100 	.word	0x40022100
 8004168:	40022300 	.word	0x40022300
 800416c:	58026300 	.word	0x58026300
 8004170:	005f5e10 	.word	0x005f5e10
 8004174:	00bebc20 	.word	0x00bebc20
 8004178:	017d7840 	.word	0x017d7840

0800417c <LL_ADC_IsEnabled>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <LL_ADC_IsEnabled+0x18>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <LL_ADC_IsEnabled+0x1a>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d101      	bne.n	80041ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b0a3      	sub	sp, #140	; 0x8c
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004246:	2302      	movs	r3, #2
 8004248:	e0c1      	b.n	80043ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004256:	2300      	movs	r3, #0
 8004258:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5e      	ldr	r2, [pc, #376]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d102      	bne.n	800426a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004264:	4b5d      	ldr	r3, [pc, #372]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	e001      	b.n	800426e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0a0      	b.n	80043ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff ff87 	bl	80041a2 <LL_ADC_REG_IsConversionOngoing>
 8004294:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff ff80 	bl	80041a2 <LL_ADC_REG_IsConversionOngoing>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f040 8081 	bne.w	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80042aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d17c      	bne.n	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a48      	ldr	r2, [pc, #288]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a46      	ldr	r2, [pc, #280]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80042c6:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042c8:	e000      	b.n	80042cc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80042ca:	4b46      	ldr	r3, [pc, #280]	; (80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80042cc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d039      	beq.n	800434a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80042d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a39      	ldr	r2, [pc, #228]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10e      	bne.n	800431a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80042fc:	4836      	ldr	r0, [pc, #216]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80042fe:	f7ff ff3d 	bl	800417c <LL_ADC_IsEnabled>
 8004302:	4604      	mov	r4, r0
 8004304:	4835      	ldr	r0, [pc, #212]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004306:	f7ff ff39 	bl	800417c <LL_ADC_IsEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	4323      	orrs	r3, r4
 800430e:	2b00      	cmp	r3, #0
 8004310:	bf0c      	ite	eq
 8004312:	2301      	moveq	r3, #1
 8004314:	2300      	movne	r3, #0
 8004316:	b2db      	uxtb	r3, r3
 8004318:	e008      	b.n	800432c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800431a:	4833      	ldr	r0, [pc, #204]	; (80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800431c:	f7ff ff2e 	bl	800417c <LL_ADC_IsEnabled>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d047      	beq.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004336:	4013      	ands	r3, r2
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	6811      	ldr	r1, [r2, #0]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	6892      	ldr	r2, [r2, #8]
 8004340:	430a      	orrs	r2, r1
 8004342:	431a      	orrs	r2, r3
 8004344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004346:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004348:	e03a      	b.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800434a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004352:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004354:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d10e      	bne.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800436a:	481b      	ldr	r0, [pc, #108]	; (80043d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800436c:	f7ff ff06 	bl	800417c <LL_ADC_IsEnabled>
 8004370:	4604      	mov	r4, r0
 8004372:	481a      	ldr	r0, [pc, #104]	; (80043dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004374:	f7ff ff02 	bl	800417c <LL_ADC_IsEnabled>
 8004378:	4603      	mov	r3, r0
 800437a:	4323      	orrs	r3, r4
 800437c:	2b00      	cmp	r3, #0
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e008      	b.n	800439a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004388:	4817      	ldr	r0, [pc, #92]	; (80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800438a:	f7ff fef7 	bl	800417c <LL_ADC_IsEnabled>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d010      	beq.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800439e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	4b12      	ldr	r3, [pc, #72]	; (80043ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80043a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043aa:	e009      	b.n	80043c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	f043 0220 	orr.w	r2, r3, #32
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80043be:	e000      	b.n	80043c2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80043ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	378c      	adds	r7, #140	; 0x8c
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd90      	pop	{r4, r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40022000 	.word	0x40022000
 80043dc:	40022100 	.word	0x40022100
 80043e0:	40022300 	.word	0x40022300
 80043e4:	58026300 	.word	0x58026300
 80043e8:	58026000 	.word	0x58026000
 80043ec:	fffff0e0 	.word	0xfffff0e0

080043f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <__NVIC_SetPriorityGrouping+0x40>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800440c:	4013      	ands	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <__NVIC_SetPriorityGrouping+0x44>)
 800441a:	4313      	orrs	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800441e:	4a04      	ldr	r2, [pc, #16]	; (8004430 <__NVIC_SetPriorityGrouping+0x40>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	60d3      	str	r3, [r2, #12]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00
 8004434:	05fa0000 	.word	0x05fa0000

08004438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <__NVIC_GetPriorityGrouping+0x18>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	f003 0307 	and.w	r3, r3, #7
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800445e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	db0b      	blt.n	800447e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <__NVIC_EnableIRQ+0x38>)
 800446e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2001      	movs	r0, #1
 8004476:	fa00 f202 	lsl.w	r2, r0, r2
 800447a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000e100 	.word	0xe000e100

08004490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	6039      	str	r1, [r7, #0]
 800449a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800449c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	db0a      	blt.n	80044ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	490c      	ldr	r1, [pc, #48]	; (80044dc <__NVIC_SetPriority+0x4c>)
 80044aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	440b      	add	r3, r1
 80044b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b8:	e00a      	b.n	80044d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	4908      	ldr	r1, [pc, #32]	; (80044e0 <__NVIC_SetPriority+0x50>)
 80044c0:	88fb      	ldrh	r3, [r7, #6]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	3b04      	subs	r3, #4
 80044c8:	0112      	lsls	r2, r2, #4
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	440b      	add	r3, r1
 80044ce:	761a      	strb	r2, [r3, #24]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000e100 	.word	0xe000e100
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b089      	sub	sp, #36	; 0x24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f1c3 0307 	rsb	r3, r3, #7
 80044fe:	2b04      	cmp	r3, #4
 8004500:	bf28      	it	cs
 8004502:	2304      	movcs	r3, #4
 8004504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3304      	adds	r3, #4
 800450a:	2b06      	cmp	r3, #6
 800450c:	d902      	bls.n	8004514 <NVIC_EncodePriority+0x30>
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3b03      	subs	r3, #3
 8004512:	e000      	b.n	8004516 <NVIC_EncodePriority+0x32>
 8004514:	2300      	movs	r3, #0
 8004516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004518:	f04f 32ff 	mov.w	r2, #4294967295
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	401a      	ands	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800452c:	f04f 31ff 	mov.w	r1, #4294967295
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	43d9      	mvns	r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800453c:	4313      	orrs	r3, r2
         );
}
 800453e:	4618      	mov	r0, r3
 8004540:	3724      	adds	r7, #36	; 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
	...

0800454c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3b01      	subs	r3, #1
 8004558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800455c:	d301      	bcc.n	8004562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800455e:	2301      	movs	r3, #1
 8004560:	e00f      	b.n	8004582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <SysTick_Config+0x40>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3b01      	subs	r3, #1
 8004568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800456a:	210f      	movs	r1, #15
 800456c:	f04f 30ff 	mov.w	r0, #4294967295
 8004570:	f7ff ff8e 	bl	8004490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <SysTick_Config+0x40>)
 8004576:	2200      	movs	r2, #0
 8004578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800457a:	4b04      	ldr	r3, [pc, #16]	; (800458c <SysTick_Config+0x40>)
 800457c:	2207      	movs	r2, #7
 800457e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	e000e010 	.word	0xe000e010

08004590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff29 	bl	80043f0 <__NVIC_SetPriorityGrouping>
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	4603      	mov	r3, r0
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045b4:	f7ff ff40 	bl	8004438 <__NVIC_GetPriorityGrouping>
 80045b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	6978      	ldr	r0, [r7, #20]
 80045c0:	f7ff ff90 	bl	80044e4 <NVIC_EncodePriority>
 80045c4:	4602      	mov	r2, r0
 80045c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045ca:	4611      	mov	r1, r2
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff ff5f 	bl	8004490 <__NVIC_SetPriority>
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b082      	sub	sp, #8
 80045de:	af00      	add	r7, sp, #0
 80045e0:	4603      	mov	r3, r0
 80045e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff ff33 	bl	8004454 <__NVIC_EnableIRQ>
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b082      	sub	sp, #8
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ffa4 	bl	800454c <SysTick_Config>
 8004604:	4603      	mov	r3, r0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004618:	f7fe f880 	bl	800271c <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e314      	b.n	8004c52 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a66      	ldr	r2, [pc, #408]	; (80047c8 <HAL_DMA_Init+0x1b8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d04a      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a65      	ldr	r2, [pc, #404]	; (80047cc <HAL_DMA_Init+0x1bc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d045      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_DMA_Init+0x1c0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d040      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a62      	ldr	r2, [pc, #392]	; (80047d4 <HAL_DMA_Init+0x1c4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d03b      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a60      	ldr	r2, [pc, #384]	; (80047d8 <HAL_DMA_Init+0x1c8>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d036      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a5f      	ldr	r2, [pc, #380]	; (80047dc <HAL_DMA_Init+0x1cc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d031      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a5d      	ldr	r2, [pc, #372]	; (80047e0 <HAL_DMA_Init+0x1d0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02c      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5c      	ldr	r2, [pc, #368]	; (80047e4 <HAL_DMA_Init+0x1d4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d027      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5a      	ldr	r2, [pc, #360]	; (80047e8 <HAL_DMA_Init+0x1d8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a59      	ldr	r2, [pc, #356]	; (80047ec <HAL_DMA_Init+0x1dc>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d01d      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <HAL_DMA_Init+0x1e0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a56      	ldr	r2, [pc, #344]	; (80047f4 <HAL_DMA_Init+0x1e4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a54      	ldr	r2, [pc, #336]	; (80047f8 <HAL_DMA_Init+0x1e8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a53      	ldr	r2, [pc, #332]	; (80047fc <HAL_DMA_Init+0x1ec>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a51      	ldr	r2, [pc, #324]	; (8004800 <HAL_DMA_Init+0x1f0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_DMA_Init+0xb8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a50      	ldr	r2, [pc, #320]	; (8004804 <HAL_DMA_Init+0x1f4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_DMA_Init+0xbc>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_DMA_Init+0xbe>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 813c 	beq.w	800494c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a37      	ldr	r2, [pc, #220]	; (80047c8 <HAL_DMA_Init+0x1b8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d04a      	beq.n	8004784 <HAL_DMA_Init+0x174>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a36      	ldr	r2, [pc, #216]	; (80047cc <HAL_DMA_Init+0x1bc>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d045      	beq.n	8004784 <HAL_DMA_Init+0x174>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a34      	ldr	r2, [pc, #208]	; (80047d0 <HAL_DMA_Init+0x1c0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d040      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a33      	ldr	r2, [pc, #204]	; (80047d4 <HAL_DMA_Init+0x1c4>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d03b      	beq.n	8004784 <HAL_DMA_Init+0x174>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a31      	ldr	r2, [pc, #196]	; (80047d8 <HAL_DMA_Init+0x1c8>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d036      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a30      	ldr	r2, [pc, #192]	; (80047dc <HAL_DMA_Init+0x1cc>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d031      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a2e      	ldr	r2, [pc, #184]	; (80047e0 <HAL_DMA_Init+0x1d0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02c      	beq.n	8004784 <HAL_DMA_Init+0x174>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a2d      	ldr	r2, [pc, #180]	; (80047e4 <HAL_DMA_Init+0x1d4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d027      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2b      	ldr	r2, [pc, #172]	; (80047e8 <HAL_DMA_Init+0x1d8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d022      	beq.n	8004784 <HAL_DMA_Init+0x174>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2a      	ldr	r2, [pc, #168]	; (80047ec <HAL_DMA_Init+0x1dc>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d01d      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <HAL_DMA_Init+0x1e0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <HAL_DMA_Init+0x1e4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_DMA_Init+0x174>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a25      	ldr	r2, [pc, #148]	; (80047f8 <HAL_DMA_Init+0x1e8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a24      	ldr	r2, [pc, #144]	; (80047fc <HAL_DMA_Init+0x1ec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_DMA_Init+0x174>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <HAL_DMA_Init+0x1f0>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_DMA_Init+0x174>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a21      	ldr	r2, [pc, #132]	; (8004804 <HAL_DMA_Init+0x1f4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d108      	bne.n	8004796 <HAL_DMA_Init+0x186>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e007      	b.n	80047a6 <HAL_DMA_Init+0x196>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047a6:	e02f      	b.n	8004808 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047a8:	f7fd ffb8 	bl	800271c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d928      	bls.n	8004808 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2203      	movs	r2, #3
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e244      	b.n	8004c52 <HAL_DMA_Init+0x642>
 80047c8:	40020010 	.word	0x40020010
 80047cc:	40020028 	.word	0x40020028
 80047d0:	40020040 	.word	0x40020040
 80047d4:	40020058 	.word	0x40020058
 80047d8:	40020070 	.word	0x40020070
 80047dc:	40020088 	.word	0x40020088
 80047e0:	400200a0 	.word	0x400200a0
 80047e4:	400200b8 	.word	0x400200b8
 80047e8:	40020410 	.word	0x40020410
 80047ec:	40020428 	.word	0x40020428
 80047f0:	40020440 	.word	0x40020440
 80047f4:	40020458 	.word	0x40020458
 80047f8:	40020470 	.word	0x40020470
 80047fc:	40020488 	.word	0x40020488
 8004800:	400204a0 	.word	0x400204a0
 8004804:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1c8      	bne.n	80047a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4b84      	ldr	r3, [pc, #528]	; (8004a34 <HAL_DMA_Init+0x424>)
 8004822:	4013      	ands	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800482e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004846:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2b04      	cmp	r3, #4
 800485a:	d107      	bne.n	800486c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	4313      	orrs	r3, r2
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2b28      	cmp	r3, #40	; 0x28
 8004872:	d903      	bls.n	800487c <HAL_DMA_Init+0x26c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b2e      	cmp	r3, #46	; 0x2e
 800487a:	d91f      	bls.n	80048bc <HAL_DMA_Init+0x2ac>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b3e      	cmp	r3, #62	; 0x3e
 8004882:	d903      	bls.n	800488c <HAL_DMA_Init+0x27c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b42      	cmp	r3, #66	; 0x42
 800488a:	d917      	bls.n	80048bc <HAL_DMA_Init+0x2ac>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b46      	cmp	r3, #70	; 0x46
 8004892:	d903      	bls.n	800489c <HAL_DMA_Init+0x28c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b48      	cmp	r3, #72	; 0x48
 800489a:	d90f      	bls.n	80048bc <HAL_DMA_Init+0x2ac>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2b4e      	cmp	r3, #78	; 0x4e
 80048a2:	d903      	bls.n	80048ac <HAL_DMA_Init+0x29c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b52      	cmp	r3, #82	; 0x52
 80048aa:	d907      	bls.n	80048bc <HAL_DMA_Init+0x2ac>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b73      	cmp	r3, #115	; 0x73
 80048b2:	d905      	bls.n	80048c0 <HAL_DMA_Init+0x2b0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b77      	cmp	r3, #119	; 0x77
 80048ba:	d801      	bhi.n	80048c0 <HAL_DMA_Init+0x2b0>
 80048bc:	2301      	movs	r3, #1
 80048be:	e000      	b.n	80048c2 <HAL_DMA_Init+0x2b2>
 80048c0:	2300      	movs	r3, #0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f023 0307 	bic.w	r3, r3, #7
 80048e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d117      	bne.n	8004928 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00e      	beq.n	8004928 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 ff1a 	bl	8006744 <DMA_CheckFifoParam>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2240      	movs	r2, #64	; 0x40
 800491a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e194      	b.n	8004c52 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f001 fe55 	bl	80065e0 <DMA_CalcBaseAndBitshift>
 8004936:	4603      	mov	r3, r0
 8004938:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	223f      	movs	r2, #63	; 0x3f
 8004944:	409a      	lsls	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	e0ca      	b.n	8004ae2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a39      	ldr	r2, [pc, #228]	; (8004a38 <HAL_DMA_Init+0x428>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d022      	beq.n	800499c <HAL_DMA_Init+0x38c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a38      	ldr	r2, [pc, #224]	; (8004a3c <HAL_DMA_Init+0x42c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d01d      	beq.n	800499c <HAL_DMA_Init+0x38c>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a36      	ldr	r2, [pc, #216]	; (8004a40 <HAL_DMA_Init+0x430>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d018      	beq.n	800499c <HAL_DMA_Init+0x38c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a35      	ldr	r2, [pc, #212]	; (8004a44 <HAL_DMA_Init+0x434>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d013      	beq.n	800499c <HAL_DMA_Init+0x38c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a33      	ldr	r2, [pc, #204]	; (8004a48 <HAL_DMA_Init+0x438>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00e      	beq.n	800499c <HAL_DMA_Init+0x38c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a32      	ldr	r2, [pc, #200]	; (8004a4c <HAL_DMA_Init+0x43c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d009      	beq.n	800499c <HAL_DMA_Init+0x38c>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a30      	ldr	r2, [pc, #192]	; (8004a50 <HAL_DMA_Init+0x440>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_DMA_Init+0x38c>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2f      	ldr	r2, [pc, #188]	; (8004a54 <HAL_DMA_Init+0x444>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_DMA_Init+0x390>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <HAL_DMA_Init+0x392>
 80049a0:	2300      	movs	r3, #0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 8094 	beq.w	8004ad0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_DMA_Init+0x428>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d021      	beq.n	80049f6 <HAL_DMA_Init+0x3e6>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a21      	ldr	r2, [pc, #132]	; (8004a3c <HAL_DMA_Init+0x42c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d01c      	beq.n	80049f6 <HAL_DMA_Init+0x3e6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <HAL_DMA_Init+0x430>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d017      	beq.n	80049f6 <HAL_DMA_Init+0x3e6>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_DMA_Init+0x434>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d012      	beq.n	80049f6 <HAL_DMA_Init+0x3e6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1c      	ldr	r2, [pc, #112]	; (8004a48 <HAL_DMA_Init+0x438>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00d      	beq.n	80049f6 <HAL_DMA_Init+0x3e6>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1b      	ldr	r2, [pc, #108]	; (8004a4c <HAL_DMA_Init+0x43c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d008      	beq.n	80049f6 <HAL_DMA_Init+0x3e6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a19      	ldr	r2, [pc, #100]	; (8004a50 <HAL_DMA_Init+0x440>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <HAL_DMA_Init+0x3e6>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <HAL_DMA_Init+0x444>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <HAL_DMA_Init+0x448>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d01d      	beq.n	8004a5c <HAL_DMA_Init+0x44c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d102      	bne.n	8004a2e <HAL_DMA_Init+0x41e>
 8004a28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a2c:	e017      	b.n	8004a5e <HAL_DMA_Init+0x44e>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e015      	b.n	8004a5e <HAL_DMA_Init+0x44e>
 8004a32:	bf00      	nop
 8004a34:	fe10803f 	.word	0xfe10803f
 8004a38:	58025408 	.word	0x58025408
 8004a3c:	5802541c 	.word	0x5802541c
 8004a40:	58025430 	.word	0x58025430
 8004a44:	58025444 	.word	0x58025444
 8004a48:	58025458 	.word	0x58025458
 8004a4c:	5802546c 	.word	0x5802546c
 8004a50:	58025480 	.word	0x58025480
 8004a54:	58025494 	.word	0x58025494
 8004a58:	fffe000f 	.word	0xfffe000f
 8004a5c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68d2      	ldr	r2, [r2, #12]
 8004a62:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a8c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b6e      	ldr	r3, [pc, #440]	; (8004c5c <HAL_DMA_Init+0x64c>)
 8004aa4:	4413      	add	r3, r2
 8004aa6:	4a6e      	ldr	r2, [pc, #440]	; (8004c60 <HAL_DMA_Init+0x650>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	009a      	lsls	r2, r3, #2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f001 fd93 	bl	80065e0 <DMA_CalcBaseAndBitshift>
 8004aba:	4603      	mov	r3, r0
 8004abc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	409a      	lsls	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]
 8004ace:	e008      	b.n	8004ae2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2240      	movs	r2, #64	; 0x40
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0b7      	b.n	8004c52 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a5f      	ldr	r2, [pc, #380]	; (8004c64 <HAL_DMA_Init+0x654>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d072      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a5d      	ldr	r2, [pc, #372]	; (8004c68 <HAL_DMA_Init+0x658>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d06d      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a5c      	ldr	r2, [pc, #368]	; (8004c6c <HAL_DMA_Init+0x65c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d068      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a5a      	ldr	r2, [pc, #360]	; (8004c70 <HAL_DMA_Init+0x660>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d063      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a59      	ldr	r2, [pc, #356]	; (8004c74 <HAL_DMA_Init+0x664>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d05e      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a57      	ldr	r2, [pc, #348]	; (8004c78 <HAL_DMA_Init+0x668>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d059      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a56      	ldr	r2, [pc, #344]	; (8004c7c <HAL_DMA_Init+0x66c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d054      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a54      	ldr	r2, [pc, #336]	; (8004c80 <HAL_DMA_Init+0x670>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d04f      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a53      	ldr	r2, [pc, #332]	; (8004c84 <HAL_DMA_Init+0x674>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d04a      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <HAL_DMA_Init+0x678>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d045      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_DMA_Init+0x67c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d040      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a4e      	ldr	r2, [pc, #312]	; (8004c90 <HAL_DMA_Init+0x680>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d03b      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4d      	ldr	r2, [pc, #308]	; (8004c94 <HAL_DMA_Init+0x684>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d036      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a4b      	ldr	r2, [pc, #300]	; (8004c98 <HAL_DMA_Init+0x688>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d031      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a4a      	ldr	r2, [pc, #296]	; (8004c9c <HAL_DMA_Init+0x68c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d02c      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a48      	ldr	r2, [pc, #288]	; (8004ca0 <HAL_DMA_Init+0x690>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d027      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a47      	ldr	r2, [pc, #284]	; (8004ca4 <HAL_DMA_Init+0x694>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d022      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a45      	ldr	r2, [pc, #276]	; (8004ca8 <HAL_DMA_Init+0x698>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01d      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a44      	ldr	r2, [pc, #272]	; (8004cac <HAL_DMA_Init+0x69c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d018      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a42      	ldr	r2, [pc, #264]	; (8004cb0 <HAL_DMA_Init+0x6a0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a41      	ldr	r2, [pc, #260]	; (8004cb4 <HAL_DMA_Init+0x6a4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00e      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a3f      	ldr	r2, [pc, #252]	; (8004cb8 <HAL_DMA_Init+0x6a8>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d009      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a3e      	ldr	r2, [pc, #248]	; (8004cbc <HAL_DMA_Init+0x6ac>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d004      	beq.n	8004bd2 <HAL_DMA_Init+0x5c2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a3c      	ldr	r2, [pc, #240]	; (8004cc0 <HAL_DMA_Init+0x6b0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d101      	bne.n	8004bd6 <HAL_DMA_Init+0x5c6>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_DMA_Init+0x5c8>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d032      	beq.n	8004c42 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f001 fe2d 	bl	800683c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	2b80      	cmp	r3, #128	; 0x80
 8004be8:	d102      	bne.n	8004bf0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <HAL_DMA_Init+0x620>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d80c      	bhi.n	8004c30 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f001 feaa 	bl	8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	e008      	b.n	8004c42 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	a7fdabf8 	.word	0xa7fdabf8
 8004c60:	cccccccd 	.word	0xcccccccd
 8004c64:	40020010 	.word	0x40020010
 8004c68:	40020028 	.word	0x40020028
 8004c6c:	40020040 	.word	0x40020040
 8004c70:	40020058 	.word	0x40020058
 8004c74:	40020070 	.word	0x40020070
 8004c78:	40020088 	.word	0x40020088
 8004c7c:	400200a0 	.word	0x400200a0
 8004c80:	400200b8 	.word	0x400200b8
 8004c84:	40020410 	.word	0x40020410
 8004c88:	40020428 	.word	0x40020428
 8004c8c:	40020440 	.word	0x40020440
 8004c90:	40020458 	.word	0x40020458
 8004c94:	40020470 	.word	0x40020470
 8004c98:	40020488 	.word	0x40020488
 8004c9c:	400204a0 	.word	0x400204a0
 8004ca0:	400204b8 	.word	0x400204b8
 8004ca4:	58025408 	.word	0x58025408
 8004ca8:	5802541c 	.word	0x5802541c
 8004cac:	58025430 	.word	0x58025430
 8004cb0:	58025444 	.word	0x58025444
 8004cb4:	58025458 	.word	0x58025458
 8004cb8:	5802546c 	.word	0x5802546c
 8004cbc:	58025480 	.word	0x58025480
 8004cc0:	58025494 	.word	0x58025494

08004cc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004ccc:	f7fd fd26 	bl	800271c <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e2dc      	b.n	8005296 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d008      	beq.n	8004cfa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e2cd      	b.n	8005296 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a76      	ldr	r2, [pc, #472]	; (8004ed8 <HAL_DMA_Abort+0x214>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d04a      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a74      	ldr	r2, [pc, #464]	; (8004edc <HAL_DMA_Abort+0x218>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d045      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a73      	ldr	r2, [pc, #460]	; (8004ee0 <HAL_DMA_Abort+0x21c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d040      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a71      	ldr	r2, [pc, #452]	; (8004ee4 <HAL_DMA_Abort+0x220>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d03b      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a70      	ldr	r2, [pc, #448]	; (8004ee8 <HAL_DMA_Abort+0x224>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d036      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a6e      	ldr	r2, [pc, #440]	; (8004eec <HAL_DMA_Abort+0x228>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d031      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a6d      	ldr	r2, [pc, #436]	; (8004ef0 <HAL_DMA_Abort+0x22c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d02c      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a6b      	ldr	r2, [pc, #428]	; (8004ef4 <HAL_DMA_Abort+0x230>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d027      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a6a      	ldr	r2, [pc, #424]	; (8004ef8 <HAL_DMA_Abort+0x234>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d022      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a68      	ldr	r2, [pc, #416]	; (8004efc <HAL_DMA_Abort+0x238>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d01d      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a67      	ldr	r2, [pc, #412]	; (8004f00 <HAL_DMA_Abort+0x23c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d018      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a65      	ldr	r2, [pc, #404]	; (8004f04 <HAL_DMA_Abort+0x240>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d013      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a64      	ldr	r2, [pc, #400]	; (8004f08 <HAL_DMA_Abort+0x244>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00e      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a62      	ldr	r2, [pc, #392]	; (8004f0c <HAL_DMA_Abort+0x248>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d009      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a61      	ldr	r2, [pc, #388]	; (8004f10 <HAL_DMA_Abort+0x24c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d004      	beq.n	8004d9a <HAL_DMA_Abort+0xd6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a5f      	ldr	r2, [pc, #380]	; (8004f14 <HAL_DMA_Abort+0x250>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <HAL_DMA_Abort+0xda>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <HAL_DMA_Abort+0xdc>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d013      	beq.n	8004dcc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 021e 	bic.w	r2, r2, #30
 8004db2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dc2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e00a      	b.n	8004de2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 020e 	bic.w	r2, r2, #14
 8004dda:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a3c      	ldr	r2, [pc, #240]	; (8004ed8 <HAL_DMA_Abort+0x214>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d072      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a3a      	ldr	r2, [pc, #232]	; (8004edc <HAL_DMA_Abort+0x218>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d06d      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a39      	ldr	r2, [pc, #228]	; (8004ee0 <HAL_DMA_Abort+0x21c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d068      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a37      	ldr	r2, [pc, #220]	; (8004ee4 <HAL_DMA_Abort+0x220>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d063      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a36      	ldr	r2, [pc, #216]	; (8004ee8 <HAL_DMA_Abort+0x224>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d05e      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a34      	ldr	r2, [pc, #208]	; (8004eec <HAL_DMA_Abort+0x228>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d059      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <HAL_DMA_Abort+0x22c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d054      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a31      	ldr	r2, [pc, #196]	; (8004ef4 <HAL_DMA_Abort+0x230>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d04f      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a30      	ldr	r2, [pc, #192]	; (8004ef8 <HAL_DMA_Abort+0x234>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d04a      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a2e      	ldr	r2, [pc, #184]	; (8004efc <HAL_DMA_Abort+0x238>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d045      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <HAL_DMA_Abort+0x23c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d040      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <HAL_DMA_Abort+0x240>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d03b      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <HAL_DMA_Abort+0x244>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d036      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a28      	ldr	r2, [pc, #160]	; (8004f0c <HAL_DMA_Abort+0x248>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d031      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a27      	ldr	r2, [pc, #156]	; (8004f10 <HAL_DMA_Abort+0x24c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d02c      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a25      	ldr	r2, [pc, #148]	; (8004f14 <HAL_DMA_Abort+0x250>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d027      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a24      	ldr	r2, [pc, #144]	; (8004f18 <HAL_DMA_Abort+0x254>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <HAL_DMA_Abort+0x258>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01d      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <HAL_DMA_Abort+0x25c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <HAL_DMA_Abort+0x260>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1e      	ldr	r2, [pc, #120]	; (8004f28 <HAL_DMA_Abort+0x264>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <HAL_DMA_Abort+0x268>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <HAL_DMA_Abort+0x26c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_DMA_Abort+0x20e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_DMA_Abort+0x270>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d132      	bne.n	8004f38 <HAL_DMA_Abort+0x274>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e031      	b.n	8004f3a <HAL_DMA_Abort+0x276>
 8004ed6:	bf00      	nop
 8004ed8:	40020010 	.word	0x40020010
 8004edc:	40020028 	.word	0x40020028
 8004ee0:	40020040 	.word	0x40020040
 8004ee4:	40020058 	.word	0x40020058
 8004ee8:	40020070 	.word	0x40020070
 8004eec:	40020088 	.word	0x40020088
 8004ef0:	400200a0 	.word	0x400200a0
 8004ef4:	400200b8 	.word	0x400200b8
 8004ef8:	40020410 	.word	0x40020410
 8004efc:	40020428 	.word	0x40020428
 8004f00:	40020440 	.word	0x40020440
 8004f04:	40020458 	.word	0x40020458
 8004f08:	40020470 	.word	0x40020470
 8004f0c:	40020488 	.word	0x40020488
 8004f10:	400204a0 	.word	0x400204a0
 8004f14:	400204b8 	.word	0x400204b8
 8004f18:	58025408 	.word	0x58025408
 8004f1c:	5802541c 	.word	0x5802541c
 8004f20:	58025430 	.word	0x58025430
 8004f24:	58025444 	.word	0x58025444
 8004f28:	58025458 	.word	0x58025458
 8004f2c:	5802546c 	.word	0x5802546c
 8004f30:	58025480 	.word	0x58025480
 8004f34:	58025494 	.word	0x58025494
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6d      	ldr	r2, [pc, #436]	; (8005108 <HAL_DMA_Abort+0x444>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d04a      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a6b      	ldr	r2, [pc, #428]	; (800510c <HAL_DMA_Abort+0x448>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d045      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6a      	ldr	r2, [pc, #424]	; (8005110 <HAL_DMA_Abort+0x44c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d040      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a68      	ldr	r2, [pc, #416]	; (8005114 <HAL_DMA_Abort+0x450>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d03b      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a67      	ldr	r2, [pc, #412]	; (8005118 <HAL_DMA_Abort+0x454>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d036      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a65      	ldr	r2, [pc, #404]	; (800511c <HAL_DMA_Abort+0x458>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d031      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a64      	ldr	r2, [pc, #400]	; (8005120 <HAL_DMA_Abort+0x45c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d02c      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a62      	ldr	r2, [pc, #392]	; (8005124 <HAL_DMA_Abort+0x460>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d027      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a61      	ldr	r2, [pc, #388]	; (8005128 <HAL_DMA_Abort+0x464>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d022      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a5f      	ldr	r2, [pc, #380]	; (800512c <HAL_DMA_Abort+0x468>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d01d      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5e      	ldr	r2, [pc, #376]	; (8005130 <HAL_DMA_Abort+0x46c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d018      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a5c      	ldr	r2, [pc, #368]	; (8005134 <HAL_DMA_Abort+0x470>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d013      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5b      	ldr	r2, [pc, #364]	; (8005138 <HAL_DMA_Abort+0x474>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00e      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a59      	ldr	r2, [pc, #356]	; (800513c <HAL_DMA_Abort+0x478>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d009      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a58      	ldr	r2, [pc, #352]	; (8005140 <HAL_DMA_Abort+0x47c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d004      	beq.n	8004fee <HAL_DMA_Abort+0x32a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a56      	ldr	r2, [pc, #344]	; (8005144 <HAL_DMA_Abort+0x480>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <HAL_DMA_Abort+0x33c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0201 	bic.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
 8004ffe:	e007      	b.n	8005010 <HAL_DMA_Abort+0x34c>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005010:	e013      	b.n	800503a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005012:	f7fd fb83 	bl	800271c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b05      	cmp	r3, #5
 800501e:	d90c      	bls.n	800503a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2203      	movs	r2, #3
 800502a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e12d      	b.n	8005296 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e5      	bne.n	8005012 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a2f      	ldr	r2, [pc, #188]	; (8005108 <HAL_DMA_Abort+0x444>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d04a      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a2d      	ldr	r2, [pc, #180]	; (800510c <HAL_DMA_Abort+0x448>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d045      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <HAL_DMA_Abort+0x44c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d040      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <HAL_DMA_Abort+0x450>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d03b      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a29      	ldr	r2, [pc, #164]	; (8005118 <HAL_DMA_Abort+0x454>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d036      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a27      	ldr	r2, [pc, #156]	; (800511c <HAL_DMA_Abort+0x458>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a26      	ldr	r2, [pc, #152]	; (8005120 <HAL_DMA_Abort+0x45c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d02c      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a24      	ldr	r2, [pc, #144]	; (8005124 <HAL_DMA_Abort+0x460>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d027      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a23      	ldr	r2, [pc, #140]	; (8005128 <HAL_DMA_Abort+0x464>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d022      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a21      	ldr	r2, [pc, #132]	; (800512c <HAL_DMA_Abort+0x468>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01d      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a20      	ldr	r2, [pc, #128]	; (8005130 <HAL_DMA_Abort+0x46c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d018      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_DMA_Abort+0x470>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <HAL_DMA_Abort+0x474>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <HAL_DMA_Abort+0x478>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1a      	ldr	r2, [pc, #104]	; (8005140 <HAL_DMA_Abort+0x47c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_DMA_Abort+0x422>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_DMA_Abort+0x480>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <HAL_DMA_Abort+0x426>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_DMA_Abort+0x428>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02b      	beq.n	8005148 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	223f      	movs	r2, #63	; 0x3f
 8005100:	409a      	lsls	r2, r3
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	609a      	str	r2, [r3, #8]
 8005106:	e02a      	b.n	800515e <HAL_DMA_Abort+0x49a>
 8005108:	40020010 	.word	0x40020010
 800510c:	40020028 	.word	0x40020028
 8005110:	40020040 	.word	0x40020040
 8005114:	40020058 	.word	0x40020058
 8005118:	40020070 	.word	0x40020070
 800511c:	40020088 	.word	0x40020088
 8005120:	400200a0 	.word	0x400200a0
 8005124:	400200b8 	.word	0x400200b8
 8005128:	40020410 	.word	0x40020410
 800512c:	40020428 	.word	0x40020428
 8005130:	40020440 	.word	0x40020440
 8005134:	40020458 	.word	0x40020458
 8005138:	40020470 	.word	0x40020470
 800513c:	40020488 	.word	0x40020488
 8005140:	400204a0 	.word	0x400204a0
 8005144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	2201      	movs	r2, #1
 8005158:	409a      	lsls	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a4f      	ldr	r2, [pc, #316]	; (80052a0 <HAL_DMA_Abort+0x5dc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d072      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a4d      	ldr	r2, [pc, #308]	; (80052a4 <HAL_DMA_Abort+0x5e0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d06d      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <HAL_DMA_Abort+0x5e4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d068      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a4a      	ldr	r2, [pc, #296]	; (80052ac <HAL_DMA_Abort+0x5e8>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d063      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a49      	ldr	r2, [pc, #292]	; (80052b0 <HAL_DMA_Abort+0x5ec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d05e      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a47      	ldr	r2, [pc, #284]	; (80052b4 <HAL_DMA_Abort+0x5f0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d059      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a46      	ldr	r2, [pc, #280]	; (80052b8 <HAL_DMA_Abort+0x5f4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d054      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a44      	ldr	r2, [pc, #272]	; (80052bc <HAL_DMA_Abort+0x5f8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d04f      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a43      	ldr	r2, [pc, #268]	; (80052c0 <HAL_DMA_Abort+0x5fc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d04a      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <HAL_DMA_Abort+0x600>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d045      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <HAL_DMA_Abort+0x604>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d040      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a3e      	ldr	r2, [pc, #248]	; (80052cc <HAL_DMA_Abort+0x608>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d03b      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <HAL_DMA_Abort+0x60c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d036      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3b      	ldr	r2, [pc, #236]	; (80052d4 <HAL_DMA_Abort+0x610>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d031      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3a      	ldr	r2, [pc, #232]	; (80052d8 <HAL_DMA_Abort+0x614>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d02c      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a38      	ldr	r2, [pc, #224]	; (80052dc <HAL_DMA_Abort+0x618>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d027      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a37      	ldr	r2, [pc, #220]	; (80052e0 <HAL_DMA_Abort+0x61c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d022      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	; (80052e4 <HAL_DMA_Abort+0x620>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d01d      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a34      	ldr	r2, [pc, #208]	; (80052e8 <HAL_DMA_Abort+0x624>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d018      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a32      	ldr	r2, [pc, #200]	; (80052ec <HAL_DMA_Abort+0x628>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a31      	ldr	r2, [pc, #196]	; (80052f0 <HAL_DMA_Abort+0x62c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <HAL_DMA_Abort+0x630>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a2e      	ldr	r2, [pc, #184]	; (80052f8 <HAL_DMA_Abort+0x634>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_DMA_Abort+0x58a>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <HAL_DMA_Abort+0x638>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d101      	bne.n	8005252 <HAL_DMA_Abort+0x58e>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <HAL_DMA_Abort+0x590>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005260:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00c      	beq.n	8005284 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005278:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005282:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40020010 	.word	0x40020010
 80052a4:	40020028 	.word	0x40020028
 80052a8:	40020040 	.word	0x40020040
 80052ac:	40020058 	.word	0x40020058
 80052b0:	40020070 	.word	0x40020070
 80052b4:	40020088 	.word	0x40020088
 80052b8:	400200a0 	.word	0x400200a0
 80052bc:	400200b8 	.word	0x400200b8
 80052c0:	40020410 	.word	0x40020410
 80052c4:	40020428 	.word	0x40020428
 80052c8:	40020440 	.word	0x40020440
 80052cc:	40020458 	.word	0x40020458
 80052d0:	40020470 	.word	0x40020470
 80052d4:	40020488 	.word	0x40020488
 80052d8:	400204a0 	.word	0x400204a0
 80052dc:	400204b8 	.word	0x400204b8
 80052e0:	58025408 	.word	0x58025408
 80052e4:	5802541c 	.word	0x5802541c
 80052e8:	58025430 	.word	0x58025430
 80052ec:	58025444 	.word	0x58025444
 80052f0:	58025458 	.word	0x58025458
 80052f4:	5802546c 	.word	0x5802546c
 80052f8:	58025480 	.word	0x58025480
 80052fc:	58025494 	.word	0x58025494

08005300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e237      	b.n	8005782 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d004      	beq.n	8005328 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2280      	movs	r2, #128	; 0x80
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e22c      	b.n	8005782 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a5c      	ldr	r2, [pc, #368]	; (80054a0 <HAL_DMA_Abort_IT+0x1a0>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d04a      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a5b      	ldr	r2, [pc, #364]	; (80054a4 <HAL_DMA_Abort_IT+0x1a4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d045      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a59      	ldr	r2, [pc, #356]	; (80054a8 <HAL_DMA_Abort_IT+0x1a8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d040      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a58      	ldr	r2, [pc, #352]	; (80054ac <HAL_DMA_Abort_IT+0x1ac>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d03b      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <HAL_DMA_Abort_IT+0x1b0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d036      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a55      	ldr	r2, [pc, #340]	; (80054b4 <HAL_DMA_Abort_IT+0x1b4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d031      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a53      	ldr	r2, [pc, #332]	; (80054b8 <HAL_DMA_Abort_IT+0x1b8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02c      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a52      	ldr	r2, [pc, #328]	; (80054bc <HAL_DMA_Abort_IT+0x1bc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d027      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a50      	ldr	r2, [pc, #320]	; (80054c0 <HAL_DMA_Abort_IT+0x1c0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d022      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a4f      	ldr	r2, [pc, #316]	; (80054c4 <HAL_DMA_Abort_IT+0x1c4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d01d      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a4d      	ldr	r2, [pc, #308]	; (80054c8 <HAL_DMA_Abort_IT+0x1c8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d018      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a4c      	ldr	r2, [pc, #304]	; (80054cc <HAL_DMA_Abort_IT+0x1cc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d013      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a4a      	ldr	r2, [pc, #296]	; (80054d0 <HAL_DMA_Abort_IT+0x1d0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00e      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a49      	ldr	r2, [pc, #292]	; (80054d4 <HAL_DMA_Abort_IT+0x1d4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d009      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a47      	ldr	r2, [pc, #284]	; (80054d8 <HAL_DMA_Abort_IT+0x1d8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d004      	beq.n	80053c8 <HAL_DMA_Abort_IT+0xc8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a46      	ldr	r2, [pc, #280]	; (80054dc <HAL_DMA_Abort_IT+0x1dc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <HAL_DMA_Abort_IT+0xcc>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_DMA_Abort_IT+0xce>
 80053cc:	2300      	movs	r3, #0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 8086 	beq.w	80054e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2204      	movs	r2, #4
 80053d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2f      	ldr	r2, [pc, #188]	; (80054a0 <HAL_DMA_Abort_IT+0x1a0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d04a      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2e      	ldr	r2, [pc, #184]	; (80054a4 <HAL_DMA_Abort_IT+0x1a4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d045      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <HAL_DMA_Abort_IT+0x1a8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d040      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <HAL_DMA_Abort_IT+0x1ac>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d03b      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a29      	ldr	r2, [pc, #164]	; (80054b0 <HAL_DMA_Abort_IT+0x1b0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d036      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a28      	ldr	r2, [pc, #160]	; (80054b4 <HAL_DMA_Abort_IT+0x1b4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d031      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a26      	ldr	r2, [pc, #152]	; (80054b8 <HAL_DMA_Abort_IT+0x1b8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02c      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a25      	ldr	r2, [pc, #148]	; (80054bc <HAL_DMA_Abort_IT+0x1bc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d027      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a23      	ldr	r2, [pc, #140]	; (80054c0 <HAL_DMA_Abort_IT+0x1c0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d022      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <HAL_DMA_Abort_IT+0x1c4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d01d      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <HAL_DMA_Abort_IT+0x1c8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d018      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_DMA_Abort_IT+0x1cc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_DMA_Abort_IT+0x1d0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_DMA_Abort_IT+0x1d4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <HAL_DMA_Abort_IT+0x1d8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_DMA_Abort_IT+0x17c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_DMA_Abort_IT+0x1dc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <HAL_DMA_Abort_IT+0x18e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0201 	bic.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e178      	b.n	8005780 <HAL_DMA_Abort_IT+0x480>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0201 	bic.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e16f      	b.n	8005780 <HAL_DMA_Abort_IT+0x480>
 80054a0:	40020010 	.word	0x40020010
 80054a4:	40020028 	.word	0x40020028
 80054a8:	40020040 	.word	0x40020040
 80054ac:	40020058 	.word	0x40020058
 80054b0:	40020070 	.word	0x40020070
 80054b4:	40020088 	.word	0x40020088
 80054b8:	400200a0 	.word	0x400200a0
 80054bc:	400200b8 	.word	0x400200b8
 80054c0:	40020410 	.word	0x40020410
 80054c4:	40020428 	.word	0x40020428
 80054c8:	40020440 	.word	0x40020440
 80054cc:	40020458 	.word	0x40020458
 80054d0:	40020470 	.word	0x40020470
 80054d4:	40020488 	.word	0x40020488
 80054d8:	400204a0 	.word	0x400204a0
 80054dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 020e 	bic.w	r2, r2, #14
 80054ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a6c      	ldr	r2, [pc, #432]	; (80056a8 <HAL_DMA_Abort_IT+0x3a8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d04a      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a6b      	ldr	r2, [pc, #428]	; (80056ac <HAL_DMA_Abort_IT+0x3ac>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d045      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a69      	ldr	r2, [pc, #420]	; (80056b0 <HAL_DMA_Abort_IT+0x3b0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d040      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a68      	ldr	r2, [pc, #416]	; (80056b4 <HAL_DMA_Abort_IT+0x3b4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d03b      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a66      	ldr	r2, [pc, #408]	; (80056b8 <HAL_DMA_Abort_IT+0x3b8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d036      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_DMA_Abort_IT+0x3bc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d031      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a63      	ldr	r2, [pc, #396]	; (80056c0 <HAL_DMA_Abort_IT+0x3c0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d02c      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a62      	ldr	r2, [pc, #392]	; (80056c4 <HAL_DMA_Abort_IT+0x3c4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d027      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a60      	ldr	r2, [pc, #384]	; (80056c8 <HAL_DMA_Abort_IT+0x3c8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d022      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a5f      	ldr	r2, [pc, #380]	; (80056cc <HAL_DMA_Abort_IT+0x3cc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d01d      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a5d      	ldr	r2, [pc, #372]	; (80056d0 <HAL_DMA_Abort_IT+0x3d0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d018      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a5c      	ldr	r2, [pc, #368]	; (80056d4 <HAL_DMA_Abort_IT+0x3d4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a5a      	ldr	r2, [pc, #360]	; (80056d8 <HAL_DMA_Abort_IT+0x3d8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00e      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a59      	ldr	r2, [pc, #356]	; (80056dc <HAL_DMA_Abort_IT+0x3dc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d009      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_DMA_Abort_IT+0x3e0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_DMA_Abort_IT+0x290>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a56      	ldr	r2, [pc, #344]	; (80056e4 <HAL_DMA_Abort_IT+0x3e4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d108      	bne.n	80055a2 <HAL_DMA_Abort_IT+0x2a2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e007      	b.n	80055b2 <HAL_DMA_Abort_IT+0x2b2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 0201 	bic.w	r2, r2, #1
 80055b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <HAL_DMA_Abort_IT+0x3a8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d072      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_DMA_Abort_IT+0x3ac>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d06d      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a39      	ldr	r2, [pc, #228]	; (80056b0 <HAL_DMA_Abort_IT+0x3b0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d068      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a37      	ldr	r2, [pc, #220]	; (80056b4 <HAL_DMA_Abort_IT+0x3b4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d063      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a36      	ldr	r2, [pc, #216]	; (80056b8 <HAL_DMA_Abort_IT+0x3b8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d05e      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a34      	ldr	r2, [pc, #208]	; (80056bc <HAL_DMA_Abort_IT+0x3bc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d059      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a33      	ldr	r2, [pc, #204]	; (80056c0 <HAL_DMA_Abort_IT+0x3c0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d054      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a31      	ldr	r2, [pc, #196]	; (80056c4 <HAL_DMA_Abort_IT+0x3c4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d04f      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a30      	ldr	r2, [pc, #192]	; (80056c8 <HAL_DMA_Abort_IT+0x3c8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d04a      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a2e      	ldr	r2, [pc, #184]	; (80056cc <HAL_DMA_Abort_IT+0x3cc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d045      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a2d      	ldr	r2, [pc, #180]	; (80056d0 <HAL_DMA_Abort_IT+0x3d0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d040      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <HAL_DMA_Abort_IT+0x3d4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d03b      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <HAL_DMA_Abort_IT+0x3d8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d036      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a28      	ldr	r2, [pc, #160]	; (80056dc <HAL_DMA_Abort_IT+0x3dc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d031      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a27      	ldr	r2, [pc, #156]	; (80056e0 <HAL_DMA_Abort_IT+0x3e0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d02c      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a25      	ldr	r2, [pc, #148]	; (80056e4 <HAL_DMA_Abort_IT+0x3e4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d027      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a24      	ldr	r2, [pc, #144]	; (80056e8 <HAL_DMA_Abort_IT+0x3e8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a22      	ldr	r2, [pc, #136]	; (80056ec <HAL_DMA_Abort_IT+0x3ec>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01d      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <HAL_DMA_Abort_IT+0x3f0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1f      	ldr	r2, [pc, #124]	; (80056f4 <HAL_DMA_Abort_IT+0x3f4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1e      	ldr	r2, [pc, #120]	; (80056f8 <HAL_DMA_Abort_IT+0x3f8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1c      	ldr	r2, [pc, #112]	; (80056fc <HAL_DMA_Abort_IT+0x3fc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1b      	ldr	r2, [pc, #108]	; (8005700 <HAL_DMA_Abort_IT+0x400>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_DMA_Abort_IT+0x3a2>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a19      	ldr	r2, [pc, #100]	; (8005704 <HAL_DMA_Abort_IT+0x404>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d132      	bne.n	8005708 <HAL_DMA_Abort_IT+0x408>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e031      	b.n	800570a <HAL_DMA_Abort_IT+0x40a>
 80056a6:	bf00      	nop
 80056a8:	40020010 	.word	0x40020010
 80056ac:	40020028 	.word	0x40020028
 80056b0:	40020040 	.word	0x40020040
 80056b4:	40020058 	.word	0x40020058
 80056b8:	40020070 	.word	0x40020070
 80056bc:	40020088 	.word	0x40020088
 80056c0:	400200a0 	.word	0x400200a0
 80056c4:	400200b8 	.word	0x400200b8
 80056c8:	40020410 	.word	0x40020410
 80056cc:	40020428 	.word	0x40020428
 80056d0:	40020440 	.word	0x40020440
 80056d4:	40020458 	.word	0x40020458
 80056d8:	40020470 	.word	0x40020470
 80056dc:	40020488 	.word	0x40020488
 80056e0:	400204a0 	.word	0x400204a0
 80056e4:	400204b8 	.word	0x400204b8
 80056e8:	58025408 	.word	0x58025408
 80056ec:	5802541c 	.word	0x5802541c
 80056f0:	58025430 	.word	0x58025430
 80056f4:	58025444 	.word	0x58025444
 80056f8:	58025458 	.word	0x58025458
 80056fc:	5802546c 	.word	0x5802546c
 8005700:	58025480 	.word	0x58025480
 8005704:	58025494 	.word	0x58025494
 8005708:	2300      	movs	r3, #0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d028      	beq.n	8005760 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800571c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2201      	movs	r2, #1
 800572e:	409a      	lsls	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800573c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00c      	beq.n	8005760 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005754:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800575e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop

0800578c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005798:	4b67      	ldr	r3, [pc, #412]	; (8005938 <HAL_DMA_IRQHandler+0x1ac>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a67      	ldr	r2, [pc, #412]	; (800593c <HAL_DMA_IRQHandler+0x1b0>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	0a9b      	lsrs	r3, r3, #10
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a5f      	ldr	r2, [pc, #380]	; (8005940 <HAL_DMA_IRQHandler+0x1b4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d04a      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a5d      	ldr	r2, [pc, #372]	; (8005944 <HAL_DMA_IRQHandler+0x1b8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d045      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a5c      	ldr	r2, [pc, #368]	; (8005948 <HAL_DMA_IRQHandler+0x1bc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d040      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a5a      	ldr	r2, [pc, #360]	; (800594c <HAL_DMA_IRQHandler+0x1c0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d03b      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a59      	ldr	r2, [pc, #356]	; (8005950 <HAL_DMA_IRQHandler+0x1c4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d036      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a57      	ldr	r2, [pc, #348]	; (8005954 <HAL_DMA_IRQHandler+0x1c8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d031      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a56      	ldr	r2, [pc, #344]	; (8005958 <HAL_DMA_IRQHandler+0x1cc>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d02c      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a54      	ldr	r2, [pc, #336]	; (800595c <HAL_DMA_IRQHandler+0x1d0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d027      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a53      	ldr	r2, [pc, #332]	; (8005960 <HAL_DMA_IRQHandler+0x1d4>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d022      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a51      	ldr	r2, [pc, #324]	; (8005964 <HAL_DMA_IRQHandler+0x1d8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01d      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a50      	ldr	r2, [pc, #320]	; (8005968 <HAL_DMA_IRQHandler+0x1dc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d018      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a4e      	ldr	r2, [pc, #312]	; (800596c <HAL_DMA_IRQHandler+0x1e0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a4d      	ldr	r2, [pc, #308]	; (8005970 <HAL_DMA_IRQHandler+0x1e4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a4b      	ldr	r2, [pc, #300]	; (8005974 <HAL_DMA_IRQHandler+0x1e8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a4a      	ldr	r2, [pc, #296]	; (8005978 <HAL_DMA_IRQHandler+0x1ec>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_DMA_IRQHandler+0xd2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a48      	ldr	r2, [pc, #288]	; (800597c <HAL_DMA_IRQHandler+0x1f0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d101      	bne.n	8005862 <HAL_DMA_IRQHandler+0xd6>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_DMA_IRQHandler+0xd8>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 842b 	beq.w	80060c0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2208      	movs	r2, #8
 8005874:	409a      	lsls	r2, r3
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 80a2 	beq.w	80059c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a2e      	ldr	r2, [pc, #184]	; (8005940 <HAL_DMA_IRQHandler+0x1b4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04a      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a2d      	ldr	r2, [pc, #180]	; (8005944 <HAL_DMA_IRQHandler+0x1b8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d045      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2b      	ldr	r2, [pc, #172]	; (8005948 <HAL_DMA_IRQHandler+0x1bc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d040      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2a      	ldr	r2, [pc, #168]	; (800594c <HAL_DMA_IRQHandler+0x1c0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d03b      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a28      	ldr	r2, [pc, #160]	; (8005950 <HAL_DMA_IRQHandler+0x1c4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d036      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a27      	ldr	r2, [pc, #156]	; (8005954 <HAL_DMA_IRQHandler+0x1c8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d031      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a25      	ldr	r2, [pc, #148]	; (8005958 <HAL_DMA_IRQHandler+0x1cc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02c      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a24      	ldr	r2, [pc, #144]	; (800595c <HAL_DMA_IRQHandler+0x1d0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d027      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a22      	ldr	r2, [pc, #136]	; (8005960 <HAL_DMA_IRQHandler+0x1d4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a21      	ldr	r2, [pc, #132]	; (8005964 <HAL_DMA_IRQHandler+0x1d8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d01d      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a1f      	ldr	r2, [pc, #124]	; (8005968 <HAL_DMA_IRQHandler+0x1dc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1e      	ldr	r2, [pc, #120]	; (800596c <HAL_DMA_IRQHandler+0x1e0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <HAL_DMA_IRQHandler+0x1e4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1b      	ldr	r2, [pc, #108]	; (8005974 <HAL_DMA_IRQHandler+0x1e8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <HAL_DMA_IRQHandler+0x1ec>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_DMA_IRQHandler+0x194>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_DMA_IRQHandler+0x1f0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d12f      	bne.n	8005980 <HAL_DMA_IRQHandler+0x1f4>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	bf14      	ite	ne
 800592e:	2301      	movne	r3, #1
 8005930:	2300      	moveq	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	e02e      	b.n	8005994 <HAL_DMA_IRQHandler+0x208>
 8005936:	bf00      	nop
 8005938:	2400030c 	.word	0x2400030c
 800593c:	1b4e81b5 	.word	0x1b4e81b5
 8005940:	40020010 	.word	0x40020010
 8005944:	40020028 	.word	0x40020028
 8005948:	40020040 	.word	0x40020040
 800594c:	40020058 	.word	0x40020058
 8005950:	40020070 	.word	0x40020070
 8005954:	40020088 	.word	0x40020088
 8005958:	400200a0 	.word	0x400200a0
 800595c:	400200b8 	.word	0x400200b8
 8005960:	40020410 	.word	0x40020410
 8005964:	40020428 	.word	0x40020428
 8005968:	40020440 	.word	0x40020440
 800596c:	40020458 	.word	0x40020458
 8005970:	40020470 	.word	0x40020470
 8005974:	40020488 	.word	0x40020488
 8005978:	400204a0 	.word	0x400204a0
 800597c:	400204b8 	.word	0x400204b8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	bf14      	ite	ne
 800598e:	2301      	movne	r3, #1
 8005990:	2300      	moveq	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d015      	beq.n	80059c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0204 	bic.w	r2, r2, #4
 80059a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	2208      	movs	r2, #8
 80059b2:	409a      	lsls	r2, r3
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059bc:	f043 0201 	orr.w	r2, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d06e      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a69      	ldr	r2, [pc, #420]	; (8005b84 <HAL_DMA_IRQHandler+0x3f8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d04a      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a67      	ldr	r2, [pc, #412]	; (8005b88 <HAL_DMA_IRQHandler+0x3fc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d045      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a66      	ldr	r2, [pc, #408]	; (8005b8c <HAL_DMA_IRQHandler+0x400>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d040      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a64      	ldr	r2, [pc, #400]	; (8005b90 <HAL_DMA_IRQHandler+0x404>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d03b      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a63      	ldr	r2, [pc, #396]	; (8005b94 <HAL_DMA_IRQHandler+0x408>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d036      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a61      	ldr	r2, [pc, #388]	; (8005b98 <HAL_DMA_IRQHandler+0x40c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d031      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a60      	ldr	r2, [pc, #384]	; (8005b9c <HAL_DMA_IRQHandler+0x410>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d02c      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a5e      	ldr	r2, [pc, #376]	; (8005ba0 <HAL_DMA_IRQHandler+0x414>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d027      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a5d      	ldr	r2, [pc, #372]	; (8005ba4 <HAL_DMA_IRQHandler+0x418>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d022      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a5b      	ldr	r2, [pc, #364]	; (8005ba8 <HAL_DMA_IRQHandler+0x41c>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d01d      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a5a      	ldr	r2, [pc, #360]	; (8005bac <HAL_DMA_IRQHandler+0x420>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d018      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a58      	ldr	r2, [pc, #352]	; (8005bb0 <HAL_DMA_IRQHandler+0x424>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a57      	ldr	r2, [pc, #348]	; (8005bb4 <HAL_DMA_IRQHandler+0x428>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a55      	ldr	r2, [pc, #340]	; (8005bb8 <HAL_DMA_IRQHandler+0x42c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a54      	ldr	r2, [pc, #336]	; (8005bbc <HAL_DMA_IRQHandler+0x430>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_DMA_IRQHandler+0x2ee>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a52      	ldr	r2, [pc, #328]	; (8005bc0 <HAL_DMA_IRQHandler+0x434>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10a      	bne.n	8005a90 <HAL_DMA_IRQHandler+0x304>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	e003      	b.n	8005a98 <HAL_DMA_IRQHandler+0x30c>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00d      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab0:	f043 0202 	orr.w	r2, r3, #2
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	409a      	lsls	r2, r3
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 808f 	beq.w	8005bec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a2c      	ldr	r2, [pc, #176]	; (8005b84 <HAL_DMA_IRQHandler+0x3f8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d04a      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a2a      	ldr	r2, [pc, #168]	; (8005b88 <HAL_DMA_IRQHandler+0x3fc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d045      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a29      	ldr	r2, [pc, #164]	; (8005b8c <HAL_DMA_IRQHandler+0x400>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d040      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <HAL_DMA_IRQHandler+0x404>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d03b      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <HAL_DMA_IRQHandler+0x408>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d036      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <HAL_DMA_IRQHandler+0x40c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d031      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <HAL_DMA_IRQHandler+0x410>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d02c      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a21      	ldr	r2, [pc, #132]	; (8005ba0 <HAL_DMA_IRQHandler+0x414>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d027      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <HAL_DMA_IRQHandler+0x418>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d022      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ba8 <HAL_DMA_IRQHandler+0x41c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01d      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <HAL_DMA_IRQHandler+0x420>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d018      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <HAL_DMA_IRQHandler+0x424>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <HAL_DMA_IRQHandler+0x428>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00e      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a18      	ldr	r2, [pc, #96]	; (8005bb8 <HAL_DMA_IRQHandler+0x42c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <HAL_DMA_IRQHandler+0x430>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <HAL_DMA_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <HAL_DMA_IRQHandler+0x434>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d12a      	bne.n	8005bc4 <HAL_DMA_IRQHandler+0x438>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0302 	and.w	r3, r3, #2
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e023      	b.n	8005bcc <HAL_DMA_IRQHandler+0x440>
 8005b84:	40020010 	.word	0x40020010
 8005b88:	40020028 	.word	0x40020028
 8005b8c:	40020040 	.word	0x40020040
 8005b90:	40020058 	.word	0x40020058
 8005b94:	40020070 	.word	0x40020070
 8005b98:	40020088 	.word	0x40020088
 8005b9c:	400200a0 	.word	0x400200a0
 8005ba0:	400200b8 	.word	0x400200b8
 8005ba4:	40020410 	.word	0x40020410
 8005ba8:	40020428 	.word	0x40020428
 8005bac:	40020440 	.word	0x40020440
 8005bb0:	40020458 	.word	0x40020458
 8005bb4:	40020470 	.word	0x40020470
 8005bb8:	40020488 	.word	0x40020488
 8005bbc:	400204a0 	.word	0x400204a0
 8005bc0:	400204b8 	.word	0x400204b8
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00d      	beq.n	8005bec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	2204      	movs	r2, #4
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	f043 0204 	orr.w	r2, r3, #4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80a6 	beq.w	8005d4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a85      	ldr	r2, [pc, #532]	; (8005e1c <HAL_DMA_IRQHandler+0x690>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d04a      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a83      	ldr	r2, [pc, #524]	; (8005e20 <HAL_DMA_IRQHandler+0x694>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d045      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a82      	ldr	r2, [pc, #520]	; (8005e24 <HAL_DMA_IRQHandler+0x698>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d040      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a80      	ldr	r2, [pc, #512]	; (8005e28 <HAL_DMA_IRQHandler+0x69c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d03b      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a7f      	ldr	r2, [pc, #508]	; (8005e2c <HAL_DMA_IRQHandler+0x6a0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d036      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a7d      	ldr	r2, [pc, #500]	; (8005e30 <HAL_DMA_IRQHandler+0x6a4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d031      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7c      	ldr	r2, [pc, #496]	; (8005e34 <HAL_DMA_IRQHandler+0x6a8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d02c      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a7a      	ldr	r2, [pc, #488]	; (8005e38 <HAL_DMA_IRQHandler+0x6ac>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d027      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a79      	ldr	r2, [pc, #484]	; (8005e3c <HAL_DMA_IRQHandler+0x6b0>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a77      	ldr	r2, [pc, #476]	; (8005e40 <HAL_DMA_IRQHandler+0x6b4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a76      	ldr	r2, [pc, #472]	; (8005e44 <HAL_DMA_IRQHandler+0x6b8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a74      	ldr	r2, [pc, #464]	; (8005e48 <HAL_DMA_IRQHandler+0x6bc>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a73      	ldr	r2, [pc, #460]	; (8005e4c <HAL_DMA_IRQHandler+0x6c0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a71      	ldr	r2, [pc, #452]	; (8005e50 <HAL_DMA_IRQHandler+0x6c4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a70      	ldr	r2, [pc, #448]	; (8005e54 <HAL_DMA_IRQHandler+0x6c8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x516>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a6e      	ldr	r2, [pc, #440]	; (8005e58 <HAL_DMA_IRQHandler+0x6cc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_DMA_IRQHandler+0x52c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bf14      	ite	ne
 8005cb0:	2301      	movne	r3, #1
 8005cb2:	2300      	moveq	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e009      	b.n	8005ccc <HAL_DMA_IRQHandler+0x540>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03e      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	2210      	movs	r2, #16
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d018      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d108      	bne.n	8005d0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d024      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	4798      	blx	r3
 8005d0c:	e01f      	b.n	8005d4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01b      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	e016      	b.n	8005d4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0208 	bic.w	r2, r2, #8
 8005d3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2220      	movs	r2, #32
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8110 	beq.w	8005f84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <HAL_DMA_IRQHandler+0x690>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d04a      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a2b      	ldr	r2, [pc, #172]	; (8005e20 <HAL_DMA_IRQHandler+0x694>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d045      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a29      	ldr	r2, [pc, #164]	; (8005e24 <HAL_DMA_IRQHandler+0x698>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d040      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a28      	ldr	r2, [pc, #160]	; (8005e28 <HAL_DMA_IRQHandler+0x69c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d03b      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a26      	ldr	r2, [pc, #152]	; (8005e2c <HAL_DMA_IRQHandler+0x6a0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d036      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <HAL_DMA_IRQHandler+0x6a4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d031      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a23      	ldr	r2, [pc, #140]	; (8005e34 <HAL_DMA_IRQHandler+0x6a8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d02c      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_DMA_IRQHandler+0x6ac>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d027      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <HAL_DMA_IRQHandler+0x6b0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d022      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <HAL_DMA_IRQHandler+0x6b4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d01d      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <HAL_DMA_IRQHandler+0x6b8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d018      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1c      	ldr	r2, [pc, #112]	; (8005e48 <HAL_DMA_IRQHandler+0x6bc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <HAL_DMA_IRQHandler+0x6c0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00e      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <HAL_DMA_IRQHandler+0x6c4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <HAL_DMA_IRQHandler+0x6c8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x678>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <HAL_DMA_IRQHandler+0x6cc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d12b      	bne.n	8005e5c <HAL_DMA_IRQHandler+0x6d0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0310 	and.w	r3, r3, #16
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	e02a      	b.n	8005e70 <HAL_DMA_IRQHandler+0x6e4>
 8005e1a:	bf00      	nop
 8005e1c:	40020010 	.word	0x40020010
 8005e20:	40020028 	.word	0x40020028
 8005e24:	40020040 	.word	0x40020040
 8005e28:	40020058 	.word	0x40020058
 8005e2c:	40020070 	.word	0x40020070
 8005e30:	40020088 	.word	0x40020088
 8005e34:	400200a0 	.word	0x400200a0
 8005e38:	400200b8 	.word	0x400200b8
 8005e3c:	40020410 	.word	0x40020410
 8005e40:	40020428 	.word	0x40020428
 8005e44:	40020440 	.word	0x40020440
 8005e48:	40020458 	.word	0x40020458
 8005e4c:	40020470 	.word	0x40020470
 8005e50:	40020488 	.word	0x40020488
 8005e54:	400204a0 	.word	0x400204a0
 8005e58:	400204b8 	.word	0x400204b8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bf14      	ite	ne
 8005e6a:	2301      	movne	r3, #1
 8005e6c:	2300      	moveq	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8087 	beq.w	8005f84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2220      	movs	r2, #32
 8005e80:	409a      	lsls	r2, r3
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d139      	bne.n	8005f06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0216 	bic.w	r2, r2, #22
 8005ea0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695a      	ldr	r2, [r3, #20]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d103      	bne.n	8005ec2 <HAL_DMA_IRQHandler+0x736>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d007      	beq.n	8005ed2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0208 	bic.w	r2, r2, #8
 8005ed0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	223f      	movs	r2, #63	; 0x3f
 8005edc:	409a      	lsls	r2, r3
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 834a 	beq.w	8006590 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	4798      	blx	r3
          }
          return;
 8005f04:	e344      	b.n	8006590 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d018      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d108      	bne.n	8005f34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d02c      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
 8005f32:	e027      	b.n	8005f84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d023      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
 8005f44:	e01e      	b.n	8005f84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10f      	bne.n	8005f74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0210 	bic.w	r2, r2, #16
 8005f62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8306 	beq.w	800659a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 8088 	beq.w	80060ac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a7a      	ldr	r2, [pc, #488]	; (8006194 <HAL_DMA_IRQHandler+0xa08>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d04a      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a79      	ldr	r2, [pc, #484]	; (8006198 <HAL_DMA_IRQHandler+0xa0c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d045      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a77      	ldr	r2, [pc, #476]	; (800619c <HAL_DMA_IRQHandler+0xa10>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d040      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a76      	ldr	r2, [pc, #472]	; (80061a0 <HAL_DMA_IRQHandler+0xa14>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d03b      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a74      	ldr	r2, [pc, #464]	; (80061a4 <HAL_DMA_IRQHandler+0xa18>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d036      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a73      	ldr	r2, [pc, #460]	; (80061a8 <HAL_DMA_IRQHandler+0xa1c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d031      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a71      	ldr	r2, [pc, #452]	; (80061ac <HAL_DMA_IRQHandler+0xa20>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d02c      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a70      	ldr	r2, [pc, #448]	; (80061b0 <HAL_DMA_IRQHandler+0xa24>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d027      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a6e      	ldr	r2, [pc, #440]	; (80061b4 <HAL_DMA_IRQHandler+0xa28>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d022      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6d      	ldr	r2, [pc, #436]	; (80061b8 <HAL_DMA_IRQHandler+0xa2c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d01d      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a6b      	ldr	r2, [pc, #428]	; (80061bc <HAL_DMA_IRQHandler+0xa30>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d018      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a6a      	ldr	r2, [pc, #424]	; (80061c0 <HAL_DMA_IRQHandler+0xa34>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d013      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a68      	ldr	r2, [pc, #416]	; (80061c4 <HAL_DMA_IRQHandler+0xa38>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00e      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a67      	ldr	r2, [pc, #412]	; (80061c8 <HAL_DMA_IRQHandler+0xa3c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d009      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a65      	ldr	r2, [pc, #404]	; (80061cc <HAL_DMA_IRQHandler+0xa40>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_DMA_IRQHandler+0x8b8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a64      	ldr	r2, [pc, #400]	; (80061d0 <HAL_DMA_IRQHandler+0xa44>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d108      	bne.n	8006056 <HAL_DMA_IRQHandler+0x8ca>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0201 	bic.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	e007      	b.n	8006066 <HAL_DMA_IRQHandler+0x8da>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0201 	bic.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606e:	429a      	cmp	r2, r3
 8006070:	d307      	bcc.n	8006082 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1f2      	bne.n	8006066 <HAL_DMA_IRQHandler+0x8da>
 8006080:	e000      	b.n	8006084 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006082:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d004      	beq.n	800609c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2203      	movs	r2, #3
 8006096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800609a:	e003      	b.n	80060a4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 8272 	beq.w	800659a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
 80060be:	e26c      	b.n	800659a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a43      	ldr	r2, [pc, #268]	; (80061d4 <HAL_DMA_IRQHandler+0xa48>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d022      	beq.n	8006110 <HAL_DMA_IRQHandler+0x984>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a42      	ldr	r2, [pc, #264]	; (80061d8 <HAL_DMA_IRQHandler+0xa4c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d01d      	beq.n	8006110 <HAL_DMA_IRQHandler+0x984>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a40      	ldr	r2, [pc, #256]	; (80061dc <HAL_DMA_IRQHandler+0xa50>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d018      	beq.n	8006110 <HAL_DMA_IRQHandler+0x984>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a3f      	ldr	r2, [pc, #252]	; (80061e0 <HAL_DMA_IRQHandler+0xa54>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <HAL_DMA_IRQHandler+0x984>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a3d      	ldr	r2, [pc, #244]	; (80061e4 <HAL_DMA_IRQHandler+0xa58>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00e      	beq.n	8006110 <HAL_DMA_IRQHandler+0x984>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a3c      	ldr	r2, [pc, #240]	; (80061e8 <HAL_DMA_IRQHandler+0xa5c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d009      	beq.n	8006110 <HAL_DMA_IRQHandler+0x984>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a3a      	ldr	r2, [pc, #232]	; (80061ec <HAL_DMA_IRQHandler+0xa60>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d004      	beq.n	8006110 <HAL_DMA_IRQHandler+0x984>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a39      	ldr	r2, [pc, #228]	; (80061f0 <HAL_DMA_IRQHandler+0xa64>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d101      	bne.n	8006114 <HAL_DMA_IRQHandler+0x988>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <HAL_DMA_IRQHandler+0x98a>
 8006114:	2300      	movs	r3, #0
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 823f 	beq.w	800659a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	2204      	movs	r2, #4
 800612e:	409a      	lsls	r2, r3
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 80cd 	beq.w	80062d4 <HAL_DMA_IRQHandler+0xb48>
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80c7 	beq.w	80062d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	2204      	movs	r2, #4
 8006150:	409a      	lsls	r2, r3
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d049      	beq.n	80061f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8210 	beq.w	8006594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800617c:	e20a      	b.n	8006594 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8206 	beq.w	8006594 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006190:	e200      	b.n	8006594 <HAL_DMA_IRQHandler+0xe08>
 8006192:	bf00      	nop
 8006194:	40020010 	.word	0x40020010
 8006198:	40020028 	.word	0x40020028
 800619c:	40020040 	.word	0x40020040
 80061a0:	40020058 	.word	0x40020058
 80061a4:	40020070 	.word	0x40020070
 80061a8:	40020088 	.word	0x40020088
 80061ac:	400200a0 	.word	0x400200a0
 80061b0:	400200b8 	.word	0x400200b8
 80061b4:	40020410 	.word	0x40020410
 80061b8:	40020428 	.word	0x40020428
 80061bc:	40020440 	.word	0x40020440
 80061c0:	40020458 	.word	0x40020458
 80061c4:	40020470 	.word	0x40020470
 80061c8:	40020488 	.word	0x40020488
 80061cc:	400204a0 	.word	0x400204a0
 80061d0:	400204b8 	.word	0x400204b8
 80061d4:	58025408 	.word	0x58025408
 80061d8:	5802541c 	.word	0x5802541c
 80061dc:	58025430 	.word	0x58025430
 80061e0:	58025444 	.word	0x58025444
 80061e4:	58025458 	.word	0x58025458
 80061e8:	5802546c 	.word	0x5802546c
 80061ec:	58025480 	.word	0x58025480
 80061f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d160      	bne.n	80062c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a7f      	ldr	r2, [pc, #508]	; (8006400 <HAL_DMA_IRQHandler+0xc74>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d04a      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a7d      	ldr	r2, [pc, #500]	; (8006404 <HAL_DMA_IRQHandler+0xc78>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d045      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a7c      	ldr	r2, [pc, #496]	; (8006408 <HAL_DMA_IRQHandler+0xc7c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d040      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a7a      	ldr	r2, [pc, #488]	; (800640c <HAL_DMA_IRQHandler+0xc80>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d03b      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a79      	ldr	r2, [pc, #484]	; (8006410 <HAL_DMA_IRQHandler+0xc84>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d036      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a77      	ldr	r2, [pc, #476]	; (8006414 <HAL_DMA_IRQHandler+0xc88>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d031      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a76      	ldr	r2, [pc, #472]	; (8006418 <HAL_DMA_IRQHandler+0xc8c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d02c      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a74      	ldr	r2, [pc, #464]	; (800641c <HAL_DMA_IRQHandler+0xc90>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d027      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a73      	ldr	r2, [pc, #460]	; (8006420 <HAL_DMA_IRQHandler+0xc94>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a71      	ldr	r2, [pc, #452]	; (8006424 <HAL_DMA_IRQHandler+0xc98>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01d      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a70      	ldr	r2, [pc, #448]	; (8006428 <HAL_DMA_IRQHandler+0xc9c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a6e      	ldr	r2, [pc, #440]	; (800642c <HAL_DMA_IRQHandler+0xca0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a6d      	ldr	r2, [pc, #436]	; (8006430 <HAL_DMA_IRQHandler+0xca4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a6b      	ldr	r2, [pc, #428]	; (8006434 <HAL_DMA_IRQHandler+0xca8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6a      	ldr	r2, [pc, #424]	; (8006438 <HAL_DMA_IRQHandler+0xcac>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_DMA_IRQHandler+0xb12>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a68      	ldr	r2, [pc, #416]	; (800643c <HAL_DMA_IRQHandler+0xcb0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <HAL_DMA_IRQHandler+0xb24>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0208 	bic.w	r2, r2, #8
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e007      	b.n	80062c0 <HAL_DMA_IRQHandler+0xb34>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0204 	bic.w	r2, r2, #4
 80062be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8165 	beq.w	8006594 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062d2:	e15f      	b.n	8006594 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2202      	movs	r2, #2
 80062de:	409a      	lsls	r2, r3
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80c5 	beq.w	8006474 <HAL_DMA_IRQHandler+0xce8>
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80bf 	beq.w	8006474 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fa:	f003 031f 	and.w	r3, r3, #31
 80062fe:	2202      	movs	r2, #2
 8006300:	409a      	lsls	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d018      	beq.n	8006342 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 813a 	beq.w	8006598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800632c:	e134      	b.n	8006598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8130 	beq.w	8006598 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006340:	e12a      	b.n	8006598 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	f040 8089 	bne.w	8006460 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a2b      	ldr	r2, [pc, #172]	; (8006400 <HAL_DMA_IRQHandler+0xc74>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d04a      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a29      	ldr	r2, [pc, #164]	; (8006404 <HAL_DMA_IRQHandler+0xc78>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d045      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a28      	ldr	r2, [pc, #160]	; (8006408 <HAL_DMA_IRQHandler+0xc7c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d040      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a26      	ldr	r2, [pc, #152]	; (800640c <HAL_DMA_IRQHandler+0xc80>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d03b      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a25      	ldr	r2, [pc, #148]	; (8006410 <HAL_DMA_IRQHandler+0xc84>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d036      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a23      	ldr	r2, [pc, #140]	; (8006414 <HAL_DMA_IRQHandler+0xc88>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d031      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a22      	ldr	r2, [pc, #136]	; (8006418 <HAL_DMA_IRQHandler+0xc8c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d02c      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a20      	ldr	r2, [pc, #128]	; (800641c <HAL_DMA_IRQHandler+0xc90>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d027      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1f      	ldr	r2, [pc, #124]	; (8006420 <HAL_DMA_IRQHandler+0xc94>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d022      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <HAL_DMA_IRQHandler+0xc98>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01d      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <HAL_DMA_IRQHandler+0xc9c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d018      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1a      	ldr	r2, [pc, #104]	; (800642c <HAL_DMA_IRQHandler+0xca0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a19      	ldr	r2, [pc, #100]	; (8006430 <HAL_DMA_IRQHandler+0xca4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00e      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a17      	ldr	r2, [pc, #92]	; (8006434 <HAL_DMA_IRQHandler+0xca8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d009      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a16      	ldr	r2, [pc, #88]	; (8006438 <HAL_DMA_IRQHandler+0xcac>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d004      	beq.n	80063ee <HAL_DMA_IRQHandler+0xc62>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a14      	ldr	r2, [pc, #80]	; (800643c <HAL_DMA_IRQHandler+0xcb0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d128      	bne.n	8006440 <HAL_DMA_IRQHandler+0xcb4>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0214 	bic.w	r2, r2, #20
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e027      	b.n	8006450 <HAL_DMA_IRQHandler+0xcc4>
 8006400:	40020010 	.word	0x40020010
 8006404:	40020028 	.word	0x40020028
 8006408:	40020040 	.word	0x40020040
 800640c:	40020058 	.word	0x40020058
 8006410:	40020070 	.word	0x40020070
 8006414:	40020088 	.word	0x40020088
 8006418:	400200a0 	.word	0x400200a0
 800641c:	400200b8 	.word	0x400200b8
 8006420:	40020410 	.word	0x40020410
 8006424:	40020428 	.word	0x40020428
 8006428:	40020440 	.word	0x40020440
 800642c:	40020458 	.word	0x40020458
 8006430:	40020470 	.word	0x40020470
 8006434:	40020488 	.word	0x40020488
 8006438:	400204a0 	.word	0x400204a0
 800643c:	400204b8 	.word	0x400204b8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 020a 	bic.w	r2, r2, #10
 800644e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8097 	beq.w	8006598 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006472:	e091      	b.n	8006598 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2208      	movs	r2, #8
 800647e:	409a      	lsls	r2, r3
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	4013      	ands	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8088 	beq.w	800659a <HAL_DMA_IRQHandler+0xe0e>
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f003 0308 	and.w	r3, r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 8082 	beq.w	800659a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a41      	ldr	r2, [pc, #260]	; (80065a0 <HAL_DMA_IRQHandler+0xe14>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d04a      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a3f      	ldr	r2, [pc, #252]	; (80065a4 <HAL_DMA_IRQHandler+0xe18>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d045      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a3e      	ldr	r2, [pc, #248]	; (80065a8 <HAL_DMA_IRQHandler+0xe1c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d040      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a3c      	ldr	r2, [pc, #240]	; (80065ac <HAL_DMA_IRQHandler+0xe20>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d03b      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3b      	ldr	r2, [pc, #236]	; (80065b0 <HAL_DMA_IRQHandler+0xe24>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d036      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a39      	ldr	r2, [pc, #228]	; (80065b4 <HAL_DMA_IRQHandler+0xe28>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d031      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a38      	ldr	r2, [pc, #224]	; (80065b8 <HAL_DMA_IRQHandler+0xe2c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d02c      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a36      	ldr	r2, [pc, #216]	; (80065bc <HAL_DMA_IRQHandler+0xe30>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d027      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a35      	ldr	r2, [pc, #212]	; (80065c0 <HAL_DMA_IRQHandler+0xe34>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d022      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a33      	ldr	r2, [pc, #204]	; (80065c4 <HAL_DMA_IRQHandler+0xe38>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d01d      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a32      	ldr	r2, [pc, #200]	; (80065c8 <HAL_DMA_IRQHandler+0xe3c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d018      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a30      	ldr	r2, [pc, #192]	; (80065cc <HAL_DMA_IRQHandler+0xe40>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a2f      	ldr	r2, [pc, #188]	; (80065d0 <HAL_DMA_IRQHandler+0xe44>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00e      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a2d      	ldr	r2, [pc, #180]	; (80065d4 <HAL_DMA_IRQHandler+0xe48>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d009      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <HAL_DMA_IRQHandler+0xe4c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d004      	beq.n	8006536 <HAL_DMA_IRQHandler+0xdaa>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2a      	ldr	r2, [pc, #168]	; (80065dc <HAL_DMA_IRQHandler+0xe50>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d108      	bne.n	8006548 <HAL_DMA_IRQHandler+0xdbc>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 021c 	bic.w	r2, r2, #28
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e007      	b.n	8006558 <HAL_DMA_IRQHandler+0xdcc>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 020e 	bic.w	r2, r2, #14
 8006556:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655c:	f003 031f 	and.w	r3, r3, #31
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	e004      	b.n	800659a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006590:	bf00      	nop
 8006592:	e002      	b.n	800659a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006598:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800659a:	3728      	adds	r7, #40	; 0x28
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40020010 	.word	0x40020010
 80065a4:	40020028 	.word	0x40020028
 80065a8:	40020040 	.word	0x40020040
 80065ac:	40020058 	.word	0x40020058
 80065b0:	40020070 	.word	0x40020070
 80065b4:	40020088 	.word	0x40020088
 80065b8:	400200a0 	.word	0x400200a0
 80065bc:	400200b8 	.word	0x400200b8
 80065c0:	40020410 	.word	0x40020410
 80065c4:	40020428 	.word	0x40020428
 80065c8:	40020440 	.word	0x40020440
 80065cc:	40020458 	.word	0x40020458
 80065d0:	40020470 	.word	0x40020470
 80065d4:	40020488 	.word	0x40020488
 80065d8:	400204a0 	.word	0x400204a0
 80065dc:	400204b8 	.word	0x400204b8

080065e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a42      	ldr	r2, [pc, #264]	; (80066f8 <DMA_CalcBaseAndBitshift+0x118>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d04a      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a41      	ldr	r2, [pc, #260]	; (80066fc <DMA_CalcBaseAndBitshift+0x11c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d045      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a3f      	ldr	r2, [pc, #252]	; (8006700 <DMA_CalcBaseAndBitshift+0x120>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d040      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a3e      	ldr	r2, [pc, #248]	; (8006704 <DMA_CalcBaseAndBitshift+0x124>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d03b      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a3c      	ldr	r2, [pc, #240]	; (8006708 <DMA_CalcBaseAndBitshift+0x128>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d036      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a3b      	ldr	r2, [pc, #236]	; (800670c <DMA_CalcBaseAndBitshift+0x12c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d031      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a39      	ldr	r2, [pc, #228]	; (8006710 <DMA_CalcBaseAndBitshift+0x130>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d02c      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a38      	ldr	r2, [pc, #224]	; (8006714 <DMA_CalcBaseAndBitshift+0x134>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d027      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a36      	ldr	r2, [pc, #216]	; (8006718 <DMA_CalcBaseAndBitshift+0x138>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a35      	ldr	r2, [pc, #212]	; (800671c <DMA_CalcBaseAndBitshift+0x13c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d01d      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a33      	ldr	r2, [pc, #204]	; (8006720 <DMA_CalcBaseAndBitshift+0x140>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a32      	ldr	r2, [pc, #200]	; (8006724 <DMA_CalcBaseAndBitshift+0x144>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a30      	ldr	r2, [pc, #192]	; (8006728 <DMA_CalcBaseAndBitshift+0x148>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2f      	ldr	r2, [pc, #188]	; (800672c <DMA_CalcBaseAndBitshift+0x14c>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a2d      	ldr	r2, [pc, #180]	; (8006730 <DMA_CalcBaseAndBitshift+0x150>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xa8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2c      	ldr	r2, [pc, #176]	; (8006734 <DMA_CalcBaseAndBitshift+0x154>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d101      	bne.n	800668c <DMA_CalcBaseAndBitshift+0xac>
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <DMA_CalcBaseAndBitshift+0xae>
 800668c:	2300      	movs	r3, #0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d024      	beq.n	80066dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	3b10      	subs	r3, #16
 800669a:	4a27      	ldr	r2, [pc, #156]	; (8006738 <DMA_CalcBaseAndBitshift+0x158>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	091b      	lsrs	r3, r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	4a24      	ldr	r2, [pc, #144]	; (800673c <DMA_CalcBaseAndBitshift+0x15c>)
 80066ac:	5cd3      	ldrb	r3, [r2, r3]
 80066ae:	461a      	mov	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d908      	bls.n	80066cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	4b1f      	ldr	r3, [pc, #124]	; (8006740 <DMA_CalcBaseAndBitshift+0x160>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	1d1a      	adds	r2, r3, #4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	659a      	str	r2, [r3, #88]	; 0x58
 80066ca:	e00d      	b.n	80066e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	461a      	mov	r2, r3
 80066d2:	4b1b      	ldr	r3, [pc, #108]	; (8006740 <DMA_CalcBaseAndBitshift+0x160>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6593      	str	r3, [r2, #88]	; 0x58
 80066da:	e005      	b.n	80066e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	40020010 	.word	0x40020010
 80066fc:	40020028 	.word	0x40020028
 8006700:	40020040 	.word	0x40020040
 8006704:	40020058 	.word	0x40020058
 8006708:	40020070 	.word	0x40020070
 800670c:	40020088 	.word	0x40020088
 8006710:	400200a0 	.word	0x400200a0
 8006714:	400200b8 	.word	0x400200b8
 8006718:	40020410 	.word	0x40020410
 800671c:	40020428 	.word	0x40020428
 8006720:	40020440 	.word	0x40020440
 8006724:	40020458 	.word	0x40020458
 8006728:	40020470 	.word	0x40020470
 800672c:	40020488 	.word	0x40020488
 8006730:	400204a0 	.word	0x400204a0
 8006734:	400204b8 	.word	0x400204b8
 8006738:	aaaaaaab 	.word	0xaaaaaaab
 800673c:	080118ec 	.word	0x080118ec
 8006740:	fffffc00 	.word	0xfffffc00

08006744 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d120      	bne.n	800679a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	2b03      	cmp	r3, #3
 800675e:	d858      	bhi.n	8006812 <DMA_CheckFifoParam+0xce>
 8006760:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <DMA_CheckFifoParam+0x24>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	08006779 	.word	0x08006779
 800676c:	0800678b 	.word	0x0800678b
 8006770:	08006779 	.word	0x08006779
 8006774:	08006813 	.word	0x08006813
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d048      	beq.n	8006816 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006788:	e045      	b.n	8006816 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006792:	d142      	bne.n	800681a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006798:	e03f      	b.n	800681a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067a2:	d123      	bne.n	80067ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d838      	bhi.n	800681e <DMA_CheckFifoParam+0xda>
 80067ac:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <DMA_CheckFifoParam+0x70>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067cb 	.word	0x080067cb
 80067bc:	080067c5 	.word	0x080067c5
 80067c0:	080067dd 	.word	0x080067dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	73fb      	strb	r3, [r7, #15]
        break;
 80067c8:	e030      	b.n	800682c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d025      	beq.n	8006822 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067da:	e022      	b.n	8006822 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067e4:	d11f      	bne.n	8006826 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ea:	e01c      	b.n	8006826 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d902      	bls.n	80067fa <DMA_CheckFifoParam+0xb6>
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d003      	beq.n	8006800 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067f8:	e018      	b.n	800682c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
        break;
 80067fe:	e015      	b.n	800682c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00e      	beq.n	800682a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
    break;
 8006810:	e00b      	b.n	800682a <DMA_CheckFifoParam+0xe6>
        break;
 8006812:	bf00      	nop
 8006814:	e00a      	b.n	800682c <DMA_CheckFifoParam+0xe8>
        break;
 8006816:	bf00      	nop
 8006818:	e008      	b.n	800682c <DMA_CheckFifoParam+0xe8>
        break;
 800681a:	bf00      	nop
 800681c:	e006      	b.n	800682c <DMA_CheckFifoParam+0xe8>
        break;
 800681e:	bf00      	nop
 8006820:	e004      	b.n	800682c <DMA_CheckFifoParam+0xe8>
        break;
 8006822:	bf00      	nop
 8006824:	e002      	b.n	800682c <DMA_CheckFifoParam+0xe8>
        break;
 8006826:	bf00      	nop
 8006828:	e000      	b.n	800682c <DMA_CheckFifoParam+0xe8>
    break;
 800682a:	bf00      	nop
    }
  }

  return status;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop

0800683c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a38      	ldr	r2, [pc, #224]	; (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d022      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a36      	ldr	r2, [pc, #216]	; (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01d      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a35      	ldr	r2, [pc, #212]	; (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d018      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a33      	ldr	r2, [pc, #204]	; (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a32      	ldr	r2, [pc, #200]	; (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00e      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a30      	ldr	r2, [pc, #192]	; (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d009      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2f      	ldr	r2, [pc, #188]	; (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a2d      	ldr	r2, [pc, #180]	; (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d101      	bne.n	800689e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800689e:	2300      	movs	r3, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d01a      	beq.n	80068da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	3b08      	subs	r3, #8
 80068ac:	4a28      	ldr	r2, [pc, #160]	; (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	091b      	lsrs	r3, r3, #4
 80068b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	4b26      	ldr	r3, [pc, #152]	; (8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	461a      	mov	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a24      	ldr	r2, [pc, #144]	; (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f003 031f 	and.w	r3, r3, #31
 80068d0:	2201      	movs	r2, #1
 80068d2:	409a      	lsls	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068d8:	e024      	b.n	8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	3b10      	subs	r3, #16
 80068e2:	4a1e      	ldr	r2, [pc, #120]	; (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068e4:	fba2 2303 	umull	r2, r3, r2, r3
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4a1c      	ldr	r2, [pc, #112]	; (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d806      	bhi.n	8006902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4a1b      	ldr	r2, [pc, #108]	; (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d902      	bls.n	8006902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3308      	adds	r3, #8
 8006900:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4b18      	ldr	r3, [pc, #96]	; (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	461a      	mov	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a16      	ldr	r2, [pc, #88]	; (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006914:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2201      	movs	r2, #1
 800691e:	409a      	lsls	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	58025408 	.word	0x58025408
 8006934:	5802541c 	.word	0x5802541c
 8006938:	58025430 	.word	0x58025430
 800693c:	58025444 	.word	0x58025444
 8006940:	58025458 	.word	0x58025458
 8006944:	5802546c 	.word	0x5802546c
 8006948:	58025480 	.word	0x58025480
 800694c:	58025494 	.word	0x58025494
 8006950:	cccccccd 	.word	0xcccccccd
 8006954:	16009600 	.word	0x16009600
 8006958:	58025880 	.word	0x58025880
 800695c:	aaaaaaab 	.word	0xaaaaaaab
 8006960:	400204b8 	.word	0x400204b8
 8006964:	4002040f 	.word	0x4002040f
 8006968:	10008200 	.word	0x10008200
 800696c:	40020880 	.word	0x40020880

08006970 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	b2db      	uxtb	r3, r3
 800697e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d04a      	beq.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b08      	cmp	r3, #8
 800698a:	d847      	bhi.n	8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a25      	ldr	r2, [pc, #148]	; (8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d022      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a24      	ldr	r2, [pc, #144]	; (8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d01d      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a22      	ldr	r2, [pc, #136]	; (8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d018      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a21      	ldr	r2, [pc, #132]	; (8006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1f      	ldr	r2, [pc, #124]	; (8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a1e      	ldr	r2, [pc, #120]	; (8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d009      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1c      	ldr	r2, [pc, #112]	; (8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1b      	ldr	r2, [pc, #108]	; (8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d101      	bne.n	80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069e0:	2300      	movs	r3, #0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4b17      	ldr	r3, [pc, #92]	; (8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069f8:	671a      	str	r2, [r3, #112]	; 0x70
 80069fa:	e009      	b.n	8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4b14      	ldr	r3, [pc, #80]	; (8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	461a      	mov	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2201      	movs	r2, #1
 8006a16:	409a      	lsls	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006a1c:	bf00      	nop
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	58025408 	.word	0x58025408
 8006a2c:	5802541c 	.word	0x5802541c
 8006a30:	58025430 	.word	0x58025430
 8006a34:	58025444 	.word	0x58025444
 8006a38:	58025458 	.word	0x58025458
 8006a3c:	5802546c 	.word	0x5802546c
 8006a40:	58025480 	.word	0x58025480
 8006a44:	58025494 	.word	0x58025494
 8006a48:	1600963f 	.word	0x1600963f
 8006a4c:	58025940 	.word	0x58025940
 8006a50:	1000823f 	.word	0x1000823f
 8006a54:	40020940 	.word	0x40020940

08006a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b089      	sub	sp, #36	; 0x24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a66:	4b86      	ldr	r3, [pc, #536]	; (8006c80 <HAL_GPIO_Init+0x228>)
 8006a68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a6a:	e18c      	b.n	8006d86 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	2101      	movs	r1, #1
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	4013      	ands	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 817e 	beq.w	8006d80 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d005      	beq.n	8006a9c <HAL_GPIO_Init+0x44>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 0303 	and.w	r3, r3, #3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d130      	bne.n	8006afe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	2203      	movs	r2, #3
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	43db      	mvns	r3, r3
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43db      	mvns	r3, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	091b      	lsrs	r3, r3, #4
 8006ae8:	f003 0201 	and.w	r2, r3, #1
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	2b03      	cmp	r3, #3
 8006b08:	d017      	beq.n	8006b3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	005b      	lsls	r3, r3, #1
 8006b14:	2203      	movs	r2, #3
 8006b16:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d123      	bne.n	8006b8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	08da      	lsrs	r2, r3, #3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3208      	adds	r2, #8
 8006b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	220f      	movs	r2, #15
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	43db      	mvns	r3, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4013      	ands	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	69ba      	ldr	r2, [r7, #24]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	08da      	lsrs	r2, r3, #3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	3208      	adds	r2, #8
 8006b88:	69b9      	ldr	r1, [r7, #24]
 8006b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	2203      	movs	r2, #3
 8006b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9e:	43db      	mvns	r3, r3
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f003 0203 	and.w	r2, r3, #3
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80d8 	beq.w	8006d80 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bd0:	4b2c      	ldr	r3, [pc, #176]	; (8006c84 <HAL_GPIO_Init+0x22c>)
 8006bd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bd6:	4a2b      	ldr	r2, [pc, #172]	; (8006c84 <HAL_GPIO_Init+0x22c>)
 8006bd8:	f043 0302 	orr.w	r3, r3, #2
 8006bdc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006be0:	4b28      	ldr	r3, [pc, #160]	; (8006c84 <HAL_GPIO_Init+0x22c>)
 8006be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <HAL_GPIO_Init+0x230>)
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	089b      	lsrs	r3, r3, #2
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	220f      	movs	r2, #15
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	43db      	mvns	r3, r3
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a1d      	ldr	r2, [pc, #116]	; (8006c8c <HAL_GPIO_Init+0x234>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d04a      	beq.n	8006cb0 <HAL_GPIO_Init+0x258>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a1c      	ldr	r2, [pc, #112]	; (8006c90 <HAL_GPIO_Init+0x238>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02b      	beq.n	8006c7a <HAL_GPIO_Init+0x222>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a1b      	ldr	r2, [pc, #108]	; (8006c94 <HAL_GPIO_Init+0x23c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d025      	beq.n	8006c76 <HAL_GPIO_Init+0x21e>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1a      	ldr	r2, [pc, #104]	; (8006c98 <HAL_GPIO_Init+0x240>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d01f      	beq.n	8006c72 <HAL_GPIO_Init+0x21a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <HAL_GPIO_Init+0x244>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d019      	beq.n	8006c6e <HAL_GPIO_Init+0x216>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_GPIO_Init+0x248>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <HAL_GPIO_Init+0x212>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <HAL_GPIO_Init+0x24c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00d      	beq.n	8006c66 <HAL_GPIO_Init+0x20e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a16      	ldr	r2, [pc, #88]	; (8006ca8 <HAL_GPIO_Init+0x250>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d007      	beq.n	8006c62 <HAL_GPIO_Init+0x20a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a15      	ldr	r2, [pc, #84]	; (8006cac <HAL_GPIO_Init+0x254>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d101      	bne.n	8006c5e <HAL_GPIO_Init+0x206>
 8006c5a:	2309      	movs	r3, #9
 8006c5c:	e029      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c5e:	230a      	movs	r3, #10
 8006c60:	e027      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c62:	2307      	movs	r3, #7
 8006c64:	e025      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c66:	2306      	movs	r3, #6
 8006c68:	e023      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c6a:	2305      	movs	r3, #5
 8006c6c:	e021      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c6e:	2304      	movs	r3, #4
 8006c70:	e01f      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c72:	2303      	movs	r3, #3
 8006c74:	e01d      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e01b      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e019      	b.n	8006cb2 <HAL_GPIO_Init+0x25a>
 8006c7e:	bf00      	nop
 8006c80:	58000080 	.word	0x58000080
 8006c84:	58024400 	.word	0x58024400
 8006c88:	58000400 	.word	0x58000400
 8006c8c:	58020000 	.word	0x58020000
 8006c90:	58020400 	.word	0x58020400
 8006c94:	58020800 	.word	0x58020800
 8006c98:	58020c00 	.word	0x58020c00
 8006c9c:	58021000 	.word	0x58021000
 8006ca0:	58021400 	.word	0x58021400
 8006ca4:	58021800 	.word	0x58021800
 8006ca8:	58021c00 	.word	0x58021c00
 8006cac:	58022400 	.word	0x58022400
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	69fa      	ldr	r2, [r7, #28]
 8006cb4:	f002 0203 	and.w	r2, r2, #3
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	4093      	lsls	r3, r2
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cc2:	4938      	ldr	r1, [pc, #224]	; (8006da4 <HAL_GPIO_Init+0x34c>)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	3302      	adds	r3, #2
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	69ba      	ldr	r2, [r7, #24]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d003      	beq.n	8006d24 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	4013      	ands	r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	3301      	adds	r3, #1
 8006d84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f47f ae6b 	bne.w	8006a6c <HAL_GPIO_Init+0x14>
  }
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	3724      	adds	r7, #36	; 0x24
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	58000400 	.word	0x58000400

08006da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	887b      	ldrh	r3, [r7, #2]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e001      	b.n	8006dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
 8006de4:	4613      	mov	r3, r2
 8006de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006de8:	787b      	ldrb	r3, [r7, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006df4:	e003      	b.n	8006dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e1c:	887a      	ldrh	r2, [r7, #2]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4013      	ands	r3, r2
 8006e22:	041a      	lsls	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	43d9      	mvns	r1, r3
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	619a      	str	r2, [r3, #24]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4603      	mov	r3, r0
 8006e46:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fa fb37 	bl	80014d8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d00a      	beq.n	8006e9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e88:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d001      	beq.n	8006e9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e01f      	b.n	8006eda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e01d      	b.n	8006eda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f023 0207 	bic.w	r2, r3, #7
 8006ea6:	490f      	ldr	r1, [pc, #60]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006eae:	f7fb fc35 	bl	800271c <HAL_GetTick>
 8006eb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eb4:	e009      	b.n	8006eca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006eb6:	f7fb fc31 	bl	800271c <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ec4:	d901      	bls.n	8006eca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e007      	b.n	8006eda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed6:	d1ee      	bne.n	8006eb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	58024800 	.word	0x58024800

08006ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	; 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e39d      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 8087 	beq.w	8007016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f08:	4b88      	ldr	r3, [pc, #544]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f12:	4b86      	ldr	r3, [pc, #536]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d007      	beq.n	8006f2e <HAL_RCC_OscConfig+0x46>
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b18      	cmp	r3, #24
 8006f22:	d110      	bne.n	8006f46 <HAL_RCC_OscConfig+0x5e>
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d10b      	bne.n	8006f46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f2e:	4b7f      	ldr	r3, [pc, #508]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d06c      	beq.n	8007014 <HAL_RCC_OscConfig+0x12c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d168      	bne.n	8007014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e377      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCC_OscConfig+0x76>
 8006f50:	4b76      	ldr	r3, [pc, #472]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a75      	ldr	r2, [pc, #468]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	e02e      	b.n	8006fbc <HAL_RCC_OscConfig+0xd4>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCC_OscConfig+0x98>
 8006f66:	4b71      	ldr	r3, [pc, #452]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a70      	ldr	r2, [pc, #448]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	4b6e      	ldr	r3, [pc, #440]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a6d      	ldr	r2, [pc, #436]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e01d      	b.n	8006fbc <HAL_RCC_OscConfig+0xd4>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f88:	d10c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0xbc>
 8006f8a:	4b68      	ldr	r3, [pc, #416]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a67      	ldr	r2, [pc, #412]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	4b65      	ldr	r3, [pc, #404]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a64      	ldr	r2, [pc, #400]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e00b      	b.n	8006fbc <HAL_RCC_OscConfig+0xd4>
 8006fa4:	4b61      	ldr	r3, [pc, #388]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a60      	ldr	r2, [pc, #384]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	4b5e      	ldr	r3, [pc, #376]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5d      	ldr	r2, [pc, #372]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d013      	beq.n	8006fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc4:	f7fb fbaa 	bl	800271c <HAL_GetTick>
 8006fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fcc:	f7fb fba6 	bl	800271c <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b64      	cmp	r3, #100	; 0x64
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e32b      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fde:	4b53      	ldr	r3, [pc, #332]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_RCC_OscConfig+0xe4>
 8006fea:	e014      	b.n	8007016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fb fb96 	bl	800271c <HAL_GetTick>
 8006ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ff4:	f7fb fb92 	bl	800271c <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b64      	cmp	r3, #100	; 0x64
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e317      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007006:	4b49      	ldr	r3, [pc, #292]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x10c>
 8007012:	e000      	b.n	8007016 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 808c 	beq.w	800713c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007024:	4b41      	ldr	r3, [pc, #260]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800702c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800702e:	4b3f      	ldr	r3, [pc, #252]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <HAL_RCC_OscConfig+0x162>
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	2b18      	cmp	r3, #24
 800703e:	d137      	bne.n	80070b0 <HAL_RCC_OscConfig+0x1c8>
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d132      	bne.n	80070b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800704a:	4b38      	ldr	r3, [pc, #224]	; (800712c <HAL_RCC_OscConfig+0x244>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <HAL_RCC_OscConfig+0x17a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e2e9      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007062:	4b32      	ldr	r3, [pc, #200]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f023 0219 	bic.w	r2, r3, #25
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	492f      	ldr	r1, [pc, #188]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007074:	f7fb fb52 	bl	800271c <HAL_GetTick>
 8007078:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800707c:	f7fb fb4e 	bl	800271c <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e2d3      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800708e:	4b27      	ldr	r3, [pc, #156]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <HAL_RCC_OscConfig+0x244>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	061b      	lsls	r3, r3, #24
 80070a8:	4920      	ldr	r1, [pc, #128]	; (800712c <HAL_RCC_OscConfig+0x244>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ae:	e045      	b.n	800713c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d026      	beq.n	8007106 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070b8:	4b1c      	ldr	r3, [pc, #112]	; (800712c <HAL_RCC_OscConfig+0x244>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f023 0219 	bic.w	r2, r3, #25
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	4919      	ldr	r1, [pc, #100]	; (800712c <HAL_RCC_OscConfig+0x244>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ca:	f7fb fb27 	bl	800271c <HAL_GetTick>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070d2:	f7fb fb23 	bl	800271c <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e2a8      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e4:	4b11      	ldr	r3, [pc, #68]	; (800712c <HAL_RCC_OscConfig+0x244>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f0      	beq.n	80070d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f0:	4b0e      	ldr	r3, [pc, #56]	; (800712c <HAL_RCC_OscConfig+0x244>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	061b      	lsls	r3, r3, #24
 80070fe:	490b      	ldr	r1, [pc, #44]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007100:	4313      	orrs	r3, r2
 8007102:	604b      	str	r3, [r1, #4]
 8007104:	e01a      	b.n	800713c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <HAL_RCC_OscConfig+0x244>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a08      	ldr	r2, [pc, #32]	; (800712c <HAL_RCC_OscConfig+0x244>)
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007112:	f7fb fb03 	bl	800271c <HAL_GetTick>
 8007116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007118:	e00a      	b.n	8007130 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800711a:	f7fb faff 	bl	800271c <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d903      	bls.n	8007130 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e284      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
 800712c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007130:	4b96      	ldr	r3, [pc, #600]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1ee      	bne.n	800711a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	2b00      	cmp	r3, #0
 8007146:	d06a      	beq.n	800721e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007148:	4b90      	ldr	r3, [pc, #576]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007150:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007152:	4b8e      	ldr	r3, [pc, #568]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b08      	cmp	r3, #8
 800715c:	d007      	beq.n	800716e <HAL_RCC_OscConfig+0x286>
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b18      	cmp	r3, #24
 8007162:	d11b      	bne.n	800719c <HAL_RCC_OscConfig+0x2b4>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	2b01      	cmp	r3, #1
 800716c:	d116      	bne.n	800719c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800716e:	4b87      	ldr	r3, [pc, #540]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007176:	2b00      	cmp	r3, #0
 8007178:	d005      	beq.n	8007186 <HAL_RCC_OscConfig+0x29e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b80      	cmp	r3, #128	; 0x80
 8007180:	d001      	beq.n	8007186 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e257      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007186:	4b81      	ldr	r3, [pc, #516]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	061b      	lsls	r3, r3, #24
 8007194:	497d      	ldr	r1, [pc, #500]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007196:	4313      	orrs	r3, r2
 8007198:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800719a:	e040      	b.n	800721e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69db      	ldr	r3, [r3, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d023      	beq.n	80071ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071a4:	4b79      	ldr	r3, [pc, #484]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a78      	ldr	r2, [pc, #480]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80071aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fb fab4 	bl	800271c <HAL_GetTick>
 80071b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071b8:	f7fb fab0 	bl	800271c <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e235      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071ca:	4b70      	ldr	r3, [pc, #448]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0f0      	beq.n	80071b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071d6:	4b6d      	ldr	r3, [pc, #436]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	061b      	lsls	r3, r3, #24
 80071e4:	4969      	ldr	r1, [pc, #420]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60cb      	str	r3, [r1, #12]
 80071ea:	e018      	b.n	800721e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071ec:	4b67      	ldr	r3, [pc, #412]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a66      	ldr	r2, [pc, #408]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80071f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f8:	f7fb fa90 	bl	800271c <HAL_GetTick>
 80071fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007200:	f7fb fa8c 	bl	800271c <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e211      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007212:	4b5e      	ldr	r3, [pc, #376]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1f0      	bne.n	8007200 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b00      	cmp	r3, #0
 8007228:	d036      	beq.n	8007298 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d019      	beq.n	8007266 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007232:	4b56      	ldr	r3, [pc, #344]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007236:	4a55      	ldr	r2, [pc, #340]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723e:	f7fb fa6d 	bl	800271c <HAL_GetTick>
 8007242:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007244:	e008      	b.n	8007258 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007246:	f7fb fa69 	bl	800271c <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d901      	bls.n	8007258 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e1ee      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007258:	4b4c      	ldr	r3, [pc, #304]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 800725a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0f0      	beq.n	8007246 <HAL_RCC_OscConfig+0x35e>
 8007264:	e018      	b.n	8007298 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007266:	4b49      	ldr	r3, [pc, #292]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726a:	4a48      	ldr	r2, [pc, #288]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007272:	f7fb fa53 	bl	800271c <HAL_GetTick>
 8007276:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800727a:	f7fb fa4f 	bl	800271c <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e1d4      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800728c:	4b3f      	ldr	r3, [pc, #252]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 800728e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1f0      	bne.n	800727a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d036      	beq.n	8007312 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d019      	beq.n	80072e0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072ac:	4b37      	ldr	r3, [pc, #220]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a36      	ldr	r2, [pc, #216]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80072b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072b8:	f7fb fa30 	bl	800271c <HAL_GetTick>
 80072bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072c0:	f7fb fa2c 	bl	800271c <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e1b1      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072d2:	4b2e      	ldr	r3, [pc, #184]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d0f0      	beq.n	80072c0 <HAL_RCC_OscConfig+0x3d8>
 80072de:	e018      	b.n	8007312 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072e0:	4b2a      	ldr	r3, [pc, #168]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a29      	ldr	r2, [pc, #164]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 80072e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ec:	f7fb fa16 	bl	800271c <HAL_GetTick>
 80072f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072f4:	f7fb fa12 	bl	800271c <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e197      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007306:	4b21      	ldr	r3, [pc, #132]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1f0      	bne.n	80072f4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8086 	beq.w	800742c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007320:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <HAL_RCC_OscConfig+0x4a8>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a1a      	ldr	r2, [pc, #104]	; (8007390 <HAL_RCC_OscConfig+0x4a8>)
 8007326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800732c:	f7fb f9f6 	bl	800271c <HAL_GetTick>
 8007330:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007332:	e008      	b.n	8007346 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007334:	f7fb f9f2 	bl	800271c <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b64      	cmp	r3, #100	; 0x64
 8007340:	d901      	bls.n	8007346 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e177      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007346:	4b12      	ldr	r3, [pc, #72]	; (8007390 <HAL_RCC_OscConfig+0x4a8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f0      	beq.n	8007334 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d106      	bne.n	8007368 <HAL_RCC_OscConfig+0x480>
 800735a:	4b0c      	ldr	r3, [pc, #48]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 800735c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735e:	4a0b      	ldr	r2, [pc, #44]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	6713      	str	r3, [r2, #112]	; 0x70
 8007366:	e032      	b.n	80073ce <HAL_RCC_OscConfig+0x4e6>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d111      	bne.n	8007394 <HAL_RCC_OscConfig+0x4ac>
 8007370:	4b06      	ldr	r3, [pc, #24]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	4a05      	ldr	r2, [pc, #20]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007376:	f023 0301 	bic.w	r3, r3, #1
 800737a:	6713      	str	r3, [r2, #112]	; 0x70
 800737c:	4b03      	ldr	r3, [pc, #12]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 800737e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007380:	4a02      	ldr	r2, [pc, #8]	; (800738c <HAL_RCC_OscConfig+0x4a4>)
 8007382:	f023 0304 	bic.w	r3, r3, #4
 8007386:	6713      	str	r3, [r2, #112]	; 0x70
 8007388:	e021      	b.n	80073ce <HAL_RCC_OscConfig+0x4e6>
 800738a:	bf00      	nop
 800738c:	58024400 	.word	0x58024400
 8007390:	58024800 	.word	0x58024800
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b05      	cmp	r3, #5
 800739a:	d10c      	bne.n	80073b6 <HAL_RCC_OscConfig+0x4ce>
 800739c:	4b83      	ldr	r3, [pc, #524]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a0:	4a82      	ldr	r2, [pc, #520]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073a2:	f043 0304 	orr.w	r3, r3, #4
 80073a6:	6713      	str	r3, [r2, #112]	; 0x70
 80073a8:	4b80      	ldr	r3, [pc, #512]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	4a7f      	ldr	r2, [pc, #508]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073ae:	f043 0301 	orr.w	r3, r3, #1
 80073b2:	6713      	str	r3, [r2, #112]	; 0x70
 80073b4:	e00b      	b.n	80073ce <HAL_RCC_OscConfig+0x4e6>
 80073b6:	4b7d      	ldr	r3, [pc, #500]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ba:	4a7c      	ldr	r2, [pc, #496]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073bc:	f023 0301 	bic.w	r3, r3, #1
 80073c0:	6713      	str	r3, [r2, #112]	; 0x70
 80073c2:	4b7a      	ldr	r3, [pc, #488]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c6:	4a79      	ldr	r2, [pc, #484]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073c8:	f023 0304 	bic.w	r3, r3, #4
 80073cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d015      	beq.n	8007402 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d6:	f7fb f9a1 	bl	800271c <HAL_GetTick>
 80073da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073dc:	e00a      	b.n	80073f4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073de:	f7fb f99d 	bl	800271c <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e120      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073f4:	4b6d      	ldr	r3, [pc, #436]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80073f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0ee      	beq.n	80073de <HAL_RCC_OscConfig+0x4f6>
 8007400:	e014      	b.n	800742c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007402:	f7fb f98b 	bl	800271c <HAL_GetTick>
 8007406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800740a:	f7fb f987 	bl	800271c <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	f241 3288 	movw	r2, #5000	; 0x1388
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e10a      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007420:	4b62      	ldr	r3, [pc, #392]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1ee      	bne.n	800740a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80ff 	beq.w	8007634 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007436:	4b5d      	ldr	r3, [pc, #372]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800743e:	2b18      	cmp	r3, #24
 8007440:	f000 80ba 	beq.w	80075b8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b02      	cmp	r3, #2
 800744a:	f040 8095 	bne.w	8007578 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800744e:	4b57      	ldr	r3, [pc, #348]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a56      	ldr	r2, [pc, #344]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fb f95f 	bl	800271c <HAL_GetTick>
 800745e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007462:	f7fb f95b 	bl	800271c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e0e0      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007474:	4b4d      	ldr	r3, [pc, #308]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f0      	bne.n	8007462 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007480:	4b4a      	ldr	r3, [pc, #296]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007484:	4b4a      	ldr	r3, [pc, #296]	; (80075b0 <HAL_RCC_OscConfig+0x6c8>)
 8007486:	4013      	ands	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007490:	0112      	lsls	r2, r2, #4
 8007492:	430a      	orrs	r2, r1
 8007494:	4945      	ldr	r1, [pc, #276]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007496:	4313      	orrs	r3, r2
 8007498:	628b      	str	r3, [r1, #40]	; 0x28
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	3b01      	subs	r3, #1
 80074a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a8:	3b01      	subs	r3, #1
 80074aa:	025b      	lsls	r3, r3, #9
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	3b01      	subs	r3, #1
 80074b6:	041b      	lsls	r3, r3, #16
 80074b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	3b01      	subs	r3, #1
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074ca:	4938      	ldr	r1, [pc, #224]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80074d0:	4b36      	ldr	r3, [pc, #216]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	4a35      	ldr	r2, [pc, #212]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074dc:	4b33      	ldr	r3, [pc, #204]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80074de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e0:	4b34      	ldr	r3, [pc, #208]	; (80075b4 <HAL_RCC_OscConfig+0x6cc>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074e8:	00d2      	lsls	r2, r2, #3
 80074ea:	4930      	ldr	r1, [pc, #192]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074f0:	4b2e      	ldr	r3, [pc, #184]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	f023 020c 	bic.w	r2, r3, #12
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	492b      	ldr	r1, [pc, #172]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007502:	4b2a      	ldr	r3, [pc, #168]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	f023 0202 	bic.w	r2, r3, #2
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	4927      	ldr	r1, [pc, #156]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007510:	4313      	orrs	r3, r2
 8007512:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007514:	4b25      	ldr	r3, [pc, #148]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4a24      	ldr	r2, [pc, #144]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800751a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007520:	4b22      	ldr	r3, [pc, #136]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4a21      	ldr	r2, [pc, #132]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800752c:	4b1f      	ldr	r3, [pc, #124]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007538:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007544:	4b19      	ldr	r3, [pc, #100]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a18      	ldr	r2, [pc, #96]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800754a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800754e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007550:	f7fb f8e4 	bl	800271c <HAL_GetTick>
 8007554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007558:	f7fb f8e0 	bl	800271c <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e065      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800756a:	4b10      	ldr	r3, [pc, #64]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x670>
 8007576:	e05d      	b.n	8007634 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a0b      	ldr	r2, [pc, #44]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 800757e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007584:	f7fb f8ca 	bl	800271c <HAL_GetTick>
 8007588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800758a:	e008      	b.n	800759e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800758c:	f7fb f8c6 	bl	800271c <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e04b      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800759e:	4b03      	ldr	r3, [pc, #12]	; (80075ac <HAL_RCC_OscConfig+0x6c4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f0      	bne.n	800758c <HAL_RCC_OscConfig+0x6a4>
 80075aa:	e043      	b.n	8007634 <HAL_RCC_OscConfig+0x74c>
 80075ac:	58024400 	.word	0x58024400
 80075b0:	fffffc0c 	.word	0xfffffc0c
 80075b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <HAL_RCC_OscConfig+0x758>)
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075be:	4b20      	ldr	r3, [pc, #128]	; (8007640 <HAL_RCC_OscConfig+0x758>)
 80075c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d031      	beq.n	8007630 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f003 0203 	and.w	r2, r3, #3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d12a      	bne.n	8007630 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d122      	bne.n	8007630 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d11a      	bne.n	8007630 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	0a5b      	lsrs	r3, r3, #9
 80075fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007606:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007608:	429a      	cmp	r2, r3
 800760a:	d111      	bne.n	8007630 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	0c1b      	lsrs	r3, r3, #16
 8007610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800761a:	429a      	cmp	r2, r3
 800761c:	d108      	bne.n	8007630 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	0e1b      	lsrs	r3, r3, #24
 8007622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800762c:	429a      	cmp	r2, r3
 800762e:	d001      	beq.n	8007634 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3730      	adds	r7, #48	; 0x30
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	58024400 	.word	0x58024400

08007644 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e19c      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007658:	4b8a      	ldr	r3, [pc, #552]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d910      	bls.n	8007688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007666:	4b87      	ldr	r3, [pc, #540]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 020f 	bic.w	r2, r3, #15
 800766e:	4985      	ldr	r1, [pc, #532]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007676:	4b83      	ldr	r3, [pc, #524]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d001      	beq.n	8007688 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e184      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0304 	and.w	r3, r3, #4
 8007690:	2b00      	cmp	r3, #0
 8007692:	d010      	beq.n	80076b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	4b7b      	ldr	r3, [pc, #492]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d908      	bls.n	80076b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076a4:	4b78      	ldr	r3, [pc, #480]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	4975      	ldr	r1, [pc, #468]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d010      	beq.n	80076e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695a      	ldr	r2, [r3, #20]
 80076c6:	4b70      	ldr	r3, [pc, #448]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d908      	bls.n	80076e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076d2:	4b6d      	ldr	r3, [pc, #436]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	496a      	ldr	r1, [pc, #424]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d010      	beq.n	8007712 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	4b64      	ldr	r3, [pc, #400]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d908      	bls.n	8007712 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007700:	4b61      	ldr	r3, [pc, #388]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	495e      	ldr	r1, [pc, #376]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 800770e:	4313      	orrs	r3, r2
 8007710:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d010      	beq.n	8007740 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69da      	ldr	r2, [r3, #28]
 8007722:	4b59      	ldr	r3, [pc, #356]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800772a:	429a      	cmp	r2, r3
 800772c:	d908      	bls.n	8007740 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800772e:	4b56      	ldr	r3, [pc, #344]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4953      	ldr	r1, [pc, #332]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 800773c:	4313      	orrs	r3, r2
 800773e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d010      	beq.n	800776e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68da      	ldr	r2, [r3, #12]
 8007750:	4b4d      	ldr	r3, [pc, #308]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	429a      	cmp	r2, r3
 800775a:	d908      	bls.n	800776e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800775c:	4b4a      	ldr	r3, [pc, #296]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	f023 020f 	bic.w	r2, r3, #15
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4947      	ldr	r1, [pc, #284]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 800776a:	4313      	orrs	r3, r2
 800776c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d055      	beq.n	8007826 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800777a:	4b43      	ldr	r3, [pc, #268]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	4940      	ldr	r1, [pc, #256]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007788:	4313      	orrs	r3, r2
 800778a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d107      	bne.n	80077a4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007794:	4b3c      	ldr	r3, [pc, #240]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d121      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e0f6      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d107      	bne.n	80077bc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077ac:	4b36      	ldr	r3, [pc, #216]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d115      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0ea      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d107      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077c4:	4b30      	ldr	r3, [pc, #192]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0de      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077d4:	4b2c      	ldr	r3, [pc, #176]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0d6      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077e4:	4b28      	ldr	r3, [pc, #160]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	f023 0207 	bic.w	r2, r3, #7
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	4925      	ldr	r1, [pc, #148]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f6:	f7fa ff91 	bl	800271c <HAL_GetTick>
 80077fa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077fc:	e00a      	b.n	8007814 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077fe:	f7fa ff8d 	bl	800271c <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	f241 3288 	movw	r2, #5000	; 0x1388
 800780c:	4293      	cmp	r3, r2
 800780e:	d901      	bls.n	8007814 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e0be      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007814:	4b1c      	ldr	r3, [pc, #112]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	429a      	cmp	r2, r3
 8007824:	d1eb      	bne.n	80077fe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d010      	beq.n	8007854 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	4b14      	ldr	r3, [pc, #80]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	429a      	cmp	r2, r3
 8007840:	d208      	bcs.n	8007854 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007842:	4b11      	ldr	r3, [pc, #68]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f023 020f 	bic.w	r2, r3, #15
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	490e      	ldr	r1, [pc, #56]	; (8007888 <HAL_RCC_ClockConfig+0x244>)
 8007850:	4313      	orrs	r3, r2
 8007852:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007854:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d214      	bcs.n	800788c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007862:	4b08      	ldr	r3, [pc, #32]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f023 020f 	bic.w	r2, r3, #15
 800786a:	4906      	ldr	r1, [pc, #24]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	4313      	orrs	r3, r2
 8007870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007872:	4b04      	ldr	r3, [pc, #16]	; (8007884 <HAL_RCC_ClockConfig+0x240>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	429a      	cmp	r2, r3
 800787e:	d005      	beq.n	800788c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e086      	b.n	8007992 <HAL_RCC_ClockConfig+0x34e>
 8007884:	52002000 	.word	0x52002000
 8007888:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b00      	cmp	r3, #0
 8007896:	d010      	beq.n	80078ba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	691a      	ldr	r2, [r3, #16]
 800789c:	4b3f      	ldr	r3, [pc, #252]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d208      	bcs.n	80078ba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078a8:	4b3c      	ldr	r3, [pc, #240]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	4939      	ldr	r1, [pc, #228]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 80078b6:	4313      	orrs	r3, r2
 80078b8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0308 	and.w	r3, r3, #8
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d010      	beq.n	80078e8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695a      	ldr	r2, [r3, #20]
 80078ca:	4b34      	ldr	r3, [pc, #208]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d208      	bcs.n	80078e8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078d6:	4b31      	ldr	r3, [pc, #196]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	492e      	ldr	r1, [pc, #184]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 80078e4:	4313      	orrs	r3, r2
 80078e6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d010      	beq.n	8007916 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	4b28      	ldr	r3, [pc, #160]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007900:	429a      	cmp	r2, r3
 8007902:	d208      	bcs.n	8007916 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007904:	4b25      	ldr	r3, [pc, #148]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	4922      	ldr	r1, [pc, #136]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 8007912:	4313      	orrs	r3, r2
 8007914:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d010      	beq.n	8007944 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69da      	ldr	r2, [r3, #28]
 8007926:	4b1d      	ldr	r3, [pc, #116]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800792e:	429a      	cmp	r2, r3
 8007930:	d208      	bcs.n	8007944 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007932:	4b1a      	ldr	r3, [pc, #104]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	4917      	ldr	r1, [pc, #92]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 8007940:	4313      	orrs	r3, r2
 8007942:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007944:	f000 f834 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8007948:	4602      	mov	r2, r0
 800794a:	4b14      	ldr	r3, [pc, #80]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	f003 030f 	and.w	r3, r3, #15
 8007954:	4912      	ldr	r1, [pc, #72]	; (80079a0 <HAL_RCC_ClockConfig+0x35c>)
 8007956:	5ccb      	ldrb	r3, [r1, r3]
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	fa22 f303 	lsr.w	r3, r2, r3
 8007960:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007962:	4b0e      	ldr	r3, [pc, #56]	; (800799c <HAL_RCC_ClockConfig+0x358>)
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	4a0d      	ldr	r2, [pc, #52]	; (80079a0 <HAL_RCC_ClockConfig+0x35c>)
 800796c:	5cd3      	ldrb	r3, [r2, r3]
 800796e:	f003 031f 	and.w	r3, r3, #31
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
 8007978:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <HAL_RCC_ClockConfig+0x360>)
 800797a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800797c:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <HAL_RCC_ClockConfig+0x364>)
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007982:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <HAL_RCC_ClockConfig+0x368>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7fa fe7e 	bl	8002688 <HAL_InitTick>
 800798c:	4603      	mov	r3, r0
 800798e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	58024400 	.word	0x58024400
 80079a0:	080118dc 	.word	0x080118dc
 80079a4:	24000310 	.word	0x24000310
 80079a8:	2400030c 	.word	0x2400030c
 80079ac:	24000314 	.word	0x24000314

080079b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b089      	sub	sp, #36	; 0x24
 80079b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b6:	4bb3      	ldr	r3, [pc, #716]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079be:	2b18      	cmp	r3, #24
 80079c0:	f200 8155 	bhi.w	8007c6e <HAL_RCC_GetSysClockFreq+0x2be>
 80079c4:	a201      	add	r2, pc, #4	; (adr r2, 80079cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	08007a31 	.word	0x08007a31
 80079d0:	08007c6f 	.word	0x08007c6f
 80079d4:	08007c6f 	.word	0x08007c6f
 80079d8:	08007c6f 	.word	0x08007c6f
 80079dc:	08007c6f 	.word	0x08007c6f
 80079e0:	08007c6f 	.word	0x08007c6f
 80079e4:	08007c6f 	.word	0x08007c6f
 80079e8:	08007c6f 	.word	0x08007c6f
 80079ec:	08007a57 	.word	0x08007a57
 80079f0:	08007c6f 	.word	0x08007c6f
 80079f4:	08007c6f 	.word	0x08007c6f
 80079f8:	08007c6f 	.word	0x08007c6f
 80079fc:	08007c6f 	.word	0x08007c6f
 8007a00:	08007c6f 	.word	0x08007c6f
 8007a04:	08007c6f 	.word	0x08007c6f
 8007a08:	08007c6f 	.word	0x08007c6f
 8007a0c:	08007a5d 	.word	0x08007a5d
 8007a10:	08007c6f 	.word	0x08007c6f
 8007a14:	08007c6f 	.word	0x08007c6f
 8007a18:	08007c6f 	.word	0x08007c6f
 8007a1c:	08007c6f 	.word	0x08007c6f
 8007a20:	08007c6f 	.word	0x08007c6f
 8007a24:	08007c6f 	.word	0x08007c6f
 8007a28:	08007c6f 	.word	0x08007c6f
 8007a2c:	08007a63 	.word	0x08007a63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a30:	4b94      	ldr	r3, [pc, #592]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a3c:	4b91      	ldr	r3, [pc, #580]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	08db      	lsrs	r3, r3, #3
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	4a90      	ldr	r2, [pc, #576]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a48:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007a4e:	e111      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a50:	4b8d      	ldr	r3, [pc, #564]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a52:	61bb      	str	r3, [r7, #24]
    break;
 8007a54:	e10e      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a56:	4b8d      	ldr	r3, [pc, #564]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a58:	61bb      	str	r3, [r7, #24]
    break;
 8007a5a:	e10b      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a5c:	4b8c      	ldr	r3, [pc, #560]	; (8007c90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a5e:	61bb      	str	r3, [r7, #24]
    break;
 8007a60:	e108      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a62:	4b88      	ldr	r3, [pc, #544]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a6c:	4b85      	ldr	r3, [pc, #532]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	091b      	lsrs	r3, r3, #4
 8007a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a78:	4b82      	ldr	r3, [pc, #520]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a82:	4b80      	ldr	r3, [pc, #512]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	fb02 f303 	mul.w	r3, r2, r3
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 80e1 	beq.w	8007c68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	f000 8083 	beq.w	8007bb4 <HAL_RCC_GetSysClockFreq+0x204>
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	f200 80a1 	bhi.w	8007bf8 <HAL_RCC_GetSysClockFreq+0x248>
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_RCC_GetSysClockFreq+0x114>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d056      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ac2:	e099      	b.n	8007bf8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac4:	4b6f      	ldr	r3, [pc, #444]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d02d      	beq.n	8007b2c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ad0:	4b6c      	ldr	r3, [pc, #432]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	08db      	lsrs	r3, r3, #3
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	4a6b      	ldr	r2, [pc, #428]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007adc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	ee07 3a90 	vmov	s15, r3
 8007ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	ee07 3a90 	vmov	s15, r3
 8007af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007afa:	4b62      	ldr	r3, [pc, #392]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007b2a:	e087      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	ee07 3a90 	vmov	s15, r3
 8007b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3e:	4b51      	ldr	r3, [pc, #324]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b6e:	e065      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	ee07 3a90 	vmov	s15, r3
 8007b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b82:	4b40      	ldr	r3, [pc, #256]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bb2:	e043      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	ee07 3a90 	vmov	s15, r3
 8007bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007ca0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bce:	ee07 3a90 	vmov	s15, r3
 8007bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bf6:	e021      	b.n	8007c3c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	ee07 3a90 	vmov	s15, r3
 8007bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0a:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c3a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c3c:	4b11      	ldr	r3, [pc, #68]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	0a5b      	lsrs	r3, r3, #9
 8007c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c46:	3301      	adds	r3, #1
 8007c48:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	ee07 3a90 	vmov	s15, r3
 8007c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c54:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c60:	ee17 3a90 	vmov	r3, s15
 8007c64:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c66:	e005      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	61bb      	str	r3, [r7, #24]
    break;
 8007c6c:	e002      	b.n	8007c74 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c70:	61bb      	str	r3, [r7, #24]
    break;
 8007c72:	bf00      	nop
  }

  return sysclockfreq;
 8007c74:	69bb      	ldr	r3, [r7, #24]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3724      	adds	r7, #36	; 0x24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	58024400 	.word	0x58024400
 8007c88:	03d09000 	.word	0x03d09000
 8007c8c:	003d0900 	.word	0x003d0900
 8007c90:	017d7840 	.word	0x017d7840
 8007c94:	46000000 	.word	0x46000000
 8007c98:	4c742400 	.word	0x4c742400
 8007c9c:	4a742400 	.word	0x4a742400
 8007ca0:	4bbebc20 	.word	0x4bbebc20

08007ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007caa:	f7ff fe81 	bl	80079b0 <HAL_RCC_GetSysClockFreq>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	4b10      	ldr	r3, [pc, #64]	; (8007cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	490f      	ldr	r1, [pc, #60]	; (8007cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cbc:	5ccb      	ldrb	r3, [r1, r3]
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cc8:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	4a09      	ldr	r2, [pc, #36]	; (8007cf8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cd2:	5cd3      	ldrb	r3, [r2, r3]
 8007cd4:	f003 031f 	and.w	r3, r3, #31
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	fa22 f303 	lsr.w	r3, r2, r3
 8007cde:	4a07      	ldr	r2, [pc, #28]	; (8007cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8007ce0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ce2:	4a07      	ldr	r2, [pc, #28]	; (8007d00 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <HAL_RCC_GetHCLKFreq+0x58>)
 8007cea:	681b      	ldr	r3, [r3, #0]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	58024400 	.word	0x58024400
 8007cf8:	080118dc 	.word	0x080118dc
 8007cfc:	24000310 	.word	0x24000310
 8007d00:	2400030c 	.word	0x2400030c

08007d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007d08:	f7ff ffcc 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	091b      	lsrs	r3, r3, #4
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	4904      	ldr	r1, [pc, #16]	; (8007d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d1a:	5ccb      	ldrb	r3, [r1, r3]
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	58024400 	.word	0x58024400
 8007d2c:	080118dc 	.word	0x080118dc

08007d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d34:	f7ff ffb6 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	0a1b      	lsrs	r3, r3, #8
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	4904      	ldr	r1, [pc, #16]	; (8007d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d46:	5ccb      	ldrb	r3, [r1, r3]
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	58024400 	.word	0x58024400
 8007d58:	080118dc 	.word	0x080118dc

08007d5c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d64:	2300      	movs	r3, #0
 8007d66:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d03f      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d80:	d02a      	beq.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007d82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d86:	d824      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d8c:	d018      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d92:	d81e      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d003      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d9c:	d007      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007d9e:	e018      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da0:	4ba4      	ldr	r3, [pc, #656]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4aa3      	ldr	r2, [pc, #652]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dac:	e015      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	2102      	movs	r1, #2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 ff01 	bl	8009bbc <RCCEx_PLL2_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dbe:	e00c      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f001 ffaa 	bl	8009d20 <RCCEx_PLL3_Config>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007dd0:	e003      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd6:	e000      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d109      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007de0:	4b94      	ldr	r3, [pc, #592]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dec:	4991      	ldr	r1, [pc, #580]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	650b      	str	r3, [r1, #80]	; 0x50
 8007df2:	e001      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d03d      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d826      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e29 	.word	0x08007e29
 8007e18:	08007e37 	.word	0x08007e37
 8007e1c:	08007e49 	.word	0x08007e49
 8007e20:	08007e61 	.word	0x08007e61
 8007e24:	08007e61 	.word	0x08007e61
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e28:	4b82      	ldr	r3, [pc, #520]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	4a81      	ldr	r2, [pc, #516]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e34:	e015      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 febd 	bl	8009bbc <RCCEx_PLL2_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e46:	e00c      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3324      	adds	r3, #36	; 0x24
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f001 ff66 	bl	8009d20 <RCCEx_PLL3_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007e58:	e003      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e5e:	e000      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e62:	7dfb      	ldrb	r3, [r7, #23]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e68:	4b72      	ldr	r3, [pc, #456]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6c:	f023 0207 	bic.w	r2, r3, #7
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e74:	496f      	ldr	r1, [pc, #444]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	650b      	str	r3, [r1, #80]	; 0x50
 8007e7a:	e001      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d051      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e92:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007e96:	d036      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007e98:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007e9c:	d830      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007e9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ea2:	d032      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ea8:	d82a      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007eaa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007eae:	d02e      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007eb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007eb4:	d824      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eba:	d018      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ec0:	d81e      	bhi.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007eca:	d007      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007ecc:	e018      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ece:	4b59      	ldr	r3, [pc, #356]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	4a58      	ldr	r2, [pc, #352]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007eda:	e019      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 fe6a 	bl	8009bbc <RCCEx_PLL2_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007eec:	e010      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	3324      	adds	r3, #36	; 0x24
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f001 ff13 	bl	8009d20 <RCCEx_PLL3_Config>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007efe:	e007      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]
      break;
 8007f04:	e004      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007f06:	bf00      	nop
 8007f08:	e002      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007f0a:	bf00      	nop
 8007f0c:	e000      	b.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10a      	bne.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f16:	4b47      	ldr	r3, [pc, #284]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f24:	4943      	ldr	r1, [pc, #268]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	658b      	str	r3, [r1, #88]	; 0x58
 8007f2a:	e001      	b.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d051      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f42:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007f46:	d036      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007f48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007f4c:	d830      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007f4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f52:	d032      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f58:	d82a      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f5e:	d02e      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007f60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f64:	d824      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f6a:	d018      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007f6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f70:	d81e      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007f76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f7a:	d007      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007f7c:	e018      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f7e:	4b2d      	ldr	r3, [pc, #180]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	4a2c      	ldr	r2, [pc, #176]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f8a:	e019      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3304      	adds	r3, #4
 8007f90:	2100      	movs	r1, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f001 fe12 	bl	8009bbc <RCCEx_PLL2_Config>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f9c:	e010      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3324      	adds	r3, #36	; 0x24
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f001 febb 	bl	8009d20 <RCCEx_PLL3_Config>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007fae:	e007      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb4:	e004      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007fb6:	bf00      	nop
 8007fb8:	e002      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007fba:	bf00      	nop
 8007fbc:	e000      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007fc6:	4b1b      	ldr	r3, [pc, #108]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fca:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fd4:	4917      	ldr	r1, [pc, #92]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	658b      	str	r3, [r1, #88]	; 0x58
 8007fda:	e001      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d035      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff0:	2b30      	cmp	r3, #48	; 0x30
 8007ff2:	d01c      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007ff4:	2b30      	cmp	r3, #48	; 0x30
 8007ff6:	d817      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d00c      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d813      	bhi.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d019      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008004:	2b10      	cmp	r3, #16
 8008006:	d10f      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800800a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800c:	4a09      	ldr	r2, [pc, #36]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800800e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008012:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008014:	e011      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3304      	adds	r3, #4
 800801a:	2102      	movs	r1, #2
 800801c:	4618      	mov	r0, r3
 800801e:	f001 fdcd 	bl	8009bbc <RCCEx_PLL2_Config>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008026:	e008      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	75fb      	strb	r3, [r7, #23]
      break;
 800802c:	e005      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800802e:	bf00      	nop
 8008030:	e003      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008032:	bf00      	nop
 8008034:	58024400 	.word	0x58024400
      break;
 8008038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800803a:	7dfb      	ldrb	r3, [r7, #23]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d109      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008040:	4ba3      	ldr	r3, [pc, #652]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008044:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804c:	49a0      	ldr	r1, [pc, #640]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800804e:	4313      	orrs	r3, r2
 8008050:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008052:	e001      	b.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
 8008056:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d047      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800806c:	d030      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800806e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008072:	d82a      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008078:	d02c      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800807a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800807e:	d824      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008084:	d018      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800808a:	d81e      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008094:	d007      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008096:	e018      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008098:	4b8d      	ldr	r3, [pc, #564]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	4a8c      	ldr	r2, [pc, #560]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800809e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080a4:	e017      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3304      	adds	r3, #4
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f001 fd85 	bl	8009bbc <RCCEx_PLL2_Config>
 80080b2:	4603      	mov	r3, r0
 80080b4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080b6:	e00e      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3324      	adds	r3, #36	; 0x24
 80080bc:	2100      	movs	r1, #0
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 fe2e 	bl	8009d20 <RCCEx_PLL3_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80080c8:	e005      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	75fb      	strb	r3, [r7, #23]
      break;
 80080ce:	e002      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80080d0:	bf00      	nop
 80080d2:	e000      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80080d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080d6:	7dfb      	ldrb	r3, [r7, #23]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d109      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80080dc:	4b7c      	ldr	r3, [pc, #496]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80080de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	4979      	ldr	r1, [pc, #484]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	650b      	str	r3, [r1, #80]	; 0x50
 80080ee:	e001      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d049      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008108:	d02e      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800810a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800810e:	d828      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008114:	d02a      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008116:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800811a:	d822      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800811c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008120:	d026      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008122:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008126:	d81c      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008128:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800812c:	d010      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800812e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008132:	d816      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01d      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8008138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800813c:	d111      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3304      	adds	r3, #4
 8008142:	2101      	movs	r1, #1
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fd39 	bl	8009bbc <RCCEx_PLL2_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800814e:	e012      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3324      	adds	r3, #36	; 0x24
 8008154:	2101      	movs	r1, #1
 8008156:	4618      	mov	r0, r3
 8008158:	f001 fde2 	bl	8009d20 <RCCEx_PLL3_Config>
 800815c:	4603      	mov	r3, r0
 800815e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008160:	e009      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
      break;
 8008166:	e006      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008168:	bf00      	nop
 800816a:	e004      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8008174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d109      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800817c:	4b54      	ldr	r3, [pc, #336]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800817e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008180:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008188:	4951      	ldr	r1, [pc, #324]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800818a:	4313      	orrs	r3, r2
 800818c:	650b      	str	r3, [r1, #80]	; 0x50
 800818e:	e001      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d04b      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80081a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081aa:	d02e      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80081ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081b0:	d828      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80081b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b6:	d02a      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d822      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80081be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081c2:	d026      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80081c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081c8:	d81c      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80081ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081ce:	d010      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80081d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d4:	d816      	bhi.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01d      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80081da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081de:	d111      	bne.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3304      	adds	r3, #4
 80081e4:	2101      	movs	r1, #1
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fce8 	bl	8009bbc <RCCEx_PLL2_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80081f0:	e012      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	3324      	adds	r3, #36	; 0x24
 80081f6:	2101      	movs	r1, #1
 80081f8:	4618      	mov	r0, r3
 80081fa:	f001 fd91 	bl	8009d20 <RCCEx_PLL3_Config>
 80081fe:	4603      	mov	r3, r0
 8008200:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008202:	e009      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
      break;
 8008208:	e006      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800820a:	bf00      	nop
 800820c:	e004      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800820e:	bf00      	nop
 8008210:	e002      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800821e:	4b2c      	ldr	r3, [pc, #176]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800822c:	4928      	ldr	r1, [pc, #160]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800822e:	4313      	orrs	r3, r2
 8008230:	658b      	str	r3, [r1, #88]	; 0x58
 8008232:	e001      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d02f      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800824c:	d00e      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800824e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008252:	d814      	bhi.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d015      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800825c:	d10f      	bne.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800825e:	4b1c      	ldr	r3, [pc, #112]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	4a1b      	ldr	r2, [pc, #108]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800826a:	e00c      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	2101      	movs	r1, #1
 8008272:	4618      	mov	r0, r3
 8008274:	f001 fca2 	bl	8009bbc <RCCEx_PLL2_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800827c:	e003      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	75fb      	strb	r3, [r7, #23]
      break;
 8008282:	e000      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008286:	7dfb      	ldrb	r3, [r7, #23]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d109      	bne.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800828c:	4b10      	ldr	r3, [pc, #64]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008290:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008298:	490d      	ldr	r1, [pc, #52]	; (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800829a:	4313      	orrs	r3, r2
 800829c:	650b      	str	r3, [r1, #80]	; 0x50
 800829e:	e001      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d034      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d81d      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80082b8:	a201      	add	r2, pc, #4	; (adr r2, 80082c0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80082ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082be:	bf00      	nop
 80082c0:	080082fb 	.word	0x080082fb
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082e3 	.word	0x080082e3
 80082cc:	080082fb 	.word	0x080082fb
 80082d0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082d4:	4bb1      	ldr	r3, [pc, #708]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	4ab0      	ldr	r2, [pc, #704]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80082da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80082e0:	e00c      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3304      	adds	r3, #4
 80082e6:	2102      	movs	r1, #2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 fc67 	bl	8009bbc <RCCEx_PLL2_Config>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80082f2:	e003      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]
      break;
 80082f8:	e000      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80082fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082fc:	7dfb      	ldrb	r3, [r7, #23]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008302:	4ba6      	ldr	r3, [pc, #664]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008306:	f023 0203 	bic.w	r2, r3, #3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830e:	49a3      	ldr	r1, [pc, #652]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008310:	4313      	orrs	r3, r2
 8008312:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008314:	e001      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
 8008318:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 8086 	beq.w	8008434 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008328:	4b9d      	ldr	r3, [pc, #628]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a9c      	ldr	r2, [pc, #624]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800832e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008332:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008334:	f7fa f9f2 	bl	800271c <HAL_GetTick>
 8008338:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800833a:	e009      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800833c:	f7fa f9ee 	bl	800271c <HAL_GetTick>
 8008340:	4602      	mov	r2, r0
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	2b64      	cmp	r3, #100	; 0x64
 8008348:	d902      	bls.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800834a:	2303      	movs	r3, #3
 800834c:	75fb      	strb	r3, [r7, #23]
        break;
 800834e:	e005      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008350:	4b93      	ldr	r3, [pc, #588]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0ef      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d166      	bne.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008362:	4b8e      	ldr	r3, [pc, #568]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008364:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800836c:	4053      	eors	r3, r2
 800836e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008372:	2b00      	cmp	r3, #0
 8008374:	d013      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008376:	4b89      	ldr	r3, [pc, #548]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800837e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008380:	4b86      	ldr	r3, [pc, #536]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008384:	4a85      	ldr	r2, [pc, #532]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800838a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800838c:	4b83      	ldr	r3, [pc, #524]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800838e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008390:	4a82      	ldr	r2, [pc, #520]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008396:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008398:	4a80      	ldr	r2, [pc, #512]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083a8:	d115      	bne.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083aa:	f7fa f9b7 	bl	800271c <HAL_GetTick>
 80083ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083b0:	e00b      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083b2:	f7fa f9b3 	bl	800271c <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d902      	bls.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	75fb      	strb	r3, [r7, #23]
            break;
 80083c8:	e005      	b.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ca:	4b74      	ldr	r3, [pc, #464]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d0ed      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d126      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ea:	d10d      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80083ec:	4b6b      	ldr	r3, [pc, #428]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083fa:	0919      	lsrs	r1, r3, #4
 80083fc:	4b69      	ldr	r3, [pc, #420]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80083fe:	400b      	ands	r3, r1
 8008400:	4966      	ldr	r1, [pc, #408]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008402:	4313      	orrs	r3, r2
 8008404:	610b      	str	r3, [r1, #16]
 8008406:	e005      	b.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8008408:	4b64      	ldr	r3, [pc, #400]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	4a63      	ldr	r2, [pc, #396]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800840e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008412:	6113      	str	r3, [r2, #16]
 8008414:	4b61      	ldr	r3, [pc, #388]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800841e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008422:	495e      	ldr	r1, [pc, #376]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008424:	4313      	orrs	r3, r2
 8008426:	670b      	str	r3, [r1, #112]	; 0x70
 8008428:	e004      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	75bb      	strb	r3, [r7, #22]
 800842e:	e001      	b.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d07e      	beq.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008444:	2b28      	cmp	r3, #40	; 0x28
 8008446:	d867      	bhi.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8008448:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	0800851f 	.word	0x0800851f
 8008454:	08008519 	.word	0x08008519
 8008458:	08008519 	.word	0x08008519
 800845c:	08008519 	.word	0x08008519
 8008460:	08008519 	.word	0x08008519
 8008464:	08008519 	.word	0x08008519
 8008468:	08008519 	.word	0x08008519
 800846c:	08008519 	.word	0x08008519
 8008470:	080084f5 	.word	0x080084f5
 8008474:	08008519 	.word	0x08008519
 8008478:	08008519 	.word	0x08008519
 800847c:	08008519 	.word	0x08008519
 8008480:	08008519 	.word	0x08008519
 8008484:	08008519 	.word	0x08008519
 8008488:	08008519 	.word	0x08008519
 800848c:	08008519 	.word	0x08008519
 8008490:	08008507 	.word	0x08008507
 8008494:	08008519 	.word	0x08008519
 8008498:	08008519 	.word	0x08008519
 800849c:	08008519 	.word	0x08008519
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008519 	.word	0x08008519
 80084a8:	08008519 	.word	0x08008519
 80084ac:	08008519 	.word	0x08008519
 80084b0:	0800851f 	.word	0x0800851f
 80084b4:	08008519 	.word	0x08008519
 80084b8:	08008519 	.word	0x08008519
 80084bc:	08008519 	.word	0x08008519
 80084c0:	08008519 	.word	0x08008519
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008519 	.word	0x08008519
 80084cc:	08008519 	.word	0x08008519
 80084d0:	0800851f 	.word	0x0800851f
 80084d4:	08008519 	.word	0x08008519
 80084d8:	08008519 	.word	0x08008519
 80084dc:	08008519 	.word	0x08008519
 80084e0:	08008519 	.word	0x08008519
 80084e4:	08008519 	.word	0x08008519
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008519 	.word	0x08008519
 80084f0:	0800851f 	.word	0x0800851f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3304      	adds	r3, #4
 80084f8:	2101      	movs	r1, #1
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 fb5e 	bl	8009bbc <RCCEx_PLL2_Config>
 8008500:	4603      	mov	r3, r0
 8008502:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008504:	e00c      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3324      	adds	r3, #36	; 0x24
 800850a:	2101      	movs	r1, #1
 800850c:	4618      	mov	r0, r3
 800850e:	f001 fc07 	bl	8009d20 <RCCEx_PLL3_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008516:	e003      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	75fb      	strb	r3, [r7, #23]
      break;
 800851c:	e000      	b.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800851e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008526:	4b1d      	ldr	r3, [pc, #116]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800852a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008532:	491a      	ldr	r1, [pc, #104]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008534:	4313      	orrs	r3, r2
 8008536:	654b      	str	r3, [r1, #84]	; 0x54
 8008538:	e001      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d03e      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854e:	2b05      	cmp	r3, #5
 8008550:	d820      	bhi.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8008552:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8008554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008558:	080085a9 	.word	0x080085a9
 800855c:	08008571 	.word	0x08008571
 8008560:	08008583 	.word	0x08008583
 8008564:	080085a9 	.word	0x080085a9
 8008568:	080085a9 	.word	0x080085a9
 800856c:	080085a9 	.word	0x080085a9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3304      	adds	r3, #4
 8008574:	2101      	movs	r1, #1
 8008576:	4618      	mov	r0, r3
 8008578:	f001 fb20 	bl	8009bbc <RCCEx_PLL2_Config>
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008580:	e013      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3324      	adds	r3, #36	; 0x24
 8008586:	2101      	movs	r1, #1
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fbc9 	bl	8009d20 <RCCEx_PLL3_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008592:	e00a      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	75fb      	strb	r3, [r7, #23]
      break;
 8008598:	e007      	b.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800859a:	bf00      	nop
 800859c:	58024400 	.word	0x58024400
 80085a0:	58024800 	.word	0x58024800
 80085a4:	00ffffcf 	.word	0x00ffffcf
      break;
 80085a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d109      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80085b0:	4b9f      	ldr	r3, [pc, #636]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80085b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b4:	f023 0207 	bic.w	r2, r3, #7
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085bc:	499c      	ldr	r1, [pc, #624]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	654b      	str	r3, [r1, #84]	; 0x54
 80085c2:	e001      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c4:	7dfb      	ldrb	r3, [r7, #23]
 80085c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d039      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085da:	2b05      	cmp	r3, #5
 80085dc:	d820      	bhi.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80085de:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008627 	.word	0x08008627
 80085e8:	080085fd 	.word	0x080085fd
 80085ec:	0800860f 	.word	0x0800860f
 80085f0:	08008627 	.word	0x08008627
 80085f4:	08008627 	.word	0x08008627
 80085f8:	08008627 	.word	0x08008627
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3304      	adds	r3, #4
 8008600:	2101      	movs	r1, #1
 8008602:	4618      	mov	r0, r3
 8008604:	f001 fada 	bl	8009bbc <RCCEx_PLL2_Config>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800860c:	e00c      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3324      	adds	r3, #36	; 0x24
 8008612:	2101      	movs	r1, #1
 8008614:	4618      	mov	r0, r3
 8008616:	f001 fb83 	bl	8009d20 <RCCEx_PLL3_Config>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800861e:	e003      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	75fb      	strb	r3, [r7, #23]
      break;
 8008624:	e000      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8008626:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008628:	7dfb      	ldrb	r3, [r7, #23]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d10a      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800862e:	4b80      	ldr	r3, [pc, #512]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008632:	f023 0207 	bic.w	r2, r3, #7
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800863c:	497c      	ldr	r1, [pc, #496]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800863e:	4313      	orrs	r3, r2
 8008640:	658b      	str	r3, [r1, #88]	; 0x58
 8008642:	e001      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008644:	7dfb      	ldrb	r3, [r7, #23]
 8008646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0320 	and.w	r3, r3, #32
 8008650:	2b00      	cmp	r3, #0
 8008652:	d04b      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800865a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800865e:	d02e      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x962>
 8008660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008664:	d828      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866a:	d02a      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800866c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008670:	d822      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8008672:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008676:	d026      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8008678:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800867c:	d81c      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800867e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008682:	d010      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8008684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008688:	d816      	bhi.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d01d      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800868e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008692:	d111      	bne.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3304      	adds	r3, #4
 8008698:	2100      	movs	r1, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fa8e 	bl	8009bbc <RCCEx_PLL2_Config>
 80086a0:	4603      	mov	r3, r0
 80086a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086a4:	e012      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	3324      	adds	r3, #36	; 0x24
 80086aa:	2102      	movs	r1, #2
 80086ac:	4618      	mov	r0, r3
 80086ae:	f001 fb37 	bl	8009d20 <RCCEx_PLL3_Config>
 80086b2:	4603      	mov	r3, r0
 80086b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80086b6:	e009      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	75fb      	strb	r3, [r7, #23]
      break;
 80086bc:	e006      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80086be:	bf00      	nop
 80086c0:	e004      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80086c2:	bf00      	nop
 80086c4:	e002      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80086c6:	bf00      	nop
 80086c8:	e000      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80086ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086d2:	4b57      	ldr	r3, [pc, #348]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e0:	4953      	ldr	r1, [pc, #332]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	654b      	str	r3, [r1, #84]	; 0x54
 80086e6:	e001      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d04b      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008702:	d02e      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008704:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008708:	d828      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800870a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870e:	d02a      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008714:	d822      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800871a:	d026      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800871c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008720:	d81c      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008726:	d010      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8008728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800872c:	d816      	bhi.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d01d      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008736:	d111      	bne.n	800875c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	3304      	adds	r3, #4
 800873c:	2100      	movs	r1, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f001 fa3c 	bl	8009bbc <RCCEx_PLL2_Config>
 8008744:	4603      	mov	r3, r0
 8008746:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008748:	e012      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	3324      	adds	r3, #36	; 0x24
 800874e:	2102      	movs	r1, #2
 8008750:	4618      	mov	r0, r3
 8008752:	f001 fae5 	bl	8009d20 <RCCEx_PLL3_Config>
 8008756:	4603      	mov	r3, r0
 8008758:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800875a:	e009      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	75fb      	strb	r3, [r7, #23]
      break;
 8008760:	e006      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008762:	bf00      	nop
 8008764:	e004      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8008766:	bf00      	nop
 8008768:	e002      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800876a:	bf00      	nop
 800876c:	e000      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800876e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008776:	4b2e      	ldr	r3, [pc, #184]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800877a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008784:	492a      	ldr	r1, [pc, #168]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008786:	4313      	orrs	r3, r2
 8008788:	658b      	str	r3, [r1, #88]	; 0x58
 800878a:	e001      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878c:	7dfb      	ldrb	r3, [r7, #23]
 800878e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008798:	2b00      	cmp	r3, #0
 800879a:	d04d      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087a6:	d02e      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80087a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80087ac:	d828      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80087ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b2:	d02a      	beq.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80087b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087b8:	d822      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80087ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087be:	d026      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80087c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80087c4:	d81c      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80087c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087ca:	d010      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80087cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80087d0:	d816      	bhi.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01d      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80087d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087da:	d111      	bne.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3304      	adds	r3, #4
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 f9ea 	bl	8009bbc <RCCEx_PLL2_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80087ec:	e012      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3324      	adds	r3, #36	; 0x24
 80087f2:	2102      	movs	r1, #2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 fa93 	bl	8009d20 <RCCEx_PLL3_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80087fe:	e009      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	75fb      	strb	r3, [r7, #23]
      break;
 8008804:	e006      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008806:	bf00      	nop
 8008808:	e004      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800880a:	bf00      	nop
 800880c:	e002      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800880e:	bf00      	nop
 8008810:	e000      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10c      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800881a:	4b05      	ldr	r3, [pc, #20]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800881c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008828:	4901      	ldr	r1, [pc, #4]	; (8008830 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800882a:	4313      	orrs	r3, r2
 800882c:	658b      	str	r3, [r1, #88]	; 0x58
 800882e:	e003      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008830:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b00      	cmp	r3, #0
 8008842:	d018      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800884c:	d10a      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3324      	adds	r3, #36	; 0x24
 8008852:	2102      	movs	r1, #2
 8008854:	4618      	mov	r0, r3
 8008856:	f001 fa63 	bl	8009d20 <RCCEx_PLL3_Config>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008864:	4b8a      	ldr	r3, [pc, #552]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008868:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008870:	4987      	ldr	r1, [pc, #540]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008872:	4313      	orrs	r3, r2
 8008874:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0310 	and.w	r3, r3, #16
 800887e:	2b00      	cmp	r3, #0
 8008880:	d01a      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800888c:	d10a      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3324      	adds	r3, #36	; 0x24
 8008892:	2102      	movs	r1, #2
 8008894:	4618      	mov	r0, r3
 8008896:	f001 fa43 	bl	8009d20 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80088a4:	4b7a      	ldr	r3, [pc, #488]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80088a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b2:	4977      	ldr	r1, [pc, #476]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d034      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088ce:	d01d      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80088d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80088d4:	d817      	bhi.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d003      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80088da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088de:	d009      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80088e0:	e011      	b.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3304      	adds	r3, #4
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 f967 	bl	8009bbc <RCCEx_PLL2_Config>
 80088ee:	4603      	mov	r3, r0
 80088f0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80088f2:	e00c      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	3324      	adds	r3, #36	; 0x24
 80088f8:	2102      	movs	r1, #2
 80088fa:	4618      	mov	r0, r3
 80088fc:	f001 fa10 	bl	8009d20 <RCCEx_PLL3_Config>
 8008900:	4603      	mov	r3, r0
 8008902:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008904:	e003      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	75fb      	strb	r3, [r7, #23]
      break;
 800890a:	e000      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800890c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008914:	4b5e      	ldr	r3, [pc, #376]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008922:	495b      	ldr	r1, [pc, #364]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008924:	4313      	orrs	r3, r2
 8008926:	658b      	str	r3, [r1, #88]	; 0x58
 8008928:	e001      	b.n	800892e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d033      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008940:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008944:	d01c      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008946:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800894a:	d816      	bhi.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800894c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008950:	d003      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008956:	d007      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008958:	e00f      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800895a:	4b4d      	ldr	r3, [pc, #308]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	4a4c      	ldr	r2, [pc, #304]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008966:	e00c      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3324      	adds	r3, #36	; 0x24
 800896c:	2101      	movs	r1, #1
 800896e:	4618      	mov	r0, r3
 8008970:	f001 f9d6 	bl	8009d20 <RCCEx_PLL3_Config>
 8008974:	4603      	mov	r3, r0
 8008976:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008978:	e003      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	75fb      	strb	r3, [r7, #23]
      break;
 800897e:	e000      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10a      	bne.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008988:	4b41      	ldr	r3, [pc, #260]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800898a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008996:	493e      	ldr	r1, [pc, #248]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008998:	4313      	orrs	r3, r2
 800899a:	654b      	str	r3, [r1, #84]	; 0x54
 800899c:	e001      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d029      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80089b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ba:	d007      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80089bc:	e00f      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089be:	4b34      	ldr	r3, [pc, #208]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	4a33      	ldr	r2, [pc, #204]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80089c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80089ca:	e00b      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	2102      	movs	r1, #2
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 f8f2 	bl	8009bbc <RCCEx_PLL2_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80089dc:	e002      	b.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
      break;
 80089e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d109      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80089ea:	4b29      	ldr	r3, [pc, #164]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80089ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f6:	4926      	ldr	r1, [pc, #152]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80089fc:	e001      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3324      	adds	r3, #36	; 0x24
 8008a12:	2102      	movs	r1, #2
 8008a14:	4618      	mov	r0, r3
 8008a16:	f001 f983 	bl	8009d20 <RCCEx_PLL3_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d033      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a38:	d017      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008a3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a3e:	d811      	bhi.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a44:	d013      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8008a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a4a:	d80b      	bhi.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d010      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8008a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a54:	d106      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a56:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	4a0d      	ldr	r2, [pc, #52]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008a62:	e007      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	75fb      	strb	r3, [r7, #23]
      break;
 8008a68:	e004      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008a6a:	bf00      	nop
 8008a6c:	e002      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008a6e:	bf00      	nop
 8008a70:	e000      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10c      	bne.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a7a:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a86:	4902      	ldr	r1, [pc, #8]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	654b      	str	r3, [r1, #84]	; 0x54
 8008a8c:	e004      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8008a8e:	bf00      	nop
 8008a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a94:	7dfb      	ldrb	r3, [r7, #23]
 8008a96:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d008      	beq.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008aa4:	4b29      	ldr	r3, [pc, #164]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab0:	4926      	ldr	r1, [pc, #152]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d008      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ace:	491f      	ldr	r1, [pc, #124]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00d      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ae0:	4b1a      	ldr	r3, [pc, #104]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	4a19      	ldr	r2, [pc, #100]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ae6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aea:	6113      	str	r3, [r2, #16]
 8008aec:	4b17      	ldr	r3, [pc, #92]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008aee:	691a      	ldr	r2, [r3, #16]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008af6:	4915      	ldr	r1, [pc, #84]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	da08      	bge.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b04:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b10:	490e      	ldr	r1, [pc, #56]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d009      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008b22:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b26:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b30:	4906      	ldr	r1, [pc, #24]	; (8008b4c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008b36:	7dbb      	ldrb	r3, [r7, #22]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e000      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	58024400 	.word	0x58024400

08008b50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b090      	sub	sp, #64	; 0x40
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b5e:	f040 8089 	bne.w	8008c74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008b62:	4b95      	ldr	r3, [pc, #596]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d87d      	bhi.n	8008c6e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b8d 	.word	0x08008b8d
 8008b7c:	08008bb1 	.word	0x08008bb1
 8008b80:	08008bd5 	.word	0x08008bd5
 8008b84:	08008c69 	.word	0x08008c69
 8008b88:	08008bf9 	.word	0x08008bf9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b8c:	4b8a      	ldr	r3, [pc, #552]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b98:	d107      	bne.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 feba 	bl	8009918 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008ba8:	e3ef      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008baa:	2300      	movs	r3, #0
 8008bac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bae:	e3ec      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bb0:	4b81      	ldr	r3, [pc, #516]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bbc:	d107      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bbe:	f107 0318 	add.w	r3, r7, #24
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fc00 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bcc:	e3dd      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bd2:	e3da      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd4:	4b78      	ldr	r3, [pc, #480]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be0:	d107      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fd42 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008bf0:	e3cb      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf6:	e3c8      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008bf8:	4b6f      	ldr	r3, [pc, #444]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c00:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c02:	4b6d      	ldr	r3, [pc, #436]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 0304 	and.w	r3, r3, #4
 8008c0a:	2b04      	cmp	r3, #4
 8008c0c:	d10c      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c14:	4b68      	ldr	r3, [pc, #416]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	08db      	lsrs	r3, r3, #3
 8008c1a:	f003 0303 	and.w	r3, r3, #3
 8008c1e:	4a67      	ldr	r2, [pc, #412]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008c20:	fa22 f303 	lsr.w	r3, r2, r3
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c26:	e01e      	b.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c28:	4b63      	ldr	r3, [pc, #396]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c34:	d106      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c3c:	d102      	bne.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008c3e:	4b60      	ldr	r3, [pc, #384]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c42:	e010      	b.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c44:	4b5c      	ldr	r3, [pc, #368]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c50:	d106      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c58:	d102      	bne.n	8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008c5a:	4b5a      	ldr	r3, [pc, #360]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c5e:	e002      	b.n	8008c66 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008c64:	e391      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c66:	e390      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c68:	4b57      	ldr	r3, [pc, #348]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c6c:	e38d      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c72:	e38a      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c7a:	f040 80a7 	bne.w	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008c7e:	4b4e      	ldr	r3, [pc, #312]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008c86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c8e:	d054      	beq.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c96:	f200 808b 	bhi.w	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ca0:	f000 8083 	beq.w	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008caa:	f200 8081 	bhi.w	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cb4:	d02f      	beq.n	8008d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cbc:	d878      	bhi.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d004      	beq.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cca:	d012      	beq.n	8008cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008ccc:	e070      	b.n	8008db0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cce:	4b3a      	ldr	r3, [pc, #232]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cda:	d107      	bne.n	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fe19 	bl	8009918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008cea:	e34e      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cf0:	e34b      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cf2:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cfe:	d107      	bne.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d00:	f107 0318 	add.w	r3, r7, #24
 8008d04:	4618      	mov	r0, r3
 8008d06:	f000 fb5f 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d0e:	e33c      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d14:	e339      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d16:	4b28      	ldr	r3, [pc, #160]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d22:	d107      	bne.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d24:	f107 030c 	add.w	r3, r7, #12
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fca1 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008d32:	e32a      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008d38:	e327      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008d3a:	4b1f      	ldr	r3, [pc, #124]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d44:	4b1c      	ldr	r3, [pc, #112]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0304 	and.w	r3, r3, #4
 8008d4c:	2b04      	cmp	r3, #4
 8008d4e:	d10c      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d56:	4b18      	ldr	r3, [pc, #96]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	f003 0303 	and.w	r3, r3, #3
 8008d60:	4a16      	ldr	r2, [pc, #88]	; (8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008d62:	fa22 f303 	lsr.w	r3, r2, r3
 8008d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d68:	e01e      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d6a:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d76:	d106      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d7e:	d102      	bne.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008d80:	4b0f      	ldr	r3, [pc, #60]	; (8008dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d84:	e010      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d86:	4b0c      	ldr	r3, [pc, #48]	; (8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d92:	d106      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d9a:	d102      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008d9c:	4b09      	ldr	r3, [pc, #36]	; (8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da0:	e002      	b.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008da6:	e2f0      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008da8:	e2ef      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008daa:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008dac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008dae:	e2ec      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008db4:	e2e9      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008db6:	bf00      	nop
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	03d09000 	.word	0x03d09000
 8008dc0:	003d0900 	.word	0x003d0900
 8008dc4:	017d7840 	.word	0x017d7840
 8008dc8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dd2:	f040 809c 	bne.w	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008dd6:	4b9d      	ldr	r3, [pc, #628]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008dde:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008de6:	d054      	beq.n	8008e92 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dee:	f200 808b 	bhi.w	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008df8:	f000 8083 	beq.w	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e02:	f200 8081 	bhi.w	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e0c:	d02f      	beq.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e14:	d878      	bhi.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8008e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d004      	beq.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e22:	d012      	beq.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8008e24:	e070      	b.n	8008f08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e26:	4b89      	ldr	r3, [pc, #548]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e32:	d107      	bne.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 fd6d 	bl	8009918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e40:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e42:	e2a2      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e48:	e29f      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e4a:	4b80      	ldr	r3, [pc, #512]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e56:	d107      	bne.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e58:	f107 0318 	add.w	r3, r7, #24
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 fab3 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8008e66:	e290      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e6c:	e28d      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e6e:	4b77      	ldr	r3, [pc, #476]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7c:	f107 030c 	add.w	r3, r7, #12
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fbf5 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e8a:	e27e      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e90:	e27b      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e92:	4b6e      	ldr	r3, [pc, #440]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e9a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e9c:	4b6b      	ldr	r3, [pc, #428]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d10c      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008eae:	4b67      	ldr	r3, [pc, #412]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	08db      	lsrs	r3, r3, #3
 8008eb4:	f003 0303 	and.w	r3, r3, #3
 8008eb8:	4a65      	ldr	r2, [pc, #404]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008eba:	fa22 f303 	lsr.w	r3, r2, r3
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec0:	e01e      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ec2:	4b62      	ldr	r3, [pc, #392]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ece:	d106      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ed6:	d102      	bne.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ed8:	4b5e      	ldr	r3, [pc, #376]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8008eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008edc:	e010      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ede:	4b5b      	ldr	r3, [pc, #364]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eea:	d106      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8008eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef2:	d102      	bne.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ef4:	4b58      	ldr	r3, [pc, #352]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ef8:	e002      	b.n	8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008efe:	e244      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008f00:	e243      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008f02:	4b56      	ldr	r3, [pc, #344]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8008f04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f06:	e240      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f0c:	e23d      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f14:	f040 80a7 	bne.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008f18:	4b4c      	ldr	r3, [pc, #304]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008f20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f28:	d055      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f30:	f200 8096 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f3a:	f000 8084 	beq.w	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f44:	f200 808c 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f4e:	d030      	beq.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8008f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f56:	f200 8083 	bhi.w	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f66:	d012      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 8008f68:	e07a      	b.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f6a:	4b38      	ldr	r3, [pc, #224]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f76:	d107      	bne.n	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 fccb 	bl	8009918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f86:	e200      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f8c:	e1fd      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f8e:	4b2f      	ldr	r3, [pc, #188]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f9a:	d107      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f9c:	f107 0318 	add.w	r3, r7, #24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fa11 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008faa:	e1ee      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fb0:	e1eb      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fb2:	4b26      	ldr	r3, [pc, #152]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fbe:	d107      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fc0:	f107 030c 	add.w	r3, r7, #12
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fb53 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008fce:	e1dc      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008fd4:	e1d9      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008fd6:	4b1d      	ldr	r3, [pc, #116]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fde:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d10c      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d109      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008ff2:	4b16      	ldr	r3, [pc, #88]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	08db      	lsrs	r3, r3, #3
 8008ff8:	f003 0303 	and.w	r3, r3, #3
 8008ffc:	4a14      	ldr	r2, [pc, #80]	; (8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8008ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009004:	e01e      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009006:	4b11      	ldr	r3, [pc, #68]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009012:	d106      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800901a:	d102      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800901c:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800901e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009020:	e010      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009022:	4b0a      	ldr	r3, [pc, #40]	; (800904c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800902e:	d106      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009036:	d102      	bne.n	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800903a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800903c:	e002      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800903e:	2300      	movs	r3, #0
 8009040:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009042:	e1a2      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009044:	e1a1      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800904a:	e19e      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800904c:	58024400 	.word	0x58024400
 8009050:	03d09000 	.word	0x03d09000
 8009054:	003d0900 	.word	0x003d0900
 8009058:	017d7840 	.word	0x017d7840
 800905c:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009064:	e191      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800906c:	d173      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800906e:	4b9b      	ldr	r3, [pc, #620]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009072:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009076:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800907e:	d02f      	beq.n	80090e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009086:	d863      	bhi.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8009088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908a:	2b00      	cmp	r3, #0
 800908c:	d004      	beq.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800908e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009094:	d012      	beq.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8009096:	e05b      	b.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009098:	4b90      	ldr	r3, [pc, #576]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a4:	d107      	bne.n	80090b6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a6:	f107 0318 	add.w	r3, r7, #24
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 f98c 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090b4:	e169      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ba:	e166      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090bc:	4b87      	ldr	r3, [pc, #540]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c8:	d107      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 face 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090d8:	e157      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090de:	e154      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090e0:	4b7e      	ldr	r3, [pc, #504]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80090e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090ea:	4b7c      	ldr	r3, [pc, #496]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d10c      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80090f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d109      	bne.n	8009110 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80090fc:	4b77      	ldr	r3, [pc, #476]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	08db      	lsrs	r3, r3, #3
 8009102:	f003 0303 	and.w	r3, r3, #3
 8009106:	4a76      	ldr	r2, [pc, #472]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009108:	fa22 f303 	lsr.w	r3, r2, r3
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800910e:	e01e      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009110:	4b72      	ldr	r3, [pc, #456]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800911c:	d106      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800911e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009124:	d102      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009126:	4b6f      	ldr	r3, [pc, #444]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800912a:	e010      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800912c:	4b6b      	ldr	r3, [pc, #428]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009138:	d106      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800913a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009140:	d102      	bne.n	8009148 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009142:	4b69      	ldr	r3, [pc, #420]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009146:	e002      	b.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800914c:	e11d      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800914e:	e11c      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8009150:	2300      	movs	r3, #0
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009154:	e119      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800915c:	d133      	bne.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800915e:	4b5f      	ldr	r3, [pc, #380]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009166:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009174:	d012      	beq.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009176:	e023      	b.n	80091c0 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009178:	4b58      	ldr	r3, [pc, #352]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009184:	d107      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fbc4 	bl	8009918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009194:	e0f9      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800919a:	e0f6      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800919c:	4b4f      	ldr	r3, [pc, #316]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091a8:	d107      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091aa:	f107 0318 	add.w	r3, r7, #24
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 f90a 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80091b8:	e0e7      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091be:	e0e4      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80091c0:	2300      	movs	r3, #0
 80091c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091c4:	e0e1      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091cc:	f040 808e 	bne.w	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80091d0:	4b42      	ldr	r3, [pc, #264]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80091d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80091d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091e0:	d06b      	beq.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091e8:	d874      	bhi.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f0:	d056      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f8:	d86c      	bhi.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009200:	d03b      	beq.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009208:	d864      	bhi.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009210:	d021      	beq.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009218:	d85c      	bhi.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800921a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009226:	d004      	beq.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8009228:	e054      	b.n	80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800922a:	f000 f8b7 	bl	800939c <HAL_RCCEx_GetD3PCLK1Freq>
 800922e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009230:	e0ab      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009232:	4b2a      	ldr	r3, [pc, #168]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800923a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800923e:	d107      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009240:	f107 0318 	add.w	r3, r7, #24
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f8bf 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800924e:	e09c      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009254:	e099      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009256:	4b21      	ldr	r3, [pc, #132]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800925e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009262:	d107      	bne.n	8009274 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	4618      	mov	r0, r3
 800926a:	f000 fa01 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009272:	e08a      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009278:	e087      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800927a:	4b18      	ldr	r3, [pc, #96]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0304 	and.w	r3, r3, #4
 8009282:	2b04      	cmp	r3, #4
 8009284:	d109      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009286:	4b15      	ldr	r3, [pc, #84]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	08db      	lsrs	r3, r3, #3
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	4a13      	ldr	r2, [pc, #76]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8009292:	fa22 f303 	lsr.w	r3, r2, r3
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009298:	e077      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800929e:	e074      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092a0:	4b0e      	ldr	r3, [pc, #56]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ac:	d102      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 80092ae:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80092b2:	e06a      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092b8:	e067      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092ba:	4b08      	ldr	r3, [pc, #32]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092c6:	d102      	bne.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80092cc:	e05d      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d2:	e05a      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092d8:	e057      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80092da:	bf00      	nop
 80092dc:	58024400 	.word	0x58024400
 80092e0:	03d09000 	.word	0x03d09000
 80092e4:	003d0900 	.word	0x003d0900
 80092e8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f2:	d148      	bne.n	8009386 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80092f4:	4b27      	ldr	r3, [pc, #156]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80092f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80092fc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009304:	d02a      	beq.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8009306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800930c:	d838      	bhi.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800931a:	d00d      	beq.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800931c:	e030      	b.n	8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800931e:	4b1d      	ldr	r3, [pc, #116]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800932a:	d102      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800932c:	4b1a      	ldr	r3, [pc, #104]	; (8009398 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009330:	e02b      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009336:	e028      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009338:	4b16      	ldr	r3, [pc, #88]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009344:	d107      	bne.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800934a:	4618      	mov	r0, r3
 800934c:	f000 fae4 	bl	8009918 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009354:	e019      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800935a:	e016      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800935c:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009368:	d107      	bne.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800936a:	f107 0318 	add.w	r3, r7, #24
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f82a 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009378:	e007      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800937e:	e004      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009384:	e001      	b.n	800938a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800938c:	4618      	mov	r0, r3
 800938e:	3740      	adds	r7, #64	; 0x40
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	58024400 	.word	0x58024400
 8009398:	017d7840 	.word	0x017d7840

0800939c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80093a0:	f7fe fc80 	bl	8007ca4 <HAL_RCC_GetHCLKFreq>
 80093a4:	4602      	mov	r2, r0
 80093a6:	4b06      	ldr	r3, [pc, #24]	; (80093c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	091b      	lsrs	r3, r3, #4
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	4904      	ldr	r1, [pc, #16]	; (80093c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80093b2:	5ccb      	ldrb	r3, [r1, r3]
 80093b4:	f003 031f 	and.w	r3, r3, #31
 80093b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80093bc:	4618      	mov	r0, r3
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	58024400 	.word	0x58024400
 80093c4:	080118dc 	.word	0x080118dc

080093c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b089      	sub	sp, #36	; 0x24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093d0:	4ba1      	ldr	r3, [pc, #644]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80093da:	4b9f      	ldr	r3, [pc, #636]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093de:	0b1b      	lsrs	r3, r3, #12
 80093e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80093e6:	4b9c      	ldr	r3, [pc, #624]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	091b      	lsrs	r3, r3, #4
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80093f2:	4b99      	ldr	r3, [pc, #612]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f6:	08db      	lsrs	r3, r3, #3
 80093f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	fb02 f303 	mul.w	r3, r2, r3
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 8111 	beq.w	8009638 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	2b02      	cmp	r3, #2
 800941a:	f000 8083 	beq.w	8009524 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	2b02      	cmp	r3, #2
 8009422:	f200 80a1 	bhi.w	8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d056      	beq.n	80094e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009432:	e099      	b.n	8009568 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009434:	4b88      	ldr	r3, [pc, #544]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b00      	cmp	r3, #0
 800943e:	d02d      	beq.n	800949c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009440:	4b85      	ldr	r3, [pc, #532]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	08db      	lsrs	r3, r3, #3
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	4a84      	ldr	r2, [pc, #528]	; (800965c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800944c:	fa22 f303 	lsr.w	r3, r2, r3
 8009450:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	ee07 3a90 	vmov	s15, r3
 8009458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946a:	4b7b      	ldr	r3, [pc, #492]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947a:	ed97 6a03 	vldr	s12, [r7, #12]
 800947e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800948e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009496:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800949a:	e087      	b.n	80095ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009664 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80094aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ae:	4b6a      	ldr	r3, [pc, #424]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094be:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094de:	e065      	b.n	80095ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f2:	4b59      	ldr	r3, [pc, #356]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fa:	ee07 3a90 	vmov	s15, r3
 80094fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009502:	ed97 6a03 	vldr	s12, [r7, #12]
 8009506:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800950a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800951a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009522:	e043      	b.n	80095ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	ee07 3a90 	vmov	s15, r3
 800952a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800966c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009536:	4b48      	ldr	r3, [pc, #288]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009546:	ed97 6a03 	vldr	s12, [r7, #12]
 800954a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800954e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800955a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009566:	e021      	b.n	80095ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009668 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800957a:	4b37      	ldr	r3, [pc, #220]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958a:	ed97 6a03 	vldr	s12, [r7, #12]
 800958e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009660 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800959a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800959e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095aa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80095ac:	4b2a      	ldr	r3, [pc, #168]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b0:	0a5b      	lsrs	r3, r3, #9
 80095b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80095ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d2:	ee17 2a90 	vmov	r2, s15
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80095da:	4b1f      	ldr	r3, [pc, #124]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095de:	0c1b      	lsrs	r3, r3, #16
 80095e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095e4:	ee07 3a90 	vmov	s15, r3
 80095e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009600:	ee17 2a90 	vmov	r2, s15
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009608:	4b13      	ldr	r3, [pc, #76]	; (8009658 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	0e1b      	lsrs	r3, r3, #24
 800960e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800961e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009622:	edd7 6a07 	vldr	s13, [r7, #28]
 8009626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800962a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800962e:	ee17 2a90 	vmov	r2, s15
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009636:	e008      	b.n	800964a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	609a      	str	r2, [r3, #8]
}
 800964a:	bf00      	nop
 800964c:	3724      	adds	r7, #36	; 0x24
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	58024400 	.word	0x58024400
 800965c:	03d09000 	.word	0x03d09000
 8009660:	46000000 	.word	0x46000000
 8009664:	4c742400 	.word	0x4c742400
 8009668:	4a742400 	.word	0x4a742400
 800966c:	4bbebc20 	.word	0x4bbebc20

08009670 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009670:	b480      	push	{r7}
 8009672:	b089      	sub	sp, #36	; 0x24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009678:	4ba1      	ldr	r3, [pc, #644]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800967a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009682:	4b9f      	ldr	r3, [pc, #636]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009686:	0d1b      	lsrs	r3, r3, #20
 8009688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800968c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800968e:	4b9c      	ldr	r3, [pc, #624]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009692:	0a1b      	lsrs	r3, r3, #8
 8009694:	f003 0301 	and.w	r3, r3, #1
 8009698:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800969a:	4b99      	ldr	r3, [pc, #612]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800969c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969e:	08db      	lsrs	r3, r3, #3
 80096a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	fb02 f303 	mul.w	r3, r2, r3
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8111 	beq.w	80098e0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	f000 8083 	beq.w	80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	f200 80a1 	bhi.w	8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d003      	beq.n	80096dc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d056      	beq.n	8009788 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80096da:	e099      	b.n	8009810 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096dc:	4b88      	ldr	r3, [pc, #544]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0320 	and.w	r3, r3, #32
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d02d      	beq.n	8009744 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096e8:	4b85      	ldr	r3, [pc, #532]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	08db      	lsrs	r3, r3, #3
 80096ee:	f003 0303 	and.w	r3, r3, #3
 80096f2:	4a84      	ldr	r2, [pc, #528]	; (8009904 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80096f4:	fa22 f303 	lsr.w	r3, r2, r3
 80096f8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009712:	4b7b      	ldr	r3, [pc, #492]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009722:	ed97 6a03 	vldr	s12, [r7, #12]
 8009726:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800972a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800972e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800973e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009742:	e087      	b.n	8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800990c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009756:	4b6a      	ldr	r3, [pc, #424]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009766:	ed97 6a03 	vldr	s12, [r7, #12]
 800976a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800976e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009786:	e065      	b.n	8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009792:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979a:	4b59      	ldr	r3, [pc, #356]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800979c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800979e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a2:	ee07 3a90 	vmov	s15, r3
 80097a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ca:	e043      	b.n	8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80097da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097de:	4b48      	ldr	r3, [pc, #288]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80097f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80097f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800980e:	e021      	b.n	8009854 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	ee07 3a90 	vmov	s15, r3
 8009816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800981a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009910 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800981e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009822:	4b37      	ldr	r3, [pc, #220]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009832:	ed97 6a03 	vldr	s12, [r7, #12]
 8009836:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009908 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800983a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800984a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009852:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009854:	4b2a      	ldr	r3, [pc, #168]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009858:	0a5b      	lsrs	r3, r3, #9
 800985a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800986a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800986e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800987a:	ee17 2a90 	vmov	r2, s15
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009882:	4b1f      	ldr	r3, [pc, #124]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	0c1b      	lsrs	r3, r3, #16
 8009888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800988c:	ee07 3a90 	vmov	s15, r3
 8009890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009894:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009898:	ee37 7a87 	vadd.f32	s14, s15, s14
 800989c:	edd7 6a07 	vldr	s13, [r7, #28]
 80098a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a8:	ee17 2a90 	vmov	r2, s15
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80098b0:	4b13      	ldr	r3, [pc, #76]	; (8009900 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b4:	0e1b      	lsrs	r3, r3, #24
 80098b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098d6:	ee17 2a90 	vmov	r2, s15
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80098de:	e008      	b.n	80098f2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	609a      	str	r2, [r3, #8]
}
 80098f2:	bf00      	nop
 80098f4:	3724      	adds	r7, #36	; 0x24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	58024400 	.word	0x58024400
 8009904:	03d09000 	.word	0x03d09000
 8009908:	46000000 	.word	0x46000000
 800990c:	4c742400 	.word	0x4c742400
 8009910:	4a742400 	.word	0x4a742400
 8009914:	4bbebc20 	.word	0x4bbebc20

08009918 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009918:	b480      	push	{r7}
 800991a:	b089      	sub	sp, #36	; 0x24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009920:	4ba0      	ldr	r3, [pc, #640]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009924:	f003 0303 	and.w	r3, r3, #3
 8009928:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800992a:	4b9e      	ldr	r3, [pc, #632]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	091b      	lsrs	r3, r3, #4
 8009930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009934:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009936:	4b9b      	ldr	r3, [pc, #620]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009940:	4b98      	ldr	r3, [pc, #608]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009944:	08db      	lsrs	r3, r3, #3
 8009946:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	ee07 3a90 	vmov	s15, r3
 8009954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009958:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 8111 	beq.w	8009b86 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	2b02      	cmp	r3, #2
 8009968:	f000 8083 	beq.w	8009a72 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	2b02      	cmp	r3, #2
 8009970:	f200 80a1 	bhi.w	8009ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d003      	beq.n	8009982 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d056      	beq.n	8009a2e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009980:	e099      	b.n	8009ab6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009982:	4b88      	ldr	r3, [pc, #544]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0320 	and.w	r3, r3, #32
 800998a:	2b00      	cmp	r3, #0
 800998c:	d02d      	beq.n	80099ea <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800998e:	4b85      	ldr	r3, [pc, #532]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	08db      	lsrs	r3, r3, #3
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	4a83      	ldr	r2, [pc, #524]	; (8009ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800999a:	fa22 f303 	lsr.w	r3, r2, r3
 800999e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	ee07 3a90 	vmov	s15, r3
 80099a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	ee07 3a90 	vmov	s15, r3
 80099b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b8:	4b7a      	ldr	r3, [pc, #488]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c0:	ee07 3a90 	vmov	s15, r3
 80099c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80099cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80099d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80099e8:	e087      	b.n	8009afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	ee07 3a90 	vmov	s15, r3
 80099f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80099f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fc:	4b69      	ldr	r3, [pc, #420]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a04:	ee07 3a90 	vmov	s15, r3
 8009a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a10:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a2c:	e065      	b.n	8009afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	ee07 3a90 	vmov	s15, r3
 8009a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a38:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a40:	4b58      	ldr	r3, [pc, #352]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a48:	ee07 3a90 	vmov	s15, r3
 8009a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a50:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a54:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a70:	e043      	b.n	8009afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	ee07 3a90 	vmov	s15, r3
 8009a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a84:	4b47      	ldr	r3, [pc, #284]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8c:	ee07 3a90 	vmov	s15, r3
 8009a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a94:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a98:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ab4:	e021      	b.n	8009afa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	ee07 3a90 	vmov	s15, r3
 8009abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac8:	4b36      	ldr	r3, [pc, #216]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad0:	ee07 3a90 	vmov	s15, r3
 8009ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009adc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009bac <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009ae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009af8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009afa:	4b2a      	ldr	r3, [pc, #168]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afe:	0a5b      	lsrs	r3, r3, #9
 8009b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b20:	ee17 2a90 	vmov	r2, s15
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009b28:	4b1e      	ldr	r3, [pc, #120]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2c:	0c1b      	lsrs	r3, r3, #16
 8009b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b4e:	ee17 2a90 	vmov	r2, s15
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009b56:	4b13      	ldr	r3, [pc, #76]	; (8009ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	0e1b      	lsrs	r3, r3, #24
 8009b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b7c:	ee17 2a90 	vmov	r2, s15
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009b84:	e008      	b.n	8009b98 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	609a      	str	r2, [r3, #8]
}
 8009b98:	bf00      	nop
 8009b9a:	3724      	adds	r7, #36	; 0x24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	03d09000 	.word	0x03d09000
 8009bac:	46000000 	.word	0x46000000
 8009bb0:	4c742400 	.word	0x4c742400
 8009bb4:	4a742400 	.word	0x4a742400
 8009bb8:	4bbebc20 	.word	0x4bbebc20

08009bbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bca:	4b53      	ldr	r3, [pc, #332]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bce:	f003 0303 	and.w	r3, r3, #3
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d101      	bne.n	8009bda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e099      	b.n	8009d0e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009bda:	4b4f      	ldr	r3, [pc, #316]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a4e      	ldr	r2, [pc, #312]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009be0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009be6:	f7f8 fd99 	bl	800271c <HAL_GetTick>
 8009bea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009bec:	e008      	b.n	8009c00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009bee:	f7f8 fd95 	bl	800271c <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d901      	bls.n	8009c00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e086      	b.n	8009d0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c00:	4b45      	ldr	r3, [pc, #276]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1f0      	bne.n	8009bee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c0c:	4b42      	ldr	r3, [pc, #264]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	031b      	lsls	r3, r3, #12
 8009c1a:	493f      	ldr	r1, [pc, #252]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	025b      	lsls	r3, r3, #9
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	431a      	orrs	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	041b      	lsls	r3, r3, #16
 8009c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c42:	431a      	orrs	r2, r3
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	061b      	lsls	r3, r3, #24
 8009c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c50:	4931      	ldr	r1, [pc, #196]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c52:	4313      	orrs	r3, r2
 8009c54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c56:	4b30      	ldr	r3, [pc, #192]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	492d      	ldr	r1, [pc, #180]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c68:	4b2b      	ldr	r3, [pc, #172]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	f023 0220 	bic.w	r2, r3, #32
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	699b      	ldr	r3, [r3, #24]
 8009c74:	4928      	ldr	r1, [pc, #160]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c7a:	4b27      	ldr	r3, [pc, #156]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	4a26      	ldr	r2, [pc, #152]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c80:	f023 0310 	bic.w	r3, r3, #16
 8009c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c86:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c8a:	4b24      	ldr	r3, [pc, #144]	; (8009d1c <RCCEx_PLL2_Config+0x160>)
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	69d2      	ldr	r2, [r2, #28]
 8009c92:	00d2      	lsls	r2, r2, #3
 8009c94:	4920      	ldr	r1, [pc, #128]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c9a:	4b1f      	ldr	r3, [pc, #124]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	4a1e      	ldr	r2, [pc, #120]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009ca0:	f043 0310 	orr.w	r3, r3, #16
 8009ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d106      	bne.n	8009cba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009cac:	4b1a      	ldr	r3, [pc, #104]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	4a19      	ldr	r2, [pc, #100]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009cb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cb8:	e00f      	b.n	8009cda <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d106      	bne.n	8009cce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009cc0:	4b15      	ldr	r3, [pc, #84]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	4a14      	ldr	r2, [pc, #80]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ccc:	e005      	b.n	8009cda <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd2:	4a11      	ldr	r2, [pc, #68]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009cda:	4b0f      	ldr	r3, [pc, #60]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a0e      	ldr	r2, [pc, #56]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009ce0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce6:	f7f8 fd19 	bl	800271c <HAL_GetTick>
 8009cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cec:	e008      	b.n	8009d00 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009cee:	f7f8 fd15 	bl	800271c <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d901      	bls.n	8009d00 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e006      	b.n	8009d0e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009d00:	4b05      	ldr	r3, [pc, #20]	; (8009d18 <RCCEx_PLL2_Config+0x15c>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0f0      	beq.n	8009cee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	ffff0007 	.word	0xffff0007

08009d20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d2e:	4b53      	ldr	r3, [pc, #332]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d32:	f003 0303 	and.w	r3, r3, #3
 8009d36:	2b03      	cmp	r3, #3
 8009d38:	d101      	bne.n	8009d3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e099      	b.n	8009e72 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d3e:	4b4f      	ldr	r3, [pc, #316]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a4e      	ldr	r2, [pc, #312]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d4a:	f7f8 fce7 	bl	800271c <HAL_GetTick>
 8009d4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d50:	e008      	b.n	8009d64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009d52:	f7f8 fce3 	bl	800271c <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d901      	bls.n	8009d64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e086      	b.n	8009e72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d64:	4b45      	ldr	r3, [pc, #276]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1f0      	bne.n	8009d52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d70:	4b42      	ldr	r3, [pc, #264]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	051b      	lsls	r3, r3, #20
 8009d7e:	493f      	ldr	r1, [pc, #252]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	628b      	str	r3, [r1, #40]	; 0x28
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	3b01      	subs	r3, #1
 8009d94:	025b      	lsls	r3, r3, #9
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009da6:	431a      	orrs	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	061b      	lsls	r3, r3, #24
 8009db0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009db4:	4931      	ldr	r1, [pc, #196]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009dba:	4b30      	ldr	r3, [pc, #192]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	492d      	ldr	r1, [pc, #180]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009dcc:	4b2b      	ldr	r3, [pc, #172]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	699b      	ldr	r3, [r3, #24]
 8009dd8:	4928      	ldr	r1, [pc, #160]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009dde:	4b27      	ldr	r3, [pc, #156]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	4a26      	ldr	r2, [pc, #152]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009de8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009dea:	4b24      	ldr	r3, [pc, #144]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dee:	4b24      	ldr	r3, [pc, #144]	; (8009e80 <RCCEx_PLL3_Config+0x160>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	69d2      	ldr	r2, [r2, #28]
 8009df6:	00d2      	lsls	r2, r2, #3
 8009df8:	4920      	ldr	r1, [pc, #128]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009dfe:	4b1f      	ldr	r3, [pc, #124]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e02:	4a1e      	ldr	r2, [pc, #120]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e10:	4b1a      	ldr	r3, [pc, #104]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e1c:	e00f      	b.n	8009e3e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d106      	bne.n	8009e32 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009e24:	4b15      	ldr	r3, [pc, #84]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e28:	4a14      	ldr	r2, [pc, #80]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e30:	e005      	b.n	8009e3e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e32:	4b12      	ldr	r3, [pc, #72]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	4a11      	ldr	r2, [pc, #68]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a0e      	ldr	r2, [pc, #56]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e4a:	f7f8 fc67 	bl	800271c <HAL_GetTick>
 8009e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e50:	e008      	b.n	8009e64 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009e52:	f7f8 fc63 	bl	800271c <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d901      	bls.n	8009e64 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e006      	b.n	8009e72 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e64:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <RCCEx_PLL3_Config+0x15c>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0f0      	beq.n	8009e52 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	58024400 	.word	0x58024400
 8009e80:	ffff0007 	.word	0xffff0007

08009e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e049      	b.n	8009f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d106      	bne.n	8009eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7f8 f89e 	bl	8001fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	f000 fcba 	bl	800a83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
	...

08009f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d001      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e05e      	b.n	800a00a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a2b      	ldr	r2, [pc, #172]	; (800a018 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d02c      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f76:	d027      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a27      	ldr	r2, [pc, #156]	; (800a01c <HAL_TIM_Base_Start_IT+0xe8>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d022      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a26      	ldr	r2, [pc, #152]	; (800a020 <HAL_TIM_Base_Start_IT+0xec>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d01d      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a24      	ldr	r2, [pc, #144]	; (800a024 <HAL_TIM_Base_Start_IT+0xf0>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d018      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a23      	ldr	r2, [pc, #140]	; (800a028 <HAL_TIM_Base_Start_IT+0xf4>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d013      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a21      	ldr	r2, [pc, #132]	; (800a02c <HAL_TIM_Base_Start_IT+0xf8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d00e      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a20      	ldr	r2, [pc, #128]	; (800a030 <HAL_TIM_Base_Start_IT+0xfc>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d009      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a1e      	ldr	r2, [pc, #120]	; (800a034 <HAL_TIM_Base_Start_IT+0x100>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d004      	beq.n	8009fc8 <HAL_TIM_Base_Start_IT+0x94>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <HAL_TIM_Base_Start_IT+0x104>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d115      	bne.n	8009ff4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <HAL_TIM_Base_Start_IT+0x108>)
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b06      	cmp	r3, #6
 8009fd8:	d015      	beq.n	800a006 <HAL_TIM_Base_Start_IT+0xd2>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fe0:	d011      	beq.n	800a006 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f042 0201 	orr.w	r2, r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff2:	e008      	b.n	800a006 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f042 0201 	orr.w	r2, r2, #1
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	e000      	b.n	800a008 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3714      	adds	r7, #20
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	40010000 	.word	0x40010000
 800a01c:	40000400 	.word	0x40000400
 800a020:	40000800 	.word	0x40000800
 800a024:	40000c00 	.word	0x40000c00
 800a028:	40010400 	.word	0x40010400
 800a02c:	40001800 	.word	0x40001800
 800a030:	40014000 	.word	0x40014000
 800a034:	4000e000 	.word	0x4000e000
 800a038:	4000e400 	.word	0x4000e400
 800a03c:	00010007 	.word	0x00010007

0800a040 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0201 	bic.w	r2, r2, #1
 800a056:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6a1a      	ldr	r2, [r3, #32]
 800a05e:	f241 1311 	movw	r3, #4369	; 0x1111
 800a062:	4013      	ands	r3, r2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10f      	bne.n	800a088 <HAL_TIM_Base_Stop_IT+0x48>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6a1a      	ldr	r2, [r3, #32]
 800a06e:	f240 4344 	movw	r3, #1092	; 0x444
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d107      	bne.n	800a088 <HAL_TIM_Base_Stop_IT+0x48>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f022 0201 	bic.w	r2, r2, #1
 800a086:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e049      	b.n	800a144 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d106      	bne.n	800a0ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7f7 ff71 	bl	8001fac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4619      	mov	r1, r3
 800a0dc:	4610      	mov	r0, r2
 800a0de:	f000 fbad 	bl	800a83c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <HAL_TIM_PWM_Start+0x24>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b01      	cmp	r3, #1
 800a166:	bf14      	ite	ne
 800a168:	2301      	movne	r3, #1
 800a16a:	2300      	moveq	r3, #0
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	e03c      	b.n	800a1ea <HAL_TIM_PWM_Start+0x9e>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b04      	cmp	r3, #4
 800a174:	d109      	bne.n	800a18a <HAL_TIM_PWM_Start+0x3e>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b01      	cmp	r3, #1
 800a180:	bf14      	ite	ne
 800a182:	2301      	movne	r3, #1
 800a184:	2300      	moveq	r3, #0
 800a186:	b2db      	uxtb	r3, r3
 800a188:	e02f      	b.n	800a1ea <HAL_TIM_PWM_Start+0x9e>
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b08      	cmp	r3, #8
 800a18e:	d109      	bne.n	800a1a4 <HAL_TIM_PWM_Start+0x58>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b01      	cmp	r3, #1
 800a19a:	bf14      	ite	ne
 800a19c:	2301      	movne	r3, #1
 800a19e:	2300      	moveq	r3, #0
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	e022      	b.n	800a1ea <HAL_TIM_PWM_Start+0x9e>
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	2b0c      	cmp	r3, #12
 800a1a8:	d109      	bne.n	800a1be <HAL_TIM_PWM_Start+0x72>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	bf14      	ite	ne
 800a1b6:	2301      	movne	r3, #1
 800a1b8:	2300      	moveq	r3, #0
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	e015      	b.n	800a1ea <HAL_TIM_PWM_Start+0x9e>
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b10      	cmp	r3, #16
 800a1c2:	d109      	bne.n	800a1d8 <HAL_TIM_PWM_Start+0x8c>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	bf14      	ite	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	e008      	b.n	800a1ea <HAL_TIM_PWM_Start+0x9e>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	bf14      	ite	ne
 800a1e4:	2301      	movne	r3, #1
 800a1e6:	2300      	moveq	r3, #0
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e0ab      	b.n	800a34a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <HAL_TIM_PWM_Start+0xb6>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2202      	movs	r2, #2
 800a1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a200:	e023      	b.n	800a24a <HAL_TIM_PWM_Start+0xfe>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	2b04      	cmp	r3, #4
 800a206:	d104      	bne.n	800a212 <HAL_TIM_PWM_Start+0xc6>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a210:	e01b      	b.n	800a24a <HAL_TIM_PWM_Start+0xfe>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	2b08      	cmp	r3, #8
 800a216:	d104      	bne.n	800a222 <HAL_TIM_PWM_Start+0xd6>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a220:	e013      	b.n	800a24a <HAL_TIM_PWM_Start+0xfe>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b0c      	cmp	r3, #12
 800a226:	d104      	bne.n	800a232 <HAL_TIM_PWM_Start+0xe6>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a230:	e00b      	b.n	800a24a <HAL_TIM_PWM_Start+0xfe>
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	2b10      	cmp	r3, #16
 800a236:	d104      	bne.n	800a242 <HAL_TIM_PWM_Start+0xf6>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a240:	e003      	b.n	800a24a <HAL_TIM_PWM_Start+0xfe>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2202      	movs	r2, #2
 800a246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2201      	movs	r2, #1
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fe6e 	bl	800af34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a3d      	ldr	r2, [pc, #244]	; (800a354 <HAL_TIM_PWM_Start+0x208>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d013      	beq.n	800a28a <HAL_TIM_PWM_Start+0x13e>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a3c      	ldr	r2, [pc, #240]	; (800a358 <HAL_TIM_PWM_Start+0x20c>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00e      	beq.n	800a28a <HAL_TIM_PWM_Start+0x13e>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a3a      	ldr	r2, [pc, #232]	; (800a35c <HAL_TIM_PWM_Start+0x210>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d009      	beq.n	800a28a <HAL_TIM_PWM_Start+0x13e>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a39      	ldr	r2, [pc, #228]	; (800a360 <HAL_TIM_PWM_Start+0x214>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d004      	beq.n	800a28a <HAL_TIM_PWM_Start+0x13e>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a37      	ldr	r2, [pc, #220]	; (800a364 <HAL_TIM_PWM_Start+0x218>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d101      	bne.n	800a28e <HAL_TIM_PWM_Start+0x142>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <HAL_TIM_PWM_Start+0x144>
 800a28e:	2300      	movs	r3, #0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a2a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a2a      	ldr	r2, [pc, #168]	; (800a354 <HAL_TIM_PWM_Start+0x208>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d02c      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b6:	d027      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a2a      	ldr	r2, [pc, #168]	; (800a368 <HAL_TIM_PWM_Start+0x21c>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d022      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a29      	ldr	r2, [pc, #164]	; (800a36c <HAL_TIM_PWM_Start+0x220>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d01d      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a27      	ldr	r2, [pc, #156]	; (800a370 <HAL_TIM_PWM_Start+0x224>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d018      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a1f      	ldr	r2, [pc, #124]	; (800a358 <HAL_TIM_PWM_Start+0x20c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d013      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a23      	ldr	r2, [pc, #140]	; (800a374 <HAL_TIM_PWM_Start+0x228>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d00e      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a1b      	ldr	r2, [pc, #108]	; (800a35c <HAL_TIM_PWM_Start+0x210>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d009      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1f      	ldr	r2, [pc, #124]	; (800a378 <HAL_TIM_PWM_Start+0x22c>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d004      	beq.n	800a308 <HAL_TIM_PWM_Start+0x1bc>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <HAL_TIM_PWM_Start+0x230>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d115      	bne.n	800a334 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	689a      	ldr	r2, [r3, #8]
 800a30e:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <HAL_TIM_PWM_Start+0x234>)
 800a310:	4013      	ands	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b06      	cmp	r3, #6
 800a318:	d015      	beq.n	800a346 <HAL_TIM_PWM_Start+0x1fa>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a320:	d011      	beq.n	800a346 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f042 0201 	orr.w	r2, r2, #1
 800a330:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a332:	e008      	b.n	800a346 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f042 0201 	orr.w	r2, r2, #1
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	e000      	b.n	800a348 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a346:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	40010000 	.word	0x40010000
 800a358:	40010400 	.word	0x40010400
 800a35c:	40014000 	.word	0x40014000
 800a360:	40014400 	.word	0x40014400
 800a364:	40014800 	.word	0x40014800
 800a368:	40000400 	.word	0x40000400
 800a36c:	40000800 	.word	0x40000800
 800a370:	40000c00 	.word	0x40000c00
 800a374:	40001800 	.word	0x40001800
 800a378:	4000e000 	.word	0x4000e000
 800a37c:	4000e400 	.word	0x4000e400
 800a380:	00010007 	.word	0x00010007

0800a384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	2b02      	cmp	r3, #2
 800a398:	d122      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f003 0302 	and.w	r3, r3, #2
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d11b      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f06f 0202 	mvn.w	r2, #2
 800a3b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fa1a 	bl	800a800 <HAL_TIM_IC_CaptureCallback>
 800a3cc:	e005      	b.n	800a3da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fa0c 	bl	800a7ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fa1d 	bl	800a814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0304 	and.w	r3, r3, #4
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d122      	bne.n	800a434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b04      	cmp	r3, #4
 800a3fa:	d11b      	bne.n	800a434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0204 	mvn.w	r2, #4
 800a404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2202      	movs	r2, #2
 800a40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f9f0 	bl	800a800 <HAL_TIM_IC_CaptureCallback>
 800a420:	e005      	b.n	800a42e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f9e2 	bl	800a7ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 f9f3 	bl	800a814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0308 	and.w	r3, r3, #8
 800a43e:	2b08      	cmp	r3, #8
 800a440:	d122      	bne.n	800a488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f003 0308 	and.w	r3, r3, #8
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d11b      	bne.n	800a488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f06f 0208 	mvn.w	r2, #8
 800a458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2204      	movs	r2, #4
 800a45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	f003 0303 	and.w	r3, r3, #3
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f9c6 	bl	800a800 <HAL_TIM_IC_CaptureCallback>
 800a474:	e005      	b.n	800a482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 f9b8 	bl	800a7ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f9c9 	bl	800a814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	f003 0310 	and.w	r3, r3, #16
 800a492:	2b10      	cmp	r3, #16
 800a494:	d122      	bne.n	800a4dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	f003 0310 	and.w	r3, r3, #16
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	d11b      	bne.n	800a4dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f06f 0210 	mvn.w	r2, #16
 800a4ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 f99c 	bl	800a800 <HAL_TIM_IC_CaptureCallback>
 800a4c8:	e005      	b.n	800a4d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 f98e 	bl	800a7ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f99f 	bl	800a814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d10e      	bne.n	800a508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d107      	bne.n	800a508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f06f 0201 	mvn.w	r2, #1
 800a500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7f7 f81c 	bl	8001540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a512:	2b80      	cmp	r3, #128	; 0x80
 800a514:	d10e      	bne.n	800a534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a520:	2b80      	cmp	r3, #128	; 0x80
 800a522:	d107      	bne.n	800a534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a52c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 fdcc 	bl	800b0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a542:	d10e      	bne.n	800a562 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a54e:	2b80      	cmp	r3, #128	; 0x80
 800a550:	d107      	bne.n	800a562 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 fdbf 	bl	800b0e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a56c:	2b40      	cmp	r3, #64	; 0x40
 800a56e:	d10e      	bne.n	800a58e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57a:	2b40      	cmp	r3, #64	; 0x40
 800a57c:	d107      	bne.n	800a58e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f94d 	bl	800a828 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b20      	cmp	r3, #32
 800a59a:	d10e      	bne.n	800a5ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f003 0320 	and.w	r3, r3, #32
 800a5a6:	2b20      	cmp	r3, #32
 800a5a8:	d107      	bne.n	800a5ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f06f 0220 	mvn.w	r2, #32
 800a5b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fd7f 	bl	800b0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5ba:	bf00      	nop
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
	...

0800a5c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e0ff      	b.n	800a7e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b14      	cmp	r3, #20
 800a5ee:	f200 80f0 	bhi.w	800a7d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a64d 	.word	0x0800a64d
 800a5fc:	0800a7d3 	.word	0x0800a7d3
 800a600:	0800a7d3 	.word	0x0800a7d3
 800a604:	0800a7d3 	.word	0x0800a7d3
 800a608:	0800a68d 	.word	0x0800a68d
 800a60c:	0800a7d3 	.word	0x0800a7d3
 800a610:	0800a7d3 	.word	0x0800a7d3
 800a614:	0800a7d3 	.word	0x0800a7d3
 800a618:	0800a6cf 	.word	0x0800a6cf
 800a61c:	0800a7d3 	.word	0x0800a7d3
 800a620:	0800a7d3 	.word	0x0800a7d3
 800a624:	0800a7d3 	.word	0x0800a7d3
 800a628:	0800a70f 	.word	0x0800a70f
 800a62c:	0800a7d3 	.word	0x0800a7d3
 800a630:	0800a7d3 	.word	0x0800a7d3
 800a634:	0800a7d3 	.word	0x0800a7d3
 800a638:	0800a751 	.word	0x0800a751
 800a63c:	0800a7d3 	.word	0x0800a7d3
 800a640:	0800a7d3 	.word	0x0800a7d3
 800a644:	0800a7d3 	.word	0x0800a7d3
 800a648:	0800a791 	.word	0x0800a791
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 f998 	bl	800a988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0208 	orr.w	r2, r2, #8
 800a666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	699a      	ldr	r2, [r3, #24]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0204 	bic.w	r2, r2, #4
 800a676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6999      	ldr	r1, [r3, #24]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	619a      	str	r2, [r3, #24]
      break;
 800a68a:	e0a5      	b.n	800a7d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68b9      	ldr	r1, [r7, #8]
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fa08 	bl	800aaa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	699a      	ldr	r2, [r3, #24]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6999      	ldr	r1, [r3, #24]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	021a      	lsls	r2, r3, #8
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	619a      	str	r2, [r3, #24]
      break;
 800a6cc:	e084      	b.n	800a7d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f000 fa71 	bl	800abbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f042 0208 	orr.w	r2, r2, #8
 800a6e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69da      	ldr	r2, [r3, #28]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0204 	bic.w	r2, r2, #4
 800a6f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	69d9      	ldr	r1, [r3, #28]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	691a      	ldr	r2, [r3, #16]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	61da      	str	r2, [r3, #28]
      break;
 800a70c:	e064      	b.n	800a7d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68b9      	ldr	r1, [r7, #8]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fad9 	bl	800accc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	69da      	ldr	r2, [r3, #28]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69da      	ldr	r2, [r3, #28]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69d9      	ldr	r1, [r3, #28]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	021a      	lsls	r2, r3, #8
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	61da      	str	r2, [r3, #28]
      break;
 800a74e:	e043      	b.n	800a7d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fb22 	bl	800ada0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0208 	orr.w	r2, r2, #8
 800a76a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0204 	bic.w	r2, r2, #4
 800a77a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	691a      	ldr	r2, [r3, #16]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a78e:	e023      	b.n	800a7d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68b9      	ldr	r1, [r7, #8]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fb66 	bl	800ae68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	021a      	lsls	r2, r3, #8
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a7d0:	e002      	b.n	800a7d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3718      	adds	r7, #24
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop

0800a7ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a44      	ldr	r2, [pc, #272]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d013      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a85a:	d00f      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	4a41      	ldr	r2, [pc, #260]	; (800a964 <TIM_Base_SetConfig+0x128>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d00b      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a40      	ldr	r2, [pc, #256]	; (800a968 <TIM_Base_SetConfig+0x12c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d007      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a3f      	ldr	r2, [pc, #252]	; (800a96c <TIM_Base_SetConfig+0x130>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d003      	beq.n	800a87c <TIM_Base_SetConfig+0x40>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	4a3e      	ldr	r2, [pc, #248]	; (800a970 <TIM_Base_SetConfig+0x134>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d108      	bne.n	800a88e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a33      	ldr	r2, [pc, #204]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d027      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89c:	d023      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a30      	ldr	r2, [pc, #192]	; (800a964 <TIM_Base_SetConfig+0x128>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d01f      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a2f      	ldr	r2, [pc, #188]	; (800a968 <TIM_Base_SetConfig+0x12c>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d01b      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a2e      	ldr	r2, [pc, #184]	; (800a96c <TIM_Base_SetConfig+0x130>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d017      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a2d      	ldr	r2, [pc, #180]	; (800a970 <TIM_Base_SetConfig+0x134>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d013      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a2c      	ldr	r2, [pc, #176]	; (800a974 <TIM_Base_SetConfig+0x138>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00f      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a2b      	ldr	r2, [pc, #172]	; (800a978 <TIM_Base_SetConfig+0x13c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00b      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a2a      	ldr	r2, [pc, #168]	; (800a97c <TIM_Base_SetConfig+0x140>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d007      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a29      	ldr	r2, [pc, #164]	; (800a980 <TIM_Base_SetConfig+0x144>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d003      	beq.n	800a8e6 <TIM_Base_SetConfig+0xaa>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a28      	ldr	r2, [pc, #160]	; (800a984 <TIM_Base_SetConfig+0x148>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d108      	bne.n	800a8f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	689a      	ldr	r2, [r3, #8]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a10      	ldr	r2, [pc, #64]	; (800a960 <TIM_Base_SetConfig+0x124>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d00f      	beq.n	800a944 <TIM_Base_SetConfig+0x108>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a12      	ldr	r2, [pc, #72]	; (800a970 <TIM_Base_SetConfig+0x134>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00b      	beq.n	800a944 <TIM_Base_SetConfig+0x108>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a11      	ldr	r2, [pc, #68]	; (800a974 <TIM_Base_SetConfig+0x138>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d007      	beq.n	800a944 <TIM_Base_SetConfig+0x108>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a10      	ldr	r2, [pc, #64]	; (800a978 <TIM_Base_SetConfig+0x13c>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_Base_SetConfig+0x108>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a0f      	ldr	r2, [pc, #60]	; (800a97c <TIM_Base_SetConfig+0x140>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d103      	bne.n	800a94c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	691a      	ldr	r2, [r3, #16]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	615a      	str	r2, [r3, #20]
}
 800a952:	bf00      	nop
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	40010000 	.word	0x40010000
 800a964:	40000400 	.word	0x40000400
 800a968:	40000800 	.word	0x40000800
 800a96c:	40000c00 	.word	0x40000c00
 800a970:	40010400 	.word	0x40010400
 800a974:	40014000 	.word	0x40014000
 800a978:	40014400 	.word	0x40014400
 800a97c:	40014800 	.word	0x40014800
 800a980:	4000e000 	.word	0x4000e000
 800a984:	4000e400 	.word	0x4000e400

0800a988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a988:	b480      	push	{r7}
 800a98a:	b087      	sub	sp, #28
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	f023 0201 	bic.w	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	4b37      	ldr	r3, [pc, #220]	; (800aa90 <TIM_OC1_SetConfig+0x108>)
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 0303 	bic.w	r3, r3, #3
 800a9be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	f023 0302 	bic.w	r3, r3, #2
 800a9d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a2d      	ldr	r2, [pc, #180]	; (800aa94 <TIM_OC1_SetConfig+0x10c>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d00f      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a2c      	ldr	r2, [pc, #176]	; (800aa98 <TIM_OC1_SetConfig+0x110>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d00b      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a2b      	ldr	r2, [pc, #172]	; (800aa9c <TIM_OC1_SetConfig+0x114>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d007      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a2a      	ldr	r2, [pc, #168]	; (800aaa0 <TIM_OC1_SetConfig+0x118>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d003      	beq.n	800aa04 <TIM_OC1_SetConfig+0x7c>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a29      	ldr	r2, [pc, #164]	; (800aaa4 <TIM_OC1_SetConfig+0x11c>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d10c      	bne.n	800aa1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f023 0308 	bic.w	r3, r3, #8
 800aa0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 0304 	bic.w	r3, r3, #4
 800aa1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a1c      	ldr	r2, [pc, #112]	; (800aa94 <TIM_OC1_SetConfig+0x10c>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d00f      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a1b      	ldr	r2, [pc, #108]	; (800aa98 <TIM_OC1_SetConfig+0x110>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00b      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a1a      	ldr	r2, [pc, #104]	; (800aa9c <TIM_OC1_SetConfig+0x114>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d007      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a19      	ldr	r2, [pc, #100]	; (800aaa0 <TIM_OC1_SetConfig+0x118>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_OC1_SetConfig+0xbe>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <TIM_OC1_SetConfig+0x11c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d111      	bne.n	800aa6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	621a      	str	r2, [r3, #32]
}
 800aa84:	bf00      	nop
 800aa86:	371c      	adds	r7, #28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	fffeff8f 	.word	0xfffeff8f
 800aa94:	40010000 	.word	0x40010000
 800aa98:	40010400 	.word	0x40010400
 800aa9c:	40014000 	.word	0x40014000
 800aaa0:	40014400 	.word	0x40014400
 800aaa4:	40014800 	.word	0x40014800

0800aaa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	f023 0210 	bic.w	r2, r3, #16
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4b34      	ldr	r3, [pc, #208]	; (800aba4 <TIM_OC2_SetConfig+0xfc>)
 800aad4:	4013      	ands	r3, r2
 800aad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	f023 0320 	bic.w	r3, r3, #32
 800aaf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	011b      	lsls	r3, r3, #4
 800aafa:	697a      	ldr	r2, [r7, #20]
 800aafc:	4313      	orrs	r3, r2
 800aafe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a29      	ldr	r2, [pc, #164]	; (800aba8 <TIM_OC2_SetConfig+0x100>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d003      	beq.n	800ab10 <TIM_OC2_SetConfig+0x68>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a28      	ldr	r2, [pc, #160]	; (800abac <TIM_OC2_SetConfig+0x104>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d10d      	bne.n	800ab2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	011b      	lsls	r3, r3, #4
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a1e      	ldr	r2, [pc, #120]	; (800aba8 <TIM_OC2_SetConfig+0x100>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d00f      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a1d      	ldr	r2, [pc, #116]	; (800abac <TIM_OC2_SetConfig+0x104>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d00b      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a1c      	ldr	r2, [pc, #112]	; (800abb0 <TIM_OC2_SetConfig+0x108>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d007      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a1b      	ldr	r2, [pc, #108]	; (800abb4 <TIM_OC2_SetConfig+0x10c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d003      	beq.n	800ab54 <TIM_OC2_SetConfig+0xac>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a1a      	ldr	r2, [pc, #104]	; (800abb8 <TIM_OC2_SetConfig+0x110>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d113      	bne.n	800ab7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	693a      	ldr	r2, [r7, #16]
 800ab80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	621a      	str	r2, [r3, #32]
}
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	feff8fff 	.word	0xfeff8fff
 800aba8:	40010000 	.word	0x40010000
 800abac:	40010400 	.word	0x40010400
 800abb0:	40014000 	.word	0x40014000
 800abb4:	40014400 	.word	0x40014400
 800abb8:	40014800 	.word	0x40014800

0800abbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b087      	sub	sp, #28
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	4b33      	ldr	r3, [pc, #204]	; (800acb4 <TIM_OC3_SetConfig+0xf8>)
 800abe8:	4013      	ands	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a28      	ldr	r2, [pc, #160]	; (800acb8 <TIM_OC3_SetConfig+0xfc>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d003      	beq.n	800ac22 <TIM_OC3_SetConfig+0x66>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a27      	ldr	r2, [pc, #156]	; (800acbc <TIM_OC3_SetConfig+0x100>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d10d      	bne.n	800ac3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a1d      	ldr	r2, [pc, #116]	; (800acb8 <TIM_OC3_SetConfig+0xfc>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d00f      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a1c      	ldr	r2, [pc, #112]	; (800acbc <TIM_OC3_SetConfig+0x100>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d00b      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a1b      	ldr	r2, [pc, #108]	; (800acc0 <TIM_OC3_SetConfig+0x104>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d007      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	4a1a      	ldr	r2, [pc, #104]	; (800acc4 <TIM_OC3_SetConfig+0x108>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d003      	beq.n	800ac66 <TIM_OC3_SetConfig+0xaa>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a19      	ldr	r2, [pc, #100]	; (800acc8 <TIM_OC3_SetConfig+0x10c>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d113      	bne.n	800ac8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	695b      	ldr	r3, [r3, #20]
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	693a      	ldr	r2, [r7, #16]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	011b      	lsls	r3, r3, #4
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	621a      	str	r2, [r3, #32]
}
 800aca8:	bf00      	nop
 800acaa:	371c      	adds	r7, #28
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	fffeff8f 	.word	0xfffeff8f
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40010400 	.word	0x40010400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40014400 	.word	0x40014400
 800acc8:	40014800 	.word	0x40014800

0800accc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800accc:	b480      	push	{r7}
 800acce:	b087      	sub	sp, #28
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a1b      	ldr	r3, [r3, #32]
 800acda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6a1b      	ldr	r3, [r3, #32]
 800ace6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acf4:	68fa      	ldr	r2, [r7, #12]
 800acf6:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <TIM_OC4_SetConfig+0xbc>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	021b      	lsls	r3, r3, #8
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	031b      	lsls	r3, r3, #12
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a19      	ldr	r2, [pc, #100]	; (800ad8c <TIM_OC4_SetConfig+0xc0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00f      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a18      	ldr	r2, [pc, #96]	; (800ad90 <TIM_OC4_SetConfig+0xc4>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d00b      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a17      	ldr	r2, [pc, #92]	; (800ad94 <TIM_OC4_SetConfig+0xc8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d007      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a16      	ldr	r2, [pc, #88]	; (800ad98 <TIM_OC4_SetConfig+0xcc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d003      	beq.n	800ad4c <TIM_OC4_SetConfig+0x80>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a15      	ldr	r2, [pc, #84]	; (800ad9c <TIM_OC4_SetConfig+0xd0>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d109      	bne.n	800ad60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	695b      	ldr	r3, [r3, #20]
 800ad58:	019b      	lsls	r3, r3, #6
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68fa      	ldr	r2, [r7, #12]
 800ad6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	621a      	str	r2, [r3, #32]
}
 800ad7a:	bf00      	nop
 800ad7c:	371c      	adds	r7, #28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	feff8fff 	.word	0xfeff8fff
 800ad8c:	40010000 	.word	0x40010000
 800ad90:	40010400 	.word	0x40010400
 800ad94:	40014000 	.word	0x40014000
 800ad98:	40014400 	.word	0x40014400
 800ad9c:	40014800 	.word	0x40014800

0800ada0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a1b      	ldr	r3, [r3, #32]
 800adae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4b21      	ldr	r3, [pc, #132]	; (800ae50 <TIM_OC5_SetConfig+0xb0>)
 800adcc:	4013      	ands	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	4313      	orrs	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ade0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	041b      	lsls	r3, r3, #16
 800ade8:	693a      	ldr	r2, [r7, #16]
 800adea:	4313      	orrs	r3, r2
 800adec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a18      	ldr	r2, [pc, #96]	; (800ae54 <TIM_OC5_SetConfig+0xb4>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d00f      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a17      	ldr	r2, [pc, #92]	; (800ae58 <TIM_OC5_SetConfig+0xb8>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00b      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a16      	ldr	r2, [pc, #88]	; (800ae5c <TIM_OC5_SetConfig+0xbc>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d007      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a15      	ldr	r2, [pc, #84]	; (800ae60 <TIM_OC5_SetConfig+0xc0>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d003      	beq.n	800ae16 <TIM_OC5_SetConfig+0x76>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a14      	ldr	r2, [pc, #80]	; (800ae64 <TIM_OC5_SetConfig+0xc4>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d109      	bne.n	800ae2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	621a      	str	r2, [r3, #32]
}
 800ae44:	bf00      	nop
 800ae46:	371c      	adds	r7, #28
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	fffeff8f 	.word	0xfffeff8f
 800ae54:	40010000 	.word	0x40010000
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	40014400 	.word	0x40014400
 800ae64:	40014800 	.word	0x40014800

0800ae68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4b22      	ldr	r3, [pc, #136]	; (800af1c <TIM_OC6_SetConfig+0xb4>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	021b      	lsls	r3, r3, #8
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aeaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	051b      	lsls	r3, r3, #20
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a19      	ldr	r2, [pc, #100]	; (800af20 <TIM_OC6_SetConfig+0xb8>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00f      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a18      	ldr	r2, [pc, #96]	; (800af24 <TIM_OC6_SetConfig+0xbc>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d00b      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a17      	ldr	r2, [pc, #92]	; (800af28 <TIM_OC6_SetConfig+0xc0>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d007      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a16      	ldr	r2, [pc, #88]	; (800af2c <TIM_OC6_SetConfig+0xc4>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d003      	beq.n	800aee0 <TIM_OC6_SetConfig+0x78>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	4a15      	ldr	r2, [pc, #84]	; (800af30 <TIM_OC6_SetConfig+0xc8>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d109      	bne.n	800aef4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aee6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	029b      	lsls	r3, r3, #10
 800aeee:	697a      	ldr	r2, [r7, #20]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	621a      	str	r2, [r3, #32]
}
 800af0e:	bf00      	nop
 800af10:	371c      	adds	r7, #28
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	feff8fff 	.word	0xfeff8fff
 800af20:	40010000 	.word	0x40010000
 800af24:	40010400 	.word	0x40010400
 800af28:	40014000 	.word	0x40014000
 800af2c:	40014400 	.word	0x40014400
 800af30:	40014800 	.word	0x40014800

0800af34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	f003 031f 	and.w	r3, r3, #31
 800af46:	2201      	movs	r2, #1
 800af48:	fa02 f303 	lsl.w	r3, r2, r3
 800af4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	6a1a      	ldr	r2, [r3, #32]
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	43db      	mvns	r3, r3
 800af56:	401a      	ands	r2, r3
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6a1a      	ldr	r2, [r3, #32]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f003 031f 	and.w	r3, r3, #31
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	fa01 f303 	lsl.w	r3, r1, r3
 800af6c:	431a      	orrs	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	621a      	str	r2, [r3, #32]
}
 800af72:	bf00      	nop
 800af74:	371c      	adds	r7, #28
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
	...

0800af80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800af94:	2302      	movs	r3, #2
 800af96:	e077      	b.n	800b088 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a35      	ldr	r2, [pc, #212]	; (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d004      	beq.n	800afcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a34      	ldr	r2, [pc, #208]	; (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d108      	bne.n	800afde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68fa      	ldr	r2, [r7, #12]
 800afec:	4313      	orrs	r3, r2
 800afee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a25      	ldr	r2, [pc, #148]	; (800b094 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d02c      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00a:	d027      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a22      	ldr	r2, [pc, #136]	; (800b09c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d022      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a21      	ldr	r2, [pc, #132]	; (800b0a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d01d      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a1f      	ldr	r2, [pc, #124]	; (800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d018      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a1a      	ldr	r2, [pc, #104]	; (800b098 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d013      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a1b      	ldr	r2, [pc, #108]	; (800b0a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d00e      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a1a      	ldr	r2, [pc, #104]	; (800b0ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d009      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a18      	ldr	r2, [pc, #96]	; (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d004      	beq.n	800b05c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a17      	ldr	r2, [pc, #92]	; (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d10c      	bne.n	800b076 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b062:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3714      	adds	r7, #20
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr
 800b094:	40010000 	.word	0x40010000
 800b098:	40010400 	.word	0x40010400
 800b09c:	40000400 	.word	0x40000400
 800b0a0:	40000800 	.word	0x40000800
 800b0a4:	40000c00 	.word	0x40000c00
 800b0a8:	40001800 	.word	0x40001800
 800b0ac:	40014000 	.word	0x40014000
 800b0b0:	4000e000 	.word	0x4000e000
 800b0b4:	4000e400 	.word	0x4000e400

0800b0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0d4:	bf00      	nop
 800b0d6:	370c      	adds	r7, #12
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e042      	b.n	800b18c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7f6 ffc7 	bl	80020ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2224      	movs	r2, #36	; 0x24
 800b122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f022 0201 	bic.w	r2, r2, #1
 800b134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fcd6 	bl	800bae8 <UART_SetConfig>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d101      	bne.n	800b146 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e022      	b.n	800b18c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f001 fb36 	bl	800c7c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	689a      	ldr	r2, [r3, #8]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681a      	ldr	r2, [r3, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f042 0201 	orr.w	r2, r2, #1
 800b182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f001 fbbd 	bl	800c904 <UART_CheckIdleState>
 800b18a:	4603      	mov	r3, r0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08a      	sub	sp, #40	; 0x28
 800b198:	af02      	add	r7, sp, #8
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1aa:	2b20      	cmp	r3, #32
 800b1ac:	f040 8083 	bne.w	800b2b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <HAL_UART_Transmit+0x28>
 800b1b6:	88fb      	ldrh	r3, [r7, #6]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e07b      	b.n	800b2b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d101      	bne.n	800b1ce <HAL_UART_Transmit+0x3a>
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	e074      	b.n	800b2b8 <HAL_UART_Transmit+0x124>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2221      	movs	r2, #33	; 0x21
 800b1e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b1e6:	f7f7 fa99 	bl	800271c <HAL_GetTick>
 800b1ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	88fa      	ldrh	r2, [r7, #6]
 800b1f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	88fa      	ldrh	r2, [r7, #6]
 800b1f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b204:	d108      	bne.n	800b218 <HAL_UART_Transmit+0x84>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d104      	bne.n	800b218 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	61bb      	str	r3, [r7, #24]
 800b216:	e003      	b.n	800b220 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b228:	e02c      	b.n	800b284 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2200      	movs	r2, #0
 800b232:	2180      	movs	r1, #128	; 0x80
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f001 fbb0 	bl	800c99a <UART_WaitOnFlagUntilTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e039      	b.n	800b2b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10b      	bne.n	800b262 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	881b      	ldrh	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b258:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	3302      	adds	r3, #2
 800b25e:	61bb      	str	r3, [r7, #24]
 800b260:	e007      	b.n	800b272 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	781a      	ldrb	r2, [r3, #0]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	3301      	adds	r3, #1
 800b270:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b278:	b29b      	uxth	r3, r3
 800b27a:	3b01      	subs	r3, #1
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1cc      	bne.n	800b22a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2200      	movs	r2, #0
 800b298:	2140      	movs	r1, #64	; 0x40
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f001 fb7d 	bl	800c99a <UART_WaitOnFlagUntilTimeout>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e006      	b.n	800b2b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e000      	b.n	800b2b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b2b6:	2302      	movs	r3, #2
  }
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3720      	adds	r7, #32
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	; 0x28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d4:	2b20      	cmp	r3, #32
 800b2d6:	d142      	bne.n	800b35e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d002      	beq.n	800b2e4 <HAL_UART_Receive_IT+0x24>
 800b2de:	88fb      	ldrh	r3, [r7, #6]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d101      	bne.n	800b2e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e03b      	b.n	800b360 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d101      	bne.n	800b2f6 <HAL_UART_Receive_IT+0x36>
 800b2f2:	2302      	movs	r3, #2
 800b2f4:	e034      	b.n	800b360 <HAL_UART_Receive_IT+0xa0>
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a17      	ldr	r2, [pc, #92]	; (800b368 <HAL_UART_Receive_IT+0xa8>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d01f      	beq.n	800b34e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d018      	beq.n	800b34e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	613b      	str	r3, [r7, #16]
   return(result);
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b330:	627b      	str	r3, [r7, #36]	; 0x24
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33a:	623b      	str	r3, [r7, #32]
 800b33c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33e:	69f9      	ldr	r1, [r7, #28]
 800b340:	6a3a      	ldr	r2, [r7, #32]
 800b342:	e841 2300 	strex	r3, r2, [r1]
 800b346:	61bb      	str	r3, [r7, #24]
   return(result);
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1e6      	bne.n	800b31c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b34e:	88fb      	ldrh	r3, [r7, #6]
 800b350:	461a      	mov	r2, r3
 800b352:	68b9      	ldr	r1, [r7, #8]
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f001 fbe9 	bl	800cb2c <UART_Start_Receive_IT>
 800b35a:	4603      	mov	r3, r0
 800b35c:	e000      	b.n	800b360 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b35e:	2302      	movs	r3, #2
  }
}
 800b360:	4618      	mov	r0, r3
 800b362:	3728      	adds	r7, #40	; 0x28
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	58000c00 	.word	0x58000c00

0800b36c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b0ba      	sub	sp, #232	; 0xe8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b392:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b396:	f640 030f 	movw	r3, #2063	; 0x80f
 800b39a:	4013      	ands	r3, r2
 800b39c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b3a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d11b      	bne.n	800b3e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ac:	f003 0320 	and.w	r3, r3, #32
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d015      	beq.n	800b3e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3b8:	f003 0320 	and.w	r3, r3, #32
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d105      	bne.n	800b3cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d009      	beq.n	800b3e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f000 835a 	beq.w	800ba8a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	4798      	blx	r3
      }
      return;
 800b3de:	e354      	b.n	800ba8a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b3e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 811f 	beq.w	800b628 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b3ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b3ee:	4b8b      	ldr	r3, [pc, #556]	; (800b61c <HAL_UART_IRQHandler+0x2b0>)
 800b3f0:	4013      	ands	r3, r2
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b3f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b3fa:	4b89      	ldr	r3, [pc, #548]	; (800b620 <HAL_UART_IRQHandler+0x2b4>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 8112 	beq.w	800b628 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b408:	f003 0301 	and.w	r3, r3, #1
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d011      	beq.n	800b434 <HAL_UART_IRQHandler+0xc8>
 800b410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00b      	beq.n	800b434 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2201      	movs	r2, #1
 800b422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b42a:	f043 0201 	orr.w	r2, r3, #1
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d011      	beq.n	800b464 <HAL_UART_IRQHandler+0xf8>
 800b440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00b      	beq.n	800b464 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2202      	movs	r2, #2
 800b452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b45a:	f043 0204 	orr.w	r2, r3, #4
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b468:	f003 0304 	and.w	r3, r3, #4
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d011      	beq.n	800b494 <HAL_UART_IRQHandler+0x128>
 800b470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00b      	beq.n	800b494 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2204      	movs	r2, #4
 800b482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b48a:	f043 0202 	orr.w	r2, r3, #2
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b498:	f003 0308 	and.w	r3, r3, #8
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d017      	beq.n	800b4d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a4:	f003 0320 	and.w	r3, r3, #32
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d105      	bne.n	800b4b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b4b0:	4b5a      	ldr	r3, [pc, #360]	; (800b61c <HAL_UART_IRQHandler+0x2b0>)
 800b4b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00b      	beq.n	800b4d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2208      	movs	r2, #8
 800b4be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4c6:	f043 0208 	orr.w	r2, r3, #8
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d012      	beq.n	800b502 <HAL_UART_IRQHandler+0x196>
 800b4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00c      	beq.n	800b502 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4f8:	f043 0220 	orr.w	r2, r3, #32
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 82c0 	beq.w	800ba8e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b512:	f003 0320 	and.w	r3, r3, #32
 800b516:	2b00      	cmp	r3, #0
 800b518:	d013      	beq.n	800b542 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b00      	cmp	r3, #0
 800b524:	d105      	bne.n	800b532 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b52a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d007      	beq.n	800b542 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b536:	2b00      	cmp	r3, #0
 800b538:	d003      	beq.n	800b542 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b548:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b556:	2b40      	cmp	r3, #64	; 0x40
 800b558:	d005      	beq.n	800b566 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b55a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b55e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b562:	2b00      	cmp	r3, #0
 800b564:	d04f      	beq.n	800b606 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 fc0a 	bl	800cd80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b576:	2b40      	cmp	r3, #64	; 0x40
 800b578:	d141      	bne.n	800b5fe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3308      	adds	r3, #8
 800b580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b588:	e853 3f00 	ldrex	r3, [r3]
 800b58c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b590:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b594:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b5a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b5aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b5b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b5b6:	e841 2300 	strex	r3, r2, [r1]
 800b5ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b5be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1d9      	bne.n	800b57a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d013      	beq.n	800b5f6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5d2:	4a14      	ldr	r2, [pc, #80]	; (800b624 <HAL_UART_IRQHandler+0x2b8>)
 800b5d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7f9 fe90 	bl	8005300 <HAL_DMA_Abort_IT>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d017      	beq.n	800b616 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b5ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5f4:	e00f      	b.n	800b616 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 fa60 	bl	800babc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5fc:	e00b      	b.n	800b616 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa5c 	bl	800babc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b604:	e007      	b.n	800b616 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa58 	bl	800babc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b614:	e23b      	b.n	800ba8e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b616:	bf00      	nop
    return;
 800b618:	e239      	b.n	800ba8e <HAL_UART_IRQHandler+0x722>
 800b61a:	bf00      	nop
 800b61c:	10000001 	.word	0x10000001
 800b620:	04000120 	.word	0x04000120
 800b624:	0800ce4d 	.word	0x0800ce4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	f040 81ce 	bne.w	800b9ce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b636:	f003 0310 	and.w	r3, r3, #16
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f000 81c7 	beq.w	800b9ce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b644:	f003 0310 	and.w	r3, r3, #16
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 81c0 	beq.w	800b9ce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2210      	movs	r2, #16
 800b654:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b660:	2b40      	cmp	r3, #64	; 0x40
 800b662:	f040 813b 	bne.w	800b8dc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a8b      	ldr	r2, [pc, #556]	; (800b89c <HAL_UART_IRQHandler+0x530>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d059      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a89      	ldr	r2, [pc, #548]	; (800b8a0 <HAL_UART_IRQHandler+0x534>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d053      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a87      	ldr	r2, [pc, #540]	; (800b8a4 <HAL_UART_IRQHandler+0x538>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d04d      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a85      	ldr	r2, [pc, #532]	; (800b8a8 <HAL_UART_IRQHandler+0x53c>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d047      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a83      	ldr	r2, [pc, #524]	; (800b8ac <HAL_UART_IRQHandler+0x540>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d041      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a81      	ldr	r2, [pc, #516]	; (800b8b0 <HAL_UART_IRQHandler+0x544>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d03b      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a7f      	ldr	r2, [pc, #508]	; (800b8b4 <HAL_UART_IRQHandler+0x548>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d035      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a7d      	ldr	r2, [pc, #500]	; (800b8b8 <HAL_UART_IRQHandler+0x54c>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d02f      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a7b      	ldr	r2, [pc, #492]	; (800b8bc <HAL_UART_IRQHandler+0x550>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d029      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a79      	ldr	r2, [pc, #484]	; (800b8c0 <HAL_UART_IRQHandler+0x554>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d023      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a77      	ldr	r2, [pc, #476]	; (800b8c4 <HAL_UART_IRQHandler+0x558>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d01d      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a75      	ldr	r2, [pc, #468]	; (800b8c8 <HAL_UART_IRQHandler+0x55c>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d017      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a73      	ldr	r2, [pc, #460]	; (800b8cc <HAL_UART_IRQHandler+0x560>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d011      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a71      	ldr	r2, [pc, #452]	; (800b8d0 <HAL_UART_IRQHandler+0x564>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d00b      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a6f      	ldr	r2, [pc, #444]	; (800b8d4 <HAL_UART_IRQHandler+0x568>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d005      	beq.n	800b726 <HAL_UART_IRQHandler+0x3ba>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a6d      	ldr	r2, [pc, #436]	; (800b8d8 <HAL_UART_IRQHandler+0x56c>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d105      	bne.n	800b732 <HAL_UART_IRQHandler+0x3c6>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	b29b      	uxth	r3, r3
 800b730:	e004      	b.n	800b73c <HAL_UART_IRQHandler+0x3d0>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b740:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 81a4 	beq.w	800ba92 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b750:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b754:	429a      	cmp	r2, r3
 800b756:	f080 819c 	bcs.w	800ba92 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b760:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b768:	69db      	ldr	r3, [r3, #28]
 800b76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b76e:	f000 8086 	beq.w	800b87e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b77a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b77e:	e853 3f00 	ldrex	r3, [r3]
 800b782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b78a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b78e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b79c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b7b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1da      	bne.n	800b772 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7c6:	e853 3f00 	ldrex	r3, [r3]
 800b7ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7ce:	f023 0301 	bic.w	r3, r3, #1
 800b7d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3308      	adds	r3, #8
 800b7dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b7e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b7e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7ec:	e841 2300 	strex	r3, r2, [r1]
 800b7f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b7f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1e1      	bne.n	800b7bc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b800:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b802:	e853 3f00 	ldrex	r3, [r3]
 800b806:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b80a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b80e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3308      	adds	r3, #8
 800b818:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b81c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b81e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b820:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b822:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b824:	e841 2300 	strex	r3, r2, [r1]
 800b828:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b82a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e3      	bne.n	800b7f8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2220      	movs	r2, #32
 800b834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b846:	e853 3f00 	ldrex	r3, [r3]
 800b84a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b84c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b84e:	f023 0310 	bic.w	r3, r3, #16
 800b852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	461a      	mov	r2, r3
 800b85c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b860:	65bb      	str	r3, [r7, #88]	; 0x58
 800b862:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b866:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b868:	e841 2300 	strex	r3, r2, [r1]
 800b86c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b86e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e4      	bne.n	800b83e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b878:	4618      	mov	r0, r3
 800b87a:	f7f9 fa23 	bl	8004cc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	b29b      	uxth	r3, r3
 800b890:	4619      	mov	r1, r3
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f91c 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b898:	e0fb      	b.n	800ba92 <HAL_UART_IRQHandler+0x726>
 800b89a:	bf00      	nop
 800b89c:	40020010 	.word	0x40020010
 800b8a0:	40020028 	.word	0x40020028
 800b8a4:	40020040 	.word	0x40020040
 800b8a8:	40020058 	.word	0x40020058
 800b8ac:	40020070 	.word	0x40020070
 800b8b0:	40020088 	.word	0x40020088
 800b8b4:	400200a0 	.word	0x400200a0
 800b8b8:	400200b8 	.word	0x400200b8
 800b8bc:	40020410 	.word	0x40020410
 800b8c0:	40020428 	.word	0x40020428
 800b8c4:	40020440 	.word	0x40020440
 800b8c8:	40020458 	.word	0x40020458
 800b8cc:	40020470 	.word	0x40020470
 800b8d0:	40020488 	.word	0x40020488
 800b8d4:	400204a0 	.word	0x400204a0
 800b8d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 80cc 	beq.w	800ba96 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b8fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b902:	2b00      	cmp	r3, #0
 800b904:	f000 80c7 	beq.w	800ba96 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	e853 3f00 	ldrex	r3, [r3]
 800b914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b91c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b92a:	647b      	str	r3, [r7, #68]	; 0x44
 800b92c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e4      	bne.n	800b908 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3308      	adds	r3, #8
 800b944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	e853 3f00 	ldrex	r3, [r3]
 800b94c:	623b      	str	r3, [r7, #32]
   return(result);
 800b94e:	6a3a      	ldr	r2, [r7, #32]
 800b950:	4b54      	ldr	r3, [pc, #336]	; (800baa4 <HAL_UART_IRQHandler+0x738>)
 800b952:	4013      	ands	r3, r2
 800b954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3308      	adds	r3, #8
 800b95e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b962:	633a      	str	r2, [r7, #48]	; 0x30
 800b964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b96a:	e841 2300 	strex	r3, r2, [r1]
 800b96e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1e3      	bne.n	800b93e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2220      	movs	r2, #32
 800b97a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	e853 3f00 	ldrex	r3, [r3]
 800b996:	60fb      	str	r3, [r7, #12]
   return(result);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f023 0310 	bic.w	r3, r3, #16
 800b99e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	69b9      	ldr	r1, [r7, #24]
 800b9b2:	69fa      	ldr	r2, [r7, #28]
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e4      	bne.n	800b98a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b9c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f882 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b9cc:	e063      	b.n	800ba96 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b9ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00e      	beq.n	800b9f8 <HAL_UART_IRQHandler+0x68c>
 800b9da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b9ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f001 fec9 	bl	800d788 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9f6:	e051      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d014      	beq.n	800ba2e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d008      	beq.n	800ba2e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d03a      	beq.n	800ba9a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	4798      	blx	r3
    }
    return;
 800ba2c:	e035      	b.n	800ba9a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d009      	beq.n	800ba4e <HAL_UART_IRQHandler+0x6e2>
 800ba3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f001 fa16 	bl	800ce78 <UART_EndTransmit_IT>
    return;
 800ba4c:	e026      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ba4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d009      	beq.n	800ba6e <HAL_UART_IRQHandler+0x702>
 800ba5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d003      	beq.n	800ba6e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f001 fea2 	bl	800d7b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba6c:	e016      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ba6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d010      	beq.n	800ba9c <HAL_UART_IRQHandler+0x730>
 800ba7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	da0c      	bge.n	800ba9c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f001 fe8a 	bl	800d79c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba88:	e008      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
      return;
 800ba8a:	bf00      	nop
 800ba8c:	e006      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
    return;
 800ba8e:	bf00      	nop
 800ba90:	e004      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
      return;
 800ba92:	bf00      	nop
 800ba94:	e002      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
      return;
 800ba96:	bf00      	nop
 800ba98:	e000      	b.n	800ba9c <HAL_UART_IRQHandler+0x730>
    return;
 800ba9a:	bf00      	nop
  }
}
 800ba9c:	37e8      	adds	r7, #232	; 0xe8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	effffffe 	.word	0xeffffffe

0800baa8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800baec:	b092      	sub	sp, #72	; 0x48
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	689a      	ldr	r2, [r3, #8]
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	431a      	orrs	r2, r3
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	431a      	orrs	r2, r3
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	69db      	ldr	r3, [r3, #28]
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4bbe      	ldr	r3, [pc, #760]	; (800be10 <UART_SetConfig+0x328>)
 800bb18:	4013      	ands	r3, r2
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	6812      	ldr	r2, [r2, #0]
 800bb1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb20:	430b      	orrs	r3, r1
 800bb22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	68da      	ldr	r2, [r3, #12]
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	430a      	orrs	r2, r1
 800bb38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4ab3      	ldr	r2, [pc, #716]	; (800be14 <UART_SetConfig+0x32c>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d004      	beq.n	800bb54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	6a1b      	ldr	r3, [r3, #32]
 800bb4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb50:	4313      	orrs	r3, r2
 800bb52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	4baf      	ldr	r3, [pc, #700]	; (800be18 <UART_SetConfig+0x330>)
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	6812      	ldr	r2, [r2, #0]
 800bb62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb64:	430b      	orrs	r3, r1
 800bb66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb6e:	f023 010f 	bic.w	r1, r3, #15
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	430a      	orrs	r2, r1
 800bb7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4aa6      	ldr	r2, [pc, #664]	; (800be1c <UART_SetConfig+0x334>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d177      	bne.n	800bc78 <UART_SetConfig+0x190>
 800bb88:	4ba5      	ldr	r3, [pc, #660]	; (800be20 <UART_SetConfig+0x338>)
 800bb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb90:	2b28      	cmp	r3, #40	; 0x28
 800bb92:	d86d      	bhi.n	800bc70 <UART_SetConfig+0x188>
 800bb94:	a201      	add	r2, pc, #4	; (adr r2, 800bb9c <UART_SetConfig+0xb4>)
 800bb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9a:	bf00      	nop
 800bb9c:	0800bc41 	.word	0x0800bc41
 800bba0:	0800bc71 	.word	0x0800bc71
 800bba4:	0800bc71 	.word	0x0800bc71
 800bba8:	0800bc71 	.word	0x0800bc71
 800bbac:	0800bc71 	.word	0x0800bc71
 800bbb0:	0800bc71 	.word	0x0800bc71
 800bbb4:	0800bc71 	.word	0x0800bc71
 800bbb8:	0800bc71 	.word	0x0800bc71
 800bbbc:	0800bc49 	.word	0x0800bc49
 800bbc0:	0800bc71 	.word	0x0800bc71
 800bbc4:	0800bc71 	.word	0x0800bc71
 800bbc8:	0800bc71 	.word	0x0800bc71
 800bbcc:	0800bc71 	.word	0x0800bc71
 800bbd0:	0800bc71 	.word	0x0800bc71
 800bbd4:	0800bc71 	.word	0x0800bc71
 800bbd8:	0800bc71 	.word	0x0800bc71
 800bbdc:	0800bc51 	.word	0x0800bc51
 800bbe0:	0800bc71 	.word	0x0800bc71
 800bbe4:	0800bc71 	.word	0x0800bc71
 800bbe8:	0800bc71 	.word	0x0800bc71
 800bbec:	0800bc71 	.word	0x0800bc71
 800bbf0:	0800bc71 	.word	0x0800bc71
 800bbf4:	0800bc71 	.word	0x0800bc71
 800bbf8:	0800bc71 	.word	0x0800bc71
 800bbfc:	0800bc59 	.word	0x0800bc59
 800bc00:	0800bc71 	.word	0x0800bc71
 800bc04:	0800bc71 	.word	0x0800bc71
 800bc08:	0800bc71 	.word	0x0800bc71
 800bc0c:	0800bc71 	.word	0x0800bc71
 800bc10:	0800bc71 	.word	0x0800bc71
 800bc14:	0800bc71 	.word	0x0800bc71
 800bc18:	0800bc71 	.word	0x0800bc71
 800bc1c:	0800bc61 	.word	0x0800bc61
 800bc20:	0800bc71 	.word	0x0800bc71
 800bc24:	0800bc71 	.word	0x0800bc71
 800bc28:	0800bc71 	.word	0x0800bc71
 800bc2c:	0800bc71 	.word	0x0800bc71
 800bc30:	0800bc71 	.word	0x0800bc71
 800bc34:	0800bc71 	.word	0x0800bc71
 800bc38:	0800bc71 	.word	0x0800bc71
 800bc3c:	0800bc69 	.word	0x0800bc69
 800bc40:	2301      	movs	r3, #1
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc46:	e326      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bc48:	2304      	movs	r3, #4
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4e:	e322      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bc50:	2308      	movs	r3, #8
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc56:	e31e      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bc58:	2310      	movs	r3, #16
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e31a      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bc60:	2320      	movs	r3, #32
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e316      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bc68:	2340      	movs	r3, #64	; 0x40
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc6e:	e312      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bc70:	2380      	movs	r3, #128	; 0x80
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc76:	e30e      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a69      	ldr	r2, [pc, #420]	; (800be24 <UART_SetConfig+0x33c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d130      	bne.n	800bce4 <UART_SetConfig+0x1fc>
 800bc82:	4b67      	ldr	r3, [pc, #412]	; (800be20 <UART_SetConfig+0x338>)
 800bc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc86:	f003 0307 	and.w	r3, r3, #7
 800bc8a:	2b05      	cmp	r3, #5
 800bc8c:	d826      	bhi.n	800bcdc <UART_SetConfig+0x1f4>
 800bc8e:	a201      	add	r2, pc, #4	; (adr r2, 800bc94 <UART_SetConfig+0x1ac>)
 800bc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc94:	0800bcad 	.word	0x0800bcad
 800bc98:	0800bcb5 	.word	0x0800bcb5
 800bc9c:	0800bcbd 	.word	0x0800bcbd
 800bca0:	0800bcc5 	.word	0x0800bcc5
 800bca4:	0800bccd 	.word	0x0800bccd
 800bca8:	0800bcd5 	.word	0x0800bcd5
 800bcac:	2300      	movs	r3, #0
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcb2:	e2f0      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bcb4:	2304      	movs	r3, #4
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcba:	e2ec      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bcbc:	2308      	movs	r3, #8
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcc2:	e2e8      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bcc4:	2310      	movs	r3, #16
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e2e4      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bccc:	2320      	movs	r3, #32
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e2e0      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bcd4:	2340      	movs	r3, #64	; 0x40
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcda:	e2dc      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bcdc:	2380      	movs	r3, #128	; 0x80
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bce2:	e2d8      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a4f      	ldr	r2, [pc, #316]	; (800be28 <UART_SetConfig+0x340>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d130      	bne.n	800bd50 <UART_SetConfig+0x268>
 800bcee:	4b4c      	ldr	r3, [pc, #304]	; (800be20 <UART_SetConfig+0x338>)
 800bcf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf2:	f003 0307 	and.w	r3, r3, #7
 800bcf6:	2b05      	cmp	r3, #5
 800bcf8:	d826      	bhi.n	800bd48 <UART_SetConfig+0x260>
 800bcfa:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <UART_SetConfig+0x218>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bd19 	.word	0x0800bd19
 800bd04:	0800bd21 	.word	0x0800bd21
 800bd08:	0800bd29 	.word	0x0800bd29
 800bd0c:	0800bd31 	.word	0x0800bd31
 800bd10:	0800bd39 	.word	0x0800bd39
 800bd14:	0800bd41 	.word	0x0800bd41
 800bd18:	2300      	movs	r3, #0
 800bd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd1e:	e2ba      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd20:	2304      	movs	r3, #4
 800bd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd26:	e2b6      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd28:	2308      	movs	r3, #8
 800bd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd2e:	e2b2      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd30:	2310      	movs	r3, #16
 800bd32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd36:	e2ae      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd38:	2320      	movs	r3, #32
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3e:	e2aa      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd40:	2340      	movs	r3, #64	; 0x40
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd46:	e2a6      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd48:	2380      	movs	r3, #128	; 0x80
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4e:	e2a2      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a35      	ldr	r2, [pc, #212]	; (800be2c <UART_SetConfig+0x344>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d130      	bne.n	800bdbc <UART_SetConfig+0x2d4>
 800bd5a:	4b31      	ldr	r3, [pc, #196]	; (800be20 <UART_SetConfig+0x338>)
 800bd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	2b05      	cmp	r3, #5
 800bd64:	d826      	bhi.n	800bdb4 <UART_SetConfig+0x2cc>
 800bd66:	a201      	add	r2, pc, #4	; (adr r2, 800bd6c <UART_SetConfig+0x284>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800bd85 	.word	0x0800bd85
 800bd70:	0800bd8d 	.word	0x0800bd8d
 800bd74:	0800bd95 	.word	0x0800bd95
 800bd78:	0800bd9d 	.word	0x0800bd9d
 800bd7c:	0800bda5 	.word	0x0800bda5
 800bd80:	0800bdad 	.word	0x0800bdad
 800bd84:	2300      	movs	r3, #0
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8a:	e284      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd8c:	2304      	movs	r3, #4
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd92:	e280      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd94:	2308      	movs	r3, #8
 800bd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd9a:	e27c      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bd9c:	2310      	movs	r3, #16
 800bd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bda2:	e278      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bda4:	2320      	movs	r3, #32
 800bda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdaa:	e274      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bdac:	2340      	movs	r3, #64	; 0x40
 800bdae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdb2:	e270      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bdb4:	2380      	movs	r3, #128	; 0x80
 800bdb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdba:	e26c      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a1b      	ldr	r2, [pc, #108]	; (800be30 <UART_SetConfig+0x348>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d142      	bne.n	800be4c <UART_SetConfig+0x364>
 800bdc6:	4b16      	ldr	r3, [pc, #88]	; (800be20 <UART_SetConfig+0x338>)
 800bdc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdca:	f003 0307 	and.w	r3, r3, #7
 800bdce:	2b05      	cmp	r3, #5
 800bdd0:	d838      	bhi.n	800be44 <UART_SetConfig+0x35c>
 800bdd2:	a201      	add	r2, pc, #4	; (adr r2, 800bdd8 <UART_SetConfig+0x2f0>)
 800bdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd8:	0800bdf1 	.word	0x0800bdf1
 800bddc:	0800bdf9 	.word	0x0800bdf9
 800bde0:	0800be01 	.word	0x0800be01
 800bde4:	0800be09 	.word	0x0800be09
 800bde8:	0800be35 	.word	0x0800be35
 800bdec:	0800be3d 	.word	0x0800be3d
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdf6:	e24e      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bdf8:	2304      	movs	r3, #4
 800bdfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdfe:	e24a      	b.n	800c296 <UART_SetConfig+0x7ae>
 800be00:	2308      	movs	r3, #8
 800be02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be06:	e246      	b.n	800c296 <UART_SetConfig+0x7ae>
 800be08:	2310      	movs	r3, #16
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0e:	e242      	b.n	800c296 <UART_SetConfig+0x7ae>
 800be10:	cfff69f3 	.word	0xcfff69f3
 800be14:	58000c00 	.word	0x58000c00
 800be18:	11fff4ff 	.word	0x11fff4ff
 800be1c:	40011000 	.word	0x40011000
 800be20:	58024400 	.word	0x58024400
 800be24:	40004400 	.word	0x40004400
 800be28:	40004800 	.word	0x40004800
 800be2c:	40004c00 	.word	0x40004c00
 800be30:	40005000 	.word	0x40005000
 800be34:	2320      	movs	r3, #32
 800be36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be3a:	e22c      	b.n	800c296 <UART_SetConfig+0x7ae>
 800be3c:	2340      	movs	r3, #64	; 0x40
 800be3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be42:	e228      	b.n	800c296 <UART_SetConfig+0x7ae>
 800be44:	2380      	movs	r3, #128	; 0x80
 800be46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4a:	e224      	b.n	800c296 <UART_SetConfig+0x7ae>
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4ab1      	ldr	r2, [pc, #708]	; (800c118 <UART_SetConfig+0x630>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d176      	bne.n	800bf44 <UART_SetConfig+0x45c>
 800be56:	4bb1      	ldr	r3, [pc, #708]	; (800c11c <UART_SetConfig+0x634>)
 800be58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be5e:	2b28      	cmp	r3, #40	; 0x28
 800be60:	d86c      	bhi.n	800bf3c <UART_SetConfig+0x454>
 800be62:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <UART_SetConfig+0x380>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800bf0d 	.word	0x0800bf0d
 800be6c:	0800bf3d 	.word	0x0800bf3d
 800be70:	0800bf3d 	.word	0x0800bf3d
 800be74:	0800bf3d 	.word	0x0800bf3d
 800be78:	0800bf3d 	.word	0x0800bf3d
 800be7c:	0800bf3d 	.word	0x0800bf3d
 800be80:	0800bf3d 	.word	0x0800bf3d
 800be84:	0800bf3d 	.word	0x0800bf3d
 800be88:	0800bf15 	.word	0x0800bf15
 800be8c:	0800bf3d 	.word	0x0800bf3d
 800be90:	0800bf3d 	.word	0x0800bf3d
 800be94:	0800bf3d 	.word	0x0800bf3d
 800be98:	0800bf3d 	.word	0x0800bf3d
 800be9c:	0800bf3d 	.word	0x0800bf3d
 800bea0:	0800bf3d 	.word	0x0800bf3d
 800bea4:	0800bf3d 	.word	0x0800bf3d
 800bea8:	0800bf1d 	.word	0x0800bf1d
 800beac:	0800bf3d 	.word	0x0800bf3d
 800beb0:	0800bf3d 	.word	0x0800bf3d
 800beb4:	0800bf3d 	.word	0x0800bf3d
 800beb8:	0800bf3d 	.word	0x0800bf3d
 800bebc:	0800bf3d 	.word	0x0800bf3d
 800bec0:	0800bf3d 	.word	0x0800bf3d
 800bec4:	0800bf3d 	.word	0x0800bf3d
 800bec8:	0800bf25 	.word	0x0800bf25
 800becc:	0800bf3d 	.word	0x0800bf3d
 800bed0:	0800bf3d 	.word	0x0800bf3d
 800bed4:	0800bf3d 	.word	0x0800bf3d
 800bed8:	0800bf3d 	.word	0x0800bf3d
 800bedc:	0800bf3d 	.word	0x0800bf3d
 800bee0:	0800bf3d 	.word	0x0800bf3d
 800bee4:	0800bf3d 	.word	0x0800bf3d
 800bee8:	0800bf2d 	.word	0x0800bf2d
 800beec:	0800bf3d 	.word	0x0800bf3d
 800bef0:	0800bf3d 	.word	0x0800bf3d
 800bef4:	0800bf3d 	.word	0x0800bf3d
 800bef8:	0800bf3d 	.word	0x0800bf3d
 800befc:	0800bf3d 	.word	0x0800bf3d
 800bf00:	0800bf3d 	.word	0x0800bf3d
 800bf04:	0800bf3d 	.word	0x0800bf3d
 800bf08:	0800bf35 	.word	0x0800bf35
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf12:	e1c0      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf14:	2304      	movs	r3, #4
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1a:	e1bc      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf1c:	2308      	movs	r3, #8
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf22:	e1b8      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf24:	2310      	movs	r3, #16
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf2a:	e1b4      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf2c:	2320      	movs	r3, #32
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e1b0      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf34:	2340      	movs	r3, #64	; 0x40
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3a:	e1ac      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf3c:	2380      	movs	r3, #128	; 0x80
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e1a8      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4a75      	ldr	r2, [pc, #468]	; (800c120 <UART_SetConfig+0x638>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d130      	bne.n	800bfb0 <UART_SetConfig+0x4c8>
 800bf4e:	4b73      	ldr	r3, [pc, #460]	; (800c11c <UART_SetConfig+0x634>)
 800bf50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf52:	f003 0307 	and.w	r3, r3, #7
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	d826      	bhi.n	800bfa8 <UART_SetConfig+0x4c0>
 800bf5a:	a201      	add	r2, pc, #4	; (adr r2, 800bf60 <UART_SetConfig+0x478>)
 800bf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf60:	0800bf79 	.word	0x0800bf79
 800bf64:	0800bf81 	.word	0x0800bf81
 800bf68:	0800bf89 	.word	0x0800bf89
 800bf6c:	0800bf91 	.word	0x0800bf91
 800bf70:	0800bf99 	.word	0x0800bf99
 800bf74:	0800bfa1 	.word	0x0800bfa1
 800bf78:	2300      	movs	r3, #0
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7e:	e18a      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf80:	2304      	movs	r3, #4
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf86:	e186      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf88:	2308      	movs	r3, #8
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8e:	e182      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf90:	2310      	movs	r3, #16
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf96:	e17e      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bf98:	2320      	movs	r3, #32
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e17a      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bfa0:	2340      	movs	r3, #64	; 0x40
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e176      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bfa8:	2380      	movs	r3, #128	; 0x80
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e172      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a5b      	ldr	r2, [pc, #364]	; (800c124 <UART_SetConfig+0x63c>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d130      	bne.n	800c01c <UART_SetConfig+0x534>
 800bfba:	4b58      	ldr	r3, [pc, #352]	; (800c11c <UART_SetConfig+0x634>)
 800bfbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	2b05      	cmp	r3, #5
 800bfc4:	d826      	bhi.n	800c014 <UART_SetConfig+0x52c>
 800bfc6:	a201      	add	r2, pc, #4	; (adr r2, 800bfcc <UART_SetConfig+0x4e4>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800bfe5 	.word	0x0800bfe5
 800bfd0:	0800bfed 	.word	0x0800bfed
 800bfd4:	0800bff5 	.word	0x0800bff5
 800bfd8:	0800bffd 	.word	0x0800bffd
 800bfdc:	0800c005 	.word	0x0800c005
 800bfe0:	0800c00d 	.word	0x0800c00d
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfea:	e154      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bfec:	2304      	movs	r3, #4
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff2:	e150      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bff4:	2308      	movs	r3, #8
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffa:	e14c      	b.n	800c296 <UART_SetConfig+0x7ae>
 800bffc:	2310      	movs	r3, #16
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c002:	e148      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c004:	2320      	movs	r3, #32
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e144      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c00c:	2340      	movs	r3, #64	; 0x40
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c012:	e140      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c014:	2380      	movs	r3, #128	; 0x80
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e13c      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a41      	ldr	r2, [pc, #260]	; (800c128 <UART_SetConfig+0x640>)
 800c022:	4293      	cmp	r3, r2
 800c024:	f040 8082 	bne.w	800c12c <UART_SetConfig+0x644>
 800c028:	4b3c      	ldr	r3, [pc, #240]	; (800c11c <UART_SetConfig+0x634>)
 800c02a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c02c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c030:	2b28      	cmp	r3, #40	; 0x28
 800c032:	d86d      	bhi.n	800c110 <UART_SetConfig+0x628>
 800c034:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <UART_SetConfig+0x554>)
 800c036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03a:	bf00      	nop
 800c03c:	0800c0e1 	.word	0x0800c0e1
 800c040:	0800c111 	.word	0x0800c111
 800c044:	0800c111 	.word	0x0800c111
 800c048:	0800c111 	.word	0x0800c111
 800c04c:	0800c111 	.word	0x0800c111
 800c050:	0800c111 	.word	0x0800c111
 800c054:	0800c111 	.word	0x0800c111
 800c058:	0800c111 	.word	0x0800c111
 800c05c:	0800c0e9 	.word	0x0800c0e9
 800c060:	0800c111 	.word	0x0800c111
 800c064:	0800c111 	.word	0x0800c111
 800c068:	0800c111 	.word	0x0800c111
 800c06c:	0800c111 	.word	0x0800c111
 800c070:	0800c111 	.word	0x0800c111
 800c074:	0800c111 	.word	0x0800c111
 800c078:	0800c111 	.word	0x0800c111
 800c07c:	0800c0f1 	.word	0x0800c0f1
 800c080:	0800c111 	.word	0x0800c111
 800c084:	0800c111 	.word	0x0800c111
 800c088:	0800c111 	.word	0x0800c111
 800c08c:	0800c111 	.word	0x0800c111
 800c090:	0800c111 	.word	0x0800c111
 800c094:	0800c111 	.word	0x0800c111
 800c098:	0800c111 	.word	0x0800c111
 800c09c:	0800c0f9 	.word	0x0800c0f9
 800c0a0:	0800c111 	.word	0x0800c111
 800c0a4:	0800c111 	.word	0x0800c111
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c111 	.word	0x0800c111
 800c0b4:	0800c111 	.word	0x0800c111
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c101 	.word	0x0800c101
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c111 	.word	0x0800c111
 800c0c8:	0800c111 	.word	0x0800c111
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c111 	.word	0x0800c111
 800c0d4:	0800c111 	.word	0x0800c111
 800c0d8:	0800c111 	.word	0x0800c111
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e0d6      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e0d2      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e0ce      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e0ca      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c100:	2320      	movs	r3, #32
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c106:	e0c6      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10e:	e0c2      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c110:	2380      	movs	r3, #128	; 0x80
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c116:	e0be      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c118:	40011400 	.word	0x40011400
 800c11c:	58024400 	.word	0x58024400
 800c120:	40007800 	.word	0x40007800
 800c124:	40007c00 	.word	0x40007c00
 800c128:	40011800 	.word	0x40011800
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	4aad      	ldr	r2, [pc, #692]	; (800c3e8 <UART_SetConfig+0x900>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d176      	bne.n	800c224 <UART_SetConfig+0x73c>
 800c136:	4bad      	ldr	r3, [pc, #692]	; (800c3ec <UART_SetConfig+0x904>)
 800c138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c13e:	2b28      	cmp	r3, #40	; 0x28
 800c140:	d86c      	bhi.n	800c21c <UART_SetConfig+0x734>
 800c142:	a201      	add	r2, pc, #4	; (adr r2, 800c148 <UART_SetConfig+0x660>)
 800c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c148:	0800c1ed 	.word	0x0800c1ed
 800c14c:	0800c21d 	.word	0x0800c21d
 800c150:	0800c21d 	.word	0x0800c21d
 800c154:	0800c21d 	.word	0x0800c21d
 800c158:	0800c21d 	.word	0x0800c21d
 800c15c:	0800c21d 	.word	0x0800c21d
 800c160:	0800c21d 	.word	0x0800c21d
 800c164:	0800c21d 	.word	0x0800c21d
 800c168:	0800c1f5 	.word	0x0800c1f5
 800c16c:	0800c21d 	.word	0x0800c21d
 800c170:	0800c21d 	.word	0x0800c21d
 800c174:	0800c21d 	.word	0x0800c21d
 800c178:	0800c21d 	.word	0x0800c21d
 800c17c:	0800c21d 	.word	0x0800c21d
 800c180:	0800c21d 	.word	0x0800c21d
 800c184:	0800c21d 	.word	0x0800c21d
 800c188:	0800c1fd 	.word	0x0800c1fd
 800c18c:	0800c21d 	.word	0x0800c21d
 800c190:	0800c21d 	.word	0x0800c21d
 800c194:	0800c21d 	.word	0x0800c21d
 800c198:	0800c21d 	.word	0x0800c21d
 800c19c:	0800c21d 	.word	0x0800c21d
 800c1a0:	0800c21d 	.word	0x0800c21d
 800c1a4:	0800c21d 	.word	0x0800c21d
 800c1a8:	0800c205 	.word	0x0800c205
 800c1ac:	0800c21d 	.word	0x0800c21d
 800c1b0:	0800c21d 	.word	0x0800c21d
 800c1b4:	0800c21d 	.word	0x0800c21d
 800c1b8:	0800c21d 	.word	0x0800c21d
 800c1bc:	0800c21d 	.word	0x0800c21d
 800c1c0:	0800c21d 	.word	0x0800c21d
 800c1c4:	0800c21d 	.word	0x0800c21d
 800c1c8:	0800c20d 	.word	0x0800c20d
 800c1cc:	0800c21d 	.word	0x0800c21d
 800c1d0:	0800c21d 	.word	0x0800c21d
 800c1d4:	0800c21d 	.word	0x0800c21d
 800c1d8:	0800c21d 	.word	0x0800c21d
 800c1dc:	0800c21d 	.word	0x0800c21d
 800c1e0:	0800c21d 	.word	0x0800c21d
 800c1e4:	0800c21d 	.word	0x0800c21d
 800c1e8:	0800c215 	.word	0x0800c215
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e050      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c1f4:	2304      	movs	r3, #4
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fa:	e04c      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c1fc:	2308      	movs	r3, #8
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e048      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c204:	2310      	movs	r3, #16
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e044      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c20c:	2320      	movs	r3, #32
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e040      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c214:	2340      	movs	r3, #64	; 0x40
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21a:	e03c      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c21c:	2380      	movs	r3, #128	; 0x80
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c222:	e038      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a71      	ldr	r2, [pc, #452]	; (800c3f0 <UART_SetConfig+0x908>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d130      	bne.n	800c290 <UART_SetConfig+0x7a8>
 800c22e:	4b6f      	ldr	r3, [pc, #444]	; (800c3ec <UART_SetConfig+0x904>)
 800c230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c232:	f003 0307 	and.w	r3, r3, #7
 800c236:	2b05      	cmp	r3, #5
 800c238:	d826      	bhi.n	800c288 <UART_SetConfig+0x7a0>
 800c23a:	a201      	add	r2, pc, #4	; (adr r2, 800c240 <UART_SetConfig+0x758>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c259 	.word	0x0800c259
 800c244:	0800c261 	.word	0x0800c261
 800c248:	0800c269 	.word	0x0800c269
 800c24c:	0800c271 	.word	0x0800c271
 800c250:	0800c279 	.word	0x0800c279
 800c254:	0800c281 	.word	0x0800c281
 800c258:	2302      	movs	r3, #2
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e01a      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c260:	2304      	movs	r3, #4
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e016      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c268:	2308      	movs	r3, #8
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e012      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c270:	2310      	movs	r3, #16
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e00e      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c278:	2320      	movs	r3, #32
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e00a      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c280:	2340      	movs	r3, #64	; 0x40
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e006      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c288:	2380      	movs	r3, #128	; 0x80
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e002      	b.n	800c296 <UART_SetConfig+0x7ae>
 800c290:	2380      	movs	r3, #128	; 0x80
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	4a55      	ldr	r2, [pc, #340]	; (800c3f0 <UART_SetConfig+0x908>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	f040 80f8 	bne.w	800c492 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c2a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	dc46      	bgt.n	800c338 <UART_SetConfig+0x850>
 800c2aa:	2b02      	cmp	r3, #2
 800c2ac:	db75      	blt.n	800c39a <UART_SetConfig+0x8b2>
 800c2ae:	3b02      	subs	r3, #2
 800c2b0:	2b1e      	cmp	r3, #30
 800c2b2:	d872      	bhi.n	800c39a <UART_SetConfig+0x8b2>
 800c2b4:	a201      	add	r2, pc, #4	; (adr r2, 800c2bc <UART_SetConfig+0x7d4>)
 800c2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ba:	bf00      	nop
 800c2bc:	0800c33f 	.word	0x0800c33f
 800c2c0:	0800c39b 	.word	0x0800c39b
 800c2c4:	0800c347 	.word	0x0800c347
 800c2c8:	0800c39b 	.word	0x0800c39b
 800c2cc:	0800c39b 	.word	0x0800c39b
 800c2d0:	0800c39b 	.word	0x0800c39b
 800c2d4:	0800c357 	.word	0x0800c357
 800c2d8:	0800c39b 	.word	0x0800c39b
 800c2dc:	0800c39b 	.word	0x0800c39b
 800c2e0:	0800c39b 	.word	0x0800c39b
 800c2e4:	0800c39b 	.word	0x0800c39b
 800c2e8:	0800c39b 	.word	0x0800c39b
 800c2ec:	0800c39b 	.word	0x0800c39b
 800c2f0:	0800c39b 	.word	0x0800c39b
 800c2f4:	0800c367 	.word	0x0800c367
 800c2f8:	0800c39b 	.word	0x0800c39b
 800c2fc:	0800c39b 	.word	0x0800c39b
 800c300:	0800c39b 	.word	0x0800c39b
 800c304:	0800c39b 	.word	0x0800c39b
 800c308:	0800c39b 	.word	0x0800c39b
 800c30c:	0800c39b 	.word	0x0800c39b
 800c310:	0800c39b 	.word	0x0800c39b
 800c314:	0800c39b 	.word	0x0800c39b
 800c318:	0800c39b 	.word	0x0800c39b
 800c31c:	0800c39b 	.word	0x0800c39b
 800c320:	0800c39b 	.word	0x0800c39b
 800c324:	0800c39b 	.word	0x0800c39b
 800c328:	0800c39b 	.word	0x0800c39b
 800c32c:	0800c39b 	.word	0x0800c39b
 800c330:	0800c39b 	.word	0x0800c39b
 800c334:	0800c38d 	.word	0x0800c38d
 800c338:	2b40      	cmp	r3, #64	; 0x40
 800c33a:	d02a      	beq.n	800c392 <UART_SetConfig+0x8aa>
 800c33c:	e02d      	b.n	800c39a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c33e:	f7fd f82d 	bl	800939c <HAL_RCCEx_GetD3PCLK1Freq>
 800c342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c344:	e02f      	b.n	800c3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7fd f83c 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c354:	e027      	b.n	800c3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c356:	f107 0318 	add.w	r3, r7, #24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fd f988 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c364:	e01f      	b.n	800c3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c366:	4b21      	ldr	r3, [pc, #132]	; (800c3ec <UART_SetConfig+0x904>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f003 0320 	and.w	r3, r3, #32
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d009      	beq.n	800c386 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c372:	4b1e      	ldr	r3, [pc, #120]	; (800c3ec <UART_SetConfig+0x904>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	08db      	lsrs	r3, r3, #3
 800c378:	f003 0303 	and.w	r3, r3, #3
 800c37c:	4a1d      	ldr	r2, [pc, #116]	; (800c3f4 <UART_SetConfig+0x90c>)
 800c37e:	fa22 f303 	lsr.w	r3, r2, r3
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c384:	e00f      	b.n	800c3a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c386:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <UART_SetConfig+0x90c>)
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38a:	e00c      	b.n	800c3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c38c:	4b1a      	ldr	r3, [pc, #104]	; (800c3f8 <UART_SetConfig+0x910>)
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c390:	e009      	b.n	800c3a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c398:	e005      	b.n	800c3a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c39a:	2300      	movs	r3, #0
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c3a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f000 81ee 	beq.w	800c78a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b2:	4a12      	ldr	r2, [pc, #72]	; (800c3fc <UART_SetConfig+0x914>)
 800c3b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	685a      	ldr	r2, [r3, #4]
 800c3c6:	4613      	mov	r3, r2
 800c3c8:	005b      	lsls	r3, r3, #1
 800c3ca:	4413      	add	r3, r2
 800c3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d305      	bcc.n	800c3de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d910      	bls.n	800c400 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3e4:	e1d1      	b.n	800c78a <UART_SetConfig+0xca2>
 800c3e6:	bf00      	nop
 800c3e8:	40011c00 	.word	0x40011c00
 800c3ec:	58024400 	.word	0x58024400
 800c3f0:	58000c00 	.word	0x58000c00
 800c3f4:	03d09000 	.word	0x03d09000
 800c3f8:	003d0900 	.word	0x003d0900
 800c3fc:	080118f4 	.word	0x080118f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c402:	2200      	movs	r2, #0
 800c404:	60bb      	str	r3, [r7, #8]
 800c406:	60fa      	str	r2, [r7, #12]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	4ac0      	ldr	r2, [pc, #768]	; (800c710 <UART_SetConfig+0xc28>)
 800c40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c412:	b29b      	uxth	r3, r3
 800c414:	2200      	movs	r2, #0
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	607a      	str	r2, [r7, #4]
 800c41a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c41e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c422:	f7f4 f989 	bl	8000738 <__aeabi_uldivmod>
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4610      	mov	r0, r2
 800c42c:	4619      	mov	r1, r3
 800c42e:	f04f 0200 	mov.w	r2, #0
 800c432:	f04f 0300 	mov.w	r3, #0
 800c436:	020b      	lsls	r3, r1, #8
 800c438:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c43c:	0202      	lsls	r2, r0, #8
 800c43e:	6979      	ldr	r1, [r7, #20]
 800c440:	6849      	ldr	r1, [r1, #4]
 800c442:	0849      	lsrs	r1, r1, #1
 800c444:	2000      	movs	r0, #0
 800c446:	460c      	mov	r4, r1
 800c448:	4605      	mov	r5, r0
 800c44a:	eb12 0804 	adds.w	r8, r2, r4
 800c44e:	eb43 0905 	adc.w	r9, r3, r5
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	2200      	movs	r2, #0
 800c458:	469a      	mov	sl, r3
 800c45a:	4693      	mov	fp, r2
 800c45c:	4652      	mov	r2, sl
 800c45e:	465b      	mov	r3, fp
 800c460:	4640      	mov	r0, r8
 800c462:	4649      	mov	r1, r9
 800c464:	f7f4 f968 	bl	8000738 <__aeabi_uldivmod>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	4613      	mov	r3, r2
 800c46e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c476:	d308      	bcc.n	800c48a <UART_SetConfig+0x9a2>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c47e:	d204      	bcs.n	800c48a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c486:	60da      	str	r2, [r3, #12]
 800c488:	e17f      	b.n	800c78a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c490:	e17b      	b.n	800c78a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	69db      	ldr	r3, [r3, #28]
 800c496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c49a:	f040 80bd 	bne.w	800c618 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c49e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c4a2:	2b20      	cmp	r3, #32
 800c4a4:	dc48      	bgt.n	800c538 <UART_SetConfig+0xa50>
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	db7b      	blt.n	800c5a2 <UART_SetConfig+0xaba>
 800c4aa:	2b20      	cmp	r3, #32
 800c4ac:	d879      	bhi.n	800c5a2 <UART_SetConfig+0xaba>
 800c4ae:	a201      	add	r2, pc, #4	; (adr r2, 800c4b4 <UART_SetConfig+0x9cc>)
 800c4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b4:	0800c53f 	.word	0x0800c53f
 800c4b8:	0800c547 	.word	0x0800c547
 800c4bc:	0800c5a3 	.word	0x0800c5a3
 800c4c0:	0800c5a3 	.word	0x0800c5a3
 800c4c4:	0800c54f 	.word	0x0800c54f
 800c4c8:	0800c5a3 	.word	0x0800c5a3
 800c4cc:	0800c5a3 	.word	0x0800c5a3
 800c4d0:	0800c5a3 	.word	0x0800c5a3
 800c4d4:	0800c55f 	.word	0x0800c55f
 800c4d8:	0800c5a3 	.word	0x0800c5a3
 800c4dc:	0800c5a3 	.word	0x0800c5a3
 800c4e0:	0800c5a3 	.word	0x0800c5a3
 800c4e4:	0800c5a3 	.word	0x0800c5a3
 800c4e8:	0800c5a3 	.word	0x0800c5a3
 800c4ec:	0800c5a3 	.word	0x0800c5a3
 800c4f0:	0800c5a3 	.word	0x0800c5a3
 800c4f4:	0800c56f 	.word	0x0800c56f
 800c4f8:	0800c5a3 	.word	0x0800c5a3
 800c4fc:	0800c5a3 	.word	0x0800c5a3
 800c500:	0800c5a3 	.word	0x0800c5a3
 800c504:	0800c5a3 	.word	0x0800c5a3
 800c508:	0800c5a3 	.word	0x0800c5a3
 800c50c:	0800c5a3 	.word	0x0800c5a3
 800c510:	0800c5a3 	.word	0x0800c5a3
 800c514:	0800c5a3 	.word	0x0800c5a3
 800c518:	0800c5a3 	.word	0x0800c5a3
 800c51c:	0800c5a3 	.word	0x0800c5a3
 800c520:	0800c5a3 	.word	0x0800c5a3
 800c524:	0800c5a3 	.word	0x0800c5a3
 800c528:	0800c5a3 	.word	0x0800c5a3
 800c52c:	0800c5a3 	.word	0x0800c5a3
 800c530:	0800c5a3 	.word	0x0800c5a3
 800c534:	0800c595 	.word	0x0800c595
 800c538:	2b40      	cmp	r3, #64	; 0x40
 800c53a:	d02e      	beq.n	800c59a <UART_SetConfig+0xab2>
 800c53c:	e031      	b.n	800c5a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c53e:	f7fb fbe1 	bl	8007d04 <HAL_RCC_GetPCLK1Freq>
 800c542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c544:	e033      	b.n	800c5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c546:	f7fb fbf3 	bl	8007d30 <HAL_RCC_GetPCLK2Freq>
 800c54a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c54c:	e02f      	b.n	800c5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c552:	4618      	mov	r0, r3
 800c554:	f7fc ff38 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c55c:	e027      	b.n	800c5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c55e:	f107 0318 	add.w	r3, r7, #24
 800c562:	4618      	mov	r0, r3
 800c564:	f7fd f884 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e01f      	b.n	800c5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c56e:	4b69      	ldr	r3, [pc, #420]	; (800c714 <UART_SetConfig+0xc2c>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f003 0320 	and.w	r3, r3, #32
 800c576:	2b00      	cmp	r3, #0
 800c578:	d009      	beq.n	800c58e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c57a:	4b66      	ldr	r3, [pc, #408]	; (800c714 <UART_SetConfig+0xc2c>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	08db      	lsrs	r3, r3, #3
 800c580:	f003 0303 	and.w	r3, r3, #3
 800c584:	4a64      	ldr	r2, [pc, #400]	; (800c718 <UART_SetConfig+0xc30>)
 800c586:	fa22 f303 	lsr.w	r3, r2, r3
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c58c:	e00f      	b.n	800c5ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c58e:	4b62      	ldr	r3, [pc, #392]	; (800c718 <UART_SetConfig+0xc30>)
 800c590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c592:	e00c      	b.n	800c5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c594:	4b61      	ldr	r3, [pc, #388]	; (800c71c <UART_SetConfig+0xc34>)
 800c596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c598:	e009      	b.n	800c5ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c59a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5a0:	e005      	b.n	800c5ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c5ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f000 80ea 	beq.w	800c78a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ba:	4a55      	ldr	r2, [pc, #340]	; (800c710 <UART_SetConfig+0xc28>)
 800c5bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5c8:	005a      	lsls	r2, r3, #1
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	085b      	lsrs	r3, r3, #1
 800c5d0:	441a      	add	r2, r3
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	2b0f      	cmp	r3, #15
 800c5e0:	d916      	bls.n	800c610 <UART_SetConfig+0xb28>
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5e8:	d212      	bcs.n	800c610 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	f023 030f 	bic.w	r3, r3, #15
 800c5f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f6:	085b      	lsrs	r3, r3, #1
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	f003 0307 	and.w	r3, r3, #7
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c602:	4313      	orrs	r3, r2
 800c604:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c60c:	60da      	str	r2, [r3, #12]
 800c60e:	e0bc      	b.n	800c78a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c616:	e0b8      	b.n	800c78a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c618:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c61c:	2b20      	cmp	r3, #32
 800c61e:	dc4b      	bgt.n	800c6b8 <UART_SetConfig+0xbd0>
 800c620:	2b00      	cmp	r3, #0
 800c622:	f2c0 8087 	blt.w	800c734 <UART_SetConfig+0xc4c>
 800c626:	2b20      	cmp	r3, #32
 800c628:	f200 8084 	bhi.w	800c734 <UART_SetConfig+0xc4c>
 800c62c:	a201      	add	r2, pc, #4	; (adr r2, 800c634 <UART_SetConfig+0xb4c>)
 800c62e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c632:	bf00      	nop
 800c634:	0800c6bf 	.word	0x0800c6bf
 800c638:	0800c6c7 	.word	0x0800c6c7
 800c63c:	0800c735 	.word	0x0800c735
 800c640:	0800c735 	.word	0x0800c735
 800c644:	0800c6cf 	.word	0x0800c6cf
 800c648:	0800c735 	.word	0x0800c735
 800c64c:	0800c735 	.word	0x0800c735
 800c650:	0800c735 	.word	0x0800c735
 800c654:	0800c6df 	.word	0x0800c6df
 800c658:	0800c735 	.word	0x0800c735
 800c65c:	0800c735 	.word	0x0800c735
 800c660:	0800c735 	.word	0x0800c735
 800c664:	0800c735 	.word	0x0800c735
 800c668:	0800c735 	.word	0x0800c735
 800c66c:	0800c735 	.word	0x0800c735
 800c670:	0800c735 	.word	0x0800c735
 800c674:	0800c6ef 	.word	0x0800c6ef
 800c678:	0800c735 	.word	0x0800c735
 800c67c:	0800c735 	.word	0x0800c735
 800c680:	0800c735 	.word	0x0800c735
 800c684:	0800c735 	.word	0x0800c735
 800c688:	0800c735 	.word	0x0800c735
 800c68c:	0800c735 	.word	0x0800c735
 800c690:	0800c735 	.word	0x0800c735
 800c694:	0800c735 	.word	0x0800c735
 800c698:	0800c735 	.word	0x0800c735
 800c69c:	0800c735 	.word	0x0800c735
 800c6a0:	0800c735 	.word	0x0800c735
 800c6a4:	0800c735 	.word	0x0800c735
 800c6a8:	0800c735 	.word	0x0800c735
 800c6ac:	0800c735 	.word	0x0800c735
 800c6b0:	0800c735 	.word	0x0800c735
 800c6b4:	0800c727 	.word	0x0800c727
 800c6b8:	2b40      	cmp	r3, #64	; 0x40
 800c6ba:	d037      	beq.n	800c72c <UART_SetConfig+0xc44>
 800c6bc:	e03a      	b.n	800c734 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6be:	f7fb fb21 	bl	8007d04 <HAL_RCC_GetPCLK1Freq>
 800c6c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6c4:	e03c      	b.n	800c740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6c6:	f7fb fb33 	bl	8007d30 <HAL_RCC_GetPCLK2Freq>
 800c6ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6cc:	e038      	b.n	800c740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7fc fe78 	bl	80093c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6dc:	e030      	b.n	800c740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6de:	f107 0318 	add.w	r3, r7, #24
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f7fc ffc4 	bl	8009670 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ec:	e028      	b.n	800c740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6ee:	4b09      	ldr	r3, [pc, #36]	; (800c714 <UART_SetConfig+0xc2c>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f003 0320 	and.w	r3, r3, #32
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d012      	beq.n	800c720 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6fa:	4b06      	ldr	r3, [pc, #24]	; (800c714 <UART_SetConfig+0xc2c>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	08db      	lsrs	r3, r3, #3
 800c700:	f003 0303 	and.w	r3, r3, #3
 800c704:	4a04      	ldr	r2, [pc, #16]	; (800c718 <UART_SetConfig+0xc30>)
 800c706:	fa22 f303 	lsr.w	r3, r2, r3
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c70c:	e018      	b.n	800c740 <UART_SetConfig+0xc58>
 800c70e:	bf00      	nop
 800c710:	080118f4 	.word	0x080118f4
 800c714:	58024400 	.word	0x58024400
 800c718:	03d09000 	.word	0x03d09000
 800c71c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c720:	4b24      	ldr	r3, [pc, #144]	; (800c7b4 <UART_SetConfig+0xccc>)
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c724:	e00c      	b.n	800c740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c726:	4b24      	ldr	r3, [pc, #144]	; (800c7b8 <UART_SetConfig+0xcd0>)
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c72a:	e009      	b.n	800c740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c72c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c732:	e005      	b.n	800c740 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c734:	2300      	movs	r3, #0
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c73e:	bf00      	nop
    }

    if (pclk != 0U)
 800c740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d021      	beq.n	800c78a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74a:	4a1c      	ldr	r2, [pc, #112]	; (800c7bc <UART_SetConfig+0xcd4>)
 800c74c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c750:	461a      	mov	r2, r3
 800c752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c754:	fbb3 f2f2 	udiv	r2, r3, r2
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	085b      	lsrs	r3, r3, #1
 800c75e:	441a      	add	r2, r3
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	fbb2 f3f3 	udiv	r3, r2, r3
 800c768:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76c:	2b0f      	cmp	r3, #15
 800c76e:	d909      	bls.n	800c784 <UART_SetConfig+0xc9c>
 800c770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c776:	d205      	bcs.n	800c784 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	60da      	str	r2, [r3, #12]
 800c782:	e002      	b.n	800c78a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c784:	2301      	movs	r3, #1
 800c786:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2201      	movs	r2, #1
 800c78e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2201      	movs	r2, #1
 800c796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	2200      	movs	r2, #0
 800c79e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c7a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3748      	adds	r7, #72	; 0x48
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c7b4:	03d09000 	.word	0x03d09000
 800c7b8:	003d0900 	.word	0x003d0900
 800c7bc:	080118f4 	.word	0x080118f4

0800c7c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7cc:	f003 0301 	and.w	r3, r3, #1
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00a      	beq.n	800c7ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	430a      	orrs	r2, r1
 800c7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ee:	f003 0302 	and.w	r3, r3, #2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d00a      	beq.n	800c80c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	430a      	orrs	r2, r1
 800c80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c810:	f003 0304 	and.w	r3, r3, #4
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00a      	beq.n	800c82e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c832:	f003 0308 	and.w	r3, r3, #8
 800c836:	2b00      	cmp	r3, #0
 800c838:	d00a      	beq.n	800c850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	430a      	orrs	r2, r1
 800c84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c854:	f003 0310 	and.w	r3, r3, #16
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	430a      	orrs	r2, r1
 800c870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c876:	f003 0320 	and.w	r3, r3, #32
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d00a      	beq.n	800c894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	430a      	orrs	r2, r1
 800c892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d01a      	beq.n	800c8d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	430a      	orrs	r2, r1
 800c8b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8be:	d10a      	bne.n	800c8d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	430a      	orrs	r2, r1
 800c8f6:	605a      	str	r2, [r3, #4]
  }
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af02      	add	r7, sp, #8
 800c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c914:	f7f5 ff02 	bl	800271c <HAL_GetTick>
 800c918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f003 0308 	and.w	r3, r3, #8
 800c924:	2b08      	cmp	r3, #8
 800c926:	d10e      	bne.n	800c946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2200      	movs	r2, #0
 800c932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f82f 	bl	800c99a <UART_WaitOnFlagUntilTimeout>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c942:	2303      	movs	r3, #3
 800c944:	e025      	b.n	800c992 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 0304 	and.w	r3, r3, #4
 800c950:	2b04      	cmp	r3, #4
 800c952:	d10e      	bne.n	800c972 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 f819 	bl	800c99a <UART_WaitOnFlagUntilTimeout>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c96e:	2303      	movs	r3, #3
 800c970:	e00f      	b.n	800c992 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2220      	movs	r2, #32
 800c976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2220      	movs	r2, #32
 800c97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b09c      	sub	sp, #112	; 0x70
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	60f8      	str	r0, [r7, #12]
 800c9a2:	60b9      	str	r1, [r7, #8]
 800c9a4:	603b      	str	r3, [r7, #0]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9aa:	e0a9      	b.n	800cb00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c9ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b2:	f000 80a5 	beq.w	800cb00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c9b6:	f7f5 feb1 	bl	800271c <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d302      	bcc.n	800c9cc <UART_WaitOnFlagUntilTimeout+0x32>
 800c9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d140      	bne.n	800ca4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d4:	e853 3f00 	ldrex	r3, [r3]
 800c9d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9e0:	667b      	str	r3, [r7, #100]	; 0x64
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c9f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c9f2:	e841 2300 	strex	r3, r2, [r1]
 800c9f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c9f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1e6      	bne.n	800c9cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3308      	adds	r3, #8
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca08:	e853 3f00 	ldrex	r3, [r3]
 800ca0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca10:	f023 0301 	bic.w	r3, r3, #1
 800ca14:	663b      	str	r3, [r7, #96]	; 0x60
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3308      	adds	r3, #8
 800ca1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca1e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ca20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca26:	e841 2300 	strex	r3, r2, [r1]
 800ca2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ca2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e5      	bne.n	800c9fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2220      	movs	r2, #32
 800ca36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2220      	movs	r2, #32
 800ca3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ca4a:	2303      	movs	r3, #3
 800ca4c:	e069      	b.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d051      	beq.n	800cb00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	69db      	ldr	r3, [r3, #28]
 800ca62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca6a:	d149      	bne.n	800cb00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7e:	e853 3f00 	ldrex	r3, [r3]
 800ca82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	461a      	mov	r2, r3
 800ca92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca94:	637b      	str	r3, [r7, #52]	; 0x34
 800ca96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ca9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca9c:	e841 2300 	strex	r3, r2, [r1]
 800caa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e6      	bne.n	800ca76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3308      	adds	r3, #8
 800caae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	e853 3f00 	ldrex	r3, [r3]
 800cab6:	613b      	str	r3, [r7, #16]
   return(result);
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f023 0301 	bic.w	r3, r3, #1
 800cabe:	66bb      	str	r3, [r7, #104]	; 0x68
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	3308      	adds	r3, #8
 800cac6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cac8:	623a      	str	r2, [r7, #32]
 800caca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cacc:	69f9      	ldr	r1, [r7, #28]
 800cace:	6a3a      	ldr	r2, [r7, #32]
 800cad0:	e841 2300 	strex	r3, r2, [r1]
 800cad4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1e5      	bne.n	800caa8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2220      	movs	r2, #32
 800cae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2220      	movs	r2, #32
 800cae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2220      	movs	r2, #32
 800caf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cafc:	2303      	movs	r3, #3
 800cafe:	e010      	b.n	800cb22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	69da      	ldr	r2, [r3, #28]
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	4013      	ands	r3, r2
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	bf0c      	ite	eq
 800cb10:	2301      	moveq	r3, #1
 800cb12:	2300      	movne	r3, #0
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	461a      	mov	r2, r3
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	f43f af46 	beq.w	800c9ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3770      	adds	r7, #112	; 0x70
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
	...

0800cb2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b0a3      	sub	sp, #140	; 0x8c
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	4613      	mov	r3, r2
 800cb38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	88fa      	ldrh	r2, [r7, #6]
 800cb44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	88fa      	ldrh	r2, [r7, #6]
 800cb4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	689b      	ldr	r3, [r3, #8]
 800cb5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb5e:	d10e      	bne.n	800cb7e <UART_Start_Receive_IT+0x52>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	691b      	ldr	r3, [r3, #16]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d105      	bne.n	800cb74 <UART_Start_Receive_IT+0x48>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cb6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb72:	e02d      	b.n	800cbd0 <UART_Start_Receive_IT+0xa4>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	22ff      	movs	r2, #255	; 0xff
 800cb78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb7c:	e028      	b.n	800cbd0 <UART_Start_Receive_IT+0xa4>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10d      	bne.n	800cba2 <UART_Start_Receive_IT+0x76>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d104      	bne.n	800cb98 <UART_Start_Receive_IT+0x6c>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	22ff      	movs	r2, #255	; 0xff
 800cb92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cb96:	e01b      	b.n	800cbd0 <UART_Start_Receive_IT+0xa4>
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	227f      	movs	r2, #127	; 0x7f
 800cb9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cba0:	e016      	b.n	800cbd0 <UART_Start_Receive_IT+0xa4>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbaa:	d10d      	bne.n	800cbc8 <UART_Start_Receive_IT+0x9c>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d104      	bne.n	800cbbe <UART_Start_Receive_IT+0x92>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	227f      	movs	r2, #127	; 0x7f
 800cbb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cbbc:	e008      	b.n	800cbd0 <UART_Start_Receive_IT+0xa4>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	223f      	movs	r2, #63	; 0x3f
 800cbc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cbc6:	e003      	b.n	800cbd0 <UART_Start_Receive_IT+0xa4>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2222      	movs	r2, #34	; 0x22
 800cbdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	3308      	adds	r3, #8
 800cbe6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbea:	e853 3f00 	ldrex	r3, [r3]
 800cbee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cbf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbf2:	f043 0301 	orr.w	r3, r3, #1
 800cbf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	3308      	adds	r3, #8
 800cc00:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cc04:	673a      	str	r2, [r7, #112]	; 0x70
 800cc06:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc08:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc0a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc0c:	e841 2300 	strex	r3, r2, [r1]
 800cc10:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800cc12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1e3      	bne.n	800cbe0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc20:	d153      	bne.n	800ccca <UART_Start_Receive_IT+0x19e>
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc28:	88fa      	ldrh	r2, [r7, #6]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d34d      	bcc.n	800ccca <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc36:	d107      	bne.n	800cc48 <UART_Start_Receive_IT+0x11c>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d103      	bne.n	800cc48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	4a4b      	ldr	r2, [pc, #300]	; (800cd70 <UART_Start_Receive_IT+0x244>)
 800cc44:	671a      	str	r2, [r3, #112]	; 0x70
 800cc46:	e002      	b.n	800cc4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	4a4a      	ldr	r2, [pc, #296]	; (800cd74 <UART_Start_Receive_IT+0x248>)
 800cc4c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d01a      	beq.n	800cc94 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc66:	e853 3f00 	ldrex	r3, [r3]
 800cc6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc80:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc82:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc88:	e841 2300 	strex	r3, r2, [r1]
 800cc8c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d1e4      	bne.n	800cc5e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3308      	adds	r3, #8
 800ccb2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ccb4:	64ba      	str	r2, [r7, #72]	; 0x48
 800ccb6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ccba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ccc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e5      	bne.n	800cc94 <UART_Start_Receive_IT+0x168>
 800ccc8:	e04a      	b.n	800cd60 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	689b      	ldr	r3, [r3, #8]
 800ccce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccd2:	d107      	bne.n	800cce4 <UART_Start_Receive_IT+0x1b8>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d103      	bne.n	800cce4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	4a26      	ldr	r2, [pc, #152]	; (800cd78 <UART_Start_Receive_IT+0x24c>)
 800cce0:	671a      	str	r2, [r3, #112]	; 0x70
 800cce2:	e002      	b.n	800ccea <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	4a25      	ldr	r2, [pc, #148]	; (800cd7c <UART_Start_Receive_IT+0x250>)
 800cce8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d019      	beq.n	800cd2e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	e853 3f00 	ldrex	r3, [r3]
 800cd06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800cd0e:	677b      	str	r3, [r7, #116]	; 0x74
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	461a      	mov	r2, r3
 800cd16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd18:	637b      	str	r3, [r7, #52]	; 0x34
 800cd1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd20:	e841 2300 	strex	r3, r2, [r1]
 800cd24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1e6      	bne.n	800ccfa <UART_Start_Receive_IT+0x1ce>
 800cd2c:	e018      	b.n	800cd60 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	e853 3f00 	ldrex	r3, [r3]
 800cd3a:	613b      	str	r3, [r7, #16]
   return(result);
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	f043 0320 	orr.w	r3, r3, #32
 800cd42:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	461a      	mov	r2, r3
 800cd4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd4c:	623b      	str	r3, [r7, #32]
 800cd4e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd50:	69f9      	ldr	r1, [r7, #28]
 800cd52:	6a3a      	ldr	r2, [r7, #32]
 800cd54:	e841 2300 	strex	r3, r2, [r1]
 800cd58:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1e6      	bne.n	800cd2e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	378c      	adds	r7, #140	; 0x8c
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop
 800cd70:	0800d489 	.word	0x0800d489
 800cd74:	0800d191 	.word	0x0800d191
 800cd78:	0800d02f 	.word	0x0800d02f
 800cd7c:	0800cecf 	.word	0x0800cecf

0800cd80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b095      	sub	sp, #84	; 0x54
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd90:	e853 3f00 	ldrex	r3, [r3]
 800cd94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda6:	643b      	str	r3, [r7, #64]	; 0x40
 800cda8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e6      	bne.n	800cd88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3308      	adds	r3, #8
 800cdc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc2:	6a3b      	ldr	r3, [r7, #32]
 800cdc4:	e853 3f00 	ldrex	r3, [r3]
 800cdc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdca:	69fa      	ldr	r2, [r7, #28]
 800cdcc:	4b1e      	ldr	r3, [pc, #120]	; (800ce48 <UART_EndRxTransfer+0xc8>)
 800cdce:	4013      	ands	r3, r2
 800cdd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3308      	adds	r3, #8
 800cdd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdda:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cde0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cde2:	e841 2300 	strex	r3, r2, [r1]
 800cde6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1e5      	bne.n	800cdba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d118      	bne.n	800ce28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	e853 3f00 	ldrex	r3, [r3]
 800ce02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	f023 0310 	bic.w	r3, r3, #16
 800ce0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	461a      	mov	r2, r3
 800ce12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce14:	61bb      	str	r3, [r7, #24]
 800ce16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce18:	6979      	ldr	r1, [r7, #20]
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	e841 2300 	strex	r3, r2, [r1]
 800ce20:	613b      	str	r3, [r7, #16]
   return(result);
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1e6      	bne.n	800cdf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2220      	movs	r2, #32
 800ce2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ce3c:	bf00      	nop
 800ce3e:	3754      	adds	r7, #84	; 0x54
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	effffffe 	.word	0xeffffffe

0800ce4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce6a:	68f8      	ldr	r0, [r7, #12]
 800ce6c:	f7fe fe26 	bl	800babc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce70:	bf00      	nop
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	e853 3f00 	ldrex	r3, [r3]
 800ce8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce94:	61fb      	str	r3, [r7, #28]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	461a      	mov	r2, r3
 800ce9c:	69fb      	ldr	r3, [r7, #28]
 800ce9e:	61bb      	str	r3, [r7, #24]
 800cea0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea2:	6979      	ldr	r1, [r7, #20]
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	e841 2300 	strex	r3, r2, [r1]
 800ceaa:	613b      	str	r3, [r7, #16]
   return(result);
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1e6      	bne.n	800ce80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2220      	movs	r2, #32
 800ceb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f7fe fdf1 	bl	800baa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cec6:	bf00      	nop
 800cec8:	3720      	adds	r7, #32
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b096      	sub	sp, #88	; 0x58
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cedc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee6:	2b22      	cmp	r3, #34	; 0x22
 800cee8:	f040 8095 	bne.w	800d016 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cef6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800cefa:	b2d9      	uxtb	r1, r3
 800cefc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf06:	400a      	ands	r2, r1
 800cf08:	b2d2      	uxtb	r2, r2
 800cf0a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	b29a      	uxth	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d178      	bne.n	800d026 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	e853 3f00 	ldrex	r3, [r3]
 800cf40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf48:	653b      	str	r3, [r7, #80]	; 0x50
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf52:	647b      	str	r3, [r7, #68]	; 0x44
 800cf54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf5a:	e841 2300 	strex	r3, r2, [r1]
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1e6      	bne.n	800cf34 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	3308      	adds	r3, #8
 800cf6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	e853 3f00 	ldrex	r3, [r3]
 800cf74:	623b      	str	r3, [r7, #32]
   return(result);
 800cf76:	6a3b      	ldr	r3, [r7, #32]
 800cf78:	f023 0301 	bic.w	r3, r3, #1
 800cf7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3308      	adds	r3, #8
 800cf84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf86:	633a      	str	r2, [r7, #48]	; 0x30
 800cf88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8e:	e841 2300 	strex	r3, r2, [r1]
 800cf92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1e5      	bne.n	800cf66 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2220      	movs	r2, #32
 800cf9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d12e      	bne.n	800d00e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	e853 3f00 	ldrex	r3, [r3]
 800cfc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f023 0310 	bic.w	r3, r3, #16
 800cfca:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd8:	69b9      	ldr	r1, [r7, #24]
 800cfda:	69fa      	ldr	r2, [r7, #28]
 800cfdc:	e841 2300 	strex	r3, r2, [r1]
 800cfe0:	617b      	str	r3, [r7, #20]
   return(result);
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e6      	bne.n	800cfb6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	69db      	ldr	r3, [r3, #28]
 800cfee:	f003 0310 	and.w	r3, r3, #16
 800cff2:	2b10      	cmp	r3, #16
 800cff4:	d103      	bne.n	800cffe <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2210      	movs	r2, #16
 800cffc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7fe fd62 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d00c:	e00b      	b.n	800d026 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7f4 fb0a 	bl	8001628 <HAL_UART_RxCpltCallback>
}
 800d014:	e007      	b.n	800d026 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	699a      	ldr	r2, [r3, #24]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f042 0208 	orr.w	r2, r2, #8
 800d024:	619a      	str	r2, [r3, #24]
}
 800d026:	bf00      	nop
 800d028:	3758      	adds	r7, #88	; 0x58
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b096      	sub	sp, #88	; 0x58
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d03c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d046:	2b22      	cmp	r3, #34	; 0x22
 800d048:	f040 8095 	bne.w	800d176 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d052:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d05a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d05c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d060:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d064:	4013      	ands	r3, r2
 800d066:	b29a      	uxth	r2, r3
 800d068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d06a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d070:	1c9a      	adds	r2, r3, #2
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	3b01      	subs	r3, #1
 800d080:	b29a      	uxth	r2, r3
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d08e:	b29b      	uxth	r3, r3
 800d090:	2b00      	cmp	r3, #0
 800d092:	d178      	bne.n	800d186 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09c:	e853 3f00 	ldrex	r3, [r3]
 800d0a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d0a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d0b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0ba:	e841 2300 	strex	r3, r2, [r1]
 800d0be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e6      	bne.n	800d094 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	e853 3f00 	ldrex	r3, [r3]
 800d0d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d0d6:	69fb      	ldr	r3, [r7, #28]
 800d0d8:	f023 0301 	bic.w	r3, r3, #1
 800d0dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d0e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0ee:	e841 2300 	strex	r3, r2, [r1]
 800d0f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1e5      	bne.n	800d0c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2220      	movs	r2, #32
 800d0fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d12e      	bne.n	800d16e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	e853 3f00 	ldrex	r3, [r3]
 800d122:	60bb      	str	r3, [r7, #8]
   return(result);
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	f023 0310 	bic.w	r3, r3, #16
 800d12a:	647b      	str	r3, [r7, #68]	; 0x44
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	461a      	mov	r2, r3
 800d132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d134:	61bb      	str	r3, [r7, #24]
 800d136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d138:	6979      	ldr	r1, [r7, #20]
 800d13a:	69ba      	ldr	r2, [r7, #24]
 800d13c:	e841 2300 	strex	r3, r2, [r1]
 800d140:	613b      	str	r3, [r7, #16]
   return(result);
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1e6      	bne.n	800d116 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	69db      	ldr	r3, [r3, #28]
 800d14e:	f003 0310 	and.w	r3, r3, #16
 800d152:	2b10      	cmp	r3, #16
 800d154:	d103      	bne.n	800d15e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2210      	movs	r2, #16
 800d15c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7fe fcb2 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d16c:	e00b      	b.n	800d186 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7f4 fa5a 	bl	8001628 <HAL_UART_RxCpltCallback>
}
 800d174:	e007      	b.n	800d186 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	699a      	ldr	r2, [r3, #24]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f042 0208 	orr.w	r2, r2, #8
 800d184:	619a      	str	r2, [r3, #24]
}
 800d186:	bf00      	nop
 800d188:	3758      	adds	r7, #88	; 0x58
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
	...

0800d190 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b0a6      	sub	sp, #152	; 0x98
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d19e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	69db      	ldr	r3, [r3, #28]
 800d1a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c6:	2b22      	cmp	r3, #34	; 0x22
 800d1c8:	f040 814d 	bne.w	800d466 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d1d2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d1d6:	e0f4      	b.n	800d3c2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1de:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d1e2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800d1e6:	b2d9      	uxtb	r1, r3
 800d1e8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f2:	400a      	ands	r2, r1
 800d1f4:	b2d2      	uxtb	r2, r2
 800d1f6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1fc:	1c5a      	adds	r2, r3, #1
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d208:	b29b      	uxth	r3, r3
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	69db      	ldr	r3, [r3, #28]
 800d21a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d21e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d222:	f003 0307 	and.w	r3, r3, #7
 800d226:	2b00      	cmp	r3, #0
 800d228:	d053      	beq.n	800d2d2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d22a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d011      	beq.n	800d25a <UART_RxISR_8BIT_FIFOEN+0xca>
 800d236:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00b      	beq.n	800d25a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2201      	movs	r2, #1
 800d248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d250:	f043 0201 	orr.w	r2, r3, #1
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d25a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d011      	beq.n	800d28a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d266:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00b      	beq.n	800d28a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2202      	movs	r2, #2
 800d278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d280:	f043 0204 	orr.w	r2, r3, #4
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d28a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d28e:	f003 0304 	and.w	r3, r3, #4
 800d292:	2b00      	cmp	r3, #0
 800d294:	d011      	beq.n	800d2ba <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d296:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d29a:	f003 0301 	and.w	r3, r3, #1
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00b      	beq.n	800d2ba <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2204      	movs	r2, #4
 800d2a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2b0:	f043 0202 	orr.w	r2, r3, #2
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d006      	beq.n	800d2d2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7fe fbf9 	bl	800babc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d171      	bne.n	800d3c2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2e6:	e853 3f00 	ldrex	r3, [r3]
 800d2ea:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d2ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d300:	66bb      	str	r3, [r7, #104]	; 0x68
 800d302:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d304:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d306:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d308:	e841 2300 	strex	r3, r2, [r1]
 800d30c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d30e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d310:	2b00      	cmp	r3, #0
 800d312:	d1e4      	bne.n	800d2de <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3308      	adds	r3, #8
 800d31a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d31e:	e853 3f00 	ldrex	r3, [r3]
 800d322:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d326:	4b56      	ldr	r3, [pc, #344]	; (800d480 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 800d328:	4013      	ands	r3, r2
 800d32a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	3308      	adds	r3, #8
 800d332:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d334:	657a      	str	r2, [r7, #84]	; 0x54
 800d336:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d338:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d33a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d33c:	e841 2300 	strex	r3, r2, [r1]
 800d340:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e5      	bne.n	800d314 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2220      	movs	r2, #32
 800d34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d12e      	bne.n	800d3bc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36c:	e853 3f00 	ldrex	r3, [r3]
 800d370:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d374:	f023 0310 	bic.w	r3, r3, #16
 800d378:	67bb      	str	r3, [r7, #120]	; 0x78
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d382:	643b      	str	r3, [r7, #64]	; 0x40
 800d384:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d38a:	e841 2300 	strex	r3, r2, [r1]
 800d38e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e6      	bne.n	800d364 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	69db      	ldr	r3, [r3, #28]
 800d39c:	f003 0310 	and.w	r3, r3, #16
 800d3a0:	2b10      	cmp	r3, #16
 800d3a2:	d103      	bne.n	800d3ac <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2210      	movs	r2, #16
 800d3aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7fe fb8b 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
 800d3ba:	e002      	b.n	800d3c2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7f4 f933 	bl	8001628 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d3c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d006      	beq.n	800d3d8 <UART_RxISR_8BIT_FIFOEN+0x248>
 800d3ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f47f af00 	bne.w	800d1d8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d3e2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d045      	beq.n	800d476 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d3f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d23e      	bcs.n	800d476 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	6a3b      	ldr	r3, [r7, #32]
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	61fb      	str	r3, [r7, #28]
   return(result);
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d40e:	673b      	str	r3, [r7, #112]	; 0x70
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3308      	adds	r3, #8
 800d416:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d41a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d420:	e841 2300 	strex	r3, r2, [r1]
 800d424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e5      	bne.n	800d3f8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a15      	ldr	r2, [pc, #84]	; (800d484 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800d430:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	e853 3f00 	ldrex	r3, [r3]
 800d43e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	f043 0320 	orr.w	r3, r3, #32
 800d446:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	461a      	mov	r2, r3
 800d44e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d450:	61bb      	str	r3, [r7, #24]
 800d452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d454:	6979      	ldr	r1, [r7, #20]
 800d456:	69ba      	ldr	r2, [r7, #24]
 800d458:	e841 2300 	strex	r3, r2, [r1]
 800d45c:	613b      	str	r3, [r7, #16]
   return(result);
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1e6      	bne.n	800d432 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d464:	e007      	b.n	800d476 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	699a      	ldr	r2, [r3, #24]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f042 0208 	orr.w	r2, r2, #8
 800d474:	619a      	str	r2, [r3, #24]
}
 800d476:	bf00      	nop
 800d478:	3798      	adds	r7, #152	; 0x98
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	effffffe 	.word	0xeffffffe
 800d484:	0800cecf 	.word	0x0800cecf

0800d488 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b0a8      	sub	sp, #160	; 0xa0
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d496:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	69db      	ldr	r3, [r3, #28]
 800d4a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	689b      	ldr	r3, [r3, #8]
 800d4b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4be:	2b22      	cmp	r3, #34	; 0x22
 800d4c0:	f040 8151 	bne.w	800d766 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d4ca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d4ce:	e0f8      	b.n	800d6c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800d4e2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800d4e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d4f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4f8:	1c9a      	adds	r2, r3, #2
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d504:	b29b      	uxth	r3, r3
 800d506:	3b01      	subs	r3, #1
 800d508:	b29a      	uxth	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d51a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d51e:	f003 0307 	and.w	r3, r3, #7
 800d522:	2b00      	cmp	r3, #0
 800d524:	d053      	beq.n	800d5ce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d526:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d011      	beq.n	800d556 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d532:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00b      	beq.n	800d556 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2201      	movs	r2, #1
 800d544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d54c:	f043 0201 	orr.w	r2, r3, #1
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d55a:	f003 0302 	and.w	r3, r3, #2
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d011      	beq.n	800d586 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00b      	beq.n	800d586 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2202      	movs	r2, #2
 800d574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d57c:	f043 0204 	orr.w	r2, r3, #4
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d58a:	f003 0304 	and.w	r3, r3, #4
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d011      	beq.n	800d5b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00b      	beq.n	800d5b6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2204      	movs	r2, #4
 800d5a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ac:	f043 0202 	orr.w	r2, r3, #2
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d006      	beq.n	800d5ce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f7fe fa7b 	bl	800babc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d173      	bne.n	800d6c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d5e2:	e853 3f00 	ldrex	r3, [r3]
 800d5e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d5e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5fe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d600:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d602:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d604:	e841 2300 	strex	r3, r2, [r1]
 800d608:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d60a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1e4      	bne.n	800d5da <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	3308      	adds	r3, #8
 800d616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d61a:	e853 3f00 	ldrex	r3, [r3]
 800d61e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d622:	4b57      	ldr	r3, [pc, #348]	; (800d780 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 800d624:	4013      	ands	r3, r2
 800d626:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	3308      	adds	r3, #8
 800d630:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d634:	65ba      	str	r2, [r7, #88]	; 0x58
 800d636:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d63a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d63c:	e841 2300 	strex	r3, r2, [r1]
 800d640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1e3      	bne.n	800d610 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2220      	movs	r2, #32
 800d64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d65a:	2b01      	cmp	r3, #1
 800d65c:	d12e      	bne.n	800d6bc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d674:	f023 0310 	bic.w	r3, r3, #16
 800d678:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	461a      	mov	r2, r3
 800d680:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d682:	647b      	str	r3, [r7, #68]	; 0x44
 800d684:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e6      	bne.n	800d664 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	f003 0310 	and.w	r3, r3, #16
 800d6a0:	2b10      	cmp	r3, #16
 800d6a2:	d103      	bne.n	800d6ac <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2210      	movs	r2, #16
 800d6aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7fe fa0b 	bl	800bad0 <HAL_UARTEx_RxEventCallback>
 800d6ba:	e002      	b.n	800d6c2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7f3 ffb3 	bl	8001628 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d6c2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d006      	beq.n	800d6d8 <UART_RxISR_16BIT_FIFOEN+0x250>
 800d6ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d6ce:	f003 0320 	and.w	r3, r3, #32
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f47f aefc 	bne.w	800d4d0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d6e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d045      	beq.n	800d776 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d6f0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d23e      	bcs.n	800d776 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3308      	adds	r3, #8
 800d6fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d702:	e853 3f00 	ldrex	r3, [r3]
 800d706:	623b      	str	r3, [r7, #32]
   return(result);
 800d708:	6a3b      	ldr	r3, [r7, #32]
 800d70a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d70e:	677b      	str	r3, [r7, #116]	; 0x74
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	3308      	adds	r3, #8
 800d716:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d718:	633a      	str	r2, [r7, #48]	; 0x30
 800d71a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d71e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d720:	e841 2300 	strex	r3, r2, [r1]
 800d724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1e5      	bne.n	800d6f8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a15      	ldr	r2, [pc, #84]	; (800d784 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800d730:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	e853 3f00 	ldrex	r3, [r3]
 800d73e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f043 0320 	orr.w	r3, r3, #32
 800d746:	673b      	str	r3, [r7, #112]	; 0x70
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d750:	61fb      	str	r3, [r7, #28]
 800d752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d754:	69b9      	ldr	r1, [r7, #24]
 800d756:	69fa      	ldr	r2, [r7, #28]
 800d758:	e841 2300 	strex	r3, r2, [r1]
 800d75c:	617b      	str	r3, [r7, #20]
   return(result);
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e6      	bne.n	800d732 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d764:	e007      	b.n	800d776 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	699a      	ldr	r2, [r3, #24]
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f042 0208 	orr.w	r2, r2, #8
 800d774:	619a      	str	r2, [r3, #24]
}
 800d776:	bf00      	nop
 800d778:	37a0      	adds	r7, #160	; 0xa0
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd80      	pop	{r7, pc}
 800d77e:	bf00      	nop
 800d780:	effffffe 	.word	0xeffffffe
 800d784:	0800d02f 	.word	0x0800d02f

0800d788 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d790:	bf00      	nop
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d79c:	b480      	push	{r7}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d7a4:	bf00      	nop
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d7b8:	bf00      	nop
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d101      	bne.n	800d7da <HAL_UARTEx_DisableFifoMode+0x16>
 800d7d6:	2302      	movs	r3, #2
 800d7d8:	e027      	b.n	800d82a <HAL_UARTEx_DisableFifoMode+0x66>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2224      	movs	r2, #36	; 0x24
 800d7e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f022 0201 	bic.w	r2, r2, #1
 800d800:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d808:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2220      	movs	r2, #32
 800d81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d846:	2b01      	cmp	r3, #1
 800d848:	d101      	bne.n	800d84e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d84a:	2302      	movs	r3, #2
 800d84c:	e02d      	b.n	800d8aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2224      	movs	r2, #36	; 0x24
 800d85a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f022 0201 	bic.w	r2, r2, #1
 800d874:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	430a      	orrs	r2, r1
 800d888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f850 	bl	800d930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2220      	movs	r2, #32
 800d89c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d8b2:	b580      	push	{r7, lr}
 800d8b4:	b084      	sub	sp, #16
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d101      	bne.n	800d8ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d8c6:	2302      	movs	r3, #2
 800d8c8:	e02d      	b.n	800d926 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2224      	movs	r2, #36	; 0x24
 800d8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f022 0201 	bic.w	r2, r2, #1
 800d8f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	683a      	ldr	r2, [r7, #0]
 800d902:	430a      	orrs	r2, r1
 800d904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f812 	bl	800d930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	68fa      	ldr	r2, [r7, #12]
 800d912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2220      	movs	r2, #32
 800d918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
	...

0800d930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d108      	bne.n	800d952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2201      	movs	r2, #1
 800d944:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d950:	e031      	b.n	800d9b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d952:	2310      	movs	r3, #16
 800d954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d956:	2310      	movs	r3, #16
 800d958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	689b      	ldr	r3, [r3, #8]
 800d960:	0e5b      	lsrs	r3, r3, #25
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 0307 	and.w	r3, r3, #7
 800d968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	0f5b      	lsrs	r3, r3, #29
 800d972:	b2db      	uxtb	r3, r3
 800d974:	f003 0307 	and.w	r3, r3, #7
 800d978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d97a:	7bbb      	ldrb	r3, [r7, #14]
 800d97c:	7b3a      	ldrb	r2, [r7, #12]
 800d97e:	4911      	ldr	r1, [pc, #68]	; (800d9c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d980:	5c8a      	ldrb	r2, [r1, r2]
 800d982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d986:	7b3a      	ldrb	r2, [r7, #12]
 800d988:	490f      	ldr	r1, [pc, #60]	; (800d9c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d98a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d98c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d990:	b29a      	uxth	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d998:	7bfb      	ldrb	r3, [r7, #15]
 800d99a:	7b7a      	ldrb	r2, [r7, #13]
 800d99c:	4909      	ldr	r1, [pc, #36]	; (800d9c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d99e:	5c8a      	ldrb	r2, [r1, r2]
 800d9a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9a4:	7b7a      	ldrb	r2, [r7, #13]
 800d9a6:	4908      	ldr	r1, [pc, #32]	; (800d9c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d9a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9b6:	bf00      	nop
 800d9b8:	3714      	adds	r7, #20
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	0801190c 	.word	0x0801190c
 800d9c8:	08011914 	.word	0x08011914

0800d9cc <atof>:
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	f001 ba6d 	b.w	800eeac <strtod>
	...

0800d9d4 <__errno>:
 800d9d4:	4b01      	ldr	r3, [pc, #4]	; (800d9dc <__errno+0x8>)
 800d9d6:	6818      	ldr	r0, [r3, #0]
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	2400031c 	.word	0x2400031c

0800d9e0 <__libc_init_array>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	4d0d      	ldr	r5, [pc, #52]	; (800da18 <__libc_init_array+0x38>)
 800d9e4:	4c0d      	ldr	r4, [pc, #52]	; (800da1c <__libc_init_array+0x3c>)
 800d9e6:	1b64      	subs	r4, r4, r5
 800d9e8:	10a4      	asrs	r4, r4, #2
 800d9ea:	2600      	movs	r6, #0
 800d9ec:	42a6      	cmp	r6, r4
 800d9ee:	d109      	bne.n	800da04 <__libc_init_array+0x24>
 800d9f0:	4d0b      	ldr	r5, [pc, #44]	; (800da20 <__libc_init_array+0x40>)
 800d9f2:	4c0c      	ldr	r4, [pc, #48]	; (800da24 <__libc_init_array+0x44>)
 800d9f4:	f003 ff5c 	bl	80118b0 <_init>
 800d9f8:	1b64      	subs	r4, r4, r5
 800d9fa:	10a4      	asrs	r4, r4, #2
 800d9fc:	2600      	movs	r6, #0
 800d9fe:	42a6      	cmp	r6, r4
 800da00:	d105      	bne.n	800da0e <__libc_init_array+0x2e>
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	f855 3b04 	ldr.w	r3, [r5], #4
 800da08:	4798      	blx	r3
 800da0a:	3601      	adds	r6, #1
 800da0c:	e7ee      	b.n	800d9ec <__libc_init_array+0xc>
 800da0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da12:	4798      	blx	r3
 800da14:	3601      	adds	r6, #1
 800da16:	e7f2      	b.n	800d9fe <__libc_init_array+0x1e>
 800da18:	08011dc4 	.word	0x08011dc4
 800da1c:	08011dc4 	.word	0x08011dc4
 800da20:	08011dc4 	.word	0x08011dc4
 800da24:	08011dc8 	.word	0x08011dc8

0800da28 <memset>:
 800da28:	4402      	add	r2, r0
 800da2a:	4603      	mov	r3, r0
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d100      	bne.n	800da32 <memset+0xa>
 800da30:	4770      	bx	lr
 800da32:	f803 1b01 	strb.w	r1, [r3], #1
 800da36:	e7f9      	b.n	800da2c <memset+0x4>

0800da38 <__cvt>:
 800da38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da3a:	ed2d 8b02 	vpush	{d8}
 800da3e:	eeb0 8b40 	vmov.f64	d8, d0
 800da42:	b085      	sub	sp, #20
 800da44:	4617      	mov	r7, r2
 800da46:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800da48:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800da4a:	ee18 2a90 	vmov	r2, s17
 800da4e:	f025 0520 	bic.w	r5, r5, #32
 800da52:	2a00      	cmp	r2, #0
 800da54:	bfb6      	itet	lt
 800da56:	222d      	movlt	r2, #45	; 0x2d
 800da58:	2200      	movge	r2, #0
 800da5a:	eeb1 8b40 	vneglt.f64	d8, d0
 800da5e:	2d46      	cmp	r5, #70	; 0x46
 800da60:	460c      	mov	r4, r1
 800da62:	701a      	strb	r2, [r3, #0]
 800da64:	d004      	beq.n	800da70 <__cvt+0x38>
 800da66:	2d45      	cmp	r5, #69	; 0x45
 800da68:	d100      	bne.n	800da6c <__cvt+0x34>
 800da6a:	3401      	adds	r4, #1
 800da6c:	2102      	movs	r1, #2
 800da6e:	e000      	b.n	800da72 <__cvt+0x3a>
 800da70:	2103      	movs	r1, #3
 800da72:	ab03      	add	r3, sp, #12
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	ab02      	add	r3, sp, #8
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	4622      	mov	r2, r4
 800da7c:	4633      	mov	r3, r6
 800da7e:	eeb0 0b48 	vmov.f64	d0, d8
 800da82:	f001 faad 	bl	800efe0 <_dtoa_r>
 800da86:	2d47      	cmp	r5, #71	; 0x47
 800da88:	d101      	bne.n	800da8e <__cvt+0x56>
 800da8a:	07fb      	lsls	r3, r7, #31
 800da8c:	d51a      	bpl.n	800dac4 <__cvt+0x8c>
 800da8e:	2d46      	cmp	r5, #70	; 0x46
 800da90:	eb00 0204 	add.w	r2, r0, r4
 800da94:	d10c      	bne.n	800dab0 <__cvt+0x78>
 800da96:	7803      	ldrb	r3, [r0, #0]
 800da98:	2b30      	cmp	r3, #48	; 0x30
 800da9a:	d107      	bne.n	800daac <__cvt+0x74>
 800da9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800daa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa4:	bf1c      	itt	ne
 800daa6:	f1c4 0401 	rsbne	r4, r4, #1
 800daaa:	6034      	strne	r4, [r6, #0]
 800daac:	6833      	ldr	r3, [r6, #0]
 800daae:	441a      	add	r2, r3
 800dab0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab8:	bf08      	it	eq
 800daba:	9203      	streq	r2, [sp, #12]
 800dabc:	2130      	movs	r1, #48	; 0x30
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d307      	bcc.n	800dad4 <__cvt+0x9c>
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dac8:	1a1b      	subs	r3, r3, r0
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	b005      	add	sp, #20
 800dace:	ecbd 8b02 	vpop	{d8}
 800dad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dad4:	1c5c      	adds	r4, r3, #1
 800dad6:	9403      	str	r4, [sp, #12]
 800dad8:	7019      	strb	r1, [r3, #0]
 800dada:	e7f0      	b.n	800dabe <__cvt+0x86>

0800dadc <__exponent>:
 800dadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dade:	4603      	mov	r3, r0
 800dae0:	2900      	cmp	r1, #0
 800dae2:	bfb8      	it	lt
 800dae4:	4249      	neglt	r1, r1
 800dae6:	f803 2b02 	strb.w	r2, [r3], #2
 800daea:	bfb4      	ite	lt
 800daec:	222d      	movlt	r2, #45	; 0x2d
 800daee:	222b      	movge	r2, #43	; 0x2b
 800daf0:	2909      	cmp	r1, #9
 800daf2:	7042      	strb	r2, [r0, #1]
 800daf4:	dd2a      	ble.n	800db4c <__exponent+0x70>
 800daf6:	f10d 0407 	add.w	r4, sp, #7
 800dafa:	46a4      	mov	ip, r4
 800dafc:	270a      	movs	r7, #10
 800dafe:	46a6      	mov	lr, r4
 800db00:	460a      	mov	r2, r1
 800db02:	fb91 f6f7 	sdiv	r6, r1, r7
 800db06:	fb07 1516 	mls	r5, r7, r6, r1
 800db0a:	3530      	adds	r5, #48	; 0x30
 800db0c:	2a63      	cmp	r2, #99	; 0x63
 800db0e:	f104 34ff 	add.w	r4, r4, #4294967295
 800db12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800db16:	4631      	mov	r1, r6
 800db18:	dcf1      	bgt.n	800dafe <__exponent+0x22>
 800db1a:	3130      	adds	r1, #48	; 0x30
 800db1c:	f1ae 0502 	sub.w	r5, lr, #2
 800db20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db24:	1c44      	adds	r4, r0, #1
 800db26:	4629      	mov	r1, r5
 800db28:	4561      	cmp	r1, ip
 800db2a:	d30a      	bcc.n	800db42 <__exponent+0x66>
 800db2c:	f10d 0209 	add.w	r2, sp, #9
 800db30:	eba2 020e 	sub.w	r2, r2, lr
 800db34:	4565      	cmp	r5, ip
 800db36:	bf88      	it	hi
 800db38:	2200      	movhi	r2, #0
 800db3a:	4413      	add	r3, r2
 800db3c:	1a18      	subs	r0, r3, r0
 800db3e:	b003      	add	sp, #12
 800db40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800db4a:	e7ed      	b.n	800db28 <__exponent+0x4c>
 800db4c:	2330      	movs	r3, #48	; 0x30
 800db4e:	3130      	adds	r1, #48	; 0x30
 800db50:	7083      	strb	r3, [r0, #2]
 800db52:	70c1      	strb	r1, [r0, #3]
 800db54:	1d03      	adds	r3, r0, #4
 800db56:	e7f1      	b.n	800db3c <__exponent+0x60>

0800db58 <_printf_float>:
 800db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	b08b      	sub	sp, #44	; 0x2c
 800db5e:	460c      	mov	r4, r1
 800db60:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800db64:	4616      	mov	r6, r2
 800db66:	461f      	mov	r7, r3
 800db68:	4605      	mov	r5, r0
 800db6a:	f002 fb17 	bl	801019c <_localeconv_r>
 800db6e:	f8d0 b000 	ldr.w	fp, [r0]
 800db72:	4658      	mov	r0, fp
 800db74:	f7f2 fbcc 	bl	8000310 <strlen>
 800db78:	2300      	movs	r3, #0
 800db7a:	9308      	str	r3, [sp, #32]
 800db7c:	f8d8 3000 	ldr.w	r3, [r8]
 800db80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800db84:	6822      	ldr	r2, [r4, #0]
 800db86:	3307      	adds	r3, #7
 800db88:	f023 0307 	bic.w	r3, r3, #7
 800db8c:	f103 0108 	add.w	r1, r3, #8
 800db90:	f8c8 1000 	str.w	r1, [r8]
 800db94:	4682      	mov	sl, r0
 800db96:	e9d3 0100 	ldrd	r0, r1, [r3]
 800db9a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800db9e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800de00 <_printf_float+0x2a8>
 800dba2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800dba6:	eeb0 6bc0 	vabs.f64	d6, d0
 800dbaa:	eeb4 6b47 	vcmp.f64	d6, d7
 800dbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb2:	dd24      	ble.n	800dbfe <_printf_float+0xa6>
 800dbb4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800dbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbbc:	d502      	bpl.n	800dbc4 <_printf_float+0x6c>
 800dbbe:	232d      	movs	r3, #45	; 0x2d
 800dbc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbc4:	4b90      	ldr	r3, [pc, #576]	; (800de08 <_printf_float+0x2b0>)
 800dbc6:	4891      	ldr	r0, [pc, #580]	; (800de0c <_printf_float+0x2b4>)
 800dbc8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800dbcc:	bf94      	ite	ls
 800dbce:	4698      	movls	r8, r3
 800dbd0:	4680      	movhi	r8, r0
 800dbd2:	2303      	movs	r3, #3
 800dbd4:	6123      	str	r3, [r4, #16]
 800dbd6:	f022 0204 	bic.w	r2, r2, #4
 800dbda:	2300      	movs	r3, #0
 800dbdc:	6022      	str	r2, [r4, #0]
 800dbde:	9304      	str	r3, [sp, #16]
 800dbe0:	9700      	str	r7, [sp, #0]
 800dbe2:	4633      	mov	r3, r6
 800dbe4:	aa09      	add	r2, sp, #36	; 0x24
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f000 f9d3 	bl	800df94 <_printf_common>
 800dbee:	3001      	adds	r0, #1
 800dbf0:	f040 808a 	bne.w	800dd08 <_printf_float+0x1b0>
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	b00b      	add	sp, #44	; 0x2c
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	eeb4 0b40 	vcmp.f64	d0, d0
 800dc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc06:	d709      	bvc.n	800dc1c <_printf_float+0xc4>
 800dc08:	ee10 3a90 	vmov	r3, s1
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	bfbc      	itt	lt
 800dc10:	232d      	movlt	r3, #45	; 0x2d
 800dc12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc16:	487e      	ldr	r0, [pc, #504]	; (800de10 <_printf_float+0x2b8>)
 800dc18:	4b7e      	ldr	r3, [pc, #504]	; (800de14 <_printf_float+0x2bc>)
 800dc1a:	e7d5      	b.n	800dbc8 <_printf_float+0x70>
 800dc1c:	6863      	ldr	r3, [r4, #4]
 800dc1e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800dc22:	9104      	str	r1, [sp, #16]
 800dc24:	1c59      	adds	r1, r3, #1
 800dc26:	d13c      	bne.n	800dca2 <_printf_float+0x14a>
 800dc28:	2306      	movs	r3, #6
 800dc2a:	6063      	str	r3, [r4, #4]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	9303      	str	r3, [sp, #12]
 800dc30:	ab08      	add	r3, sp, #32
 800dc32:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dc36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc3a:	ab07      	add	r3, sp, #28
 800dc3c:	6861      	ldr	r1, [r4, #4]
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	6022      	str	r2, [r4, #0]
 800dc42:	f10d 031b 	add.w	r3, sp, #27
 800dc46:	4628      	mov	r0, r5
 800dc48:	f7ff fef6 	bl	800da38 <__cvt>
 800dc4c:	9b04      	ldr	r3, [sp, #16]
 800dc4e:	9907      	ldr	r1, [sp, #28]
 800dc50:	2b47      	cmp	r3, #71	; 0x47
 800dc52:	4680      	mov	r8, r0
 800dc54:	d108      	bne.n	800dc68 <_printf_float+0x110>
 800dc56:	1cc8      	adds	r0, r1, #3
 800dc58:	db02      	blt.n	800dc60 <_printf_float+0x108>
 800dc5a:	6863      	ldr	r3, [r4, #4]
 800dc5c:	4299      	cmp	r1, r3
 800dc5e:	dd41      	ble.n	800dce4 <_printf_float+0x18c>
 800dc60:	f1a9 0902 	sub.w	r9, r9, #2
 800dc64:	fa5f f989 	uxtb.w	r9, r9
 800dc68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dc6c:	d820      	bhi.n	800dcb0 <_printf_float+0x158>
 800dc6e:	3901      	subs	r1, #1
 800dc70:	464a      	mov	r2, r9
 800dc72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dc76:	9107      	str	r1, [sp, #28]
 800dc78:	f7ff ff30 	bl	800dadc <__exponent>
 800dc7c:	9a08      	ldr	r2, [sp, #32]
 800dc7e:	9004      	str	r0, [sp, #16]
 800dc80:	1813      	adds	r3, r2, r0
 800dc82:	2a01      	cmp	r2, #1
 800dc84:	6123      	str	r3, [r4, #16]
 800dc86:	dc02      	bgt.n	800dc8e <_printf_float+0x136>
 800dc88:	6822      	ldr	r2, [r4, #0]
 800dc8a:	07d2      	lsls	r2, r2, #31
 800dc8c:	d501      	bpl.n	800dc92 <_printf_float+0x13a>
 800dc8e:	3301      	adds	r3, #1
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d0a2      	beq.n	800dbe0 <_printf_float+0x88>
 800dc9a:	232d      	movs	r3, #45	; 0x2d
 800dc9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dca0:	e79e      	b.n	800dbe0 <_printf_float+0x88>
 800dca2:	9904      	ldr	r1, [sp, #16]
 800dca4:	2947      	cmp	r1, #71	; 0x47
 800dca6:	d1c1      	bne.n	800dc2c <_printf_float+0xd4>
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d1bf      	bne.n	800dc2c <_printf_float+0xd4>
 800dcac:	2301      	movs	r3, #1
 800dcae:	e7bc      	b.n	800dc2a <_printf_float+0xd2>
 800dcb0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800dcb4:	d118      	bne.n	800dce8 <_printf_float+0x190>
 800dcb6:	2900      	cmp	r1, #0
 800dcb8:	6863      	ldr	r3, [r4, #4]
 800dcba:	dd0b      	ble.n	800dcd4 <_printf_float+0x17c>
 800dcbc:	6121      	str	r1, [r4, #16]
 800dcbe:	b913      	cbnz	r3, 800dcc6 <_printf_float+0x16e>
 800dcc0:	6822      	ldr	r2, [r4, #0]
 800dcc2:	07d0      	lsls	r0, r2, #31
 800dcc4:	d502      	bpl.n	800dccc <_printf_float+0x174>
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	440b      	add	r3, r1
 800dcca:	6123      	str	r3, [r4, #16]
 800dccc:	2300      	movs	r3, #0
 800dcce:	65a1      	str	r1, [r4, #88]	; 0x58
 800dcd0:	9304      	str	r3, [sp, #16]
 800dcd2:	e7de      	b.n	800dc92 <_printf_float+0x13a>
 800dcd4:	b913      	cbnz	r3, 800dcdc <_printf_float+0x184>
 800dcd6:	6822      	ldr	r2, [r4, #0]
 800dcd8:	07d2      	lsls	r2, r2, #31
 800dcda:	d501      	bpl.n	800dce0 <_printf_float+0x188>
 800dcdc:	3302      	adds	r3, #2
 800dcde:	e7f4      	b.n	800dcca <_printf_float+0x172>
 800dce0:	2301      	movs	r3, #1
 800dce2:	e7f2      	b.n	800dcca <_printf_float+0x172>
 800dce4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800dce8:	9b08      	ldr	r3, [sp, #32]
 800dcea:	4299      	cmp	r1, r3
 800dcec:	db05      	blt.n	800dcfa <_printf_float+0x1a2>
 800dcee:	6823      	ldr	r3, [r4, #0]
 800dcf0:	6121      	str	r1, [r4, #16]
 800dcf2:	07d8      	lsls	r0, r3, #31
 800dcf4:	d5ea      	bpl.n	800dccc <_printf_float+0x174>
 800dcf6:	1c4b      	adds	r3, r1, #1
 800dcf8:	e7e7      	b.n	800dcca <_printf_float+0x172>
 800dcfa:	2900      	cmp	r1, #0
 800dcfc:	bfd4      	ite	le
 800dcfe:	f1c1 0202 	rsble	r2, r1, #2
 800dd02:	2201      	movgt	r2, #1
 800dd04:	4413      	add	r3, r2
 800dd06:	e7e0      	b.n	800dcca <_printf_float+0x172>
 800dd08:	6823      	ldr	r3, [r4, #0]
 800dd0a:	055a      	lsls	r2, r3, #21
 800dd0c:	d407      	bmi.n	800dd1e <_printf_float+0x1c6>
 800dd0e:	6923      	ldr	r3, [r4, #16]
 800dd10:	4642      	mov	r2, r8
 800dd12:	4631      	mov	r1, r6
 800dd14:	4628      	mov	r0, r5
 800dd16:	47b8      	blx	r7
 800dd18:	3001      	adds	r0, #1
 800dd1a:	d12a      	bne.n	800dd72 <_printf_float+0x21a>
 800dd1c:	e76a      	b.n	800dbf4 <_printf_float+0x9c>
 800dd1e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800dd22:	f240 80e2 	bls.w	800deea <_printf_float+0x392>
 800dd26:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dd2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd32:	d133      	bne.n	800dd9c <_printf_float+0x244>
 800dd34:	4a38      	ldr	r2, [pc, #224]	; (800de18 <_printf_float+0x2c0>)
 800dd36:	2301      	movs	r3, #1
 800dd38:	4631      	mov	r1, r6
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	47b8      	blx	r7
 800dd3e:	3001      	adds	r0, #1
 800dd40:	f43f af58 	beq.w	800dbf4 <_printf_float+0x9c>
 800dd44:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	db02      	blt.n	800dd52 <_printf_float+0x1fa>
 800dd4c:	6823      	ldr	r3, [r4, #0]
 800dd4e:	07d8      	lsls	r0, r3, #31
 800dd50:	d50f      	bpl.n	800dd72 <_printf_float+0x21a>
 800dd52:	4653      	mov	r3, sl
 800dd54:	465a      	mov	r2, fp
 800dd56:	4631      	mov	r1, r6
 800dd58:	4628      	mov	r0, r5
 800dd5a:	47b8      	blx	r7
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	f43f af49 	beq.w	800dbf4 <_printf_float+0x9c>
 800dd62:	f04f 0800 	mov.w	r8, #0
 800dd66:	f104 091a 	add.w	r9, r4, #26
 800dd6a:	9b08      	ldr	r3, [sp, #32]
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	4543      	cmp	r3, r8
 800dd70:	dc09      	bgt.n	800dd86 <_printf_float+0x22e>
 800dd72:	6823      	ldr	r3, [r4, #0]
 800dd74:	079b      	lsls	r3, r3, #30
 800dd76:	f100 8108 	bmi.w	800df8a <_printf_float+0x432>
 800dd7a:	68e0      	ldr	r0, [r4, #12]
 800dd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd7e:	4298      	cmp	r0, r3
 800dd80:	bfb8      	it	lt
 800dd82:	4618      	movlt	r0, r3
 800dd84:	e738      	b.n	800dbf8 <_printf_float+0xa0>
 800dd86:	2301      	movs	r3, #1
 800dd88:	464a      	mov	r2, r9
 800dd8a:	4631      	mov	r1, r6
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	47b8      	blx	r7
 800dd90:	3001      	adds	r0, #1
 800dd92:	f43f af2f 	beq.w	800dbf4 <_printf_float+0x9c>
 800dd96:	f108 0801 	add.w	r8, r8, #1
 800dd9a:	e7e6      	b.n	800dd6a <_printf_float+0x212>
 800dd9c:	9b07      	ldr	r3, [sp, #28]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	dc3c      	bgt.n	800de1c <_printf_float+0x2c4>
 800dda2:	4a1d      	ldr	r2, [pc, #116]	; (800de18 <_printf_float+0x2c0>)
 800dda4:	2301      	movs	r3, #1
 800dda6:	4631      	mov	r1, r6
 800dda8:	4628      	mov	r0, r5
 800ddaa:	47b8      	blx	r7
 800ddac:	3001      	adds	r0, #1
 800ddae:	f43f af21 	beq.w	800dbf4 <_printf_float+0x9c>
 800ddb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	d102      	bne.n	800ddc0 <_printf_float+0x268>
 800ddba:	6823      	ldr	r3, [r4, #0]
 800ddbc:	07d9      	lsls	r1, r3, #31
 800ddbe:	d5d8      	bpl.n	800dd72 <_printf_float+0x21a>
 800ddc0:	4653      	mov	r3, sl
 800ddc2:	465a      	mov	r2, fp
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f43f af12 	beq.w	800dbf4 <_printf_float+0x9c>
 800ddd0:	f04f 0900 	mov.w	r9, #0
 800ddd4:	f104 0a1a 	add.w	sl, r4, #26
 800ddd8:	9b07      	ldr	r3, [sp, #28]
 800ddda:	425b      	negs	r3, r3
 800dddc:	454b      	cmp	r3, r9
 800ddde:	dc01      	bgt.n	800dde4 <_printf_float+0x28c>
 800dde0:	9b08      	ldr	r3, [sp, #32]
 800dde2:	e795      	b.n	800dd10 <_printf_float+0x1b8>
 800dde4:	2301      	movs	r3, #1
 800dde6:	4652      	mov	r2, sl
 800dde8:	4631      	mov	r1, r6
 800ddea:	4628      	mov	r0, r5
 800ddec:	47b8      	blx	r7
 800ddee:	3001      	adds	r0, #1
 800ddf0:	f43f af00 	beq.w	800dbf4 <_printf_float+0x9c>
 800ddf4:	f109 0901 	add.w	r9, r9, #1
 800ddf8:	e7ee      	b.n	800ddd8 <_printf_float+0x280>
 800ddfa:	bf00      	nop
 800ddfc:	f3af 8000 	nop.w
 800de00:	ffffffff 	.word	0xffffffff
 800de04:	7fefffff 	.word	0x7fefffff
 800de08:	08011920 	.word	0x08011920
 800de0c:	08011924 	.word	0x08011924
 800de10:	0801192c 	.word	0x0801192c
 800de14:	08011928 	.word	0x08011928
 800de18:	08011930 	.word	0x08011930
 800de1c:	9a08      	ldr	r2, [sp, #32]
 800de1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de20:	429a      	cmp	r2, r3
 800de22:	bfa8      	it	ge
 800de24:	461a      	movge	r2, r3
 800de26:	2a00      	cmp	r2, #0
 800de28:	4691      	mov	r9, r2
 800de2a:	dc38      	bgt.n	800de9e <_printf_float+0x346>
 800de2c:	2300      	movs	r3, #0
 800de2e:	9305      	str	r3, [sp, #20]
 800de30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de34:	f104 021a 	add.w	r2, r4, #26
 800de38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de3a:	9905      	ldr	r1, [sp, #20]
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	eba3 0309 	sub.w	r3, r3, r9
 800de42:	428b      	cmp	r3, r1
 800de44:	dc33      	bgt.n	800deae <_printf_float+0x356>
 800de46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	db3c      	blt.n	800dec8 <_printf_float+0x370>
 800de4e:	6823      	ldr	r3, [r4, #0]
 800de50:	07da      	lsls	r2, r3, #31
 800de52:	d439      	bmi.n	800dec8 <_printf_float+0x370>
 800de54:	9b08      	ldr	r3, [sp, #32]
 800de56:	9a04      	ldr	r2, [sp, #16]
 800de58:	9907      	ldr	r1, [sp, #28]
 800de5a:	1a9a      	subs	r2, r3, r2
 800de5c:	eba3 0901 	sub.w	r9, r3, r1
 800de60:	4591      	cmp	r9, r2
 800de62:	bfa8      	it	ge
 800de64:	4691      	movge	r9, r2
 800de66:	f1b9 0f00 	cmp.w	r9, #0
 800de6a:	dc35      	bgt.n	800ded8 <_printf_float+0x380>
 800de6c:	f04f 0800 	mov.w	r8, #0
 800de70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de74:	f104 0a1a 	add.w	sl, r4, #26
 800de78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800de7c:	1a9b      	subs	r3, r3, r2
 800de7e:	eba3 0309 	sub.w	r3, r3, r9
 800de82:	4543      	cmp	r3, r8
 800de84:	f77f af75 	ble.w	800dd72 <_printf_float+0x21a>
 800de88:	2301      	movs	r3, #1
 800de8a:	4652      	mov	r2, sl
 800de8c:	4631      	mov	r1, r6
 800de8e:	4628      	mov	r0, r5
 800de90:	47b8      	blx	r7
 800de92:	3001      	adds	r0, #1
 800de94:	f43f aeae 	beq.w	800dbf4 <_printf_float+0x9c>
 800de98:	f108 0801 	add.w	r8, r8, #1
 800de9c:	e7ec      	b.n	800de78 <_printf_float+0x320>
 800de9e:	4613      	mov	r3, r2
 800dea0:	4631      	mov	r1, r6
 800dea2:	4642      	mov	r2, r8
 800dea4:	4628      	mov	r0, r5
 800dea6:	47b8      	blx	r7
 800dea8:	3001      	adds	r0, #1
 800deaa:	d1bf      	bne.n	800de2c <_printf_float+0x2d4>
 800deac:	e6a2      	b.n	800dbf4 <_printf_float+0x9c>
 800deae:	2301      	movs	r3, #1
 800deb0:	4631      	mov	r1, r6
 800deb2:	4628      	mov	r0, r5
 800deb4:	9204      	str	r2, [sp, #16]
 800deb6:	47b8      	blx	r7
 800deb8:	3001      	adds	r0, #1
 800deba:	f43f ae9b 	beq.w	800dbf4 <_printf_float+0x9c>
 800debe:	9b05      	ldr	r3, [sp, #20]
 800dec0:	9a04      	ldr	r2, [sp, #16]
 800dec2:	3301      	adds	r3, #1
 800dec4:	9305      	str	r3, [sp, #20]
 800dec6:	e7b7      	b.n	800de38 <_printf_float+0x2e0>
 800dec8:	4653      	mov	r3, sl
 800deca:	465a      	mov	r2, fp
 800decc:	4631      	mov	r1, r6
 800dece:	4628      	mov	r0, r5
 800ded0:	47b8      	blx	r7
 800ded2:	3001      	adds	r0, #1
 800ded4:	d1be      	bne.n	800de54 <_printf_float+0x2fc>
 800ded6:	e68d      	b.n	800dbf4 <_printf_float+0x9c>
 800ded8:	9a04      	ldr	r2, [sp, #16]
 800deda:	464b      	mov	r3, r9
 800dedc:	4442      	add	r2, r8
 800dede:	4631      	mov	r1, r6
 800dee0:	4628      	mov	r0, r5
 800dee2:	47b8      	blx	r7
 800dee4:	3001      	adds	r0, #1
 800dee6:	d1c1      	bne.n	800de6c <_printf_float+0x314>
 800dee8:	e684      	b.n	800dbf4 <_printf_float+0x9c>
 800deea:	9a08      	ldr	r2, [sp, #32]
 800deec:	2a01      	cmp	r2, #1
 800deee:	dc01      	bgt.n	800def4 <_printf_float+0x39c>
 800def0:	07db      	lsls	r3, r3, #31
 800def2:	d537      	bpl.n	800df64 <_printf_float+0x40c>
 800def4:	2301      	movs	r3, #1
 800def6:	4642      	mov	r2, r8
 800def8:	4631      	mov	r1, r6
 800defa:	4628      	mov	r0, r5
 800defc:	47b8      	blx	r7
 800defe:	3001      	adds	r0, #1
 800df00:	f43f ae78 	beq.w	800dbf4 <_printf_float+0x9c>
 800df04:	4653      	mov	r3, sl
 800df06:	465a      	mov	r2, fp
 800df08:	4631      	mov	r1, r6
 800df0a:	4628      	mov	r0, r5
 800df0c:	47b8      	blx	r7
 800df0e:	3001      	adds	r0, #1
 800df10:	f43f ae70 	beq.w	800dbf4 <_printf_float+0x9c>
 800df14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800df18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df20:	d01b      	beq.n	800df5a <_printf_float+0x402>
 800df22:	9b08      	ldr	r3, [sp, #32]
 800df24:	f108 0201 	add.w	r2, r8, #1
 800df28:	3b01      	subs	r3, #1
 800df2a:	4631      	mov	r1, r6
 800df2c:	4628      	mov	r0, r5
 800df2e:	47b8      	blx	r7
 800df30:	3001      	adds	r0, #1
 800df32:	d10e      	bne.n	800df52 <_printf_float+0x3fa>
 800df34:	e65e      	b.n	800dbf4 <_printf_float+0x9c>
 800df36:	2301      	movs	r3, #1
 800df38:	464a      	mov	r2, r9
 800df3a:	4631      	mov	r1, r6
 800df3c:	4628      	mov	r0, r5
 800df3e:	47b8      	blx	r7
 800df40:	3001      	adds	r0, #1
 800df42:	f43f ae57 	beq.w	800dbf4 <_printf_float+0x9c>
 800df46:	f108 0801 	add.w	r8, r8, #1
 800df4a:	9b08      	ldr	r3, [sp, #32]
 800df4c:	3b01      	subs	r3, #1
 800df4e:	4543      	cmp	r3, r8
 800df50:	dcf1      	bgt.n	800df36 <_printf_float+0x3de>
 800df52:	9b04      	ldr	r3, [sp, #16]
 800df54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df58:	e6db      	b.n	800dd12 <_printf_float+0x1ba>
 800df5a:	f04f 0800 	mov.w	r8, #0
 800df5e:	f104 091a 	add.w	r9, r4, #26
 800df62:	e7f2      	b.n	800df4a <_printf_float+0x3f2>
 800df64:	2301      	movs	r3, #1
 800df66:	4642      	mov	r2, r8
 800df68:	e7df      	b.n	800df2a <_printf_float+0x3d2>
 800df6a:	2301      	movs	r3, #1
 800df6c:	464a      	mov	r2, r9
 800df6e:	4631      	mov	r1, r6
 800df70:	4628      	mov	r0, r5
 800df72:	47b8      	blx	r7
 800df74:	3001      	adds	r0, #1
 800df76:	f43f ae3d 	beq.w	800dbf4 <_printf_float+0x9c>
 800df7a:	f108 0801 	add.w	r8, r8, #1
 800df7e:	68e3      	ldr	r3, [r4, #12]
 800df80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df82:	1a5b      	subs	r3, r3, r1
 800df84:	4543      	cmp	r3, r8
 800df86:	dcf0      	bgt.n	800df6a <_printf_float+0x412>
 800df88:	e6f7      	b.n	800dd7a <_printf_float+0x222>
 800df8a:	f04f 0800 	mov.w	r8, #0
 800df8e:	f104 0919 	add.w	r9, r4, #25
 800df92:	e7f4      	b.n	800df7e <_printf_float+0x426>

0800df94 <_printf_common>:
 800df94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df98:	4616      	mov	r6, r2
 800df9a:	4699      	mov	r9, r3
 800df9c:	688a      	ldr	r2, [r1, #8]
 800df9e:	690b      	ldr	r3, [r1, #16]
 800dfa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	bfb8      	it	lt
 800dfa8:	4613      	movlt	r3, r2
 800dfaa:	6033      	str	r3, [r6, #0]
 800dfac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfb0:	4607      	mov	r7, r0
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	b10a      	cbz	r2, 800dfba <_printf_common+0x26>
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	6033      	str	r3, [r6, #0]
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	0699      	lsls	r1, r3, #26
 800dfbe:	bf42      	ittt	mi
 800dfc0:	6833      	ldrmi	r3, [r6, #0]
 800dfc2:	3302      	addmi	r3, #2
 800dfc4:	6033      	strmi	r3, [r6, #0]
 800dfc6:	6825      	ldr	r5, [r4, #0]
 800dfc8:	f015 0506 	ands.w	r5, r5, #6
 800dfcc:	d106      	bne.n	800dfdc <_printf_common+0x48>
 800dfce:	f104 0a19 	add.w	sl, r4, #25
 800dfd2:	68e3      	ldr	r3, [r4, #12]
 800dfd4:	6832      	ldr	r2, [r6, #0]
 800dfd6:	1a9b      	subs	r3, r3, r2
 800dfd8:	42ab      	cmp	r3, r5
 800dfda:	dc26      	bgt.n	800e02a <_printf_common+0x96>
 800dfdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dfe0:	1e13      	subs	r3, r2, #0
 800dfe2:	6822      	ldr	r2, [r4, #0]
 800dfe4:	bf18      	it	ne
 800dfe6:	2301      	movne	r3, #1
 800dfe8:	0692      	lsls	r2, r2, #26
 800dfea:	d42b      	bmi.n	800e044 <_printf_common+0xb0>
 800dfec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dff0:	4649      	mov	r1, r9
 800dff2:	4638      	mov	r0, r7
 800dff4:	47c0      	blx	r8
 800dff6:	3001      	adds	r0, #1
 800dff8:	d01e      	beq.n	800e038 <_printf_common+0xa4>
 800dffa:	6823      	ldr	r3, [r4, #0]
 800dffc:	68e5      	ldr	r5, [r4, #12]
 800dffe:	6832      	ldr	r2, [r6, #0]
 800e000:	f003 0306 	and.w	r3, r3, #6
 800e004:	2b04      	cmp	r3, #4
 800e006:	bf08      	it	eq
 800e008:	1aad      	subeq	r5, r5, r2
 800e00a:	68a3      	ldr	r3, [r4, #8]
 800e00c:	6922      	ldr	r2, [r4, #16]
 800e00e:	bf0c      	ite	eq
 800e010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e014:	2500      	movne	r5, #0
 800e016:	4293      	cmp	r3, r2
 800e018:	bfc4      	itt	gt
 800e01a:	1a9b      	subgt	r3, r3, r2
 800e01c:	18ed      	addgt	r5, r5, r3
 800e01e:	2600      	movs	r6, #0
 800e020:	341a      	adds	r4, #26
 800e022:	42b5      	cmp	r5, r6
 800e024:	d11a      	bne.n	800e05c <_printf_common+0xc8>
 800e026:	2000      	movs	r0, #0
 800e028:	e008      	b.n	800e03c <_printf_common+0xa8>
 800e02a:	2301      	movs	r3, #1
 800e02c:	4652      	mov	r2, sl
 800e02e:	4649      	mov	r1, r9
 800e030:	4638      	mov	r0, r7
 800e032:	47c0      	blx	r8
 800e034:	3001      	adds	r0, #1
 800e036:	d103      	bne.n	800e040 <_printf_common+0xac>
 800e038:	f04f 30ff 	mov.w	r0, #4294967295
 800e03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e040:	3501      	adds	r5, #1
 800e042:	e7c6      	b.n	800dfd2 <_printf_common+0x3e>
 800e044:	18e1      	adds	r1, r4, r3
 800e046:	1c5a      	adds	r2, r3, #1
 800e048:	2030      	movs	r0, #48	; 0x30
 800e04a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e04e:	4422      	add	r2, r4
 800e050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e058:	3302      	adds	r3, #2
 800e05a:	e7c7      	b.n	800dfec <_printf_common+0x58>
 800e05c:	2301      	movs	r3, #1
 800e05e:	4622      	mov	r2, r4
 800e060:	4649      	mov	r1, r9
 800e062:	4638      	mov	r0, r7
 800e064:	47c0      	blx	r8
 800e066:	3001      	adds	r0, #1
 800e068:	d0e6      	beq.n	800e038 <_printf_common+0xa4>
 800e06a:	3601      	adds	r6, #1
 800e06c:	e7d9      	b.n	800e022 <_printf_common+0x8e>
	...

0800e070 <_printf_i>:
 800e070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e074:	7e0f      	ldrb	r7, [r1, #24]
 800e076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e078:	2f78      	cmp	r7, #120	; 0x78
 800e07a:	4691      	mov	r9, r2
 800e07c:	4680      	mov	r8, r0
 800e07e:	460c      	mov	r4, r1
 800e080:	469a      	mov	sl, r3
 800e082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e086:	d807      	bhi.n	800e098 <_printf_i+0x28>
 800e088:	2f62      	cmp	r7, #98	; 0x62
 800e08a:	d80a      	bhi.n	800e0a2 <_printf_i+0x32>
 800e08c:	2f00      	cmp	r7, #0
 800e08e:	f000 80d8 	beq.w	800e242 <_printf_i+0x1d2>
 800e092:	2f58      	cmp	r7, #88	; 0x58
 800e094:	f000 80a3 	beq.w	800e1de <_printf_i+0x16e>
 800e098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e09c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0a0:	e03a      	b.n	800e118 <_printf_i+0xa8>
 800e0a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0a6:	2b15      	cmp	r3, #21
 800e0a8:	d8f6      	bhi.n	800e098 <_printf_i+0x28>
 800e0aa:	a101      	add	r1, pc, #4	; (adr r1, 800e0b0 <_printf_i+0x40>)
 800e0ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0b0:	0800e109 	.word	0x0800e109
 800e0b4:	0800e11d 	.word	0x0800e11d
 800e0b8:	0800e099 	.word	0x0800e099
 800e0bc:	0800e099 	.word	0x0800e099
 800e0c0:	0800e099 	.word	0x0800e099
 800e0c4:	0800e099 	.word	0x0800e099
 800e0c8:	0800e11d 	.word	0x0800e11d
 800e0cc:	0800e099 	.word	0x0800e099
 800e0d0:	0800e099 	.word	0x0800e099
 800e0d4:	0800e099 	.word	0x0800e099
 800e0d8:	0800e099 	.word	0x0800e099
 800e0dc:	0800e229 	.word	0x0800e229
 800e0e0:	0800e14d 	.word	0x0800e14d
 800e0e4:	0800e20b 	.word	0x0800e20b
 800e0e8:	0800e099 	.word	0x0800e099
 800e0ec:	0800e099 	.word	0x0800e099
 800e0f0:	0800e24b 	.word	0x0800e24b
 800e0f4:	0800e099 	.word	0x0800e099
 800e0f8:	0800e14d 	.word	0x0800e14d
 800e0fc:	0800e099 	.word	0x0800e099
 800e100:	0800e099 	.word	0x0800e099
 800e104:	0800e213 	.word	0x0800e213
 800e108:	682b      	ldr	r3, [r5, #0]
 800e10a:	1d1a      	adds	r2, r3, #4
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	602a      	str	r2, [r5, #0]
 800e110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e118:	2301      	movs	r3, #1
 800e11a:	e0a3      	b.n	800e264 <_printf_i+0x1f4>
 800e11c:	6820      	ldr	r0, [r4, #0]
 800e11e:	6829      	ldr	r1, [r5, #0]
 800e120:	0606      	lsls	r6, r0, #24
 800e122:	f101 0304 	add.w	r3, r1, #4
 800e126:	d50a      	bpl.n	800e13e <_printf_i+0xce>
 800e128:	680e      	ldr	r6, [r1, #0]
 800e12a:	602b      	str	r3, [r5, #0]
 800e12c:	2e00      	cmp	r6, #0
 800e12e:	da03      	bge.n	800e138 <_printf_i+0xc8>
 800e130:	232d      	movs	r3, #45	; 0x2d
 800e132:	4276      	negs	r6, r6
 800e134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e138:	485e      	ldr	r0, [pc, #376]	; (800e2b4 <_printf_i+0x244>)
 800e13a:	230a      	movs	r3, #10
 800e13c:	e019      	b.n	800e172 <_printf_i+0x102>
 800e13e:	680e      	ldr	r6, [r1, #0]
 800e140:	602b      	str	r3, [r5, #0]
 800e142:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e146:	bf18      	it	ne
 800e148:	b236      	sxthne	r6, r6
 800e14a:	e7ef      	b.n	800e12c <_printf_i+0xbc>
 800e14c:	682b      	ldr	r3, [r5, #0]
 800e14e:	6820      	ldr	r0, [r4, #0]
 800e150:	1d19      	adds	r1, r3, #4
 800e152:	6029      	str	r1, [r5, #0]
 800e154:	0601      	lsls	r1, r0, #24
 800e156:	d501      	bpl.n	800e15c <_printf_i+0xec>
 800e158:	681e      	ldr	r6, [r3, #0]
 800e15a:	e002      	b.n	800e162 <_printf_i+0xf2>
 800e15c:	0646      	lsls	r6, r0, #25
 800e15e:	d5fb      	bpl.n	800e158 <_printf_i+0xe8>
 800e160:	881e      	ldrh	r6, [r3, #0]
 800e162:	4854      	ldr	r0, [pc, #336]	; (800e2b4 <_printf_i+0x244>)
 800e164:	2f6f      	cmp	r7, #111	; 0x6f
 800e166:	bf0c      	ite	eq
 800e168:	2308      	moveq	r3, #8
 800e16a:	230a      	movne	r3, #10
 800e16c:	2100      	movs	r1, #0
 800e16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e172:	6865      	ldr	r5, [r4, #4]
 800e174:	60a5      	str	r5, [r4, #8]
 800e176:	2d00      	cmp	r5, #0
 800e178:	bfa2      	ittt	ge
 800e17a:	6821      	ldrge	r1, [r4, #0]
 800e17c:	f021 0104 	bicge.w	r1, r1, #4
 800e180:	6021      	strge	r1, [r4, #0]
 800e182:	b90e      	cbnz	r6, 800e188 <_printf_i+0x118>
 800e184:	2d00      	cmp	r5, #0
 800e186:	d04d      	beq.n	800e224 <_printf_i+0x1b4>
 800e188:	4615      	mov	r5, r2
 800e18a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e18e:	fb03 6711 	mls	r7, r3, r1, r6
 800e192:	5dc7      	ldrb	r7, [r0, r7]
 800e194:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e198:	4637      	mov	r7, r6
 800e19a:	42bb      	cmp	r3, r7
 800e19c:	460e      	mov	r6, r1
 800e19e:	d9f4      	bls.n	800e18a <_printf_i+0x11a>
 800e1a0:	2b08      	cmp	r3, #8
 800e1a2:	d10b      	bne.n	800e1bc <_printf_i+0x14c>
 800e1a4:	6823      	ldr	r3, [r4, #0]
 800e1a6:	07de      	lsls	r6, r3, #31
 800e1a8:	d508      	bpl.n	800e1bc <_printf_i+0x14c>
 800e1aa:	6923      	ldr	r3, [r4, #16]
 800e1ac:	6861      	ldr	r1, [r4, #4]
 800e1ae:	4299      	cmp	r1, r3
 800e1b0:	bfde      	ittt	le
 800e1b2:	2330      	movle	r3, #48	; 0x30
 800e1b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e1bc:	1b52      	subs	r2, r2, r5
 800e1be:	6122      	str	r2, [r4, #16]
 800e1c0:	f8cd a000 	str.w	sl, [sp]
 800e1c4:	464b      	mov	r3, r9
 800e1c6:	aa03      	add	r2, sp, #12
 800e1c8:	4621      	mov	r1, r4
 800e1ca:	4640      	mov	r0, r8
 800e1cc:	f7ff fee2 	bl	800df94 <_printf_common>
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	d14c      	bne.n	800e26e <_printf_i+0x1fe>
 800e1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d8:	b004      	add	sp, #16
 800e1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1de:	4835      	ldr	r0, [pc, #212]	; (800e2b4 <_printf_i+0x244>)
 800e1e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e1e4:	6829      	ldr	r1, [r5, #0]
 800e1e6:	6823      	ldr	r3, [r4, #0]
 800e1e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e1ec:	6029      	str	r1, [r5, #0]
 800e1ee:	061d      	lsls	r5, r3, #24
 800e1f0:	d514      	bpl.n	800e21c <_printf_i+0x1ac>
 800e1f2:	07df      	lsls	r7, r3, #31
 800e1f4:	bf44      	itt	mi
 800e1f6:	f043 0320 	orrmi.w	r3, r3, #32
 800e1fa:	6023      	strmi	r3, [r4, #0]
 800e1fc:	b91e      	cbnz	r6, 800e206 <_printf_i+0x196>
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	f023 0320 	bic.w	r3, r3, #32
 800e204:	6023      	str	r3, [r4, #0]
 800e206:	2310      	movs	r3, #16
 800e208:	e7b0      	b.n	800e16c <_printf_i+0xfc>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	f043 0320 	orr.w	r3, r3, #32
 800e210:	6023      	str	r3, [r4, #0]
 800e212:	2378      	movs	r3, #120	; 0x78
 800e214:	4828      	ldr	r0, [pc, #160]	; (800e2b8 <_printf_i+0x248>)
 800e216:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e21a:	e7e3      	b.n	800e1e4 <_printf_i+0x174>
 800e21c:	0659      	lsls	r1, r3, #25
 800e21e:	bf48      	it	mi
 800e220:	b2b6      	uxthmi	r6, r6
 800e222:	e7e6      	b.n	800e1f2 <_printf_i+0x182>
 800e224:	4615      	mov	r5, r2
 800e226:	e7bb      	b.n	800e1a0 <_printf_i+0x130>
 800e228:	682b      	ldr	r3, [r5, #0]
 800e22a:	6826      	ldr	r6, [r4, #0]
 800e22c:	6961      	ldr	r1, [r4, #20]
 800e22e:	1d18      	adds	r0, r3, #4
 800e230:	6028      	str	r0, [r5, #0]
 800e232:	0635      	lsls	r5, r6, #24
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	d501      	bpl.n	800e23c <_printf_i+0x1cc>
 800e238:	6019      	str	r1, [r3, #0]
 800e23a:	e002      	b.n	800e242 <_printf_i+0x1d2>
 800e23c:	0670      	lsls	r0, r6, #25
 800e23e:	d5fb      	bpl.n	800e238 <_printf_i+0x1c8>
 800e240:	8019      	strh	r1, [r3, #0]
 800e242:	2300      	movs	r3, #0
 800e244:	6123      	str	r3, [r4, #16]
 800e246:	4615      	mov	r5, r2
 800e248:	e7ba      	b.n	800e1c0 <_printf_i+0x150>
 800e24a:	682b      	ldr	r3, [r5, #0]
 800e24c:	1d1a      	adds	r2, r3, #4
 800e24e:	602a      	str	r2, [r5, #0]
 800e250:	681d      	ldr	r5, [r3, #0]
 800e252:	6862      	ldr	r2, [r4, #4]
 800e254:	2100      	movs	r1, #0
 800e256:	4628      	mov	r0, r5
 800e258:	f7f2 f862 	bl	8000320 <memchr>
 800e25c:	b108      	cbz	r0, 800e262 <_printf_i+0x1f2>
 800e25e:	1b40      	subs	r0, r0, r5
 800e260:	6060      	str	r0, [r4, #4]
 800e262:	6863      	ldr	r3, [r4, #4]
 800e264:	6123      	str	r3, [r4, #16]
 800e266:	2300      	movs	r3, #0
 800e268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e26c:	e7a8      	b.n	800e1c0 <_printf_i+0x150>
 800e26e:	6923      	ldr	r3, [r4, #16]
 800e270:	462a      	mov	r2, r5
 800e272:	4649      	mov	r1, r9
 800e274:	4640      	mov	r0, r8
 800e276:	47d0      	blx	sl
 800e278:	3001      	adds	r0, #1
 800e27a:	d0ab      	beq.n	800e1d4 <_printf_i+0x164>
 800e27c:	6823      	ldr	r3, [r4, #0]
 800e27e:	079b      	lsls	r3, r3, #30
 800e280:	d413      	bmi.n	800e2aa <_printf_i+0x23a>
 800e282:	68e0      	ldr	r0, [r4, #12]
 800e284:	9b03      	ldr	r3, [sp, #12]
 800e286:	4298      	cmp	r0, r3
 800e288:	bfb8      	it	lt
 800e28a:	4618      	movlt	r0, r3
 800e28c:	e7a4      	b.n	800e1d8 <_printf_i+0x168>
 800e28e:	2301      	movs	r3, #1
 800e290:	4632      	mov	r2, r6
 800e292:	4649      	mov	r1, r9
 800e294:	4640      	mov	r0, r8
 800e296:	47d0      	blx	sl
 800e298:	3001      	adds	r0, #1
 800e29a:	d09b      	beq.n	800e1d4 <_printf_i+0x164>
 800e29c:	3501      	adds	r5, #1
 800e29e:	68e3      	ldr	r3, [r4, #12]
 800e2a0:	9903      	ldr	r1, [sp, #12]
 800e2a2:	1a5b      	subs	r3, r3, r1
 800e2a4:	42ab      	cmp	r3, r5
 800e2a6:	dcf2      	bgt.n	800e28e <_printf_i+0x21e>
 800e2a8:	e7eb      	b.n	800e282 <_printf_i+0x212>
 800e2aa:	2500      	movs	r5, #0
 800e2ac:	f104 0619 	add.w	r6, r4, #25
 800e2b0:	e7f5      	b.n	800e29e <_printf_i+0x22e>
 800e2b2:	bf00      	nop
 800e2b4:	08011932 	.word	0x08011932
 800e2b8:	08011943 	.word	0x08011943

0800e2bc <strchr>:
 800e2bc:	b2c9      	uxtb	r1, r1
 800e2be:	4603      	mov	r3, r0
 800e2c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2c4:	b11a      	cbz	r2, 800e2ce <strchr+0x12>
 800e2c6:	428a      	cmp	r2, r1
 800e2c8:	d1f9      	bne.n	800e2be <strchr+0x2>
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	4770      	bx	lr
 800e2ce:	2900      	cmp	r1, #0
 800e2d0:	bf18      	it	ne
 800e2d2:	2300      	movne	r3, #0
 800e2d4:	e7f9      	b.n	800e2ca <strchr+0xe>

0800e2d6 <strcpy>:
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2dc:	f803 2b01 	strb.w	r2, [r3], #1
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	d1f9      	bne.n	800e2d8 <strcpy+0x2>
 800e2e4:	4770      	bx	lr

0800e2e6 <strncpy>:
 800e2e6:	b510      	push	{r4, lr}
 800e2e8:	3901      	subs	r1, #1
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	b132      	cbz	r2, 800e2fc <strncpy+0x16>
 800e2ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e2f2:	f803 4b01 	strb.w	r4, [r3], #1
 800e2f6:	3a01      	subs	r2, #1
 800e2f8:	2c00      	cmp	r4, #0
 800e2fa:	d1f7      	bne.n	800e2ec <strncpy+0x6>
 800e2fc:	441a      	add	r2, r3
 800e2fe:	2100      	movs	r1, #0
 800e300:	4293      	cmp	r3, r2
 800e302:	d100      	bne.n	800e306 <strncpy+0x20>
 800e304:	bd10      	pop	{r4, pc}
 800e306:	f803 1b01 	strb.w	r1, [r3], #1
 800e30a:	e7f9      	b.n	800e300 <strncpy+0x1a>

0800e30c <sulp>:
 800e30c:	b570      	push	{r4, r5, r6, lr}
 800e30e:	4604      	mov	r4, r0
 800e310:	460d      	mov	r5, r1
 800e312:	4616      	mov	r6, r2
 800e314:	ec45 4b10 	vmov	d0, r4, r5
 800e318:	f002 fade 	bl	80108d8 <__ulp>
 800e31c:	b17e      	cbz	r6, 800e33e <sulp+0x32>
 800e31e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e326:	2b00      	cmp	r3, #0
 800e328:	dd09      	ble.n	800e33e <sulp+0x32>
 800e32a:	051b      	lsls	r3, r3, #20
 800e32c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e330:	2000      	movs	r0, #0
 800e332:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e336:	ec41 0b17 	vmov	d7, r0, r1
 800e33a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e33e:	bd70      	pop	{r4, r5, r6, pc}

0800e340 <_strtod_l>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	ed2d 8b0e 	vpush	{d8-d14}
 800e348:	b097      	sub	sp, #92	; 0x5c
 800e34a:	461f      	mov	r7, r3
 800e34c:	2300      	movs	r3, #0
 800e34e:	9312      	str	r3, [sp, #72]	; 0x48
 800e350:	4ba1      	ldr	r3, [pc, #644]	; (800e5d8 <_strtod_l+0x298>)
 800e352:	920d      	str	r2, [sp, #52]	; 0x34
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	9307      	str	r3, [sp, #28]
 800e358:	4604      	mov	r4, r0
 800e35a:	4618      	mov	r0, r3
 800e35c:	468b      	mov	fp, r1
 800e35e:	f7f1 ffd7 	bl	8000310 <strlen>
 800e362:	f04f 0800 	mov.w	r8, #0
 800e366:	4605      	mov	r5, r0
 800e368:	f04f 0900 	mov.w	r9, #0
 800e36c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e370:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e372:	7813      	ldrb	r3, [r2, #0]
 800e374:	2b2b      	cmp	r3, #43	; 0x2b
 800e376:	d04d      	beq.n	800e414 <_strtod_l+0xd4>
 800e378:	d83a      	bhi.n	800e3f0 <_strtod_l+0xb0>
 800e37a:	2b0d      	cmp	r3, #13
 800e37c:	d833      	bhi.n	800e3e6 <_strtod_l+0xa6>
 800e37e:	2b08      	cmp	r3, #8
 800e380:	d833      	bhi.n	800e3ea <_strtod_l+0xaa>
 800e382:	2b00      	cmp	r3, #0
 800e384:	d03d      	beq.n	800e402 <_strtod_l+0xc2>
 800e386:	2300      	movs	r3, #0
 800e388:	9308      	str	r3, [sp, #32]
 800e38a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e38c:	7833      	ldrb	r3, [r6, #0]
 800e38e:	2b30      	cmp	r3, #48	; 0x30
 800e390:	f040 80b0 	bne.w	800e4f4 <_strtod_l+0x1b4>
 800e394:	7873      	ldrb	r3, [r6, #1]
 800e396:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e39a:	2b58      	cmp	r3, #88	; 0x58
 800e39c:	d167      	bne.n	800e46e <_strtod_l+0x12e>
 800e39e:	9b08      	ldr	r3, [sp, #32]
 800e3a0:	9301      	str	r3, [sp, #4]
 800e3a2:	ab12      	add	r3, sp, #72	; 0x48
 800e3a4:	9702      	str	r7, [sp, #8]
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	4a8c      	ldr	r2, [pc, #560]	; (800e5dc <_strtod_l+0x29c>)
 800e3aa:	ab13      	add	r3, sp, #76	; 0x4c
 800e3ac:	a911      	add	r1, sp, #68	; 0x44
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f001 fbec 	bl	800fb8c <__gethex>
 800e3b4:	f010 0507 	ands.w	r5, r0, #7
 800e3b8:	4607      	mov	r7, r0
 800e3ba:	d005      	beq.n	800e3c8 <_strtod_l+0x88>
 800e3bc:	2d06      	cmp	r5, #6
 800e3be:	d12b      	bne.n	800e418 <_strtod_l+0xd8>
 800e3c0:	3601      	adds	r6, #1
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	9611      	str	r6, [sp, #68]	; 0x44
 800e3c6:	9308      	str	r3, [sp, #32]
 800e3c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f040 854e 	bne.w	800ee6c <_strtod_l+0xb2c>
 800e3d0:	9b08      	ldr	r3, [sp, #32]
 800e3d2:	b1e3      	cbz	r3, 800e40e <_strtod_l+0xce>
 800e3d4:	ec49 8b17 	vmov	d7, r8, r9
 800e3d8:	eeb1 0b47 	vneg.f64	d0, d7
 800e3dc:	b017      	add	sp, #92	; 0x5c
 800e3de:	ecbd 8b0e 	vpop	{d8-d14}
 800e3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e6:	2b20      	cmp	r3, #32
 800e3e8:	d1cd      	bne.n	800e386 <_strtod_l+0x46>
 800e3ea:	3201      	adds	r2, #1
 800e3ec:	9211      	str	r2, [sp, #68]	; 0x44
 800e3ee:	e7bf      	b.n	800e370 <_strtod_l+0x30>
 800e3f0:	2b2d      	cmp	r3, #45	; 0x2d
 800e3f2:	d1c8      	bne.n	800e386 <_strtod_l+0x46>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	9308      	str	r3, [sp, #32]
 800e3f8:	1c53      	adds	r3, r2, #1
 800e3fa:	9311      	str	r3, [sp, #68]	; 0x44
 800e3fc:	7853      	ldrb	r3, [r2, #1]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d1c3      	bne.n	800e38a <_strtod_l+0x4a>
 800e402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e404:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f040 852d 	bne.w	800ee68 <_strtod_l+0xb28>
 800e40e:	ec49 8b10 	vmov	d0, r8, r9
 800e412:	e7e3      	b.n	800e3dc <_strtod_l+0x9c>
 800e414:	2300      	movs	r3, #0
 800e416:	e7ee      	b.n	800e3f6 <_strtod_l+0xb6>
 800e418:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e41a:	b13a      	cbz	r2, 800e42c <_strtod_l+0xec>
 800e41c:	2135      	movs	r1, #53	; 0x35
 800e41e:	a814      	add	r0, sp, #80	; 0x50
 800e420:	f002 fb62 	bl	8010ae8 <__copybits>
 800e424:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e426:	4620      	mov	r0, r4
 800e428:	f001 ff24 	bl	8010274 <_Bfree>
 800e42c:	3d01      	subs	r5, #1
 800e42e:	2d04      	cmp	r5, #4
 800e430:	d806      	bhi.n	800e440 <_strtod_l+0x100>
 800e432:	e8df f005 	tbb	[pc, r5]
 800e436:	030a      	.short	0x030a
 800e438:	1714      	.short	0x1714
 800e43a:	0a          	.byte	0x0a
 800e43b:	00          	.byte	0x00
 800e43c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e440:	073f      	lsls	r7, r7, #28
 800e442:	d5c1      	bpl.n	800e3c8 <_strtod_l+0x88>
 800e444:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e448:	e7be      	b.n	800e3c8 <_strtod_l+0x88>
 800e44a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e44e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e450:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e454:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e458:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e45c:	e7f0      	b.n	800e440 <_strtod_l+0x100>
 800e45e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800e5e0 <_strtod_l+0x2a0>
 800e462:	e7ed      	b.n	800e440 <_strtod_l+0x100>
 800e464:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e468:	f04f 38ff 	mov.w	r8, #4294967295
 800e46c:	e7e8      	b.n	800e440 <_strtod_l+0x100>
 800e46e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	9211      	str	r2, [sp, #68]	; 0x44
 800e474:	785b      	ldrb	r3, [r3, #1]
 800e476:	2b30      	cmp	r3, #48	; 0x30
 800e478:	d0f9      	beq.n	800e46e <_strtod_l+0x12e>
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d0a4      	beq.n	800e3c8 <_strtod_l+0x88>
 800e47e:	2301      	movs	r3, #1
 800e480:	f04f 0a00 	mov.w	sl, #0
 800e484:	9304      	str	r3, [sp, #16]
 800e486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e488:	930a      	str	r3, [sp, #40]	; 0x28
 800e48a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e48e:	f8cd a018 	str.w	sl, [sp, #24]
 800e492:	220a      	movs	r2, #10
 800e494:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e496:	7807      	ldrb	r7, [r0, #0]
 800e498:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e49c:	b2d9      	uxtb	r1, r3
 800e49e:	2909      	cmp	r1, #9
 800e4a0:	d92a      	bls.n	800e4f8 <_strtod_l+0x1b8>
 800e4a2:	9907      	ldr	r1, [sp, #28]
 800e4a4:	462a      	mov	r2, r5
 800e4a6:	f002 fc73 	bl	8010d90 <strncmp>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d033      	beq.n	800e516 <_strtod_l+0x1d6>
 800e4ae:	2000      	movs	r0, #0
 800e4b0:	9b06      	ldr	r3, [sp, #24]
 800e4b2:	463a      	mov	r2, r7
 800e4b4:	4601      	mov	r1, r0
 800e4b6:	4607      	mov	r7, r0
 800e4b8:	2a65      	cmp	r2, #101	; 0x65
 800e4ba:	d001      	beq.n	800e4c0 <_strtod_l+0x180>
 800e4bc:	2a45      	cmp	r2, #69	; 0x45
 800e4be:	d117      	bne.n	800e4f0 <_strtod_l+0x1b0>
 800e4c0:	b91b      	cbnz	r3, 800e4ca <_strtod_l+0x18a>
 800e4c2:	9b04      	ldr	r3, [sp, #16]
 800e4c4:	4303      	orrs	r3, r0
 800e4c6:	d09c      	beq.n	800e402 <_strtod_l+0xc2>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e4ce:	f10b 0201 	add.w	r2, fp, #1
 800e4d2:	9211      	str	r2, [sp, #68]	; 0x44
 800e4d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e4d8:	2a2b      	cmp	r2, #43	; 0x2b
 800e4da:	d071      	beq.n	800e5c0 <_strtod_l+0x280>
 800e4dc:	2a2d      	cmp	r2, #45	; 0x2d
 800e4de:	d077      	beq.n	800e5d0 <_strtod_l+0x290>
 800e4e0:	f04f 0e00 	mov.w	lr, #0
 800e4e4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e4e8:	2d09      	cmp	r5, #9
 800e4ea:	d97f      	bls.n	800e5ec <_strtod_l+0x2ac>
 800e4ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e4f0:	2500      	movs	r5, #0
 800e4f2:	e09b      	b.n	800e62c <_strtod_l+0x2ec>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	e7c3      	b.n	800e480 <_strtod_l+0x140>
 800e4f8:	9906      	ldr	r1, [sp, #24]
 800e4fa:	2908      	cmp	r1, #8
 800e4fc:	bfdd      	ittte	le
 800e4fe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e500:	fb02 3301 	mlale	r3, r2, r1, r3
 800e504:	9309      	strle	r3, [sp, #36]	; 0x24
 800e506:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e50a:	9b06      	ldr	r3, [sp, #24]
 800e50c:	3001      	adds	r0, #1
 800e50e:	3301      	adds	r3, #1
 800e510:	9306      	str	r3, [sp, #24]
 800e512:	9011      	str	r0, [sp, #68]	; 0x44
 800e514:	e7be      	b.n	800e494 <_strtod_l+0x154>
 800e516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e518:	195a      	adds	r2, r3, r5
 800e51a:	9211      	str	r2, [sp, #68]	; 0x44
 800e51c:	5d5a      	ldrb	r2, [r3, r5]
 800e51e:	9b06      	ldr	r3, [sp, #24]
 800e520:	b3a3      	cbz	r3, 800e58c <_strtod_l+0x24c>
 800e522:	4607      	mov	r7, r0
 800e524:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e528:	2909      	cmp	r1, #9
 800e52a:	d912      	bls.n	800e552 <_strtod_l+0x212>
 800e52c:	2101      	movs	r1, #1
 800e52e:	e7c3      	b.n	800e4b8 <_strtod_l+0x178>
 800e530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e532:	1c5a      	adds	r2, r3, #1
 800e534:	9211      	str	r2, [sp, #68]	; 0x44
 800e536:	785a      	ldrb	r2, [r3, #1]
 800e538:	3001      	adds	r0, #1
 800e53a:	2a30      	cmp	r2, #48	; 0x30
 800e53c:	d0f8      	beq.n	800e530 <_strtod_l+0x1f0>
 800e53e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e542:	2b08      	cmp	r3, #8
 800e544:	f200 8497 	bhi.w	800ee76 <_strtod_l+0xb36>
 800e548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e54a:	930a      	str	r3, [sp, #40]	; 0x28
 800e54c:	4607      	mov	r7, r0
 800e54e:	2000      	movs	r0, #0
 800e550:	4603      	mov	r3, r0
 800e552:	3a30      	subs	r2, #48	; 0x30
 800e554:	f100 0101 	add.w	r1, r0, #1
 800e558:	d012      	beq.n	800e580 <_strtod_l+0x240>
 800e55a:	440f      	add	r7, r1
 800e55c:	eb00 0c03 	add.w	ip, r0, r3
 800e560:	4619      	mov	r1, r3
 800e562:	250a      	movs	r5, #10
 800e564:	4561      	cmp	r1, ip
 800e566:	d113      	bne.n	800e590 <_strtod_l+0x250>
 800e568:	1819      	adds	r1, r3, r0
 800e56a:	2908      	cmp	r1, #8
 800e56c:	f103 0301 	add.w	r3, r3, #1
 800e570:	4403      	add	r3, r0
 800e572:	dc1c      	bgt.n	800e5ae <_strtod_l+0x26e>
 800e574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e576:	210a      	movs	r1, #10
 800e578:	fb01 2200 	mla	r2, r1, r0, r2
 800e57c:	9209      	str	r2, [sp, #36]	; 0x24
 800e57e:	2100      	movs	r1, #0
 800e580:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e582:	1c50      	adds	r0, r2, #1
 800e584:	9011      	str	r0, [sp, #68]	; 0x44
 800e586:	7852      	ldrb	r2, [r2, #1]
 800e588:	4608      	mov	r0, r1
 800e58a:	e7cb      	b.n	800e524 <_strtod_l+0x1e4>
 800e58c:	9806      	ldr	r0, [sp, #24]
 800e58e:	e7d4      	b.n	800e53a <_strtod_l+0x1fa>
 800e590:	2908      	cmp	r1, #8
 800e592:	dc04      	bgt.n	800e59e <_strtod_l+0x25e>
 800e594:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e596:	436e      	muls	r6, r5
 800e598:	9609      	str	r6, [sp, #36]	; 0x24
 800e59a:	3101      	adds	r1, #1
 800e59c:	e7e2      	b.n	800e564 <_strtod_l+0x224>
 800e59e:	f101 0e01 	add.w	lr, r1, #1
 800e5a2:	f1be 0f10 	cmp.w	lr, #16
 800e5a6:	bfd8      	it	le
 800e5a8:	fb05 fa0a 	mulle.w	sl, r5, sl
 800e5ac:	e7f5      	b.n	800e59a <_strtod_l+0x25a>
 800e5ae:	2b10      	cmp	r3, #16
 800e5b0:	bfdc      	itt	le
 800e5b2:	210a      	movle	r1, #10
 800e5b4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800e5b8:	e7e1      	b.n	800e57e <_strtod_l+0x23e>
 800e5ba:	2700      	movs	r7, #0
 800e5bc:	2101      	movs	r1, #1
 800e5be:	e780      	b.n	800e4c2 <_strtod_l+0x182>
 800e5c0:	f04f 0e00 	mov.w	lr, #0
 800e5c4:	f10b 0202 	add.w	r2, fp, #2
 800e5c8:	9211      	str	r2, [sp, #68]	; 0x44
 800e5ca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800e5ce:	e789      	b.n	800e4e4 <_strtod_l+0x1a4>
 800e5d0:	f04f 0e01 	mov.w	lr, #1
 800e5d4:	e7f6      	b.n	800e5c4 <_strtod_l+0x284>
 800e5d6:	bf00      	nop
 800e5d8:	08011aa0 	.word	0x08011aa0
 800e5dc:	08011954 	.word	0x08011954
 800e5e0:	7ff00000 	.word	0x7ff00000
 800e5e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e5e6:	1c55      	adds	r5, r2, #1
 800e5e8:	9511      	str	r5, [sp, #68]	; 0x44
 800e5ea:	7852      	ldrb	r2, [r2, #1]
 800e5ec:	2a30      	cmp	r2, #48	; 0x30
 800e5ee:	d0f9      	beq.n	800e5e4 <_strtod_l+0x2a4>
 800e5f0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e5f4:	2d08      	cmp	r5, #8
 800e5f6:	f63f af7b 	bhi.w	800e4f0 <_strtod_l+0x1b0>
 800e5fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e5fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e600:	9207      	str	r2, [sp, #28]
 800e602:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e604:	1c55      	adds	r5, r2, #1
 800e606:	9511      	str	r5, [sp, #68]	; 0x44
 800e608:	7852      	ldrb	r2, [r2, #1]
 800e60a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e60e:	2e09      	cmp	r6, #9
 800e610:	d937      	bls.n	800e682 <_strtod_l+0x342>
 800e612:	9e07      	ldr	r6, [sp, #28]
 800e614:	1bad      	subs	r5, r5, r6
 800e616:	2d08      	cmp	r5, #8
 800e618:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e61c:	dc02      	bgt.n	800e624 <_strtod_l+0x2e4>
 800e61e:	4565      	cmp	r5, ip
 800e620:	bfa8      	it	ge
 800e622:	4665      	movge	r5, ip
 800e624:	f1be 0f00 	cmp.w	lr, #0
 800e628:	d000      	beq.n	800e62c <_strtod_l+0x2ec>
 800e62a:	426d      	negs	r5, r5
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d14d      	bne.n	800e6cc <_strtod_l+0x38c>
 800e630:	9b04      	ldr	r3, [sp, #16]
 800e632:	4303      	orrs	r3, r0
 800e634:	f47f aec8 	bne.w	800e3c8 <_strtod_l+0x88>
 800e638:	2900      	cmp	r1, #0
 800e63a:	f47f aee2 	bne.w	800e402 <_strtod_l+0xc2>
 800e63e:	2a69      	cmp	r2, #105	; 0x69
 800e640:	d027      	beq.n	800e692 <_strtod_l+0x352>
 800e642:	dc24      	bgt.n	800e68e <_strtod_l+0x34e>
 800e644:	2a49      	cmp	r2, #73	; 0x49
 800e646:	d024      	beq.n	800e692 <_strtod_l+0x352>
 800e648:	2a4e      	cmp	r2, #78	; 0x4e
 800e64a:	f47f aeda 	bne.w	800e402 <_strtod_l+0xc2>
 800e64e:	4996      	ldr	r1, [pc, #600]	; (800e8a8 <_strtod_l+0x568>)
 800e650:	a811      	add	r0, sp, #68	; 0x44
 800e652:	f001 fcf3 	bl	801003c <__match>
 800e656:	2800      	cmp	r0, #0
 800e658:	f43f aed3 	beq.w	800e402 <_strtod_l+0xc2>
 800e65c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	2b28      	cmp	r3, #40	; 0x28
 800e662:	d12d      	bne.n	800e6c0 <_strtod_l+0x380>
 800e664:	4991      	ldr	r1, [pc, #580]	; (800e8ac <_strtod_l+0x56c>)
 800e666:	aa14      	add	r2, sp, #80	; 0x50
 800e668:	a811      	add	r0, sp, #68	; 0x44
 800e66a:	f001 fcfb 	bl	8010064 <__hexnan>
 800e66e:	2805      	cmp	r0, #5
 800e670:	d126      	bne.n	800e6c0 <_strtod_l+0x380>
 800e672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e674:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e678:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e67c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e680:	e6a2      	b.n	800e3c8 <_strtod_l+0x88>
 800e682:	250a      	movs	r5, #10
 800e684:	fb05 250c 	mla	r5, r5, ip, r2
 800e688:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800e68c:	e7b9      	b.n	800e602 <_strtod_l+0x2c2>
 800e68e:	2a6e      	cmp	r2, #110	; 0x6e
 800e690:	e7db      	b.n	800e64a <_strtod_l+0x30a>
 800e692:	4987      	ldr	r1, [pc, #540]	; (800e8b0 <_strtod_l+0x570>)
 800e694:	a811      	add	r0, sp, #68	; 0x44
 800e696:	f001 fcd1 	bl	801003c <__match>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	f43f aeb1 	beq.w	800e402 <_strtod_l+0xc2>
 800e6a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6a2:	4984      	ldr	r1, [pc, #528]	; (800e8b4 <_strtod_l+0x574>)
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	a811      	add	r0, sp, #68	; 0x44
 800e6a8:	9311      	str	r3, [sp, #68]	; 0x44
 800e6aa:	f001 fcc7 	bl	801003c <__match>
 800e6ae:	b910      	cbnz	r0, 800e6b6 <_strtod_l+0x376>
 800e6b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	9311      	str	r3, [sp, #68]	; 0x44
 800e6b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800e8c8 <_strtod_l+0x588>
 800e6ba:	f04f 0800 	mov.w	r8, #0
 800e6be:	e683      	b.n	800e3c8 <_strtod_l+0x88>
 800e6c0:	487d      	ldr	r0, [pc, #500]	; (800e8b8 <_strtod_l+0x578>)
 800e6c2:	f002 fb4d 	bl	8010d60 <nan>
 800e6c6:	ec59 8b10 	vmov	r8, r9, d0
 800e6ca:	e67d      	b.n	800e3c8 <_strtod_l+0x88>
 800e6cc:	1bea      	subs	r2, r5, r7
 800e6ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800e6d2:	9207      	str	r2, [sp, #28]
 800e6d4:	9a06      	ldr	r2, [sp, #24]
 800e6d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e6da:	2a00      	cmp	r2, #0
 800e6dc:	bf08      	it	eq
 800e6de:	461a      	moveq	r2, r3
 800e6e0:	2b10      	cmp	r3, #16
 800e6e2:	9206      	str	r2, [sp, #24]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	bfa8      	it	ge
 800e6e8:	2210      	movge	r2, #16
 800e6ea:	2b09      	cmp	r3, #9
 800e6ec:	ec59 8b17 	vmov	r8, r9, d7
 800e6f0:	dd0c      	ble.n	800e70c <_strtod_l+0x3cc>
 800e6f2:	4972      	ldr	r1, [pc, #456]	; (800e8bc <_strtod_l+0x57c>)
 800e6f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e6f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e6fc:	ee06 aa90 	vmov	s13, sl
 800e700:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e704:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e708:	ec59 8b16 	vmov	r8, r9, d6
 800e70c:	2b0f      	cmp	r3, #15
 800e70e:	dc36      	bgt.n	800e77e <_strtod_l+0x43e>
 800e710:	9907      	ldr	r1, [sp, #28]
 800e712:	2900      	cmp	r1, #0
 800e714:	f43f ae58 	beq.w	800e3c8 <_strtod_l+0x88>
 800e718:	dd23      	ble.n	800e762 <_strtod_l+0x422>
 800e71a:	2916      	cmp	r1, #22
 800e71c:	dc0b      	bgt.n	800e736 <_strtod_l+0x3f6>
 800e71e:	4b67      	ldr	r3, [pc, #412]	; (800e8bc <_strtod_l+0x57c>)
 800e720:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e724:	ed93 7b00 	vldr	d7, [r3]
 800e728:	ec49 8b16 	vmov	d6, r8, r9
 800e72c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e730:	ec59 8b17 	vmov	r8, r9, d7
 800e734:	e648      	b.n	800e3c8 <_strtod_l+0x88>
 800e736:	9807      	ldr	r0, [sp, #28]
 800e738:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e73c:	4281      	cmp	r1, r0
 800e73e:	db1e      	blt.n	800e77e <_strtod_l+0x43e>
 800e740:	4a5e      	ldr	r2, [pc, #376]	; (800e8bc <_strtod_l+0x57c>)
 800e742:	f1c3 030f 	rsb	r3, r3, #15
 800e746:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e74a:	ed91 7b00 	vldr	d7, [r1]
 800e74e:	ec49 8b16 	vmov	d6, r8, r9
 800e752:	1ac3      	subs	r3, r0, r3
 800e754:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e758:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e75c:	ed92 6b00 	vldr	d6, [r2]
 800e760:	e7e4      	b.n	800e72c <_strtod_l+0x3ec>
 800e762:	9907      	ldr	r1, [sp, #28]
 800e764:	3116      	adds	r1, #22
 800e766:	db0a      	blt.n	800e77e <_strtod_l+0x43e>
 800e768:	4b54      	ldr	r3, [pc, #336]	; (800e8bc <_strtod_l+0x57c>)
 800e76a:	1b7d      	subs	r5, r7, r5
 800e76c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e770:	ed95 7b00 	vldr	d7, [r5]
 800e774:	ec49 8b16 	vmov	d6, r8, r9
 800e778:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e77c:	e7d8      	b.n	800e730 <_strtod_l+0x3f0>
 800e77e:	9907      	ldr	r1, [sp, #28]
 800e780:	1a9a      	subs	r2, r3, r2
 800e782:	440a      	add	r2, r1
 800e784:	2a00      	cmp	r2, #0
 800e786:	dd6f      	ble.n	800e868 <_strtod_l+0x528>
 800e788:	f012 000f 	ands.w	r0, r2, #15
 800e78c:	d00a      	beq.n	800e7a4 <_strtod_l+0x464>
 800e78e:	494b      	ldr	r1, [pc, #300]	; (800e8bc <_strtod_l+0x57c>)
 800e790:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e794:	ed91 7b00 	vldr	d7, [r1]
 800e798:	ec49 8b16 	vmov	d6, r8, r9
 800e79c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7a0:	ec59 8b17 	vmov	r8, r9, d7
 800e7a4:	f032 020f 	bics.w	r2, r2, #15
 800e7a8:	d04f      	beq.n	800e84a <_strtod_l+0x50a>
 800e7aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e7ae:	dd22      	ble.n	800e7f6 <_strtod_l+0x4b6>
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	462e      	mov	r6, r5
 800e7b4:	9506      	str	r5, [sp, #24]
 800e7b6:	462f      	mov	r7, r5
 800e7b8:	2322      	movs	r3, #34	; 0x22
 800e7ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800e8c8 <_strtod_l+0x588>
 800e7be:	6023      	str	r3, [r4, #0]
 800e7c0:	f04f 0800 	mov.w	r8, #0
 800e7c4:	9b06      	ldr	r3, [sp, #24]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f43f adfe 	beq.w	800e3c8 <_strtod_l+0x88>
 800e7cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	f001 fd50 	bl	8010274 <_Bfree>
 800e7d4:	4639      	mov	r1, r7
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f001 fd4c 	bl	8010274 <_Bfree>
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f001 fd48 	bl	8010274 <_Bfree>
 800e7e4:	9906      	ldr	r1, [sp, #24]
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f001 fd44 	bl	8010274 <_Bfree>
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	f001 fd40 	bl	8010274 <_Bfree>
 800e7f4:	e5e8      	b.n	800e3c8 <_strtod_l+0x88>
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	ec49 8b17 	vmov	d7, r8, r9
 800e7fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800e8c0 <_strtod_l+0x580>
 800e800:	1112      	asrs	r2, r2, #4
 800e802:	4601      	mov	r1, r0
 800e804:	2a01      	cmp	r2, #1
 800e806:	dc23      	bgt.n	800e850 <_strtod_l+0x510>
 800e808:	b108      	cbz	r0, 800e80e <_strtod_l+0x4ce>
 800e80a:	ec59 8b17 	vmov	r8, r9, d7
 800e80e:	4a2c      	ldr	r2, [pc, #176]	; (800e8c0 <_strtod_l+0x580>)
 800e810:	482c      	ldr	r0, [pc, #176]	; (800e8c4 <_strtod_l+0x584>)
 800e812:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e816:	ed92 7b00 	vldr	d7, [r2]
 800e81a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e81e:	ec49 8b16 	vmov	d6, r8, r9
 800e822:	4a29      	ldr	r2, [pc, #164]	; (800e8c8 <_strtod_l+0x588>)
 800e824:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e828:	ee17 1a90 	vmov	r1, s15
 800e82c:	400a      	ands	r2, r1
 800e82e:	4282      	cmp	r2, r0
 800e830:	ec59 8b17 	vmov	r8, r9, d7
 800e834:	d8bc      	bhi.n	800e7b0 <_strtod_l+0x470>
 800e836:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e83a:	4282      	cmp	r2, r0
 800e83c:	bf86      	itte	hi
 800e83e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800e8cc <_strtod_l+0x58c>
 800e842:	f04f 38ff 	movhi.w	r8, #4294967295
 800e846:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e84a:	2200      	movs	r2, #0
 800e84c:	9204      	str	r2, [sp, #16]
 800e84e:	e078      	b.n	800e942 <_strtod_l+0x602>
 800e850:	07d6      	lsls	r6, r2, #31
 800e852:	d504      	bpl.n	800e85e <_strtod_l+0x51e>
 800e854:	ed9c 6b00 	vldr	d6, [ip]
 800e858:	2001      	movs	r0, #1
 800e85a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e85e:	3101      	adds	r1, #1
 800e860:	1052      	asrs	r2, r2, #1
 800e862:	f10c 0c08 	add.w	ip, ip, #8
 800e866:	e7cd      	b.n	800e804 <_strtod_l+0x4c4>
 800e868:	d0ef      	beq.n	800e84a <_strtod_l+0x50a>
 800e86a:	4252      	negs	r2, r2
 800e86c:	f012 000f 	ands.w	r0, r2, #15
 800e870:	d00a      	beq.n	800e888 <_strtod_l+0x548>
 800e872:	4912      	ldr	r1, [pc, #72]	; (800e8bc <_strtod_l+0x57c>)
 800e874:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e878:	ed91 7b00 	vldr	d7, [r1]
 800e87c:	ec49 8b16 	vmov	d6, r8, r9
 800e880:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e884:	ec59 8b17 	vmov	r8, r9, d7
 800e888:	1112      	asrs	r2, r2, #4
 800e88a:	d0de      	beq.n	800e84a <_strtod_l+0x50a>
 800e88c:	2a1f      	cmp	r2, #31
 800e88e:	dd1f      	ble.n	800e8d0 <_strtod_l+0x590>
 800e890:	2500      	movs	r5, #0
 800e892:	462e      	mov	r6, r5
 800e894:	9506      	str	r5, [sp, #24]
 800e896:	462f      	mov	r7, r5
 800e898:	2322      	movs	r3, #34	; 0x22
 800e89a:	f04f 0800 	mov.w	r8, #0
 800e89e:	f04f 0900 	mov.w	r9, #0
 800e8a2:	6023      	str	r3, [r4, #0]
 800e8a4:	e78e      	b.n	800e7c4 <_strtod_l+0x484>
 800e8a6:	bf00      	nop
 800e8a8:	0801192d 	.word	0x0801192d
 800e8ac:	08011968 	.word	0x08011968
 800e8b0:	08011925 	.word	0x08011925
 800e8b4:	080119ab 	.word	0x080119ab
 800e8b8:	08011c47 	.word	0x08011c47
 800e8bc:	08011b38 	.word	0x08011b38
 800e8c0:	08011b10 	.word	0x08011b10
 800e8c4:	7ca00000 	.word	0x7ca00000
 800e8c8:	7ff00000 	.word	0x7ff00000
 800e8cc:	7fefffff 	.word	0x7fefffff
 800e8d0:	f012 0110 	ands.w	r1, r2, #16
 800e8d4:	bf18      	it	ne
 800e8d6:	216a      	movne	r1, #106	; 0x6a
 800e8d8:	9104      	str	r1, [sp, #16]
 800e8da:	ec49 8b17 	vmov	d7, r8, r9
 800e8de:	49be      	ldr	r1, [pc, #760]	; (800ebd8 <_strtod_l+0x898>)
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	07d6      	lsls	r6, r2, #31
 800e8e4:	d504      	bpl.n	800e8f0 <_strtod_l+0x5b0>
 800e8e6:	ed91 6b00 	vldr	d6, [r1]
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e8f0:	1052      	asrs	r2, r2, #1
 800e8f2:	f101 0108 	add.w	r1, r1, #8
 800e8f6:	d1f4      	bne.n	800e8e2 <_strtod_l+0x5a2>
 800e8f8:	b108      	cbz	r0, 800e8fe <_strtod_l+0x5be>
 800e8fa:	ec59 8b17 	vmov	r8, r9, d7
 800e8fe:	9a04      	ldr	r2, [sp, #16]
 800e900:	b1c2      	cbz	r2, 800e934 <_strtod_l+0x5f4>
 800e902:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e906:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e90a:	2a00      	cmp	r2, #0
 800e90c:	4648      	mov	r0, r9
 800e90e:	dd11      	ble.n	800e934 <_strtod_l+0x5f4>
 800e910:	2a1f      	cmp	r2, #31
 800e912:	f340 812e 	ble.w	800eb72 <_strtod_l+0x832>
 800e916:	2a34      	cmp	r2, #52	; 0x34
 800e918:	bfde      	ittt	le
 800e91a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e91e:	f04f 32ff 	movle.w	r2, #4294967295
 800e922:	fa02 f101 	lslle.w	r1, r2, r1
 800e926:	f04f 0800 	mov.w	r8, #0
 800e92a:	bfcc      	ite	gt
 800e92c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e930:	ea01 0900 	andle.w	r9, r1, r0
 800e934:	ec49 8b17 	vmov	d7, r8, r9
 800e938:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e940:	d0a6      	beq.n	800e890 <_strtod_l+0x550>
 800e942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e944:	9200      	str	r2, [sp, #0]
 800e946:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e948:	9a06      	ldr	r2, [sp, #24]
 800e94a:	4620      	mov	r0, r4
 800e94c:	f001 fcfa 	bl	8010344 <__s2b>
 800e950:	9006      	str	r0, [sp, #24]
 800e952:	2800      	cmp	r0, #0
 800e954:	f43f af2c 	beq.w	800e7b0 <_strtod_l+0x470>
 800e958:	9b07      	ldr	r3, [sp, #28]
 800e95a:	1b7d      	subs	r5, r7, r5
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	bfb4      	ite	lt
 800e960:	462b      	movlt	r3, r5
 800e962:	2300      	movge	r3, #0
 800e964:	9309      	str	r3, [sp, #36]	; 0x24
 800e966:	9b07      	ldr	r3, [sp, #28]
 800e968:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ebb8 <_strtod_l+0x878>
 800e96c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ebc0 <_strtod_l+0x880>
 800e970:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ebc8 <_strtod_l+0x888>
 800e974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e978:	2500      	movs	r5, #0
 800e97a:	930c      	str	r3, [sp, #48]	; 0x30
 800e97c:	462e      	mov	r6, r5
 800e97e:	9b06      	ldr	r3, [sp, #24]
 800e980:	4620      	mov	r0, r4
 800e982:	6859      	ldr	r1, [r3, #4]
 800e984:	f001 fc36 	bl	80101f4 <_Balloc>
 800e988:	4607      	mov	r7, r0
 800e98a:	2800      	cmp	r0, #0
 800e98c:	f43f af14 	beq.w	800e7b8 <_strtod_l+0x478>
 800e990:	9b06      	ldr	r3, [sp, #24]
 800e992:	691a      	ldr	r2, [r3, #16]
 800e994:	3202      	adds	r2, #2
 800e996:	f103 010c 	add.w	r1, r3, #12
 800e99a:	0092      	lsls	r2, r2, #2
 800e99c:	300c      	adds	r0, #12
 800e99e:	f001 fc1b 	bl	80101d8 <memcpy>
 800e9a2:	ec49 8b10 	vmov	d0, r8, r9
 800e9a6:	aa14      	add	r2, sp, #80	; 0x50
 800e9a8:	a913      	add	r1, sp, #76	; 0x4c
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f002 f810 	bl	80109d0 <__d2b>
 800e9b0:	ec49 8b18 	vmov	d8, r8, r9
 800e9b4:	9012      	str	r0, [sp, #72]	; 0x48
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f43f aefe 	beq.w	800e7b8 <_strtod_l+0x478>
 800e9bc:	2101      	movs	r1, #1
 800e9be:	4620      	mov	r0, r4
 800e9c0:	f001 fd5a 	bl	8010478 <__i2b>
 800e9c4:	4606      	mov	r6, r0
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f43f aef6 	beq.w	800e7b8 <_strtod_l+0x478>
 800e9cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e9ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	bfab      	itete	ge
 800e9d4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800e9d6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800e9d8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800e9dc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800e9e0:	bfac      	ite	ge
 800e9e2:	eb03 0b02 	addge.w	fp, r3, r2
 800e9e6:	eba2 0a03 	sublt.w	sl, r2, r3
 800e9ea:	9a04      	ldr	r2, [sp, #16]
 800e9ec:	1a9b      	subs	r3, r3, r2
 800e9ee:	440b      	add	r3, r1
 800e9f0:	4a7a      	ldr	r2, [pc, #488]	; (800ebdc <_strtod_l+0x89c>)
 800e9f2:	3b01      	subs	r3, #1
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e9fa:	f280 80cd 	bge.w	800eb98 <_strtod_l+0x858>
 800e9fe:	1ad2      	subs	r2, r2, r3
 800ea00:	2a1f      	cmp	r2, #31
 800ea02:	eba1 0102 	sub.w	r1, r1, r2
 800ea06:	f04f 0001 	mov.w	r0, #1
 800ea0a:	f300 80b9 	bgt.w	800eb80 <_strtod_l+0x840>
 800ea0e:	fa00 f302 	lsl.w	r3, r0, r2
 800ea12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea14:	2300      	movs	r3, #0
 800ea16:	930a      	str	r3, [sp, #40]	; 0x28
 800ea18:	eb0b 0301 	add.w	r3, fp, r1
 800ea1c:	9a04      	ldr	r2, [sp, #16]
 800ea1e:	459b      	cmp	fp, r3
 800ea20:	448a      	add	sl, r1
 800ea22:	4492      	add	sl, r2
 800ea24:	465a      	mov	r2, fp
 800ea26:	bfa8      	it	ge
 800ea28:	461a      	movge	r2, r3
 800ea2a:	4552      	cmp	r2, sl
 800ea2c:	bfa8      	it	ge
 800ea2e:	4652      	movge	r2, sl
 800ea30:	2a00      	cmp	r2, #0
 800ea32:	bfc2      	ittt	gt
 800ea34:	1a9b      	subgt	r3, r3, r2
 800ea36:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ea3a:	ebab 0b02 	subgt.w	fp, fp, r2
 800ea3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea40:	2a00      	cmp	r2, #0
 800ea42:	dd18      	ble.n	800ea76 <_strtod_l+0x736>
 800ea44:	4631      	mov	r1, r6
 800ea46:	4620      	mov	r0, r4
 800ea48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea4a:	f001 fdd5 	bl	80105f8 <__pow5mult>
 800ea4e:	4606      	mov	r6, r0
 800ea50:	2800      	cmp	r0, #0
 800ea52:	f43f aeb1 	beq.w	800e7b8 <_strtod_l+0x478>
 800ea56:	4601      	mov	r1, r0
 800ea58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	f001 fd22 	bl	80104a4 <__multiply>
 800ea60:	900e      	str	r0, [sp, #56]	; 0x38
 800ea62:	2800      	cmp	r0, #0
 800ea64:	f43f aea8 	beq.w	800e7b8 <_strtod_l+0x478>
 800ea68:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f001 fc02 	bl	8010274 <_Bfree>
 800ea70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea74:	9212      	str	r2, [sp, #72]	; 0x48
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	f300 8093 	bgt.w	800eba2 <_strtod_l+0x862>
 800ea7c:	9b07      	ldr	r3, [sp, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	dd08      	ble.n	800ea94 <_strtod_l+0x754>
 800ea82:	4639      	mov	r1, r7
 800ea84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ea86:	4620      	mov	r0, r4
 800ea88:	f001 fdb6 	bl	80105f8 <__pow5mult>
 800ea8c:	4607      	mov	r7, r0
 800ea8e:	2800      	cmp	r0, #0
 800ea90:	f43f ae92 	beq.w	800e7b8 <_strtod_l+0x478>
 800ea94:	f1ba 0f00 	cmp.w	sl, #0
 800ea98:	dd08      	ble.n	800eaac <_strtod_l+0x76c>
 800ea9a:	4639      	mov	r1, r7
 800ea9c:	4652      	mov	r2, sl
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f001 fe04 	bl	80106ac <__lshift>
 800eaa4:	4607      	mov	r7, r0
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	f43f ae86 	beq.w	800e7b8 <_strtod_l+0x478>
 800eaac:	f1bb 0f00 	cmp.w	fp, #0
 800eab0:	dd08      	ble.n	800eac4 <_strtod_l+0x784>
 800eab2:	4631      	mov	r1, r6
 800eab4:	465a      	mov	r2, fp
 800eab6:	4620      	mov	r0, r4
 800eab8:	f001 fdf8 	bl	80106ac <__lshift>
 800eabc:	4606      	mov	r6, r0
 800eabe:	2800      	cmp	r0, #0
 800eac0:	f43f ae7a 	beq.w	800e7b8 <_strtod_l+0x478>
 800eac4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eac6:	463a      	mov	r2, r7
 800eac8:	4620      	mov	r0, r4
 800eaca:	f001 fe7b 	bl	80107c4 <__mdiff>
 800eace:	4605      	mov	r5, r0
 800ead0:	2800      	cmp	r0, #0
 800ead2:	f43f ae71 	beq.w	800e7b8 <_strtod_l+0x478>
 800ead6:	2300      	movs	r3, #0
 800ead8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800eadc:	60c3      	str	r3, [r0, #12]
 800eade:	4631      	mov	r1, r6
 800eae0:	f001 fe54 	bl	801078c <__mcmp>
 800eae4:	2800      	cmp	r0, #0
 800eae6:	da7d      	bge.n	800ebe4 <_strtod_l+0x8a4>
 800eae8:	ea5a 0308 	orrs.w	r3, sl, r8
 800eaec:	f040 80a3 	bne.w	800ec36 <_strtod_l+0x8f6>
 800eaf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f040 809e 	bne.w	800ec36 <_strtod_l+0x8f6>
 800eafa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eafe:	0d1b      	lsrs	r3, r3, #20
 800eb00:	051b      	lsls	r3, r3, #20
 800eb02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eb06:	f240 8096 	bls.w	800ec36 <_strtod_l+0x8f6>
 800eb0a:	696b      	ldr	r3, [r5, #20]
 800eb0c:	b91b      	cbnz	r3, 800eb16 <_strtod_l+0x7d6>
 800eb0e:	692b      	ldr	r3, [r5, #16]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	f340 8090 	ble.w	800ec36 <_strtod_l+0x8f6>
 800eb16:	4629      	mov	r1, r5
 800eb18:	2201      	movs	r2, #1
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f001 fdc6 	bl	80106ac <__lshift>
 800eb20:	4631      	mov	r1, r6
 800eb22:	4605      	mov	r5, r0
 800eb24:	f001 fe32 	bl	801078c <__mcmp>
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	f340 8084 	ble.w	800ec36 <_strtod_l+0x8f6>
 800eb2e:	9904      	ldr	r1, [sp, #16]
 800eb30:	4a2b      	ldr	r2, [pc, #172]	; (800ebe0 <_strtod_l+0x8a0>)
 800eb32:	464b      	mov	r3, r9
 800eb34:	2900      	cmp	r1, #0
 800eb36:	f000 809d 	beq.w	800ec74 <_strtod_l+0x934>
 800eb3a:	ea02 0109 	and.w	r1, r2, r9
 800eb3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eb42:	f300 8097 	bgt.w	800ec74 <_strtod_l+0x934>
 800eb46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eb4a:	f77f aea5 	ble.w	800e898 <_strtod_l+0x558>
 800eb4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ebd0 <_strtod_l+0x890>
 800eb52:	ec49 8b16 	vmov	d6, r8, r9
 800eb56:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eb5e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800eb62:	4313      	orrs	r3, r2
 800eb64:	bf08      	it	eq
 800eb66:	2322      	moveq	r3, #34	; 0x22
 800eb68:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800eb6c:	bf08      	it	eq
 800eb6e:	6023      	streq	r3, [r4, #0]
 800eb70:	e62c      	b.n	800e7cc <_strtod_l+0x48c>
 800eb72:	f04f 31ff 	mov.w	r1, #4294967295
 800eb76:	fa01 f202 	lsl.w	r2, r1, r2
 800eb7a:	ea02 0808 	and.w	r8, r2, r8
 800eb7e:	e6d9      	b.n	800e934 <_strtod_l+0x5f4>
 800eb80:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800eb84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800eb88:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800eb8c:	33e2      	adds	r3, #226	; 0xe2
 800eb8e:	fa00 f303 	lsl.w	r3, r0, r3
 800eb92:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800eb96:	e73f      	b.n	800ea18 <_strtod_l+0x6d8>
 800eb98:	2200      	movs	r2, #0
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800eba0:	e73a      	b.n	800ea18 <_strtod_l+0x6d8>
 800eba2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800eba4:	461a      	mov	r2, r3
 800eba6:	4620      	mov	r0, r4
 800eba8:	f001 fd80 	bl	80106ac <__lshift>
 800ebac:	9012      	str	r0, [sp, #72]	; 0x48
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	f47f af64 	bne.w	800ea7c <_strtod_l+0x73c>
 800ebb4:	e600      	b.n	800e7b8 <_strtod_l+0x478>
 800ebb6:	bf00      	nop
 800ebb8:	94a03595 	.word	0x94a03595
 800ebbc:	3fcfffff 	.word	0x3fcfffff
 800ebc0:	94a03595 	.word	0x94a03595
 800ebc4:	3fdfffff 	.word	0x3fdfffff
 800ebc8:	35afe535 	.word	0x35afe535
 800ebcc:	3fe00000 	.word	0x3fe00000
 800ebd0:	00000000 	.word	0x00000000
 800ebd4:	39500000 	.word	0x39500000
 800ebd8:	08011980 	.word	0x08011980
 800ebdc:	fffffc02 	.word	0xfffffc02
 800ebe0:	7ff00000 	.word	0x7ff00000
 800ebe4:	46cb      	mov	fp, r9
 800ebe6:	d15f      	bne.n	800eca8 <_strtod_l+0x968>
 800ebe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebec:	f1ba 0f00 	cmp.w	sl, #0
 800ebf0:	d02a      	beq.n	800ec48 <_strtod_l+0x908>
 800ebf2:	4aa7      	ldr	r2, [pc, #668]	; (800ee90 <_strtod_l+0xb50>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d12b      	bne.n	800ec50 <_strtod_l+0x910>
 800ebf8:	9b04      	ldr	r3, [sp, #16]
 800ebfa:	4642      	mov	r2, r8
 800ebfc:	b1fb      	cbz	r3, 800ec3e <_strtod_l+0x8fe>
 800ebfe:	4ba5      	ldr	r3, [pc, #660]	; (800ee94 <_strtod_l+0xb54>)
 800ec00:	ea09 0303 	and.w	r3, r9, r3
 800ec04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ec08:	f04f 31ff 	mov.w	r1, #4294967295
 800ec0c:	d81a      	bhi.n	800ec44 <_strtod_l+0x904>
 800ec0e:	0d1b      	lsrs	r3, r3, #20
 800ec10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ec14:	fa01 f303 	lsl.w	r3, r1, r3
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d119      	bne.n	800ec50 <_strtod_l+0x910>
 800ec1c:	4b9e      	ldr	r3, [pc, #632]	; (800ee98 <_strtod_l+0xb58>)
 800ec1e:	459b      	cmp	fp, r3
 800ec20:	d102      	bne.n	800ec28 <_strtod_l+0x8e8>
 800ec22:	3201      	adds	r2, #1
 800ec24:	f43f adc8 	beq.w	800e7b8 <_strtod_l+0x478>
 800ec28:	4b9a      	ldr	r3, [pc, #616]	; (800ee94 <_strtod_l+0xb54>)
 800ec2a:	ea0b 0303 	and.w	r3, fp, r3
 800ec2e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ec32:	f04f 0800 	mov.w	r8, #0
 800ec36:	9b04      	ldr	r3, [sp, #16]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d188      	bne.n	800eb4e <_strtod_l+0x80e>
 800ec3c:	e5c6      	b.n	800e7cc <_strtod_l+0x48c>
 800ec3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec42:	e7e9      	b.n	800ec18 <_strtod_l+0x8d8>
 800ec44:	460b      	mov	r3, r1
 800ec46:	e7e7      	b.n	800ec18 <_strtod_l+0x8d8>
 800ec48:	ea53 0308 	orrs.w	r3, r3, r8
 800ec4c:	f43f af6f 	beq.w	800eb2e <_strtod_l+0x7ee>
 800ec50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec52:	b1cb      	cbz	r3, 800ec88 <_strtod_l+0x948>
 800ec54:	ea13 0f0b 	tst.w	r3, fp
 800ec58:	d0ed      	beq.n	800ec36 <_strtod_l+0x8f6>
 800ec5a:	9a04      	ldr	r2, [sp, #16]
 800ec5c:	4640      	mov	r0, r8
 800ec5e:	4649      	mov	r1, r9
 800ec60:	f1ba 0f00 	cmp.w	sl, #0
 800ec64:	d014      	beq.n	800ec90 <_strtod_l+0x950>
 800ec66:	f7ff fb51 	bl	800e30c <sulp>
 800ec6a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ec6e:	ec59 8b17 	vmov	r8, r9, d7
 800ec72:	e7e0      	b.n	800ec36 <_strtod_l+0x8f6>
 800ec74:	4013      	ands	r3, r2
 800ec76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ec7a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ec7e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ec82:	f04f 38ff 	mov.w	r8, #4294967295
 800ec86:	e7d6      	b.n	800ec36 <_strtod_l+0x8f6>
 800ec88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec8a:	ea13 0f08 	tst.w	r3, r8
 800ec8e:	e7e3      	b.n	800ec58 <_strtod_l+0x918>
 800ec90:	f7ff fb3c 	bl	800e30c <sulp>
 800ec94:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ec98:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ec9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca0:	ec59 8b10 	vmov	r8, r9, d0
 800eca4:	d1c7      	bne.n	800ec36 <_strtod_l+0x8f6>
 800eca6:	e5f7      	b.n	800e898 <_strtod_l+0x558>
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f001 feec 	bl	8010a88 <__ratio>
 800ecb0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ecb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ecb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecbc:	d865      	bhi.n	800ed8a <_strtod_l+0xa4a>
 800ecbe:	f1ba 0f00 	cmp.w	sl, #0
 800ecc2:	d042      	beq.n	800ed4a <_strtod_l+0xa0a>
 800ecc4:	4b75      	ldr	r3, [pc, #468]	; (800ee9c <_strtod_l+0xb5c>)
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800eccc:	4871      	ldr	r0, [pc, #452]	; (800ee94 <_strtod_l+0xb54>)
 800ecce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800eea8 <_strtod_l+0xb68>
 800ecd2:	ea0b 0100 	and.w	r1, fp, r0
 800ecd6:	4561      	cmp	r1, ip
 800ecd8:	f040 808e 	bne.w	800edf8 <_strtod_l+0xab8>
 800ecdc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ece0:	ec49 8b10 	vmov	d0, r8, r9
 800ece4:	ec43 2b1c 	vmov	d12, r2, r3
 800ece8:	910a      	str	r1, [sp, #40]	; 0x28
 800ecea:	f001 fdf5 	bl	80108d8 <__ulp>
 800ecee:	ec49 8b1e 	vmov	d14, r8, r9
 800ecf2:	4868      	ldr	r0, [pc, #416]	; (800ee94 <_strtod_l+0xb54>)
 800ecf4:	eeac eb00 	vfma.f64	d14, d12, d0
 800ecf8:	ee1e 3a90 	vmov	r3, s29
 800ecfc:	4a68      	ldr	r2, [pc, #416]	; (800eea0 <_strtod_l+0xb60>)
 800ecfe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ed00:	4018      	ands	r0, r3
 800ed02:	4290      	cmp	r0, r2
 800ed04:	ec59 8b1e 	vmov	r8, r9, d14
 800ed08:	d94e      	bls.n	800eda8 <_strtod_l+0xa68>
 800ed0a:	ee18 3a90 	vmov	r3, s17
 800ed0e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d104      	bne.n	800ed20 <_strtod_l+0x9e0>
 800ed16:	ee18 3a10 	vmov	r3, s16
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	f43f ad4c 	beq.w	800e7b8 <_strtod_l+0x478>
 800ed20:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ee98 <_strtod_l+0xb58>
 800ed24:	f04f 38ff 	mov.w	r8, #4294967295
 800ed28:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f001 faa2 	bl	8010274 <_Bfree>
 800ed30:	4639      	mov	r1, r7
 800ed32:	4620      	mov	r0, r4
 800ed34:	f001 fa9e 	bl	8010274 <_Bfree>
 800ed38:	4631      	mov	r1, r6
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f001 fa9a 	bl	8010274 <_Bfree>
 800ed40:	4629      	mov	r1, r5
 800ed42:	4620      	mov	r0, r4
 800ed44:	f001 fa96 	bl	8010274 <_Bfree>
 800ed48:	e619      	b.n	800e97e <_strtod_l+0x63e>
 800ed4a:	f1b8 0f00 	cmp.w	r8, #0
 800ed4e:	d112      	bne.n	800ed76 <_strtod_l+0xa36>
 800ed50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed54:	b9b3      	cbnz	r3, 800ed84 <_strtod_l+0xa44>
 800ed56:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ed5a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ed5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ed66:	bf58      	it	pl
 800ed68:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800ed6c:	eeb1 7b4d 	vneg.f64	d7, d13
 800ed70:	ec53 2b17 	vmov	r2, r3, d7
 800ed74:	e7aa      	b.n	800eccc <_strtod_l+0x98c>
 800ed76:	f1b8 0f01 	cmp.w	r8, #1
 800ed7a:	d103      	bne.n	800ed84 <_strtod_l+0xa44>
 800ed7c:	f1b9 0f00 	cmp.w	r9, #0
 800ed80:	f43f ad8a 	beq.w	800e898 <_strtod_l+0x558>
 800ed84:	4b47      	ldr	r3, [pc, #284]	; (800eea4 <_strtod_l+0xb64>)
 800ed86:	2200      	movs	r2, #0
 800ed88:	e79e      	b.n	800ecc8 <_strtod_l+0x988>
 800ed8a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ed8e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ed92:	f1ba 0f00 	cmp.w	sl, #0
 800ed96:	d104      	bne.n	800eda2 <_strtod_l+0xa62>
 800ed98:	eeb1 7b4d 	vneg.f64	d7, d13
 800ed9c:	ec53 2b17 	vmov	r2, r3, d7
 800eda0:	e794      	b.n	800eccc <_strtod_l+0x98c>
 800eda2:	eeb0 7b4d 	vmov.f64	d7, d13
 800eda6:	e7f9      	b.n	800ed9c <_strtod_l+0xa5c>
 800eda8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800edac:	9b04      	ldr	r3, [sp, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d1ba      	bne.n	800ed28 <_strtod_l+0x9e8>
 800edb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800edb6:	0d1b      	lsrs	r3, r3, #20
 800edb8:	051b      	lsls	r3, r3, #20
 800edba:	4299      	cmp	r1, r3
 800edbc:	d1b4      	bne.n	800ed28 <_strtod_l+0x9e8>
 800edbe:	ec51 0b1d 	vmov	r0, r1, d13
 800edc2:	f7f1 fcd1 	bl	8000768 <__aeabi_d2lz>
 800edc6:	f7f1 fc89 	bl	80006dc <__aeabi_l2d>
 800edca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800edce:	ec41 0b17 	vmov	d7, r0, r1
 800edd2:	ea43 0308 	orr.w	r3, r3, r8
 800edd6:	ea53 030a 	orrs.w	r3, r3, sl
 800edda:	ee3d db47 	vsub.f64	d13, d13, d7
 800edde:	d03c      	beq.n	800ee5a <_strtod_l+0xb1a>
 800ede0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ede4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede8:	f53f acf0 	bmi.w	800e7cc <_strtod_l+0x48c>
 800edec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800edf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf4:	dd98      	ble.n	800ed28 <_strtod_l+0x9e8>
 800edf6:	e4e9      	b.n	800e7cc <_strtod_l+0x48c>
 800edf8:	9804      	ldr	r0, [sp, #16]
 800edfa:	b1f0      	cbz	r0, 800ee3a <_strtod_l+0xafa>
 800edfc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ee00:	d81b      	bhi.n	800ee3a <_strtod_l+0xafa>
 800ee02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ee88 <_strtod_l+0xb48>
 800ee06:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ee0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0e:	d811      	bhi.n	800ee34 <_strtod_l+0xaf4>
 800ee10:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ee14:	ee1d 3a10 	vmov	r3, s26
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	bf38      	it	cc
 800ee1c:	2301      	movcc	r3, #1
 800ee1e:	ee0d 3a10 	vmov	s26, r3
 800ee22:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ee26:	f1ba 0f00 	cmp.w	sl, #0
 800ee2a:	d113      	bne.n	800ee54 <_strtod_l+0xb14>
 800ee2c:	eeb1 7b4d 	vneg.f64	d7, d13
 800ee30:	ec53 2b17 	vmov	r2, r3, d7
 800ee34:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800ee38:	1a43      	subs	r3, r0, r1
 800ee3a:	eeb0 0b48 	vmov.f64	d0, d8
 800ee3e:	ec43 2b1c 	vmov	d12, r2, r3
 800ee42:	910a      	str	r1, [sp, #40]	; 0x28
 800ee44:	f001 fd48 	bl	80108d8 <__ulp>
 800ee48:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ee4a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ee4e:	ec59 8b18 	vmov	r8, r9, d8
 800ee52:	e7ab      	b.n	800edac <_strtod_l+0xa6c>
 800ee54:	eeb0 7b4d 	vmov.f64	d7, d13
 800ee58:	e7ea      	b.n	800ee30 <_strtod_l+0xaf0>
 800ee5a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ee5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee62:	f57f af61 	bpl.w	800ed28 <_strtod_l+0x9e8>
 800ee66:	e4b1      	b.n	800e7cc <_strtod_l+0x48c>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	9308      	str	r3, [sp, #32]
 800ee6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee70:	6013      	str	r3, [r2, #0]
 800ee72:	f7ff baad 	b.w	800e3d0 <_strtod_l+0x90>
 800ee76:	2a65      	cmp	r2, #101	; 0x65
 800ee78:	f43f ab9f 	beq.w	800e5ba <_strtod_l+0x27a>
 800ee7c:	2a45      	cmp	r2, #69	; 0x45
 800ee7e:	f43f ab9c 	beq.w	800e5ba <_strtod_l+0x27a>
 800ee82:	2101      	movs	r1, #1
 800ee84:	f7ff bbd4 	b.w	800e630 <_strtod_l+0x2f0>
 800ee88:	ffc00000 	.word	0xffc00000
 800ee8c:	41dfffff 	.word	0x41dfffff
 800ee90:	000fffff 	.word	0x000fffff
 800ee94:	7ff00000 	.word	0x7ff00000
 800ee98:	7fefffff 	.word	0x7fefffff
 800ee9c:	3ff00000 	.word	0x3ff00000
 800eea0:	7c9fffff 	.word	0x7c9fffff
 800eea4:	bff00000 	.word	0xbff00000
 800eea8:	7fe00000 	.word	0x7fe00000

0800eeac <strtod>:
 800eeac:	460a      	mov	r2, r1
 800eeae:	4601      	mov	r1, r0
 800eeb0:	4802      	ldr	r0, [pc, #8]	; (800eebc <strtod+0x10>)
 800eeb2:	4b03      	ldr	r3, [pc, #12]	; (800eec0 <strtod+0x14>)
 800eeb4:	6800      	ldr	r0, [r0, #0]
 800eeb6:	f7ff ba43 	b.w	800e340 <_strtod_l>
 800eeba:	bf00      	nop
 800eebc:	2400031c 	.word	0x2400031c
 800eec0:	24000384 	.word	0x24000384

0800eec4 <quorem>:
 800eec4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eec8:	6903      	ldr	r3, [r0, #16]
 800eeca:	690c      	ldr	r4, [r1, #16]
 800eecc:	42a3      	cmp	r3, r4
 800eece:	4607      	mov	r7, r0
 800eed0:	f2c0 8081 	blt.w	800efd6 <quorem+0x112>
 800eed4:	3c01      	subs	r4, #1
 800eed6:	f101 0814 	add.w	r8, r1, #20
 800eeda:	f100 0514 	add.w	r5, r0, #20
 800eede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eee2:	9301      	str	r3, [sp, #4]
 800eee4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eee8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eeec:	3301      	adds	r3, #1
 800eeee:	429a      	cmp	r2, r3
 800eef0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eef4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eef8:	fbb2 f6f3 	udiv	r6, r2, r3
 800eefc:	d331      	bcc.n	800ef62 <quorem+0x9e>
 800eefe:	f04f 0e00 	mov.w	lr, #0
 800ef02:	4640      	mov	r0, r8
 800ef04:	46ac      	mov	ip, r5
 800ef06:	46f2      	mov	sl, lr
 800ef08:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef0c:	b293      	uxth	r3, r2
 800ef0e:	fb06 e303 	mla	r3, r6, r3, lr
 800ef12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	ebaa 0303 	sub.w	r3, sl, r3
 800ef1c:	f8dc a000 	ldr.w	sl, [ip]
 800ef20:	0c12      	lsrs	r2, r2, #16
 800ef22:	fa13 f38a 	uxtah	r3, r3, sl
 800ef26:	fb06 e202 	mla	r2, r6, r2, lr
 800ef2a:	9300      	str	r3, [sp, #0]
 800ef2c:	9b00      	ldr	r3, [sp, #0]
 800ef2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef32:	b292      	uxth	r2, r2
 800ef34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ef38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef3c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef40:	4581      	cmp	r9, r0
 800ef42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef46:	f84c 3b04 	str.w	r3, [ip], #4
 800ef4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef4e:	d2db      	bcs.n	800ef08 <quorem+0x44>
 800ef50:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef54:	b92b      	cbnz	r3, 800ef62 <quorem+0x9e>
 800ef56:	9b01      	ldr	r3, [sp, #4]
 800ef58:	3b04      	subs	r3, #4
 800ef5a:	429d      	cmp	r5, r3
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	d32e      	bcc.n	800efbe <quorem+0xfa>
 800ef60:	613c      	str	r4, [r7, #16]
 800ef62:	4638      	mov	r0, r7
 800ef64:	f001 fc12 	bl	801078c <__mcmp>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	db24      	blt.n	800efb6 <quorem+0xf2>
 800ef6c:	3601      	adds	r6, #1
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f04f 0c00 	mov.w	ip, #0
 800ef74:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef78:	f8d0 e000 	ldr.w	lr, [r0]
 800ef7c:	b293      	uxth	r3, r2
 800ef7e:	ebac 0303 	sub.w	r3, ip, r3
 800ef82:	0c12      	lsrs	r2, r2, #16
 800ef84:	fa13 f38e 	uxtah	r3, r3, lr
 800ef88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef96:	45c1      	cmp	r9, r8
 800ef98:	f840 3b04 	str.w	r3, [r0], #4
 800ef9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efa0:	d2e8      	bcs.n	800ef74 <quorem+0xb0>
 800efa2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efaa:	b922      	cbnz	r2, 800efb6 <quorem+0xf2>
 800efac:	3b04      	subs	r3, #4
 800efae:	429d      	cmp	r5, r3
 800efb0:	461a      	mov	r2, r3
 800efb2:	d30a      	bcc.n	800efca <quorem+0x106>
 800efb4:	613c      	str	r4, [r7, #16]
 800efb6:	4630      	mov	r0, r6
 800efb8:	b003      	add	sp, #12
 800efba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efbe:	6812      	ldr	r2, [r2, #0]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	2a00      	cmp	r2, #0
 800efc4:	d1cc      	bne.n	800ef60 <quorem+0x9c>
 800efc6:	3c01      	subs	r4, #1
 800efc8:	e7c7      	b.n	800ef5a <quorem+0x96>
 800efca:	6812      	ldr	r2, [r2, #0]
 800efcc:	3b04      	subs	r3, #4
 800efce:	2a00      	cmp	r2, #0
 800efd0:	d1f0      	bne.n	800efb4 <quorem+0xf0>
 800efd2:	3c01      	subs	r4, #1
 800efd4:	e7eb      	b.n	800efae <quorem+0xea>
 800efd6:	2000      	movs	r0, #0
 800efd8:	e7ee      	b.n	800efb8 <quorem+0xf4>
 800efda:	0000      	movs	r0, r0
 800efdc:	0000      	movs	r0, r0
	...

0800efe0 <_dtoa_r>:
 800efe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe4:	ed2d 8b02 	vpush	{d8}
 800efe8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800efea:	b091      	sub	sp, #68	; 0x44
 800efec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800eff0:	ec59 8b10 	vmov	r8, r9, d0
 800eff4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800eff6:	9106      	str	r1, [sp, #24]
 800eff8:	4606      	mov	r6, r0
 800effa:	9208      	str	r2, [sp, #32]
 800effc:	930c      	str	r3, [sp, #48]	; 0x30
 800effe:	b975      	cbnz	r5, 800f01e <_dtoa_r+0x3e>
 800f000:	2010      	movs	r0, #16
 800f002:	f001 f8cf 	bl	80101a4 <malloc>
 800f006:	4602      	mov	r2, r0
 800f008:	6270      	str	r0, [r6, #36]	; 0x24
 800f00a:	b920      	cbnz	r0, 800f016 <_dtoa_r+0x36>
 800f00c:	4baa      	ldr	r3, [pc, #680]	; (800f2b8 <_dtoa_r+0x2d8>)
 800f00e:	21ea      	movs	r1, #234	; 0xea
 800f010:	48aa      	ldr	r0, [pc, #680]	; (800f2bc <_dtoa_r+0x2dc>)
 800f012:	f001 fedf 	bl	8010dd4 <__assert_func>
 800f016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f01a:	6005      	str	r5, [r0, #0]
 800f01c:	60c5      	str	r5, [r0, #12]
 800f01e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f020:	6819      	ldr	r1, [r3, #0]
 800f022:	b151      	cbz	r1, 800f03a <_dtoa_r+0x5a>
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	604a      	str	r2, [r1, #4]
 800f028:	2301      	movs	r3, #1
 800f02a:	4093      	lsls	r3, r2
 800f02c:	608b      	str	r3, [r1, #8]
 800f02e:	4630      	mov	r0, r6
 800f030:	f001 f920 	bl	8010274 <_Bfree>
 800f034:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f036:	2200      	movs	r2, #0
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	f1b9 0300 	subs.w	r3, r9, #0
 800f03e:	bfbb      	ittet	lt
 800f040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f044:	9303      	strlt	r3, [sp, #12]
 800f046:	2300      	movge	r3, #0
 800f048:	2201      	movlt	r2, #1
 800f04a:	bfac      	ite	ge
 800f04c:	6023      	strge	r3, [r4, #0]
 800f04e:	6022      	strlt	r2, [r4, #0]
 800f050:	4b9b      	ldr	r3, [pc, #620]	; (800f2c0 <_dtoa_r+0x2e0>)
 800f052:	9c03      	ldr	r4, [sp, #12]
 800f054:	43a3      	bics	r3, r4
 800f056:	d11c      	bne.n	800f092 <_dtoa_r+0xb2>
 800f058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f05a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f05e:	6013      	str	r3, [r2, #0]
 800f060:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f064:	ea53 0308 	orrs.w	r3, r3, r8
 800f068:	f000 84fd 	beq.w	800fa66 <_dtoa_r+0xa86>
 800f06c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f06e:	b963      	cbnz	r3, 800f08a <_dtoa_r+0xaa>
 800f070:	4b94      	ldr	r3, [pc, #592]	; (800f2c4 <_dtoa_r+0x2e4>)
 800f072:	e01f      	b.n	800f0b4 <_dtoa_r+0xd4>
 800f074:	4b94      	ldr	r3, [pc, #592]	; (800f2c8 <_dtoa_r+0x2e8>)
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	3308      	adds	r3, #8
 800f07a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f07c:	6013      	str	r3, [r2, #0]
 800f07e:	9801      	ldr	r0, [sp, #4]
 800f080:	b011      	add	sp, #68	; 0x44
 800f082:	ecbd 8b02 	vpop	{d8}
 800f086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08a:	4b8e      	ldr	r3, [pc, #568]	; (800f2c4 <_dtoa_r+0x2e4>)
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	3303      	adds	r3, #3
 800f090:	e7f3      	b.n	800f07a <_dtoa_r+0x9a>
 800f092:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f096:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f09e:	d10b      	bne.n	800f0b8 <_dtoa_r+0xd8>
 800f0a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	6013      	str	r3, [r2, #0]
 800f0a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f000 84d9 	beq.w	800fa60 <_dtoa_r+0xa80>
 800f0ae:	4887      	ldr	r0, [pc, #540]	; (800f2cc <_dtoa_r+0x2ec>)
 800f0b0:	6018      	str	r0, [r3, #0]
 800f0b2:	1e43      	subs	r3, r0, #1
 800f0b4:	9301      	str	r3, [sp, #4]
 800f0b6:	e7e2      	b.n	800f07e <_dtoa_r+0x9e>
 800f0b8:	a90f      	add	r1, sp, #60	; 0x3c
 800f0ba:	aa0e      	add	r2, sp, #56	; 0x38
 800f0bc:	4630      	mov	r0, r6
 800f0be:	eeb0 0b48 	vmov.f64	d0, d8
 800f0c2:	f001 fc85 	bl	80109d0 <__d2b>
 800f0c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f0ce:	2900      	cmp	r1, #0
 800f0d0:	d046      	beq.n	800f160 <_dtoa_r+0x180>
 800f0d2:	ee18 4a90 	vmov	r4, s17
 800f0d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f0da:	ec53 2b18 	vmov	r2, r3, d8
 800f0de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f0e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f0e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f0ea:	2400      	movs	r4, #0
 800f0ec:	ec43 2b16 	vmov	d6, r2, r3
 800f0f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f0f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f2a0 <_dtoa_r+0x2c0>
 800f0f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f0fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800f2a8 <_dtoa_r+0x2c8>
 800f100:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f104:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f2b0 <_dtoa_r+0x2d0>
 800f108:	ee07 1a90 	vmov	s15, r1
 800f10c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f110:	eeb0 7b46 	vmov.f64	d7, d6
 800f114:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f118:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f11c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f124:	ee16 ba90 	vmov	fp, s13
 800f128:	940a      	str	r4, [sp, #40]	; 0x28
 800f12a:	d508      	bpl.n	800f13e <_dtoa_r+0x15e>
 800f12c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f130:	eeb4 6b47 	vcmp.f64	d6, d7
 800f134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f138:	bf18      	it	ne
 800f13a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f13e:	f1bb 0f16 	cmp.w	fp, #22
 800f142:	d82f      	bhi.n	800f1a4 <_dtoa_r+0x1c4>
 800f144:	4b62      	ldr	r3, [pc, #392]	; (800f2d0 <_dtoa_r+0x2f0>)
 800f146:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f14a:	ed93 7b00 	vldr	d7, [r3]
 800f14e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f156:	d501      	bpl.n	800f15c <_dtoa_r+0x17c>
 800f158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f15c:	2300      	movs	r3, #0
 800f15e:	e022      	b.n	800f1a6 <_dtoa_r+0x1c6>
 800f160:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f162:	4401      	add	r1, r0
 800f164:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f168:	2b20      	cmp	r3, #32
 800f16a:	bfc1      	itttt	gt
 800f16c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f170:	fa04 f303 	lslgt.w	r3, r4, r3
 800f174:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f178:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f17c:	bfd6      	itet	le
 800f17e:	f1c3 0320 	rsble	r3, r3, #32
 800f182:	ea43 0808 	orrgt.w	r8, r3, r8
 800f186:	fa08 f803 	lslle.w	r8, r8, r3
 800f18a:	ee07 8a90 	vmov	s15, r8
 800f18e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f192:	3901      	subs	r1, #1
 800f194:	ee17 4a90 	vmov	r4, s15
 800f198:	ec53 2b17 	vmov	r2, r3, d7
 800f19c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f1a0:	2401      	movs	r4, #1
 800f1a2:	e7a3      	b.n	800f0ec <_dtoa_r+0x10c>
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800f1a8:	1a43      	subs	r3, r0, r1
 800f1aa:	1e5a      	subs	r2, r3, #1
 800f1ac:	bf45      	ittet	mi
 800f1ae:	f1c3 0301 	rsbmi	r3, r3, #1
 800f1b2:	9304      	strmi	r3, [sp, #16]
 800f1b4:	2300      	movpl	r3, #0
 800f1b6:	2300      	movmi	r3, #0
 800f1b8:	9205      	str	r2, [sp, #20]
 800f1ba:	bf54      	ite	pl
 800f1bc:	9304      	strpl	r3, [sp, #16]
 800f1be:	9305      	strmi	r3, [sp, #20]
 800f1c0:	f1bb 0f00 	cmp.w	fp, #0
 800f1c4:	db18      	blt.n	800f1f8 <_dtoa_r+0x218>
 800f1c6:	9b05      	ldr	r3, [sp, #20]
 800f1c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f1cc:	445b      	add	r3, fp
 800f1ce:	9305      	str	r3, [sp, #20]
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	9a06      	ldr	r2, [sp, #24]
 800f1d4:	2a09      	cmp	r2, #9
 800f1d6:	d849      	bhi.n	800f26c <_dtoa_r+0x28c>
 800f1d8:	2a05      	cmp	r2, #5
 800f1da:	bfc4      	itt	gt
 800f1dc:	3a04      	subgt	r2, #4
 800f1de:	9206      	strgt	r2, [sp, #24]
 800f1e0:	9a06      	ldr	r2, [sp, #24]
 800f1e2:	f1a2 0202 	sub.w	r2, r2, #2
 800f1e6:	bfcc      	ite	gt
 800f1e8:	2400      	movgt	r4, #0
 800f1ea:	2401      	movle	r4, #1
 800f1ec:	2a03      	cmp	r2, #3
 800f1ee:	d848      	bhi.n	800f282 <_dtoa_r+0x2a2>
 800f1f0:	e8df f002 	tbb	[pc, r2]
 800f1f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800f1f8:	9b04      	ldr	r3, [sp, #16]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	eba3 030b 	sub.w	r3, r3, fp
 800f200:	9304      	str	r3, [sp, #16]
 800f202:	9209      	str	r2, [sp, #36]	; 0x24
 800f204:	f1cb 0300 	rsb	r3, fp, #0
 800f208:	e7e3      	b.n	800f1d2 <_dtoa_r+0x1f2>
 800f20a:	2200      	movs	r2, #0
 800f20c:	9207      	str	r2, [sp, #28]
 800f20e:	9a08      	ldr	r2, [sp, #32]
 800f210:	2a00      	cmp	r2, #0
 800f212:	dc39      	bgt.n	800f288 <_dtoa_r+0x2a8>
 800f214:	f04f 0a01 	mov.w	sl, #1
 800f218:	46d1      	mov	r9, sl
 800f21a:	4652      	mov	r2, sl
 800f21c:	f8cd a020 	str.w	sl, [sp, #32]
 800f220:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f222:	2100      	movs	r1, #0
 800f224:	6079      	str	r1, [r7, #4]
 800f226:	2004      	movs	r0, #4
 800f228:	f100 0c14 	add.w	ip, r0, #20
 800f22c:	4594      	cmp	ip, r2
 800f22e:	6879      	ldr	r1, [r7, #4]
 800f230:	d92f      	bls.n	800f292 <_dtoa_r+0x2b2>
 800f232:	4630      	mov	r0, r6
 800f234:	930d      	str	r3, [sp, #52]	; 0x34
 800f236:	f000 ffdd 	bl	80101f4 <_Balloc>
 800f23a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f23c:	9001      	str	r0, [sp, #4]
 800f23e:	4602      	mov	r2, r0
 800f240:	2800      	cmp	r0, #0
 800f242:	d149      	bne.n	800f2d8 <_dtoa_r+0x2f8>
 800f244:	4b23      	ldr	r3, [pc, #140]	; (800f2d4 <_dtoa_r+0x2f4>)
 800f246:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f24a:	e6e1      	b.n	800f010 <_dtoa_r+0x30>
 800f24c:	2201      	movs	r2, #1
 800f24e:	e7dd      	b.n	800f20c <_dtoa_r+0x22c>
 800f250:	2200      	movs	r2, #0
 800f252:	9207      	str	r2, [sp, #28]
 800f254:	9a08      	ldr	r2, [sp, #32]
 800f256:	eb0b 0a02 	add.w	sl, fp, r2
 800f25a:	f10a 0901 	add.w	r9, sl, #1
 800f25e:	464a      	mov	r2, r9
 800f260:	2a01      	cmp	r2, #1
 800f262:	bfb8      	it	lt
 800f264:	2201      	movlt	r2, #1
 800f266:	e7db      	b.n	800f220 <_dtoa_r+0x240>
 800f268:	2201      	movs	r2, #1
 800f26a:	e7f2      	b.n	800f252 <_dtoa_r+0x272>
 800f26c:	2401      	movs	r4, #1
 800f26e:	2200      	movs	r2, #0
 800f270:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f274:	f04f 3aff 	mov.w	sl, #4294967295
 800f278:	2100      	movs	r1, #0
 800f27a:	46d1      	mov	r9, sl
 800f27c:	2212      	movs	r2, #18
 800f27e:	9108      	str	r1, [sp, #32]
 800f280:	e7ce      	b.n	800f220 <_dtoa_r+0x240>
 800f282:	2201      	movs	r2, #1
 800f284:	9207      	str	r2, [sp, #28]
 800f286:	e7f5      	b.n	800f274 <_dtoa_r+0x294>
 800f288:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f28c:	46d1      	mov	r9, sl
 800f28e:	4652      	mov	r2, sl
 800f290:	e7c6      	b.n	800f220 <_dtoa_r+0x240>
 800f292:	3101      	adds	r1, #1
 800f294:	6079      	str	r1, [r7, #4]
 800f296:	0040      	lsls	r0, r0, #1
 800f298:	e7c6      	b.n	800f228 <_dtoa_r+0x248>
 800f29a:	bf00      	nop
 800f29c:	f3af 8000 	nop.w
 800f2a0:	636f4361 	.word	0x636f4361
 800f2a4:	3fd287a7 	.word	0x3fd287a7
 800f2a8:	8b60c8b3 	.word	0x8b60c8b3
 800f2ac:	3fc68a28 	.word	0x3fc68a28
 800f2b0:	509f79fb 	.word	0x509f79fb
 800f2b4:	3fd34413 	.word	0x3fd34413
 800f2b8:	080119b5 	.word	0x080119b5
 800f2bc:	080119cc 	.word	0x080119cc
 800f2c0:	7ff00000 	.word	0x7ff00000
 800f2c4:	080119b1 	.word	0x080119b1
 800f2c8:	080119a8 	.word	0x080119a8
 800f2cc:	08011931 	.word	0x08011931
 800f2d0:	08011b38 	.word	0x08011b38
 800f2d4:	08011a27 	.word	0x08011a27
 800f2d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f2da:	9901      	ldr	r1, [sp, #4]
 800f2dc:	6011      	str	r1, [r2, #0]
 800f2de:	f1b9 0f0e 	cmp.w	r9, #14
 800f2e2:	d86c      	bhi.n	800f3be <_dtoa_r+0x3de>
 800f2e4:	2c00      	cmp	r4, #0
 800f2e6:	d06a      	beq.n	800f3be <_dtoa_r+0x3de>
 800f2e8:	f1bb 0f00 	cmp.w	fp, #0
 800f2ec:	f340 80a0 	ble.w	800f430 <_dtoa_r+0x450>
 800f2f0:	49c1      	ldr	r1, [pc, #772]	; (800f5f8 <_dtoa_r+0x618>)
 800f2f2:	f00b 020f 	and.w	r2, fp, #15
 800f2f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f2fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f2fe:	ed92 7b00 	vldr	d7, [r2]
 800f302:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f306:	f000 8087 	beq.w	800f418 <_dtoa_r+0x438>
 800f30a:	4abc      	ldr	r2, [pc, #752]	; (800f5fc <_dtoa_r+0x61c>)
 800f30c:	ed92 6b08 	vldr	d6, [r2, #32]
 800f310:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f314:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f318:	f001 010f 	and.w	r1, r1, #15
 800f31c:	2203      	movs	r2, #3
 800f31e:	48b7      	ldr	r0, [pc, #732]	; (800f5fc <_dtoa_r+0x61c>)
 800f320:	2900      	cmp	r1, #0
 800f322:	d17b      	bne.n	800f41c <_dtoa_r+0x43c>
 800f324:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f328:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f32c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f332:	2900      	cmp	r1, #0
 800f334:	f000 80a2 	beq.w	800f47c <_dtoa_r+0x49c>
 800f338:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f33c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f340:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f348:	f140 8098 	bpl.w	800f47c <_dtoa_r+0x49c>
 800f34c:	f1b9 0f00 	cmp.w	r9, #0
 800f350:	f000 8094 	beq.w	800f47c <_dtoa_r+0x49c>
 800f354:	f1ba 0f00 	cmp.w	sl, #0
 800f358:	dd2f      	ble.n	800f3ba <_dtoa_r+0x3da>
 800f35a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f35e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f362:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f366:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f36a:	3201      	adds	r2, #1
 800f36c:	4650      	mov	r0, sl
 800f36e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f372:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f376:	ee07 2a90 	vmov	s15, r2
 800f37a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f37e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f382:	ee15 4a90 	vmov	r4, s11
 800f386:	ec52 1b15 	vmov	r1, r2, d5
 800f38a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f38e:	2800      	cmp	r0, #0
 800f390:	d177      	bne.n	800f482 <_dtoa_r+0x4a2>
 800f392:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f396:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f39a:	ec42 1b17 	vmov	d7, r1, r2
 800f39e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a6:	f300 8263 	bgt.w	800f870 <_dtoa_r+0x890>
 800f3aa:	eeb1 7b47 	vneg.f64	d7, d7
 800f3ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b6:	f100 8258 	bmi.w	800f86a <_dtoa_r+0x88a>
 800f3ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f3be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f3c0:	2a00      	cmp	r2, #0
 800f3c2:	f2c0 811d 	blt.w	800f600 <_dtoa_r+0x620>
 800f3c6:	f1bb 0f0e 	cmp.w	fp, #14
 800f3ca:	f300 8119 	bgt.w	800f600 <_dtoa_r+0x620>
 800f3ce:	4b8a      	ldr	r3, [pc, #552]	; (800f5f8 <_dtoa_r+0x618>)
 800f3d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f3d4:	ed93 6b00 	vldr	d6, [r3]
 800f3d8:	9b08      	ldr	r3, [sp, #32]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f280 80b7 	bge.w	800f54e <_dtoa_r+0x56e>
 800f3e0:	f1b9 0f00 	cmp.w	r9, #0
 800f3e4:	f300 80b3 	bgt.w	800f54e <_dtoa_r+0x56e>
 800f3e8:	f040 823f 	bne.w	800f86a <_dtoa_r+0x88a>
 800f3ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f3f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f3f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f3f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f400:	464c      	mov	r4, r9
 800f402:	464f      	mov	r7, r9
 800f404:	f280 8215 	bge.w	800f832 <_dtoa_r+0x852>
 800f408:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f40c:	2331      	movs	r3, #49	; 0x31
 800f40e:	f808 3b01 	strb.w	r3, [r8], #1
 800f412:	f10b 0b01 	add.w	fp, fp, #1
 800f416:	e211      	b.n	800f83c <_dtoa_r+0x85c>
 800f418:	2202      	movs	r2, #2
 800f41a:	e780      	b.n	800f31e <_dtoa_r+0x33e>
 800f41c:	07cc      	lsls	r4, r1, #31
 800f41e:	d504      	bpl.n	800f42a <_dtoa_r+0x44a>
 800f420:	ed90 6b00 	vldr	d6, [r0]
 800f424:	3201      	adds	r2, #1
 800f426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f42a:	1049      	asrs	r1, r1, #1
 800f42c:	3008      	adds	r0, #8
 800f42e:	e777      	b.n	800f320 <_dtoa_r+0x340>
 800f430:	d022      	beq.n	800f478 <_dtoa_r+0x498>
 800f432:	f1cb 0100 	rsb	r1, fp, #0
 800f436:	4a70      	ldr	r2, [pc, #448]	; (800f5f8 <_dtoa_r+0x618>)
 800f438:	f001 000f 	and.w	r0, r1, #15
 800f43c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f440:	ed92 7b00 	vldr	d7, [r2]
 800f444:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f44c:	486b      	ldr	r0, [pc, #428]	; (800f5fc <_dtoa_r+0x61c>)
 800f44e:	1109      	asrs	r1, r1, #4
 800f450:	2400      	movs	r4, #0
 800f452:	2202      	movs	r2, #2
 800f454:	b929      	cbnz	r1, 800f462 <_dtoa_r+0x482>
 800f456:	2c00      	cmp	r4, #0
 800f458:	f43f af6a 	beq.w	800f330 <_dtoa_r+0x350>
 800f45c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f460:	e766      	b.n	800f330 <_dtoa_r+0x350>
 800f462:	07cf      	lsls	r7, r1, #31
 800f464:	d505      	bpl.n	800f472 <_dtoa_r+0x492>
 800f466:	ed90 6b00 	vldr	d6, [r0]
 800f46a:	3201      	adds	r2, #1
 800f46c:	2401      	movs	r4, #1
 800f46e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f472:	1049      	asrs	r1, r1, #1
 800f474:	3008      	adds	r0, #8
 800f476:	e7ed      	b.n	800f454 <_dtoa_r+0x474>
 800f478:	2202      	movs	r2, #2
 800f47a:	e759      	b.n	800f330 <_dtoa_r+0x350>
 800f47c:	465f      	mov	r7, fp
 800f47e:	4648      	mov	r0, r9
 800f480:	e775      	b.n	800f36e <_dtoa_r+0x38e>
 800f482:	ec42 1b17 	vmov	d7, r1, r2
 800f486:	4a5c      	ldr	r2, [pc, #368]	; (800f5f8 <_dtoa_r+0x618>)
 800f488:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f48c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f490:	9a01      	ldr	r2, [sp, #4]
 800f492:	1814      	adds	r4, r2, r0
 800f494:	9a07      	ldr	r2, [sp, #28]
 800f496:	b352      	cbz	r2, 800f4ee <_dtoa_r+0x50e>
 800f498:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f49c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f4a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f4a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f4a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f4ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f4b4:	ee14 2a90 	vmov	r2, s9
 800f4b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f4bc:	3230      	adds	r2, #48	; 0x30
 800f4be:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f4c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ca:	f808 2b01 	strb.w	r2, [r8], #1
 800f4ce:	d439      	bmi.n	800f544 <_dtoa_r+0x564>
 800f4d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f4d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4dc:	d472      	bmi.n	800f5c4 <_dtoa_r+0x5e4>
 800f4de:	45a0      	cmp	r8, r4
 800f4e0:	f43f af6b 	beq.w	800f3ba <_dtoa_r+0x3da>
 800f4e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f4e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f4ec:	e7e0      	b.n	800f4b0 <_dtoa_r+0x4d0>
 800f4ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f4f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f4fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f500:	ee14 2a90 	vmov	r2, s9
 800f504:	3230      	adds	r2, #48	; 0x30
 800f506:	f808 2b01 	strb.w	r2, [r8], #1
 800f50a:	45a0      	cmp	r8, r4
 800f50c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f510:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f514:	d118      	bne.n	800f548 <_dtoa_r+0x568>
 800f516:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f51a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f51e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f526:	dc4d      	bgt.n	800f5c4 <_dtoa_r+0x5e4>
 800f528:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f52c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f534:	f57f af41 	bpl.w	800f3ba <_dtoa_r+0x3da>
 800f538:	4688      	mov	r8, r1
 800f53a:	3901      	subs	r1, #1
 800f53c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f540:	2b30      	cmp	r3, #48	; 0x30
 800f542:	d0f9      	beq.n	800f538 <_dtoa_r+0x558>
 800f544:	46bb      	mov	fp, r7
 800f546:	e02a      	b.n	800f59e <_dtoa_r+0x5be>
 800f548:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f54c:	e7d6      	b.n	800f4fc <_dtoa_r+0x51c>
 800f54e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f552:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f556:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f55a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f55e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f562:	ee15 3a10 	vmov	r3, s10
 800f566:	3330      	adds	r3, #48	; 0x30
 800f568:	f808 3b01 	strb.w	r3, [r8], #1
 800f56c:	9b01      	ldr	r3, [sp, #4]
 800f56e:	eba8 0303 	sub.w	r3, r8, r3
 800f572:	4599      	cmp	r9, r3
 800f574:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f578:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f57c:	d133      	bne.n	800f5e6 <_dtoa_r+0x606>
 800f57e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f582:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58a:	dc1a      	bgt.n	800f5c2 <_dtoa_r+0x5e2>
 800f58c:	eeb4 7b46 	vcmp.f64	d7, d6
 800f590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f594:	d103      	bne.n	800f59e <_dtoa_r+0x5be>
 800f596:	ee15 3a10 	vmov	r3, s10
 800f59a:	07d9      	lsls	r1, r3, #31
 800f59c:	d411      	bmi.n	800f5c2 <_dtoa_r+0x5e2>
 800f59e:	4629      	mov	r1, r5
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	f000 fe67 	bl	8010274 <_Bfree>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f5aa:	f888 3000 	strb.w	r3, [r8]
 800f5ae:	f10b 0301 	add.w	r3, fp, #1
 800f5b2:	6013      	str	r3, [r2, #0]
 800f5b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f43f ad61 	beq.w	800f07e <_dtoa_r+0x9e>
 800f5bc:	f8c3 8000 	str.w	r8, [r3]
 800f5c0:	e55d      	b.n	800f07e <_dtoa_r+0x9e>
 800f5c2:	465f      	mov	r7, fp
 800f5c4:	4643      	mov	r3, r8
 800f5c6:	4698      	mov	r8, r3
 800f5c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5cc:	2a39      	cmp	r2, #57	; 0x39
 800f5ce:	d106      	bne.n	800f5de <_dtoa_r+0x5fe>
 800f5d0:	9a01      	ldr	r2, [sp, #4]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d1f7      	bne.n	800f5c6 <_dtoa_r+0x5e6>
 800f5d6:	9901      	ldr	r1, [sp, #4]
 800f5d8:	2230      	movs	r2, #48	; 0x30
 800f5da:	3701      	adds	r7, #1
 800f5dc:	700a      	strb	r2, [r1, #0]
 800f5de:	781a      	ldrb	r2, [r3, #0]
 800f5e0:	3201      	adds	r2, #1
 800f5e2:	701a      	strb	r2, [r3, #0]
 800f5e4:	e7ae      	b.n	800f544 <_dtoa_r+0x564>
 800f5e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f5ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f2:	d1b2      	bne.n	800f55a <_dtoa_r+0x57a>
 800f5f4:	e7d3      	b.n	800f59e <_dtoa_r+0x5be>
 800f5f6:	bf00      	nop
 800f5f8:	08011b38 	.word	0x08011b38
 800f5fc:	08011b10 	.word	0x08011b10
 800f600:	9907      	ldr	r1, [sp, #28]
 800f602:	2900      	cmp	r1, #0
 800f604:	f000 80d0 	beq.w	800f7a8 <_dtoa_r+0x7c8>
 800f608:	9906      	ldr	r1, [sp, #24]
 800f60a:	2901      	cmp	r1, #1
 800f60c:	f300 80b4 	bgt.w	800f778 <_dtoa_r+0x798>
 800f610:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f612:	2900      	cmp	r1, #0
 800f614:	f000 80ac 	beq.w	800f770 <_dtoa_r+0x790>
 800f618:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f61c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f620:	461c      	mov	r4, r3
 800f622:	930a      	str	r3, [sp, #40]	; 0x28
 800f624:	9b04      	ldr	r3, [sp, #16]
 800f626:	4413      	add	r3, r2
 800f628:	9304      	str	r3, [sp, #16]
 800f62a:	9b05      	ldr	r3, [sp, #20]
 800f62c:	2101      	movs	r1, #1
 800f62e:	4413      	add	r3, r2
 800f630:	4630      	mov	r0, r6
 800f632:	9305      	str	r3, [sp, #20]
 800f634:	f000 ff20 	bl	8010478 <__i2b>
 800f638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f63a:	4607      	mov	r7, r0
 800f63c:	f1b8 0f00 	cmp.w	r8, #0
 800f640:	dd0d      	ble.n	800f65e <_dtoa_r+0x67e>
 800f642:	9a05      	ldr	r2, [sp, #20]
 800f644:	2a00      	cmp	r2, #0
 800f646:	dd0a      	ble.n	800f65e <_dtoa_r+0x67e>
 800f648:	4542      	cmp	r2, r8
 800f64a:	9904      	ldr	r1, [sp, #16]
 800f64c:	bfa8      	it	ge
 800f64e:	4642      	movge	r2, r8
 800f650:	1a89      	subs	r1, r1, r2
 800f652:	9104      	str	r1, [sp, #16]
 800f654:	9905      	ldr	r1, [sp, #20]
 800f656:	eba8 0802 	sub.w	r8, r8, r2
 800f65a:	1a8a      	subs	r2, r1, r2
 800f65c:	9205      	str	r2, [sp, #20]
 800f65e:	b303      	cbz	r3, 800f6a2 <_dtoa_r+0x6c2>
 800f660:	9a07      	ldr	r2, [sp, #28]
 800f662:	2a00      	cmp	r2, #0
 800f664:	f000 80a5 	beq.w	800f7b2 <_dtoa_r+0x7d2>
 800f668:	2c00      	cmp	r4, #0
 800f66a:	dd13      	ble.n	800f694 <_dtoa_r+0x6b4>
 800f66c:	4639      	mov	r1, r7
 800f66e:	4622      	mov	r2, r4
 800f670:	4630      	mov	r0, r6
 800f672:	930d      	str	r3, [sp, #52]	; 0x34
 800f674:	f000 ffc0 	bl	80105f8 <__pow5mult>
 800f678:	462a      	mov	r2, r5
 800f67a:	4601      	mov	r1, r0
 800f67c:	4607      	mov	r7, r0
 800f67e:	4630      	mov	r0, r6
 800f680:	f000 ff10 	bl	80104a4 <__multiply>
 800f684:	4629      	mov	r1, r5
 800f686:	900a      	str	r0, [sp, #40]	; 0x28
 800f688:	4630      	mov	r0, r6
 800f68a:	f000 fdf3 	bl	8010274 <_Bfree>
 800f68e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f692:	4615      	mov	r5, r2
 800f694:	1b1a      	subs	r2, r3, r4
 800f696:	d004      	beq.n	800f6a2 <_dtoa_r+0x6c2>
 800f698:	4629      	mov	r1, r5
 800f69a:	4630      	mov	r0, r6
 800f69c:	f000 ffac 	bl	80105f8 <__pow5mult>
 800f6a0:	4605      	mov	r5, r0
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	4630      	mov	r0, r6
 800f6a6:	f000 fee7 	bl	8010478 <__i2b>
 800f6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	4604      	mov	r4, r0
 800f6b0:	f340 8081 	ble.w	800f7b6 <_dtoa_r+0x7d6>
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	4601      	mov	r1, r0
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	f000 ff9d 	bl	80105f8 <__pow5mult>
 800f6be:	9b06      	ldr	r3, [sp, #24]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	4604      	mov	r4, r0
 800f6c4:	dd7a      	ble.n	800f7bc <_dtoa_r+0x7dc>
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	930a      	str	r3, [sp, #40]	; 0x28
 800f6ca:	6922      	ldr	r2, [r4, #16]
 800f6cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f6d0:	6910      	ldr	r0, [r2, #16]
 800f6d2:	f000 fe81 	bl	80103d8 <__hi0bits>
 800f6d6:	f1c0 0020 	rsb	r0, r0, #32
 800f6da:	9b05      	ldr	r3, [sp, #20]
 800f6dc:	4418      	add	r0, r3
 800f6de:	f010 001f 	ands.w	r0, r0, #31
 800f6e2:	f000 808c 	beq.w	800f7fe <_dtoa_r+0x81e>
 800f6e6:	f1c0 0220 	rsb	r2, r0, #32
 800f6ea:	2a04      	cmp	r2, #4
 800f6ec:	f340 8085 	ble.w	800f7fa <_dtoa_r+0x81a>
 800f6f0:	f1c0 001c 	rsb	r0, r0, #28
 800f6f4:	9b04      	ldr	r3, [sp, #16]
 800f6f6:	4403      	add	r3, r0
 800f6f8:	9304      	str	r3, [sp, #16]
 800f6fa:	9b05      	ldr	r3, [sp, #20]
 800f6fc:	4403      	add	r3, r0
 800f6fe:	4480      	add	r8, r0
 800f700:	9305      	str	r3, [sp, #20]
 800f702:	9b04      	ldr	r3, [sp, #16]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd05      	ble.n	800f714 <_dtoa_r+0x734>
 800f708:	4629      	mov	r1, r5
 800f70a:	461a      	mov	r2, r3
 800f70c:	4630      	mov	r0, r6
 800f70e:	f000 ffcd 	bl	80106ac <__lshift>
 800f712:	4605      	mov	r5, r0
 800f714:	9b05      	ldr	r3, [sp, #20]
 800f716:	2b00      	cmp	r3, #0
 800f718:	dd05      	ble.n	800f726 <_dtoa_r+0x746>
 800f71a:	4621      	mov	r1, r4
 800f71c:	461a      	mov	r2, r3
 800f71e:	4630      	mov	r0, r6
 800f720:	f000 ffc4 	bl	80106ac <__lshift>
 800f724:	4604      	mov	r4, r0
 800f726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d06a      	beq.n	800f802 <_dtoa_r+0x822>
 800f72c:	4621      	mov	r1, r4
 800f72e:	4628      	mov	r0, r5
 800f730:	f001 f82c 	bl	801078c <__mcmp>
 800f734:	2800      	cmp	r0, #0
 800f736:	da64      	bge.n	800f802 <_dtoa_r+0x822>
 800f738:	2300      	movs	r3, #0
 800f73a:	4629      	mov	r1, r5
 800f73c:	220a      	movs	r2, #10
 800f73e:	4630      	mov	r0, r6
 800f740:	f000 fdba 	bl	80102b8 <__multadd>
 800f744:	9b07      	ldr	r3, [sp, #28]
 800f746:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f74a:	4605      	mov	r5, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	f000 8191 	beq.w	800fa74 <_dtoa_r+0xa94>
 800f752:	4639      	mov	r1, r7
 800f754:	2300      	movs	r3, #0
 800f756:	220a      	movs	r2, #10
 800f758:	4630      	mov	r0, r6
 800f75a:	f000 fdad 	bl	80102b8 <__multadd>
 800f75e:	f1ba 0f00 	cmp.w	sl, #0
 800f762:	4607      	mov	r7, r0
 800f764:	f300 808d 	bgt.w	800f882 <_dtoa_r+0x8a2>
 800f768:	9b06      	ldr	r3, [sp, #24]
 800f76a:	2b02      	cmp	r3, #2
 800f76c:	dc50      	bgt.n	800f810 <_dtoa_r+0x830>
 800f76e:	e088      	b.n	800f882 <_dtoa_r+0x8a2>
 800f770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f772:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f776:	e751      	b.n	800f61c <_dtoa_r+0x63c>
 800f778:	f109 34ff 	add.w	r4, r9, #4294967295
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	bfbf      	itttt	lt
 800f780:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800f782:	1ae3      	sublt	r3, r4, r3
 800f784:	18d2      	addlt	r2, r2, r3
 800f786:	9209      	strlt	r2, [sp, #36]	; 0x24
 800f788:	bfb6      	itet	lt
 800f78a:	4623      	movlt	r3, r4
 800f78c:	1b1c      	subge	r4, r3, r4
 800f78e:	2400      	movlt	r4, #0
 800f790:	f1b9 0f00 	cmp.w	r9, #0
 800f794:	bfb5      	itete	lt
 800f796:	9a04      	ldrlt	r2, [sp, #16]
 800f798:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f79c:	eba2 0809 	sublt.w	r8, r2, r9
 800f7a0:	464a      	movge	r2, r9
 800f7a2:	bfb8      	it	lt
 800f7a4:	2200      	movlt	r2, #0
 800f7a6:	e73c      	b.n	800f622 <_dtoa_r+0x642>
 800f7a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f7ac:	9f07      	ldr	r7, [sp, #28]
 800f7ae:	461c      	mov	r4, r3
 800f7b0:	e744      	b.n	800f63c <_dtoa_r+0x65c>
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	e770      	b.n	800f698 <_dtoa_r+0x6b8>
 800f7b6:	9b06      	ldr	r3, [sp, #24]
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	dc18      	bgt.n	800f7ee <_dtoa_r+0x80e>
 800f7bc:	9b02      	ldr	r3, [sp, #8]
 800f7be:	b9b3      	cbnz	r3, 800f7ee <_dtoa_r+0x80e>
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f7c6:	b9a2      	cbnz	r2, 800f7f2 <_dtoa_r+0x812>
 800f7c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f7cc:	0d12      	lsrs	r2, r2, #20
 800f7ce:	0512      	lsls	r2, r2, #20
 800f7d0:	b18a      	cbz	r2, 800f7f6 <_dtoa_r+0x816>
 800f7d2:	9b04      	ldr	r3, [sp, #16]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	9304      	str	r3, [sp, #16]
 800f7d8:	9b05      	ldr	r3, [sp, #20]
 800f7da:	3301      	adds	r3, #1
 800f7dc:	9305      	str	r3, [sp, #20]
 800f7de:	2301      	movs	r3, #1
 800f7e0:	930a      	str	r3, [sp, #40]	; 0x28
 800f7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f47f af70 	bne.w	800f6ca <_dtoa_r+0x6ea>
 800f7ea:	2001      	movs	r0, #1
 800f7ec:	e775      	b.n	800f6da <_dtoa_r+0x6fa>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	e7f6      	b.n	800f7e0 <_dtoa_r+0x800>
 800f7f2:	9b02      	ldr	r3, [sp, #8]
 800f7f4:	e7f4      	b.n	800f7e0 <_dtoa_r+0x800>
 800f7f6:	920a      	str	r2, [sp, #40]	; 0x28
 800f7f8:	e7f3      	b.n	800f7e2 <_dtoa_r+0x802>
 800f7fa:	d082      	beq.n	800f702 <_dtoa_r+0x722>
 800f7fc:	4610      	mov	r0, r2
 800f7fe:	301c      	adds	r0, #28
 800f800:	e778      	b.n	800f6f4 <_dtoa_r+0x714>
 800f802:	f1b9 0f00 	cmp.w	r9, #0
 800f806:	dc37      	bgt.n	800f878 <_dtoa_r+0x898>
 800f808:	9b06      	ldr	r3, [sp, #24]
 800f80a:	2b02      	cmp	r3, #2
 800f80c:	dd34      	ble.n	800f878 <_dtoa_r+0x898>
 800f80e:	46ca      	mov	sl, r9
 800f810:	f1ba 0f00 	cmp.w	sl, #0
 800f814:	d10d      	bne.n	800f832 <_dtoa_r+0x852>
 800f816:	4621      	mov	r1, r4
 800f818:	4653      	mov	r3, sl
 800f81a:	2205      	movs	r2, #5
 800f81c:	4630      	mov	r0, r6
 800f81e:	f000 fd4b 	bl	80102b8 <__multadd>
 800f822:	4601      	mov	r1, r0
 800f824:	4604      	mov	r4, r0
 800f826:	4628      	mov	r0, r5
 800f828:	f000 ffb0 	bl	801078c <__mcmp>
 800f82c:	2800      	cmp	r0, #0
 800f82e:	f73f adeb 	bgt.w	800f408 <_dtoa_r+0x428>
 800f832:	9b08      	ldr	r3, [sp, #32]
 800f834:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f838:	ea6f 0b03 	mvn.w	fp, r3
 800f83c:	f04f 0900 	mov.w	r9, #0
 800f840:	4621      	mov	r1, r4
 800f842:	4630      	mov	r0, r6
 800f844:	f000 fd16 	bl	8010274 <_Bfree>
 800f848:	2f00      	cmp	r7, #0
 800f84a:	f43f aea8 	beq.w	800f59e <_dtoa_r+0x5be>
 800f84e:	f1b9 0f00 	cmp.w	r9, #0
 800f852:	d005      	beq.n	800f860 <_dtoa_r+0x880>
 800f854:	45b9      	cmp	r9, r7
 800f856:	d003      	beq.n	800f860 <_dtoa_r+0x880>
 800f858:	4649      	mov	r1, r9
 800f85a:	4630      	mov	r0, r6
 800f85c:	f000 fd0a 	bl	8010274 <_Bfree>
 800f860:	4639      	mov	r1, r7
 800f862:	4630      	mov	r0, r6
 800f864:	f000 fd06 	bl	8010274 <_Bfree>
 800f868:	e699      	b.n	800f59e <_dtoa_r+0x5be>
 800f86a:	2400      	movs	r4, #0
 800f86c:	4627      	mov	r7, r4
 800f86e:	e7e0      	b.n	800f832 <_dtoa_r+0x852>
 800f870:	46bb      	mov	fp, r7
 800f872:	4604      	mov	r4, r0
 800f874:	4607      	mov	r7, r0
 800f876:	e5c7      	b.n	800f408 <_dtoa_r+0x428>
 800f878:	9b07      	ldr	r3, [sp, #28]
 800f87a:	46ca      	mov	sl, r9
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f000 8100 	beq.w	800fa82 <_dtoa_r+0xaa2>
 800f882:	f1b8 0f00 	cmp.w	r8, #0
 800f886:	dd05      	ble.n	800f894 <_dtoa_r+0x8b4>
 800f888:	4639      	mov	r1, r7
 800f88a:	4642      	mov	r2, r8
 800f88c:	4630      	mov	r0, r6
 800f88e:	f000 ff0d 	bl	80106ac <__lshift>
 800f892:	4607      	mov	r7, r0
 800f894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f896:	2b00      	cmp	r3, #0
 800f898:	d05d      	beq.n	800f956 <_dtoa_r+0x976>
 800f89a:	6879      	ldr	r1, [r7, #4]
 800f89c:	4630      	mov	r0, r6
 800f89e:	f000 fca9 	bl	80101f4 <_Balloc>
 800f8a2:	4680      	mov	r8, r0
 800f8a4:	b928      	cbnz	r0, 800f8b2 <_dtoa_r+0x8d2>
 800f8a6:	4b82      	ldr	r3, [pc, #520]	; (800fab0 <_dtoa_r+0xad0>)
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f8ae:	f7ff bbaf 	b.w	800f010 <_dtoa_r+0x30>
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	3202      	adds	r2, #2
 800f8b6:	0092      	lsls	r2, r2, #2
 800f8b8:	f107 010c 	add.w	r1, r7, #12
 800f8bc:	300c      	adds	r0, #12
 800f8be:	f000 fc8b 	bl	80101d8 <memcpy>
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	4641      	mov	r1, r8
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f000 fef0 	bl	80106ac <__lshift>
 800f8cc:	9b01      	ldr	r3, [sp, #4]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	9304      	str	r3, [sp, #16]
 800f8d2:	9b01      	ldr	r3, [sp, #4]
 800f8d4:	4453      	add	r3, sl
 800f8d6:	9308      	str	r3, [sp, #32]
 800f8d8:	9b02      	ldr	r3, [sp, #8]
 800f8da:	f003 0301 	and.w	r3, r3, #1
 800f8de:	46b9      	mov	r9, r7
 800f8e0:	9307      	str	r3, [sp, #28]
 800f8e2:	4607      	mov	r7, r0
 800f8e4:	9b04      	ldr	r3, [sp, #16]
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4628      	mov	r0, r5
 800f8ec:	9302      	str	r3, [sp, #8]
 800f8ee:	f7ff fae9 	bl	800eec4 <quorem>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	3330      	adds	r3, #48	; 0x30
 800f8f6:	9005      	str	r0, [sp, #20]
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f8fe:	f000 ff45 	bl	801078c <__mcmp>
 800f902:	463a      	mov	r2, r7
 800f904:	4682      	mov	sl, r0
 800f906:	4621      	mov	r1, r4
 800f908:	4630      	mov	r0, r6
 800f90a:	f000 ff5b 	bl	80107c4 <__mdiff>
 800f90e:	68c2      	ldr	r2, [r0, #12]
 800f910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f912:	4680      	mov	r8, r0
 800f914:	bb0a      	cbnz	r2, 800f95a <_dtoa_r+0x97a>
 800f916:	4601      	mov	r1, r0
 800f918:	4628      	mov	r0, r5
 800f91a:	f000 ff37 	bl	801078c <__mcmp>
 800f91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f920:	4602      	mov	r2, r0
 800f922:	4641      	mov	r1, r8
 800f924:	4630      	mov	r0, r6
 800f926:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800f92a:	f000 fca3 	bl	8010274 <_Bfree>
 800f92e:	9b06      	ldr	r3, [sp, #24]
 800f930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f932:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f936:	ea43 0102 	orr.w	r1, r3, r2
 800f93a:	9b07      	ldr	r3, [sp, #28]
 800f93c:	430b      	orrs	r3, r1
 800f93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f940:	d10d      	bne.n	800f95e <_dtoa_r+0x97e>
 800f942:	2b39      	cmp	r3, #57	; 0x39
 800f944:	d029      	beq.n	800f99a <_dtoa_r+0x9ba>
 800f946:	f1ba 0f00 	cmp.w	sl, #0
 800f94a:	dd01      	ble.n	800f950 <_dtoa_r+0x970>
 800f94c:	9b05      	ldr	r3, [sp, #20]
 800f94e:	3331      	adds	r3, #49	; 0x31
 800f950:	9a02      	ldr	r2, [sp, #8]
 800f952:	7013      	strb	r3, [r2, #0]
 800f954:	e774      	b.n	800f840 <_dtoa_r+0x860>
 800f956:	4638      	mov	r0, r7
 800f958:	e7b8      	b.n	800f8cc <_dtoa_r+0x8ec>
 800f95a:	2201      	movs	r2, #1
 800f95c:	e7e1      	b.n	800f922 <_dtoa_r+0x942>
 800f95e:	f1ba 0f00 	cmp.w	sl, #0
 800f962:	db06      	blt.n	800f972 <_dtoa_r+0x992>
 800f964:	9906      	ldr	r1, [sp, #24]
 800f966:	ea41 0a0a 	orr.w	sl, r1, sl
 800f96a:	9907      	ldr	r1, [sp, #28]
 800f96c:	ea5a 0101 	orrs.w	r1, sl, r1
 800f970:	d120      	bne.n	800f9b4 <_dtoa_r+0x9d4>
 800f972:	2a00      	cmp	r2, #0
 800f974:	ddec      	ble.n	800f950 <_dtoa_r+0x970>
 800f976:	4629      	mov	r1, r5
 800f978:	2201      	movs	r2, #1
 800f97a:	4630      	mov	r0, r6
 800f97c:	9304      	str	r3, [sp, #16]
 800f97e:	f000 fe95 	bl	80106ac <__lshift>
 800f982:	4621      	mov	r1, r4
 800f984:	4605      	mov	r5, r0
 800f986:	f000 ff01 	bl	801078c <__mcmp>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	9b04      	ldr	r3, [sp, #16]
 800f98e:	dc02      	bgt.n	800f996 <_dtoa_r+0x9b6>
 800f990:	d1de      	bne.n	800f950 <_dtoa_r+0x970>
 800f992:	07da      	lsls	r2, r3, #31
 800f994:	d5dc      	bpl.n	800f950 <_dtoa_r+0x970>
 800f996:	2b39      	cmp	r3, #57	; 0x39
 800f998:	d1d8      	bne.n	800f94c <_dtoa_r+0x96c>
 800f99a:	9a02      	ldr	r2, [sp, #8]
 800f99c:	2339      	movs	r3, #57	; 0x39
 800f99e:	7013      	strb	r3, [r2, #0]
 800f9a0:	4643      	mov	r3, r8
 800f9a2:	4698      	mov	r8, r3
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f9aa:	2a39      	cmp	r2, #57	; 0x39
 800f9ac:	d051      	beq.n	800fa52 <_dtoa_r+0xa72>
 800f9ae:	3201      	adds	r2, #1
 800f9b0:	701a      	strb	r2, [r3, #0]
 800f9b2:	e745      	b.n	800f840 <_dtoa_r+0x860>
 800f9b4:	2a00      	cmp	r2, #0
 800f9b6:	dd03      	ble.n	800f9c0 <_dtoa_r+0x9e0>
 800f9b8:	2b39      	cmp	r3, #57	; 0x39
 800f9ba:	d0ee      	beq.n	800f99a <_dtoa_r+0x9ba>
 800f9bc:	3301      	adds	r3, #1
 800f9be:	e7c7      	b.n	800f950 <_dtoa_r+0x970>
 800f9c0:	9a04      	ldr	r2, [sp, #16]
 800f9c2:	9908      	ldr	r1, [sp, #32]
 800f9c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f9c8:	428a      	cmp	r2, r1
 800f9ca:	d02b      	beq.n	800fa24 <_dtoa_r+0xa44>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	220a      	movs	r2, #10
 800f9d2:	4630      	mov	r0, r6
 800f9d4:	f000 fc70 	bl	80102b8 <__multadd>
 800f9d8:	45b9      	cmp	r9, r7
 800f9da:	4605      	mov	r5, r0
 800f9dc:	f04f 0300 	mov.w	r3, #0
 800f9e0:	f04f 020a 	mov.w	r2, #10
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	d107      	bne.n	800f9fa <_dtoa_r+0xa1a>
 800f9ea:	f000 fc65 	bl	80102b8 <__multadd>
 800f9ee:	4681      	mov	r9, r0
 800f9f0:	4607      	mov	r7, r0
 800f9f2:	9b04      	ldr	r3, [sp, #16]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	9304      	str	r3, [sp, #16]
 800f9f8:	e774      	b.n	800f8e4 <_dtoa_r+0x904>
 800f9fa:	f000 fc5d 	bl	80102b8 <__multadd>
 800f9fe:	4639      	mov	r1, r7
 800fa00:	4681      	mov	r9, r0
 800fa02:	2300      	movs	r3, #0
 800fa04:	220a      	movs	r2, #10
 800fa06:	4630      	mov	r0, r6
 800fa08:	f000 fc56 	bl	80102b8 <__multadd>
 800fa0c:	4607      	mov	r7, r0
 800fa0e:	e7f0      	b.n	800f9f2 <_dtoa_r+0xa12>
 800fa10:	f1ba 0f00 	cmp.w	sl, #0
 800fa14:	9a01      	ldr	r2, [sp, #4]
 800fa16:	bfcc      	ite	gt
 800fa18:	46d0      	movgt	r8, sl
 800fa1a:	f04f 0801 	movle.w	r8, #1
 800fa1e:	4490      	add	r8, r2
 800fa20:	f04f 0900 	mov.w	r9, #0
 800fa24:	4629      	mov	r1, r5
 800fa26:	2201      	movs	r2, #1
 800fa28:	4630      	mov	r0, r6
 800fa2a:	9302      	str	r3, [sp, #8]
 800fa2c:	f000 fe3e 	bl	80106ac <__lshift>
 800fa30:	4621      	mov	r1, r4
 800fa32:	4605      	mov	r5, r0
 800fa34:	f000 feaa 	bl	801078c <__mcmp>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	dcb1      	bgt.n	800f9a0 <_dtoa_r+0x9c0>
 800fa3c:	d102      	bne.n	800fa44 <_dtoa_r+0xa64>
 800fa3e:	9b02      	ldr	r3, [sp, #8]
 800fa40:	07db      	lsls	r3, r3, #31
 800fa42:	d4ad      	bmi.n	800f9a0 <_dtoa_r+0x9c0>
 800fa44:	4643      	mov	r3, r8
 800fa46:	4698      	mov	r8, r3
 800fa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa4c:	2a30      	cmp	r2, #48	; 0x30
 800fa4e:	d0fa      	beq.n	800fa46 <_dtoa_r+0xa66>
 800fa50:	e6f6      	b.n	800f840 <_dtoa_r+0x860>
 800fa52:	9a01      	ldr	r2, [sp, #4]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d1a4      	bne.n	800f9a2 <_dtoa_r+0x9c2>
 800fa58:	f10b 0b01 	add.w	fp, fp, #1
 800fa5c:	2331      	movs	r3, #49	; 0x31
 800fa5e:	e778      	b.n	800f952 <_dtoa_r+0x972>
 800fa60:	4b14      	ldr	r3, [pc, #80]	; (800fab4 <_dtoa_r+0xad4>)
 800fa62:	f7ff bb27 	b.w	800f0b4 <_dtoa_r+0xd4>
 800fa66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f47f ab03 	bne.w	800f074 <_dtoa_r+0x94>
 800fa6e:	4b12      	ldr	r3, [pc, #72]	; (800fab8 <_dtoa_r+0xad8>)
 800fa70:	f7ff bb20 	b.w	800f0b4 <_dtoa_r+0xd4>
 800fa74:	f1ba 0f00 	cmp.w	sl, #0
 800fa78:	dc03      	bgt.n	800fa82 <_dtoa_r+0xaa2>
 800fa7a:	9b06      	ldr	r3, [sp, #24]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	f73f aec7 	bgt.w	800f810 <_dtoa_r+0x830>
 800fa82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa86:	4621      	mov	r1, r4
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f7ff fa1b 	bl	800eec4 <quorem>
 800fa8e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fa92:	f808 3b01 	strb.w	r3, [r8], #1
 800fa96:	9a01      	ldr	r2, [sp, #4]
 800fa98:	eba8 0202 	sub.w	r2, r8, r2
 800fa9c:	4592      	cmp	sl, r2
 800fa9e:	ddb7      	ble.n	800fa10 <_dtoa_r+0xa30>
 800faa0:	4629      	mov	r1, r5
 800faa2:	2300      	movs	r3, #0
 800faa4:	220a      	movs	r2, #10
 800faa6:	4630      	mov	r0, r6
 800faa8:	f000 fc06 	bl	80102b8 <__multadd>
 800faac:	4605      	mov	r5, r0
 800faae:	e7ea      	b.n	800fa86 <_dtoa_r+0xaa6>
 800fab0:	08011a27 	.word	0x08011a27
 800fab4:	08011930 	.word	0x08011930
 800fab8:	080119a8 	.word	0x080119a8

0800fabc <rshift>:
 800fabc:	6903      	ldr	r3, [r0, #16]
 800fabe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fac2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fac6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800faca:	f100 0414 	add.w	r4, r0, #20
 800face:	dd45      	ble.n	800fb5c <rshift+0xa0>
 800fad0:	f011 011f 	ands.w	r1, r1, #31
 800fad4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fad8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fadc:	d10c      	bne.n	800faf8 <rshift+0x3c>
 800fade:	f100 0710 	add.w	r7, r0, #16
 800fae2:	4629      	mov	r1, r5
 800fae4:	42b1      	cmp	r1, r6
 800fae6:	d334      	bcc.n	800fb52 <rshift+0x96>
 800fae8:	1a9b      	subs	r3, r3, r2
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	1eea      	subs	r2, r5, #3
 800faee:	4296      	cmp	r6, r2
 800faf0:	bf38      	it	cc
 800faf2:	2300      	movcc	r3, #0
 800faf4:	4423      	add	r3, r4
 800faf6:	e015      	b.n	800fb24 <rshift+0x68>
 800faf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fafc:	f1c1 0820 	rsb	r8, r1, #32
 800fb00:	40cf      	lsrs	r7, r1
 800fb02:	f105 0e04 	add.w	lr, r5, #4
 800fb06:	46a1      	mov	r9, r4
 800fb08:	4576      	cmp	r6, lr
 800fb0a:	46f4      	mov	ip, lr
 800fb0c:	d815      	bhi.n	800fb3a <rshift+0x7e>
 800fb0e:	1a9a      	subs	r2, r3, r2
 800fb10:	0092      	lsls	r2, r2, #2
 800fb12:	3a04      	subs	r2, #4
 800fb14:	3501      	adds	r5, #1
 800fb16:	42ae      	cmp	r6, r5
 800fb18:	bf38      	it	cc
 800fb1a:	2200      	movcc	r2, #0
 800fb1c:	18a3      	adds	r3, r4, r2
 800fb1e:	50a7      	str	r7, [r4, r2]
 800fb20:	b107      	cbz	r7, 800fb24 <rshift+0x68>
 800fb22:	3304      	adds	r3, #4
 800fb24:	1b1a      	subs	r2, r3, r4
 800fb26:	42a3      	cmp	r3, r4
 800fb28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb2c:	bf08      	it	eq
 800fb2e:	2300      	moveq	r3, #0
 800fb30:	6102      	str	r2, [r0, #16]
 800fb32:	bf08      	it	eq
 800fb34:	6143      	streq	r3, [r0, #20]
 800fb36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb3a:	f8dc c000 	ldr.w	ip, [ip]
 800fb3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb42:	ea4c 0707 	orr.w	r7, ip, r7
 800fb46:	f849 7b04 	str.w	r7, [r9], #4
 800fb4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb4e:	40cf      	lsrs	r7, r1
 800fb50:	e7da      	b.n	800fb08 <rshift+0x4c>
 800fb52:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb56:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb5a:	e7c3      	b.n	800fae4 <rshift+0x28>
 800fb5c:	4623      	mov	r3, r4
 800fb5e:	e7e1      	b.n	800fb24 <rshift+0x68>

0800fb60 <__hexdig_fun>:
 800fb60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fb64:	2b09      	cmp	r3, #9
 800fb66:	d802      	bhi.n	800fb6e <__hexdig_fun+0xe>
 800fb68:	3820      	subs	r0, #32
 800fb6a:	b2c0      	uxtb	r0, r0
 800fb6c:	4770      	bx	lr
 800fb6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fb72:	2b05      	cmp	r3, #5
 800fb74:	d801      	bhi.n	800fb7a <__hexdig_fun+0x1a>
 800fb76:	3847      	subs	r0, #71	; 0x47
 800fb78:	e7f7      	b.n	800fb6a <__hexdig_fun+0xa>
 800fb7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fb7e:	2b05      	cmp	r3, #5
 800fb80:	d801      	bhi.n	800fb86 <__hexdig_fun+0x26>
 800fb82:	3827      	subs	r0, #39	; 0x27
 800fb84:	e7f1      	b.n	800fb6a <__hexdig_fun+0xa>
 800fb86:	2000      	movs	r0, #0
 800fb88:	4770      	bx	lr
	...

0800fb8c <__gethex>:
 800fb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb90:	ed2d 8b02 	vpush	{d8}
 800fb94:	b089      	sub	sp, #36	; 0x24
 800fb96:	ee08 0a10 	vmov	s16, r0
 800fb9a:	9304      	str	r3, [sp, #16]
 800fb9c:	4bb4      	ldr	r3, [pc, #720]	; (800fe70 <__gethex+0x2e4>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	4618      	mov	r0, r3
 800fba4:	468b      	mov	fp, r1
 800fba6:	4690      	mov	r8, r2
 800fba8:	f7f0 fbb2 	bl	8000310 <strlen>
 800fbac:	9b01      	ldr	r3, [sp, #4]
 800fbae:	f8db 2000 	ldr.w	r2, [fp]
 800fbb2:	4403      	add	r3, r0
 800fbb4:	4682      	mov	sl, r0
 800fbb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fbba:	9305      	str	r3, [sp, #20]
 800fbbc:	1c93      	adds	r3, r2, #2
 800fbbe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fbc2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fbc6:	32fe      	adds	r2, #254	; 0xfe
 800fbc8:	18d1      	adds	r1, r2, r3
 800fbca:	461f      	mov	r7, r3
 800fbcc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbd0:	9100      	str	r1, [sp, #0]
 800fbd2:	2830      	cmp	r0, #48	; 0x30
 800fbd4:	d0f8      	beq.n	800fbc8 <__gethex+0x3c>
 800fbd6:	f7ff ffc3 	bl	800fb60 <__hexdig_fun>
 800fbda:	4604      	mov	r4, r0
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d13a      	bne.n	800fc56 <__gethex+0xca>
 800fbe0:	9901      	ldr	r1, [sp, #4]
 800fbe2:	4652      	mov	r2, sl
 800fbe4:	4638      	mov	r0, r7
 800fbe6:	f001 f8d3 	bl	8010d90 <strncmp>
 800fbea:	4605      	mov	r5, r0
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d168      	bne.n	800fcc2 <__gethex+0x136>
 800fbf0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fbf4:	eb07 060a 	add.w	r6, r7, sl
 800fbf8:	f7ff ffb2 	bl	800fb60 <__hexdig_fun>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	d062      	beq.n	800fcc6 <__gethex+0x13a>
 800fc00:	4633      	mov	r3, r6
 800fc02:	7818      	ldrb	r0, [r3, #0]
 800fc04:	2830      	cmp	r0, #48	; 0x30
 800fc06:	461f      	mov	r7, r3
 800fc08:	f103 0301 	add.w	r3, r3, #1
 800fc0c:	d0f9      	beq.n	800fc02 <__gethex+0x76>
 800fc0e:	f7ff ffa7 	bl	800fb60 <__hexdig_fun>
 800fc12:	2301      	movs	r3, #1
 800fc14:	fab0 f480 	clz	r4, r0
 800fc18:	0964      	lsrs	r4, r4, #5
 800fc1a:	4635      	mov	r5, r6
 800fc1c:	9300      	str	r3, [sp, #0]
 800fc1e:	463a      	mov	r2, r7
 800fc20:	4616      	mov	r6, r2
 800fc22:	3201      	adds	r2, #1
 800fc24:	7830      	ldrb	r0, [r6, #0]
 800fc26:	f7ff ff9b 	bl	800fb60 <__hexdig_fun>
 800fc2a:	2800      	cmp	r0, #0
 800fc2c:	d1f8      	bne.n	800fc20 <__gethex+0x94>
 800fc2e:	9901      	ldr	r1, [sp, #4]
 800fc30:	4652      	mov	r2, sl
 800fc32:	4630      	mov	r0, r6
 800fc34:	f001 f8ac 	bl	8010d90 <strncmp>
 800fc38:	b980      	cbnz	r0, 800fc5c <__gethex+0xd0>
 800fc3a:	b94d      	cbnz	r5, 800fc50 <__gethex+0xc4>
 800fc3c:	eb06 050a 	add.w	r5, r6, sl
 800fc40:	462a      	mov	r2, r5
 800fc42:	4616      	mov	r6, r2
 800fc44:	3201      	adds	r2, #1
 800fc46:	7830      	ldrb	r0, [r6, #0]
 800fc48:	f7ff ff8a 	bl	800fb60 <__hexdig_fun>
 800fc4c:	2800      	cmp	r0, #0
 800fc4e:	d1f8      	bne.n	800fc42 <__gethex+0xb6>
 800fc50:	1bad      	subs	r5, r5, r6
 800fc52:	00ad      	lsls	r5, r5, #2
 800fc54:	e004      	b.n	800fc60 <__gethex+0xd4>
 800fc56:	2400      	movs	r4, #0
 800fc58:	4625      	mov	r5, r4
 800fc5a:	e7e0      	b.n	800fc1e <__gethex+0x92>
 800fc5c:	2d00      	cmp	r5, #0
 800fc5e:	d1f7      	bne.n	800fc50 <__gethex+0xc4>
 800fc60:	7833      	ldrb	r3, [r6, #0]
 800fc62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc66:	2b50      	cmp	r3, #80	; 0x50
 800fc68:	d13b      	bne.n	800fce2 <__gethex+0x156>
 800fc6a:	7873      	ldrb	r3, [r6, #1]
 800fc6c:	2b2b      	cmp	r3, #43	; 0x2b
 800fc6e:	d02c      	beq.n	800fcca <__gethex+0x13e>
 800fc70:	2b2d      	cmp	r3, #45	; 0x2d
 800fc72:	d02e      	beq.n	800fcd2 <__gethex+0x146>
 800fc74:	1c71      	adds	r1, r6, #1
 800fc76:	f04f 0900 	mov.w	r9, #0
 800fc7a:	7808      	ldrb	r0, [r1, #0]
 800fc7c:	f7ff ff70 	bl	800fb60 <__hexdig_fun>
 800fc80:	1e43      	subs	r3, r0, #1
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b18      	cmp	r3, #24
 800fc86:	d82c      	bhi.n	800fce2 <__gethex+0x156>
 800fc88:	f1a0 0210 	sub.w	r2, r0, #16
 800fc8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc90:	f7ff ff66 	bl	800fb60 <__hexdig_fun>
 800fc94:	1e43      	subs	r3, r0, #1
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	2b18      	cmp	r3, #24
 800fc9a:	d91d      	bls.n	800fcd8 <__gethex+0x14c>
 800fc9c:	f1b9 0f00 	cmp.w	r9, #0
 800fca0:	d000      	beq.n	800fca4 <__gethex+0x118>
 800fca2:	4252      	negs	r2, r2
 800fca4:	4415      	add	r5, r2
 800fca6:	f8cb 1000 	str.w	r1, [fp]
 800fcaa:	b1e4      	cbz	r4, 800fce6 <__gethex+0x15a>
 800fcac:	9b00      	ldr	r3, [sp, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	bf14      	ite	ne
 800fcb2:	2700      	movne	r7, #0
 800fcb4:	2706      	moveq	r7, #6
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	b009      	add	sp, #36	; 0x24
 800fcba:	ecbd 8b02 	vpop	{d8}
 800fcbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcc2:	463e      	mov	r6, r7
 800fcc4:	4625      	mov	r5, r4
 800fcc6:	2401      	movs	r4, #1
 800fcc8:	e7ca      	b.n	800fc60 <__gethex+0xd4>
 800fcca:	f04f 0900 	mov.w	r9, #0
 800fcce:	1cb1      	adds	r1, r6, #2
 800fcd0:	e7d3      	b.n	800fc7a <__gethex+0xee>
 800fcd2:	f04f 0901 	mov.w	r9, #1
 800fcd6:	e7fa      	b.n	800fcce <__gethex+0x142>
 800fcd8:	230a      	movs	r3, #10
 800fcda:	fb03 0202 	mla	r2, r3, r2, r0
 800fcde:	3a10      	subs	r2, #16
 800fce0:	e7d4      	b.n	800fc8c <__gethex+0x100>
 800fce2:	4631      	mov	r1, r6
 800fce4:	e7df      	b.n	800fca6 <__gethex+0x11a>
 800fce6:	1bf3      	subs	r3, r6, r7
 800fce8:	3b01      	subs	r3, #1
 800fcea:	4621      	mov	r1, r4
 800fcec:	2b07      	cmp	r3, #7
 800fcee:	dc0b      	bgt.n	800fd08 <__gethex+0x17c>
 800fcf0:	ee18 0a10 	vmov	r0, s16
 800fcf4:	f000 fa7e 	bl	80101f4 <_Balloc>
 800fcf8:	4604      	mov	r4, r0
 800fcfa:	b940      	cbnz	r0, 800fd0e <__gethex+0x182>
 800fcfc:	4b5d      	ldr	r3, [pc, #372]	; (800fe74 <__gethex+0x2e8>)
 800fcfe:	4602      	mov	r2, r0
 800fd00:	21de      	movs	r1, #222	; 0xde
 800fd02:	485d      	ldr	r0, [pc, #372]	; (800fe78 <__gethex+0x2ec>)
 800fd04:	f001 f866 	bl	8010dd4 <__assert_func>
 800fd08:	3101      	adds	r1, #1
 800fd0a:	105b      	asrs	r3, r3, #1
 800fd0c:	e7ee      	b.n	800fcec <__gethex+0x160>
 800fd0e:	f100 0914 	add.w	r9, r0, #20
 800fd12:	f04f 0b00 	mov.w	fp, #0
 800fd16:	f1ca 0301 	rsb	r3, sl, #1
 800fd1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd1e:	f8cd b000 	str.w	fp, [sp]
 800fd22:	9306      	str	r3, [sp, #24]
 800fd24:	42b7      	cmp	r7, r6
 800fd26:	d340      	bcc.n	800fdaa <__gethex+0x21e>
 800fd28:	9802      	ldr	r0, [sp, #8]
 800fd2a:	9b00      	ldr	r3, [sp, #0]
 800fd2c:	f840 3b04 	str.w	r3, [r0], #4
 800fd30:	eba0 0009 	sub.w	r0, r0, r9
 800fd34:	1080      	asrs	r0, r0, #2
 800fd36:	0146      	lsls	r6, r0, #5
 800fd38:	6120      	str	r0, [r4, #16]
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f000 fb4c 	bl	80103d8 <__hi0bits>
 800fd40:	1a30      	subs	r0, r6, r0
 800fd42:	f8d8 6000 	ldr.w	r6, [r8]
 800fd46:	42b0      	cmp	r0, r6
 800fd48:	dd63      	ble.n	800fe12 <__gethex+0x286>
 800fd4a:	1b87      	subs	r7, r0, r6
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 feed 	bl	8010b2e <__any_on>
 800fd54:	4682      	mov	sl, r0
 800fd56:	b1a8      	cbz	r0, 800fd84 <__gethex+0x1f8>
 800fd58:	1e7b      	subs	r3, r7, #1
 800fd5a:	1159      	asrs	r1, r3, #5
 800fd5c:	f003 021f 	and.w	r2, r3, #31
 800fd60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fd64:	f04f 0a01 	mov.w	sl, #1
 800fd68:	fa0a f202 	lsl.w	r2, sl, r2
 800fd6c:	420a      	tst	r2, r1
 800fd6e:	d009      	beq.n	800fd84 <__gethex+0x1f8>
 800fd70:	4553      	cmp	r3, sl
 800fd72:	dd05      	ble.n	800fd80 <__gethex+0x1f4>
 800fd74:	1eb9      	subs	r1, r7, #2
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 fed9 	bl	8010b2e <__any_on>
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d145      	bne.n	800fe0c <__gethex+0x280>
 800fd80:	f04f 0a02 	mov.w	sl, #2
 800fd84:	4639      	mov	r1, r7
 800fd86:	4620      	mov	r0, r4
 800fd88:	f7ff fe98 	bl	800fabc <rshift>
 800fd8c:	443d      	add	r5, r7
 800fd8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd92:	42ab      	cmp	r3, r5
 800fd94:	da4c      	bge.n	800fe30 <__gethex+0x2a4>
 800fd96:	ee18 0a10 	vmov	r0, s16
 800fd9a:	4621      	mov	r1, r4
 800fd9c:	f000 fa6a 	bl	8010274 <_Bfree>
 800fda0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fda2:	2300      	movs	r3, #0
 800fda4:	6013      	str	r3, [r2, #0]
 800fda6:	27a3      	movs	r7, #163	; 0xa3
 800fda8:	e785      	b.n	800fcb6 <__gethex+0x12a>
 800fdaa:	1e73      	subs	r3, r6, #1
 800fdac:	9a05      	ldr	r2, [sp, #20]
 800fdae:	9303      	str	r3, [sp, #12]
 800fdb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	d019      	beq.n	800fdec <__gethex+0x260>
 800fdb8:	f1bb 0f20 	cmp.w	fp, #32
 800fdbc:	d107      	bne.n	800fdce <__gethex+0x242>
 800fdbe:	9b02      	ldr	r3, [sp, #8]
 800fdc0:	9a00      	ldr	r2, [sp, #0]
 800fdc2:	f843 2b04 	str.w	r2, [r3], #4
 800fdc6:	9302      	str	r3, [sp, #8]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	469b      	mov	fp, r3
 800fdce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fdd2:	f7ff fec5 	bl	800fb60 <__hexdig_fun>
 800fdd6:	9b00      	ldr	r3, [sp, #0]
 800fdd8:	f000 000f 	and.w	r0, r0, #15
 800fddc:	fa00 f00b 	lsl.w	r0, r0, fp
 800fde0:	4303      	orrs	r3, r0
 800fde2:	9300      	str	r3, [sp, #0]
 800fde4:	f10b 0b04 	add.w	fp, fp, #4
 800fde8:	9b03      	ldr	r3, [sp, #12]
 800fdea:	e00d      	b.n	800fe08 <__gethex+0x27c>
 800fdec:	9b03      	ldr	r3, [sp, #12]
 800fdee:	9a06      	ldr	r2, [sp, #24]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	42bb      	cmp	r3, r7
 800fdf4:	d3e0      	bcc.n	800fdb8 <__gethex+0x22c>
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	9901      	ldr	r1, [sp, #4]
 800fdfa:	9307      	str	r3, [sp, #28]
 800fdfc:	4652      	mov	r2, sl
 800fdfe:	f000 ffc7 	bl	8010d90 <strncmp>
 800fe02:	9b07      	ldr	r3, [sp, #28]
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d1d7      	bne.n	800fdb8 <__gethex+0x22c>
 800fe08:	461e      	mov	r6, r3
 800fe0a:	e78b      	b.n	800fd24 <__gethex+0x198>
 800fe0c:	f04f 0a03 	mov.w	sl, #3
 800fe10:	e7b8      	b.n	800fd84 <__gethex+0x1f8>
 800fe12:	da0a      	bge.n	800fe2a <__gethex+0x29e>
 800fe14:	1a37      	subs	r7, r6, r0
 800fe16:	4621      	mov	r1, r4
 800fe18:	ee18 0a10 	vmov	r0, s16
 800fe1c:	463a      	mov	r2, r7
 800fe1e:	f000 fc45 	bl	80106ac <__lshift>
 800fe22:	1bed      	subs	r5, r5, r7
 800fe24:	4604      	mov	r4, r0
 800fe26:	f100 0914 	add.w	r9, r0, #20
 800fe2a:	f04f 0a00 	mov.w	sl, #0
 800fe2e:	e7ae      	b.n	800fd8e <__gethex+0x202>
 800fe30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fe34:	42a8      	cmp	r0, r5
 800fe36:	dd72      	ble.n	800ff1e <__gethex+0x392>
 800fe38:	1b45      	subs	r5, r0, r5
 800fe3a:	42ae      	cmp	r6, r5
 800fe3c:	dc36      	bgt.n	800feac <__gethex+0x320>
 800fe3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d02a      	beq.n	800fe9c <__gethex+0x310>
 800fe46:	2b03      	cmp	r3, #3
 800fe48:	d02c      	beq.n	800fea4 <__gethex+0x318>
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d11c      	bne.n	800fe88 <__gethex+0x2fc>
 800fe4e:	42ae      	cmp	r6, r5
 800fe50:	d11a      	bne.n	800fe88 <__gethex+0x2fc>
 800fe52:	2e01      	cmp	r6, #1
 800fe54:	d112      	bne.n	800fe7c <__gethex+0x2f0>
 800fe56:	9a04      	ldr	r2, [sp, #16]
 800fe58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe5c:	6013      	str	r3, [r2, #0]
 800fe5e:	2301      	movs	r3, #1
 800fe60:	6123      	str	r3, [r4, #16]
 800fe62:	f8c9 3000 	str.w	r3, [r9]
 800fe66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe68:	2762      	movs	r7, #98	; 0x62
 800fe6a:	601c      	str	r4, [r3, #0]
 800fe6c:	e723      	b.n	800fcb6 <__gethex+0x12a>
 800fe6e:	bf00      	nop
 800fe70:	08011aa0 	.word	0x08011aa0
 800fe74:	08011a27 	.word	0x08011a27
 800fe78:	08011a38 	.word	0x08011a38
 800fe7c:	1e71      	subs	r1, r6, #1
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f000 fe55 	bl	8010b2e <__any_on>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	d1e6      	bne.n	800fe56 <__gethex+0x2ca>
 800fe88:	ee18 0a10 	vmov	r0, s16
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	f000 f9f1 	bl	8010274 <_Bfree>
 800fe92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe94:	2300      	movs	r3, #0
 800fe96:	6013      	str	r3, [r2, #0]
 800fe98:	2750      	movs	r7, #80	; 0x50
 800fe9a:	e70c      	b.n	800fcb6 <__gethex+0x12a>
 800fe9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d1f2      	bne.n	800fe88 <__gethex+0x2fc>
 800fea2:	e7d8      	b.n	800fe56 <__gethex+0x2ca>
 800fea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d1d5      	bne.n	800fe56 <__gethex+0x2ca>
 800feaa:	e7ed      	b.n	800fe88 <__gethex+0x2fc>
 800feac:	1e6f      	subs	r7, r5, #1
 800feae:	f1ba 0f00 	cmp.w	sl, #0
 800feb2:	d131      	bne.n	800ff18 <__gethex+0x38c>
 800feb4:	b127      	cbz	r7, 800fec0 <__gethex+0x334>
 800feb6:	4639      	mov	r1, r7
 800feb8:	4620      	mov	r0, r4
 800feba:	f000 fe38 	bl	8010b2e <__any_on>
 800febe:	4682      	mov	sl, r0
 800fec0:	117b      	asrs	r3, r7, #5
 800fec2:	2101      	movs	r1, #1
 800fec4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fec8:	f007 071f 	and.w	r7, r7, #31
 800fecc:	fa01 f707 	lsl.w	r7, r1, r7
 800fed0:	421f      	tst	r7, r3
 800fed2:	4629      	mov	r1, r5
 800fed4:	4620      	mov	r0, r4
 800fed6:	bf18      	it	ne
 800fed8:	f04a 0a02 	orrne.w	sl, sl, #2
 800fedc:	1b76      	subs	r6, r6, r5
 800fede:	f7ff fded 	bl	800fabc <rshift>
 800fee2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fee6:	2702      	movs	r7, #2
 800fee8:	f1ba 0f00 	cmp.w	sl, #0
 800feec:	d048      	beq.n	800ff80 <__gethex+0x3f4>
 800feee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fef2:	2b02      	cmp	r3, #2
 800fef4:	d015      	beq.n	800ff22 <__gethex+0x396>
 800fef6:	2b03      	cmp	r3, #3
 800fef8:	d017      	beq.n	800ff2a <__gethex+0x39e>
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d109      	bne.n	800ff12 <__gethex+0x386>
 800fefe:	f01a 0f02 	tst.w	sl, #2
 800ff02:	d006      	beq.n	800ff12 <__gethex+0x386>
 800ff04:	f8d9 0000 	ldr.w	r0, [r9]
 800ff08:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff0c:	f01a 0f01 	tst.w	sl, #1
 800ff10:	d10e      	bne.n	800ff30 <__gethex+0x3a4>
 800ff12:	f047 0710 	orr.w	r7, r7, #16
 800ff16:	e033      	b.n	800ff80 <__gethex+0x3f4>
 800ff18:	f04f 0a01 	mov.w	sl, #1
 800ff1c:	e7d0      	b.n	800fec0 <__gethex+0x334>
 800ff1e:	2701      	movs	r7, #1
 800ff20:	e7e2      	b.n	800fee8 <__gethex+0x35c>
 800ff22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff24:	f1c3 0301 	rsb	r3, r3, #1
 800ff28:	9315      	str	r3, [sp, #84]	; 0x54
 800ff2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d0f0      	beq.n	800ff12 <__gethex+0x386>
 800ff30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff34:	f104 0314 	add.w	r3, r4, #20
 800ff38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff40:	f04f 0c00 	mov.w	ip, #0
 800ff44:	4618      	mov	r0, r3
 800ff46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff4e:	d01c      	beq.n	800ff8a <__gethex+0x3fe>
 800ff50:	3201      	adds	r2, #1
 800ff52:	6002      	str	r2, [r0, #0]
 800ff54:	2f02      	cmp	r7, #2
 800ff56:	f104 0314 	add.w	r3, r4, #20
 800ff5a:	d13f      	bne.n	800ffdc <__gethex+0x450>
 800ff5c:	f8d8 2000 	ldr.w	r2, [r8]
 800ff60:	3a01      	subs	r2, #1
 800ff62:	42b2      	cmp	r2, r6
 800ff64:	d10a      	bne.n	800ff7c <__gethex+0x3f0>
 800ff66:	1171      	asrs	r1, r6, #5
 800ff68:	2201      	movs	r2, #1
 800ff6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff6e:	f006 061f 	and.w	r6, r6, #31
 800ff72:	fa02 f606 	lsl.w	r6, r2, r6
 800ff76:	421e      	tst	r6, r3
 800ff78:	bf18      	it	ne
 800ff7a:	4617      	movne	r7, r2
 800ff7c:	f047 0720 	orr.w	r7, r7, #32
 800ff80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff82:	601c      	str	r4, [r3, #0]
 800ff84:	9b04      	ldr	r3, [sp, #16]
 800ff86:	601d      	str	r5, [r3, #0]
 800ff88:	e695      	b.n	800fcb6 <__gethex+0x12a>
 800ff8a:	4299      	cmp	r1, r3
 800ff8c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff90:	d8d8      	bhi.n	800ff44 <__gethex+0x3b8>
 800ff92:	68a3      	ldr	r3, [r4, #8]
 800ff94:	459b      	cmp	fp, r3
 800ff96:	db19      	blt.n	800ffcc <__gethex+0x440>
 800ff98:	6861      	ldr	r1, [r4, #4]
 800ff9a:	ee18 0a10 	vmov	r0, s16
 800ff9e:	3101      	adds	r1, #1
 800ffa0:	f000 f928 	bl	80101f4 <_Balloc>
 800ffa4:	4681      	mov	r9, r0
 800ffa6:	b918      	cbnz	r0, 800ffb0 <__gethex+0x424>
 800ffa8:	4b1a      	ldr	r3, [pc, #104]	; (8010014 <__gethex+0x488>)
 800ffaa:	4602      	mov	r2, r0
 800ffac:	2184      	movs	r1, #132	; 0x84
 800ffae:	e6a8      	b.n	800fd02 <__gethex+0x176>
 800ffb0:	6922      	ldr	r2, [r4, #16]
 800ffb2:	3202      	adds	r2, #2
 800ffb4:	f104 010c 	add.w	r1, r4, #12
 800ffb8:	0092      	lsls	r2, r2, #2
 800ffba:	300c      	adds	r0, #12
 800ffbc:	f000 f90c 	bl	80101d8 <memcpy>
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	ee18 0a10 	vmov	r0, s16
 800ffc6:	f000 f955 	bl	8010274 <_Bfree>
 800ffca:	464c      	mov	r4, r9
 800ffcc:	6923      	ldr	r3, [r4, #16]
 800ffce:	1c5a      	adds	r2, r3, #1
 800ffd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffd4:	6122      	str	r2, [r4, #16]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	615a      	str	r2, [r3, #20]
 800ffda:	e7bb      	b.n	800ff54 <__gethex+0x3c8>
 800ffdc:	6922      	ldr	r2, [r4, #16]
 800ffde:	455a      	cmp	r2, fp
 800ffe0:	dd0b      	ble.n	800fffa <__gethex+0x46e>
 800ffe2:	2101      	movs	r1, #1
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f7ff fd69 	bl	800fabc <rshift>
 800ffea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffee:	3501      	adds	r5, #1
 800fff0:	42ab      	cmp	r3, r5
 800fff2:	f6ff aed0 	blt.w	800fd96 <__gethex+0x20a>
 800fff6:	2701      	movs	r7, #1
 800fff8:	e7c0      	b.n	800ff7c <__gethex+0x3f0>
 800fffa:	f016 061f 	ands.w	r6, r6, #31
 800fffe:	d0fa      	beq.n	800fff6 <__gethex+0x46a>
 8010000:	4453      	add	r3, sl
 8010002:	f1c6 0620 	rsb	r6, r6, #32
 8010006:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801000a:	f000 f9e5 	bl	80103d8 <__hi0bits>
 801000e:	42b0      	cmp	r0, r6
 8010010:	dbe7      	blt.n	800ffe2 <__gethex+0x456>
 8010012:	e7f0      	b.n	800fff6 <__gethex+0x46a>
 8010014:	08011a27 	.word	0x08011a27

08010018 <L_shift>:
 8010018:	f1c2 0208 	rsb	r2, r2, #8
 801001c:	0092      	lsls	r2, r2, #2
 801001e:	b570      	push	{r4, r5, r6, lr}
 8010020:	f1c2 0620 	rsb	r6, r2, #32
 8010024:	6843      	ldr	r3, [r0, #4]
 8010026:	6804      	ldr	r4, [r0, #0]
 8010028:	fa03 f506 	lsl.w	r5, r3, r6
 801002c:	432c      	orrs	r4, r5
 801002e:	40d3      	lsrs	r3, r2
 8010030:	6004      	str	r4, [r0, #0]
 8010032:	f840 3f04 	str.w	r3, [r0, #4]!
 8010036:	4288      	cmp	r0, r1
 8010038:	d3f4      	bcc.n	8010024 <L_shift+0xc>
 801003a:	bd70      	pop	{r4, r5, r6, pc}

0801003c <__match>:
 801003c:	b530      	push	{r4, r5, lr}
 801003e:	6803      	ldr	r3, [r0, #0]
 8010040:	3301      	adds	r3, #1
 8010042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010046:	b914      	cbnz	r4, 801004e <__match+0x12>
 8010048:	6003      	str	r3, [r0, #0]
 801004a:	2001      	movs	r0, #1
 801004c:	bd30      	pop	{r4, r5, pc}
 801004e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010052:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010056:	2d19      	cmp	r5, #25
 8010058:	bf98      	it	ls
 801005a:	3220      	addls	r2, #32
 801005c:	42a2      	cmp	r2, r4
 801005e:	d0f0      	beq.n	8010042 <__match+0x6>
 8010060:	2000      	movs	r0, #0
 8010062:	e7f3      	b.n	801004c <__match+0x10>

08010064 <__hexnan>:
 8010064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010068:	680b      	ldr	r3, [r1, #0]
 801006a:	115e      	asrs	r6, r3, #5
 801006c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010070:	f013 031f 	ands.w	r3, r3, #31
 8010074:	b087      	sub	sp, #28
 8010076:	bf18      	it	ne
 8010078:	3604      	addne	r6, #4
 801007a:	2500      	movs	r5, #0
 801007c:	1f37      	subs	r7, r6, #4
 801007e:	4690      	mov	r8, r2
 8010080:	6802      	ldr	r2, [r0, #0]
 8010082:	9301      	str	r3, [sp, #4]
 8010084:	4682      	mov	sl, r0
 8010086:	f846 5c04 	str.w	r5, [r6, #-4]
 801008a:	46b9      	mov	r9, r7
 801008c:	463c      	mov	r4, r7
 801008e:	9502      	str	r5, [sp, #8]
 8010090:	46ab      	mov	fp, r5
 8010092:	7851      	ldrb	r1, [r2, #1]
 8010094:	1c53      	adds	r3, r2, #1
 8010096:	9303      	str	r3, [sp, #12]
 8010098:	b341      	cbz	r1, 80100ec <__hexnan+0x88>
 801009a:	4608      	mov	r0, r1
 801009c:	9205      	str	r2, [sp, #20]
 801009e:	9104      	str	r1, [sp, #16]
 80100a0:	f7ff fd5e 	bl	800fb60 <__hexdig_fun>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d14f      	bne.n	8010148 <__hexnan+0xe4>
 80100a8:	9904      	ldr	r1, [sp, #16]
 80100aa:	9a05      	ldr	r2, [sp, #20]
 80100ac:	2920      	cmp	r1, #32
 80100ae:	d818      	bhi.n	80100e2 <__hexnan+0x7e>
 80100b0:	9b02      	ldr	r3, [sp, #8]
 80100b2:	459b      	cmp	fp, r3
 80100b4:	dd13      	ble.n	80100de <__hexnan+0x7a>
 80100b6:	454c      	cmp	r4, r9
 80100b8:	d206      	bcs.n	80100c8 <__hexnan+0x64>
 80100ba:	2d07      	cmp	r5, #7
 80100bc:	dc04      	bgt.n	80100c8 <__hexnan+0x64>
 80100be:	462a      	mov	r2, r5
 80100c0:	4649      	mov	r1, r9
 80100c2:	4620      	mov	r0, r4
 80100c4:	f7ff ffa8 	bl	8010018 <L_shift>
 80100c8:	4544      	cmp	r4, r8
 80100ca:	d950      	bls.n	801016e <__hexnan+0x10a>
 80100cc:	2300      	movs	r3, #0
 80100ce:	f1a4 0904 	sub.w	r9, r4, #4
 80100d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80100d6:	f8cd b008 	str.w	fp, [sp, #8]
 80100da:	464c      	mov	r4, r9
 80100dc:	461d      	mov	r5, r3
 80100de:	9a03      	ldr	r2, [sp, #12]
 80100e0:	e7d7      	b.n	8010092 <__hexnan+0x2e>
 80100e2:	2929      	cmp	r1, #41	; 0x29
 80100e4:	d156      	bne.n	8010194 <__hexnan+0x130>
 80100e6:	3202      	adds	r2, #2
 80100e8:	f8ca 2000 	str.w	r2, [sl]
 80100ec:	f1bb 0f00 	cmp.w	fp, #0
 80100f0:	d050      	beq.n	8010194 <__hexnan+0x130>
 80100f2:	454c      	cmp	r4, r9
 80100f4:	d206      	bcs.n	8010104 <__hexnan+0xa0>
 80100f6:	2d07      	cmp	r5, #7
 80100f8:	dc04      	bgt.n	8010104 <__hexnan+0xa0>
 80100fa:	462a      	mov	r2, r5
 80100fc:	4649      	mov	r1, r9
 80100fe:	4620      	mov	r0, r4
 8010100:	f7ff ff8a 	bl	8010018 <L_shift>
 8010104:	4544      	cmp	r4, r8
 8010106:	d934      	bls.n	8010172 <__hexnan+0x10e>
 8010108:	f1a8 0204 	sub.w	r2, r8, #4
 801010c:	4623      	mov	r3, r4
 801010e:	f853 1b04 	ldr.w	r1, [r3], #4
 8010112:	f842 1f04 	str.w	r1, [r2, #4]!
 8010116:	429f      	cmp	r7, r3
 8010118:	d2f9      	bcs.n	801010e <__hexnan+0xaa>
 801011a:	1b3b      	subs	r3, r7, r4
 801011c:	f023 0303 	bic.w	r3, r3, #3
 8010120:	3304      	adds	r3, #4
 8010122:	3401      	adds	r4, #1
 8010124:	3e03      	subs	r6, #3
 8010126:	42b4      	cmp	r4, r6
 8010128:	bf88      	it	hi
 801012a:	2304      	movhi	r3, #4
 801012c:	4443      	add	r3, r8
 801012e:	2200      	movs	r2, #0
 8010130:	f843 2b04 	str.w	r2, [r3], #4
 8010134:	429f      	cmp	r7, r3
 8010136:	d2fb      	bcs.n	8010130 <__hexnan+0xcc>
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	b91b      	cbnz	r3, 8010144 <__hexnan+0xe0>
 801013c:	4547      	cmp	r7, r8
 801013e:	d127      	bne.n	8010190 <__hexnan+0x12c>
 8010140:	2301      	movs	r3, #1
 8010142:	603b      	str	r3, [r7, #0]
 8010144:	2005      	movs	r0, #5
 8010146:	e026      	b.n	8010196 <__hexnan+0x132>
 8010148:	3501      	adds	r5, #1
 801014a:	2d08      	cmp	r5, #8
 801014c:	f10b 0b01 	add.w	fp, fp, #1
 8010150:	dd06      	ble.n	8010160 <__hexnan+0xfc>
 8010152:	4544      	cmp	r4, r8
 8010154:	d9c3      	bls.n	80100de <__hexnan+0x7a>
 8010156:	2300      	movs	r3, #0
 8010158:	f844 3c04 	str.w	r3, [r4, #-4]
 801015c:	2501      	movs	r5, #1
 801015e:	3c04      	subs	r4, #4
 8010160:	6822      	ldr	r2, [r4, #0]
 8010162:	f000 000f 	and.w	r0, r0, #15
 8010166:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801016a:	6022      	str	r2, [r4, #0]
 801016c:	e7b7      	b.n	80100de <__hexnan+0x7a>
 801016e:	2508      	movs	r5, #8
 8010170:	e7b5      	b.n	80100de <__hexnan+0x7a>
 8010172:	9b01      	ldr	r3, [sp, #4]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d0df      	beq.n	8010138 <__hexnan+0xd4>
 8010178:	f04f 32ff 	mov.w	r2, #4294967295
 801017c:	f1c3 0320 	rsb	r3, r3, #32
 8010180:	fa22 f303 	lsr.w	r3, r2, r3
 8010184:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010188:	401a      	ands	r2, r3
 801018a:	f846 2c04 	str.w	r2, [r6, #-4]
 801018e:	e7d3      	b.n	8010138 <__hexnan+0xd4>
 8010190:	3f04      	subs	r7, #4
 8010192:	e7d1      	b.n	8010138 <__hexnan+0xd4>
 8010194:	2004      	movs	r0, #4
 8010196:	b007      	add	sp, #28
 8010198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801019c <_localeconv_r>:
 801019c:	4800      	ldr	r0, [pc, #0]	; (80101a0 <_localeconv_r+0x4>)
 801019e:	4770      	bx	lr
 80101a0:	24000474 	.word	0x24000474

080101a4 <malloc>:
 80101a4:	4b02      	ldr	r3, [pc, #8]	; (80101b0 <malloc+0xc>)
 80101a6:	4601      	mov	r1, r0
 80101a8:	6818      	ldr	r0, [r3, #0]
 80101aa:	f000 bd63 	b.w	8010c74 <_malloc_r>
 80101ae:	bf00      	nop
 80101b0:	2400031c 	.word	0x2400031c

080101b4 <__ascii_mbtowc>:
 80101b4:	b082      	sub	sp, #8
 80101b6:	b901      	cbnz	r1, 80101ba <__ascii_mbtowc+0x6>
 80101b8:	a901      	add	r1, sp, #4
 80101ba:	b142      	cbz	r2, 80101ce <__ascii_mbtowc+0x1a>
 80101bc:	b14b      	cbz	r3, 80101d2 <__ascii_mbtowc+0x1e>
 80101be:	7813      	ldrb	r3, [r2, #0]
 80101c0:	600b      	str	r3, [r1, #0]
 80101c2:	7812      	ldrb	r2, [r2, #0]
 80101c4:	1e10      	subs	r0, r2, #0
 80101c6:	bf18      	it	ne
 80101c8:	2001      	movne	r0, #1
 80101ca:	b002      	add	sp, #8
 80101cc:	4770      	bx	lr
 80101ce:	4610      	mov	r0, r2
 80101d0:	e7fb      	b.n	80101ca <__ascii_mbtowc+0x16>
 80101d2:	f06f 0001 	mvn.w	r0, #1
 80101d6:	e7f8      	b.n	80101ca <__ascii_mbtowc+0x16>

080101d8 <memcpy>:
 80101d8:	440a      	add	r2, r1
 80101da:	4291      	cmp	r1, r2
 80101dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80101e0:	d100      	bne.n	80101e4 <memcpy+0xc>
 80101e2:	4770      	bx	lr
 80101e4:	b510      	push	{r4, lr}
 80101e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101ee:	4291      	cmp	r1, r2
 80101f0:	d1f9      	bne.n	80101e6 <memcpy+0xe>
 80101f2:	bd10      	pop	{r4, pc}

080101f4 <_Balloc>:
 80101f4:	b570      	push	{r4, r5, r6, lr}
 80101f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101f8:	4604      	mov	r4, r0
 80101fa:	460d      	mov	r5, r1
 80101fc:	b976      	cbnz	r6, 801021c <_Balloc+0x28>
 80101fe:	2010      	movs	r0, #16
 8010200:	f7ff ffd0 	bl	80101a4 <malloc>
 8010204:	4602      	mov	r2, r0
 8010206:	6260      	str	r0, [r4, #36]	; 0x24
 8010208:	b920      	cbnz	r0, 8010214 <_Balloc+0x20>
 801020a:	4b18      	ldr	r3, [pc, #96]	; (801026c <_Balloc+0x78>)
 801020c:	4818      	ldr	r0, [pc, #96]	; (8010270 <_Balloc+0x7c>)
 801020e:	2166      	movs	r1, #102	; 0x66
 8010210:	f000 fde0 	bl	8010dd4 <__assert_func>
 8010214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010218:	6006      	str	r6, [r0, #0]
 801021a:	60c6      	str	r6, [r0, #12]
 801021c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801021e:	68f3      	ldr	r3, [r6, #12]
 8010220:	b183      	cbz	r3, 8010244 <_Balloc+0x50>
 8010222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801022a:	b9b8      	cbnz	r0, 801025c <_Balloc+0x68>
 801022c:	2101      	movs	r1, #1
 801022e:	fa01 f605 	lsl.w	r6, r1, r5
 8010232:	1d72      	adds	r2, r6, #5
 8010234:	0092      	lsls	r2, r2, #2
 8010236:	4620      	mov	r0, r4
 8010238:	f000 fc9a 	bl	8010b70 <_calloc_r>
 801023c:	b160      	cbz	r0, 8010258 <_Balloc+0x64>
 801023e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010242:	e00e      	b.n	8010262 <_Balloc+0x6e>
 8010244:	2221      	movs	r2, #33	; 0x21
 8010246:	2104      	movs	r1, #4
 8010248:	4620      	mov	r0, r4
 801024a:	f000 fc91 	bl	8010b70 <_calloc_r>
 801024e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010250:	60f0      	str	r0, [r6, #12]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d1e4      	bne.n	8010222 <_Balloc+0x2e>
 8010258:	2000      	movs	r0, #0
 801025a:	bd70      	pop	{r4, r5, r6, pc}
 801025c:	6802      	ldr	r2, [r0, #0]
 801025e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010262:	2300      	movs	r3, #0
 8010264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010268:	e7f7      	b.n	801025a <_Balloc+0x66>
 801026a:	bf00      	nop
 801026c:	080119b5 	.word	0x080119b5
 8010270:	08011ab4 	.word	0x08011ab4

08010274 <_Bfree>:
 8010274:	b570      	push	{r4, r5, r6, lr}
 8010276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010278:	4605      	mov	r5, r0
 801027a:	460c      	mov	r4, r1
 801027c:	b976      	cbnz	r6, 801029c <_Bfree+0x28>
 801027e:	2010      	movs	r0, #16
 8010280:	f7ff ff90 	bl	80101a4 <malloc>
 8010284:	4602      	mov	r2, r0
 8010286:	6268      	str	r0, [r5, #36]	; 0x24
 8010288:	b920      	cbnz	r0, 8010294 <_Bfree+0x20>
 801028a:	4b09      	ldr	r3, [pc, #36]	; (80102b0 <_Bfree+0x3c>)
 801028c:	4809      	ldr	r0, [pc, #36]	; (80102b4 <_Bfree+0x40>)
 801028e:	218a      	movs	r1, #138	; 0x8a
 8010290:	f000 fda0 	bl	8010dd4 <__assert_func>
 8010294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010298:	6006      	str	r6, [r0, #0]
 801029a:	60c6      	str	r6, [r0, #12]
 801029c:	b13c      	cbz	r4, 80102ae <_Bfree+0x3a>
 801029e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80102a0:	6862      	ldr	r2, [r4, #4]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102a8:	6021      	str	r1, [r4, #0]
 80102aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80102ae:	bd70      	pop	{r4, r5, r6, pc}
 80102b0:	080119b5 	.word	0x080119b5
 80102b4:	08011ab4 	.word	0x08011ab4

080102b8 <__multadd>:
 80102b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102bc:	690d      	ldr	r5, [r1, #16]
 80102be:	4607      	mov	r7, r0
 80102c0:	460c      	mov	r4, r1
 80102c2:	461e      	mov	r6, r3
 80102c4:	f101 0c14 	add.w	ip, r1, #20
 80102c8:	2000      	movs	r0, #0
 80102ca:	f8dc 3000 	ldr.w	r3, [ip]
 80102ce:	b299      	uxth	r1, r3
 80102d0:	fb02 6101 	mla	r1, r2, r1, r6
 80102d4:	0c1e      	lsrs	r6, r3, #16
 80102d6:	0c0b      	lsrs	r3, r1, #16
 80102d8:	fb02 3306 	mla	r3, r2, r6, r3
 80102dc:	b289      	uxth	r1, r1
 80102de:	3001      	adds	r0, #1
 80102e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102e4:	4285      	cmp	r5, r0
 80102e6:	f84c 1b04 	str.w	r1, [ip], #4
 80102ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102ee:	dcec      	bgt.n	80102ca <__multadd+0x12>
 80102f0:	b30e      	cbz	r6, 8010336 <__multadd+0x7e>
 80102f2:	68a3      	ldr	r3, [r4, #8]
 80102f4:	42ab      	cmp	r3, r5
 80102f6:	dc19      	bgt.n	801032c <__multadd+0x74>
 80102f8:	6861      	ldr	r1, [r4, #4]
 80102fa:	4638      	mov	r0, r7
 80102fc:	3101      	adds	r1, #1
 80102fe:	f7ff ff79 	bl	80101f4 <_Balloc>
 8010302:	4680      	mov	r8, r0
 8010304:	b928      	cbnz	r0, 8010312 <__multadd+0x5a>
 8010306:	4602      	mov	r2, r0
 8010308:	4b0c      	ldr	r3, [pc, #48]	; (801033c <__multadd+0x84>)
 801030a:	480d      	ldr	r0, [pc, #52]	; (8010340 <__multadd+0x88>)
 801030c:	21b5      	movs	r1, #181	; 0xb5
 801030e:	f000 fd61 	bl	8010dd4 <__assert_func>
 8010312:	6922      	ldr	r2, [r4, #16]
 8010314:	3202      	adds	r2, #2
 8010316:	f104 010c 	add.w	r1, r4, #12
 801031a:	0092      	lsls	r2, r2, #2
 801031c:	300c      	adds	r0, #12
 801031e:	f7ff ff5b 	bl	80101d8 <memcpy>
 8010322:	4621      	mov	r1, r4
 8010324:	4638      	mov	r0, r7
 8010326:	f7ff ffa5 	bl	8010274 <_Bfree>
 801032a:	4644      	mov	r4, r8
 801032c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010330:	3501      	adds	r5, #1
 8010332:	615e      	str	r6, [r3, #20]
 8010334:	6125      	str	r5, [r4, #16]
 8010336:	4620      	mov	r0, r4
 8010338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801033c:	08011a27 	.word	0x08011a27
 8010340:	08011ab4 	.word	0x08011ab4

08010344 <__s2b>:
 8010344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010348:	460c      	mov	r4, r1
 801034a:	4615      	mov	r5, r2
 801034c:	461f      	mov	r7, r3
 801034e:	2209      	movs	r2, #9
 8010350:	3308      	adds	r3, #8
 8010352:	4606      	mov	r6, r0
 8010354:	fb93 f3f2 	sdiv	r3, r3, r2
 8010358:	2100      	movs	r1, #0
 801035a:	2201      	movs	r2, #1
 801035c:	429a      	cmp	r2, r3
 801035e:	db09      	blt.n	8010374 <__s2b+0x30>
 8010360:	4630      	mov	r0, r6
 8010362:	f7ff ff47 	bl	80101f4 <_Balloc>
 8010366:	b940      	cbnz	r0, 801037a <__s2b+0x36>
 8010368:	4602      	mov	r2, r0
 801036a:	4b19      	ldr	r3, [pc, #100]	; (80103d0 <__s2b+0x8c>)
 801036c:	4819      	ldr	r0, [pc, #100]	; (80103d4 <__s2b+0x90>)
 801036e:	21ce      	movs	r1, #206	; 0xce
 8010370:	f000 fd30 	bl	8010dd4 <__assert_func>
 8010374:	0052      	lsls	r2, r2, #1
 8010376:	3101      	adds	r1, #1
 8010378:	e7f0      	b.n	801035c <__s2b+0x18>
 801037a:	9b08      	ldr	r3, [sp, #32]
 801037c:	6143      	str	r3, [r0, #20]
 801037e:	2d09      	cmp	r5, #9
 8010380:	f04f 0301 	mov.w	r3, #1
 8010384:	6103      	str	r3, [r0, #16]
 8010386:	dd16      	ble.n	80103b6 <__s2b+0x72>
 8010388:	f104 0909 	add.w	r9, r4, #9
 801038c:	46c8      	mov	r8, r9
 801038e:	442c      	add	r4, r5
 8010390:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010394:	4601      	mov	r1, r0
 8010396:	3b30      	subs	r3, #48	; 0x30
 8010398:	220a      	movs	r2, #10
 801039a:	4630      	mov	r0, r6
 801039c:	f7ff ff8c 	bl	80102b8 <__multadd>
 80103a0:	45a0      	cmp	r8, r4
 80103a2:	d1f5      	bne.n	8010390 <__s2b+0x4c>
 80103a4:	f1a5 0408 	sub.w	r4, r5, #8
 80103a8:	444c      	add	r4, r9
 80103aa:	1b2d      	subs	r5, r5, r4
 80103ac:	1963      	adds	r3, r4, r5
 80103ae:	42bb      	cmp	r3, r7
 80103b0:	db04      	blt.n	80103bc <__s2b+0x78>
 80103b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b6:	340a      	adds	r4, #10
 80103b8:	2509      	movs	r5, #9
 80103ba:	e7f6      	b.n	80103aa <__s2b+0x66>
 80103bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80103c0:	4601      	mov	r1, r0
 80103c2:	3b30      	subs	r3, #48	; 0x30
 80103c4:	220a      	movs	r2, #10
 80103c6:	4630      	mov	r0, r6
 80103c8:	f7ff ff76 	bl	80102b8 <__multadd>
 80103cc:	e7ee      	b.n	80103ac <__s2b+0x68>
 80103ce:	bf00      	nop
 80103d0:	08011a27 	.word	0x08011a27
 80103d4:	08011ab4 	.word	0x08011ab4

080103d8 <__hi0bits>:
 80103d8:	0c03      	lsrs	r3, r0, #16
 80103da:	041b      	lsls	r3, r3, #16
 80103dc:	b9d3      	cbnz	r3, 8010414 <__hi0bits+0x3c>
 80103de:	0400      	lsls	r0, r0, #16
 80103e0:	2310      	movs	r3, #16
 80103e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80103e6:	bf04      	itt	eq
 80103e8:	0200      	lsleq	r0, r0, #8
 80103ea:	3308      	addeq	r3, #8
 80103ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80103f0:	bf04      	itt	eq
 80103f2:	0100      	lsleq	r0, r0, #4
 80103f4:	3304      	addeq	r3, #4
 80103f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80103fa:	bf04      	itt	eq
 80103fc:	0080      	lsleq	r0, r0, #2
 80103fe:	3302      	addeq	r3, #2
 8010400:	2800      	cmp	r0, #0
 8010402:	db05      	blt.n	8010410 <__hi0bits+0x38>
 8010404:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010408:	f103 0301 	add.w	r3, r3, #1
 801040c:	bf08      	it	eq
 801040e:	2320      	moveq	r3, #32
 8010410:	4618      	mov	r0, r3
 8010412:	4770      	bx	lr
 8010414:	2300      	movs	r3, #0
 8010416:	e7e4      	b.n	80103e2 <__hi0bits+0xa>

08010418 <__lo0bits>:
 8010418:	6803      	ldr	r3, [r0, #0]
 801041a:	f013 0207 	ands.w	r2, r3, #7
 801041e:	4601      	mov	r1, r0
 8010420:	d00b      	beq.n	801043a <__lo0bits+0x22>
 8010422:	07da      	lsls	r2, r3, #31
 8010424:	d423      	bmi.n	801046e <__lo0bits+0x56>
 8010426:	0798      	lsls	r0, r3, #30
 8010428:	bf49      	itett	mi
 801042a:	085b      	lsrmi	r3, r3, #1
 801042c:	089b      	lsrpl	r3, r3, #2
 801042e:	2001      	movmi	r0, #1
 8010430:	600b      	strmi	r3, [r1, #0]
 8010432:	bf5c      	itt	pl
 8010434:	600b      	strpl	r3, [r1, #0]
 8010436:	2002      	movpl	r0, #2
 8010438:	4770      	bx	lr
 801043a:	b298      	uxth	r0, r3
 801043c:	b9a8      	cbnz	r0, 801046a <__lo0bits+0x52>
 801043e:	0c1b      	lsrs	r3, r3, #16
 8010440:	2010      	movs	r0, #16
 8010442:	b2da      	uxtb	r2, r3
 8010444:	b90a      	cbnz	r2, 801044a <__lo0bits+0x32>
 8010446:	3008      	adds	r0, #8
 8010448:	0a1b      	lsrs	r3, r3, #8
 801044a:	071a      	lsls	r2, r3, #28
 801044c:	bf04      	itt	eq
 801044e:	091b      	lsreq	r3, r3, #4
 8010450:	3004      	addeq	r0, #4
 8010452:	079a      	lsls	r2, r3, #30
 8010454:	bf04      	itt	eq
 8010456:	089b      	lsreq	r3, r3, #2
 8010458:	3002      	addeq	r0, #2
 801045a:	07da      	lsls	r2, r3, #31
 801045c:	d403      	bmi.n	8010466 <__lo0bits+0x4e>
 801045e:	085b      	lsrs	r3, r3, #1
 8010460:	f100 0001 	add.w	r0, r0, #1
 8010464:	d005      	beq.n	8010472 <__lo0bits+0x5a>
 8010466:	600b      	str	r3, [r1, #0]
 8010468:	4770      	bx	lr
 801046a:	4610      	mov	r0, r2
 801046c:	e7e9      	b.n	8010442 <__lo0bits+0x2a>
 801046e:	2000      	movs	r0, #0
 8010470:	4770      	bx	lr
 8010472:	2020      	movs	r0, #32
 8010474:	4770      	bx	lr
	...

08010478 <__i2b>:
 8010478:	b510      	push	{r4, lr}
 801047a:	460c      	mov	r4, r1
 801047c:	2101      	movs	r1, #1
 801047e:	f7ff feb9 	bl	80101f4 <_Balloc>
 8010482:	4602      	mov	r2, r0
 8010484:	b928      	cbnz	r0, 8010492 <__i2b+0x1a>
 8010486:	4b05      	ldr	r3, [pc, #20]	; (801049c <__i2b+0x24>)
 8010488:	4805      	ldr	r0, [pc, #20]	; (80104a0 <__i2b+0x28>)
 801048a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801048e:	f000 fca1 	bl	8010dd4 <__assert_func>
 8010492:	2301      	movs	r3, #1
 8010494:	6144      	str	r4, [r0, #20]
 8010496:	6103      	str	r3, [r0, #16]
 8010498:	bd10      	pop	{r4, pc}
 801049a:	bf00      	nop
 801049c:	08011a27 	.word	0x08011a27
 80104a0:	08011ab4 	.word	0x08011ab4

080104a4 <__multiply>:
 80104a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104a8:	4691      	mov	r9, r2
 80104aa:	690a      	ldr	r2, [r1, #16]
 80104ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	bfb8      	it	lt
 80104b4:	460b      	movlt	r3, r1
 80104b6:	460c      	mov	r4, r1
 80104b8:	bfbc      	itt	lt
 80104ba:	464c      	movlt	r4, r9
 80104bc:	4699      	movlt	r9, r3
 80104be:	6927      	ldr	r7, [r4, #16]
 80104c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80104c4:	68a3      	ldr	r3, [r4, #8]
 80104c6:	6861      	ldr	r1, [r4, #4]
 80104c8:	eb07 060a 	add.w	r6, r7, sl
 80104cc:	42b3      	cmp	r3, r6
 80104ce:	b085      	sub	sp, #20
 80104d0:	bfb8      	it	lt
 80104d2:	3101      	addlt	r1, #1
 80104d4:	f7ff fe8e 	bl	80101f4 <_Balloc>
 80104d8:	b930      	cbnz	r0, 80104e8 <__multiply+0x44>
 80104da:	4602      	mov	r2, r0
 80104dc:	4b44      	ldr	r3, [pc, #272]	; (80105f0 <__multiply+0x14c>)
 80104de:	4845      	ldr	r0, [pc, #276]	; (80105f4 <__multiply+0x150>)
 80104e0:	f240 115d 	movw	r1, #349	; 0x15d
 80104e4:	f000 fc76 	bl	8010dd4 <__assert_func>
 80104e8:	f100 0514 	add.w	r5, r0, #20
 80104ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80104f0:	462b      	mov	r3, r5
 80104f2:	2200      	movs	r2, #0
 80104f4:	4543      	cmp	r3, r8
 80104f6:	d321      	bcc.n	801053c <__multiply+0x98>
 80104f8:	f104 0314 	add.w	r3, r4, #20
 80104fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010500:	f109 0314 	add.w	r3, r9, #20
 8010504:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010508:	9202      	str	r2, [sp, #8]
 801050a:	1b3a      	subs	r2, r7, r4
 801050c:	3a15      	subs	r2, #21
 801050e:	f022 0203 	bic.w	r2, r2, #3
 8010512:	3204      	adds	r2, #4
 8010514:	f104 0115 	add.w	r1, r4, #21
 8010518:	428f      	cmp	r7, r1
 801051a:	bf38      	it	cc
 801051c:	2204      	movcc	r2, #4
 801051e:	9201      	str	r2, [sp, #4]
 8010520:	9a02      	ldr	r2, [sp, #8]
 8010522:	9303      	str	r3, [sp, #12]
 8010524:	429a      	cmp	r2, r3
 8010526:	d80c      	bhi.n	8010542 <__multiply+0x9e>
 8010528:	2e00      	cmp	r6, #0
 801052a:	dd03      	ble.n	8010534 <__multiply+0x90>
 801052c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010530:	2b00      	cmp	r3, #0
 8010532:	d05a      	beq.n	80105ea <__multiply+0x146>
 8010534:	6106      	str	r6, [r0, #16]
 8010536:	b005      	add	sp, #20
 8010538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801053c:	f843 2b04 	str.w	r2, [r3], #4
 8010540:	e7d8      	b.n	80104f4 <__multiply+0x50>
 8010542:	f8b3 a000 	ldrh.w	sl, [r3]
 8010546:	f1ba 0f00 	cmp.w	sl, #0
 801054a:	d024      	beq.n	8010596 <__multiply+0xf2>
 801054c:	f104 0e14 	add.w	lr, r4, #20
 8010550:	46a9      	mov	r9, r5
 8010552:	f04f 0c00 	mov.w	ip, #0
 8010556:	f85e 2b04 	ldr.w	r2, [lr], #4
 801055a:	f8d9 1000 	ldr.w	r1, [r9]
 801055e:	fa1f fb82 	uxth.w	fp, r2
 8010562:	b289      	uxth	r1, r1
 8010564:	fb0a 110b 	mla	r1, sl, fp, r1
 8010568:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801056c:	f8d9 2000 	ldr.w	r2, [r9]
 8010570:	4461      	add	r1, ip
 8010572:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010576:	fb0a c20b 	mla	r2, sl, fp, ip
 801057a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801057e:	b289      	uxth	r1, r1
 8010580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010584:	4577      	cmp	r7, lr
 8010586:	f849 1b04 	str.w	r1, [r9], #4
 801058a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801058e:	d8e2      	bhi.n	8010556 <__multiply+0xb2>
 8010590:	9a01      	ldr	r2, [sp, #4]
 8010592:	f845 c002 	str.w	ip, [r5, r2]
 8010596:	9a03      	ldr	r2, [sp, #12]
 8010598:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801059c:	3304      	adds	r3, #4
 801059e:	f1b9 0f00 	cmp.w	r9, #0
 80105a2:	d020      	beq.n	80105e6 <__multiply+0x142>
 80105a4:	6829      	ldr	r1, [r5, #0]
 80105a6:	f104 0c14 	add.w	ip, r4, #20
 80105aa:	46ae      	mov	lr, r5
 80105ac:	f04f 0a00 	mov.w	sl, #0
 80105b0:	f8bc b000 	ldrh.w	fp, [ip]
 80105b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80105b8:	fb09 220b 	mla	r2, r9, fp, r2
 80105bc:	4492      	add	sl, r2
 80105be:	b289      	uxth	r1, r1
 80105c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80105c4:	f84e 1b04 	str.w	r1, [lr], #4
 80105c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80105cc:	f8be 1000 	ldrh.w	r1, [lr]
 80105d0:	0c12      	lsrs	r2, r2, #16
 80105d2:	fb09 1102 	mla	r1, r9, r2, r1
 80105d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80105da:	4567      	cmp	r7, ip
 80105dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80105e0:	d8e6      	bhi.n	80105b0 <__multiply+0x10c>
 80105e2:	9a01      	ldr	r2, [sp, #4]
 80105e4:	50a9      	str	r1, [r5, r2]
 80105e6:	3504      	adds	r5, #4
 80105e8:	e79a      	b.n	8010520 <__multiply+0x7c>
 80105ea:	3e01      	subs	r6, #1
 80105ec:	e79c      	b.n	8010528 <__multiply+0x84>
 80105ee:	bf00      	nop
 80105f0:	08011a27 	.word	0x08011a27
 80105f4:	08011ab4 	.word	0x08011ab4

080105f8 <__pow5mult>:
 80105f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105fc:	4615      	mov	r5, r2
 80105fe:	f012 0203 	ands.w	r2, r2, #3
 8010602:	4606      	mov	r6, r0
 8010604:	460f      	mov	r7, r1
 8010606:	d007      	beq.n	8010618 <__pow5mult+0x20>
 8010608:	4c25      	ldr	r4, [pc, #148]	; (80106a0 <__pow5mult+0xa8>)
 801060a:	3a01      	subs	r2, #1
 801060c:	2300      	movs	r3, #0
 801060e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010612:	f7ff fe51 	bl	80102b8 <__multadd>
 8010616:	4607      	mov	r7, r0
 8010618:	10ad      	asrs	r5, r5, #2
 801061a:	d03d      	beq.n	8010698 <__pow5mult+0xa0>
 801061c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801061e:	b97c      	cbnz	r4, 8010640 <__pow5mult+0x48>
 8010620:	2010      	movs	r0, #16
 8010622:	f7ff fdbf 	bl	80101a4 <malloc>
 8010626:	4602      	mov	r2, r0
 8010628:	6270      	str	r0, [r6, #36]	; 0x24
 801062a:	b928      	cbnz	r0, 8010638 <__pow5mult+0x40>
 801062c:	4b1d      	ldr	r3, [pc, #116]	; (80106a4 <__pow5mult+0xac>)
 801062e:	481e      	ldr	r0, [pc, #120]	; (80106a8 <__pow5mult+0xb0>)
 8010630:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010634:	f000 fbce 	bl	8010dd4 <__assert_func>
 8010638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801063c:	6004      	str	r4, [r0, #0]
 801063e:	60c4      	str	r4, [r0, #12]
 8010640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010648:	b94c      	cbnz	r4, 801065e <__pow5mult+0x66>
 801064a:	f240 2171 	movw	r1, #625	; 0x271
 801064e:	4630      	mov	r0, r6
 8010650:	f7ff ff12 	bl	8010478 <__i2b>
 8010654:	2300      	movs	r3, #0
 8010656:	f8c8 0008 	str.w	r0, [r8, #8]
 801065a:	4604      	mov	r4, r0
 801065c:	6003      	str	r3, [r0, #0]
 801065e:	f04f 0900 	mov.w	r9, #0
 8010662:	07eb      	lsls	r3, r5, #31
 8010664:	d50a      	bpl.n	801067c <__pow5mult+0x84>
 8010666:	4639      	mov	r1, r7
 8010668:	4622      	mov	r2, r4
 801066a:	4630      	mov	r0, r6
 801066c:	f7ff ff1a 	bl	80104a4 <__multiply>
 8010670:	4639      	mov	r1, r7
 8010672:	4680      	mov	r8, r0
 8010674:	4630      	mov	r0, r6
 8010676:	f7ff fdfd 	bl	8010274 <_Bfree>
 801067a:	4647      	mov	r7, r8
 801067c:	106d      	asrs	r5, r5, #1
 801067e:	d00b      	beq.n	8010698 <__pow5mult+0xa0>
 8010680:	6820      	ldr	r0, [r4, #0]
 8010682:	b938      	cbnz	r0, 8010694 <__pow5mult+0x9c>
 8010684:	4622      	mov	r2, r4
 8010686:	4621      	mov	r1, r4
 8010688:	4630      	mov	r0, r6
 801068a:	f7ff ff0b 	bl	80104a4 <__multiply>
 801068e:	6020      	str	r0, [r4, #0]
 8010690:	f8c0 9000 	str.w	r9, [r0]
 8010694:	4604      	mov	r4, r0
 8010696:	e7e4      	b.n	8010662 <__pow5mult+0x6a>
 8010698:	4638      	mov	r0, r7
 801069a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801069e:	bf00      	nop
 80106a0:	08011c00 	.word	0x08011c00
 80106a4:	080119b5 	.word	0x080119b5
 80106a8:	08011ab4 	.word	0x08011ab4

080106ac <__lshift>:
 80106ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106b0:	460c      	mov	r4, r1
 80106b2:	6849      	ldr	r1, [r1, #4]
 80106b4:	6923      	ldr	r3, [r4, #16]
 80106b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80106ba:	68a3      	ldr	r3, [r4, #8]
 80106bc:	4607      	mov	r7, r0
 80106be:	4691      	mov	r9, r2
 80106c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80106c4:	f108 0601 	add.w	r6, r8, #1
 80106c8:	42b3      	cmp	r3, r6
 80106ca:	db0b      	blt.n	80106e4 <__lshift+0x38>
 80106cc:	4638      	mov	r0, r7
 80106ce:	f7ff fd91 	bl	80101f4 <_Balloc>
 80106d2:	4605      	mov	r5, r0
 80106d4:	b948      	cbnz	r0, 80106ea <__lshift+0x3e>
 80106d6:	4602      	mov	r2, r0
 80106d8:	4b2a      	ldr	r3, [pc, #168]	; (8010784 <__lshift+0xd8>)
 80106da:	482b      	ldr	r0, [pc, #172]	; (8010788 <__lshift+0xdc>)
 80106dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80106e0:	f000 fb78 	bl	8010dd4 <__assert_func>
 80106e4:	3101      	adds	r1, #1
 80106e6:	005b      	lsls	r3, r3, #1
 80106e8:	e7ee      	b.n	80106c8 <__lshift+0x1c>
 80106ea:	2300      	movs	r3, #0
 80106ec:	f100 0114 	add.w	r1, r0, #20
 80106f0:	f100 0210 	add.w	r2, r0, #16
 80106f4:	4618      	mov	r0, r3
 80106f6:	4553      	cmp	r3, sl
 80106f8:	db37      	blt.n	801076a <__lshift+0xbe>
 80106fa:	6920      	ldr	r0, [r4, #16]
 80106fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010700:	f104 0314 	add.w	r3, r4, #20
 8010704:	f019 091f 	ands.w	r9, r9, #31
 8010708:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801070c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010710:	d02f      	beq.n	8010772 <__lshift+0xc6>
 8010712:	f1c9 0e20 	rsb	lr, r9, #32
 8010716:	468a      	mov	sl, r1
 8010718:	f04f 0c00 	mov.w	ip, #0
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	fa02 f209 	lsl.w	r2, r2, r9
 8010722:	ea42 020c 	orr.w	r2, r2, ip
 8010726:	f84a 2b04 	str.w	r2, [sl], #4
 801072a:	f853 2b04 	ldr.w	r2, [r3], #4
 801072e:	4298      	cmp	r0, r3
 8010730:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010734:	d8f2      	bhi.n	801071c <__lshift+0x70>
 8010736:	1b03      	subs	r3, r0, r4
 8010738:	3b15      	subs	r3, #21
 801073a:	f023 0303 	bic.w	r3, r3, #3
 801073e:	3304      	adds	r3, #4
 8010740:	f104 0215 	add.w	r2, r4, #21
 8010744:	4290      	cmp	r0, r2
 8010746:	bf38      	it	cc
 8010748:	2304      	movcc	r3, #4
 801074a:	f841 c003 	str.w	ip, [r1, r3]
 801074e:	f1bc 0f00 	cmp.w	ip, #0
 8010752:	d001      	beq.n	8010758 <__lshift+0xac>
 8010754:	f108 0602 	add.w	r6, r8, #2
 8010758:	3e01      	subs	r6, #1
 801075a:	4638      	mov	r0, r7
 801075c:	612e      	str	r6, [r5, #16]
 801075e:	4621      	mov	r1, r4
 8010760:	f7ff fd88 	bl	8010274 <_Bfree>
 8010764:	4628      	mov	r0, r5
 8010766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801076a:	f842 0f04 	str.w	r0, [r2, #4]!
 801076e:	3301      	adds	r3, #1
 8010770:	e7c1      	b.n	80106f6 <__lshift+0x4a>
 8010772:	3904      	subs	r1, #4
 8010774:	f853 2b04 	ldr.w	r2, [r3], #4
 8010778:	f841 2f04 	str.w	r2, [r1, #4]!
 801077c:	4298      	cmp	r0, r3
 801077e:	d8f9      	bhi.n	8010774 <__lshift+0xc8>
 8010780:	e7ea      	b.n	8010758 <__lshift+0xac>
 8010782:	bf00      	nop
 8010784:	08011a27 	.word	0x08011a27
 8010788:	08011ab4 	.word	0x08011ab4

0801078c <__mcmp>:
 801078c:	b530      	push	{r4, r5, lr}
 801078e:	6902      	ldr	r2, [r0, #16]
 8010790:	690c      	ldr	r4, [r1, #16]
 8010792:	1b12      	subs	r2, r2, r4
 8010794:	d10e      	bne.n	80107b4 <__mcmp+0x28>
 8010796:	f100 0314 	add.w	r3, r0, #20
 801079a:	3114      	adds	r1, #20
 801079c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80107a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80107a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80107a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80107ac:	42a5      	cmp	r5, r4
 80107ae:	d003      	beq.n	80107b8 <__mcmp+0x2c>
 80107b0:	d305      	bcc.n	80107be <__mcmp+0x32>
 80107b2:	2201      	movs	r2, #1
 80107b4:	4610      	mov	r0, r2
 80107b6:	bd30      	pop	{r4, r5, pc}
 80107b8:	4283      	cmp	r3, r0
 80107ba:	d3f3      	bcc.n	80107a4 <__mcmp+0x18>
 80107bc:	e7fa      	b.n	80107b4 <__mcmp+0x28>
 80107be:	f04f 32ff 	mov.w	r2, #4294967295
 80107c2:	e7f7      	b.n	80107b4 <__mcmp+0x28>

080107c4 <__mdiff>:
 80107c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c8:	460c      	mov	r4, r1
 80107ca:	4606      	mov	r6, r0
 80107cc:	4611      	mov	r1, r2
 80107ce:	4620      	mov	r0, r4
 80107d0:	4690      	mov	r8, r2
 80107d2:	f7ff ffdb 	bl	801078c <__mcmp>
 80107d6:	1e05      	subs	r5, r0, #0
 80107d8:	d110      	bne.n	80107fc <__mdiff+0x38>
 80107da:	4629      	mov	r1, r5
 80107dc:	4630      	mov	r0, r6
 80107de:	f7ff fd09 	bl	80101f4 <_Balloc>
 80107e2:	b930      	cbnz	r0, 80107f2 <__mdiff+0x2e>
 80107e4:	4b3a      	ldr	r3, [pc, #232]	; (80108d0 <__mdiff+0x10c>)
 80107e6:	4602      	mov	r2, r0
 80107e8:	f240 2132 	movw	r1, #562	; 0x232
 80107ec:	4839      	ldr	r0, [pc, #228]	; (80108d4 <__mdiff+0x110>)
 80107ee:	f000 faf1 	bl	8010dd4 <__assert_func>
 80107f2:	2301      	movs	r3, #1
 80107f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80107f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107fc:	bfa4      	itt	ge
 80107fe:	4643      	movge	r3, r8
 8010800:	46a0      	movge	r8, r4
 8010802:	4630      	mov	r0, r6
 8010804:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010808:	bfa6      	itte	ge
 801080a:	461c      	movge	r4, r3
 801080c:	2500      	movge	r5, #0
 801080e:	2501      	movlt	r5, #1
 8010810:	f7ff fcf0 	bl	80101f4 <_Balloc>
 8010814:	b920      	cbnz	r0, 8010820 <__mdiff+0x5c>
 8010816:	4b2e      	ldr	r3, [pc, #184]	; (80108d0 <__mdiff+0x10c>)
 8010818:	4602      	mov	r2, r0
 801081a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801081e:	e7e5      	b.n	80107ec <__mdiff+0x28>
 8010820:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010824:	6926      	ldr	r6, [r4, #16]
 8010826:	60c5      	str	r5, [r0, #12]
 8010828:	f104 0914 	add.w	r9, r4, #20
 801082c:	f108 0514 	add.w	r5, r8, #20
 8010830:	f100 0e14 	add.w	lr, r0, #20
 8010834:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010838:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801083c:	f108 0210 	add.w	r2, r8, #16
 8010840:	46f2      	mov	sl, lr
 8010842:	2100      	movs	r1, #0
 8010844:	f859 3b04 	ldr.w	r3, [r9], #4
 8010848:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801084c:	fa1f f883 	uxth.w	r8, r3
 8010850:	fa11 f18b 	uxtah	r1, r1, fp
 8010854:	0c1b      	lsrs	r3, r3, #16
 8010856:	eba1 0808 	sub.w	r8, r1, r8
 801085a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801085e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010862:	fa1f f888 	uxth.w	r8, r8
 8010866:	1419      	asrs	r1, r3, #16
 8010868:	454e      	cmp	r6, r9
 801086a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801086e:	f84a 3b04 	str.w	r3, [sl], #4
 8010872:	d8e7      	bhi.n	8010844 <__mdiff+0x80>
 8010874:	1b33      	subs	r3, r6, r4
 8010876:	3b15      	subs	r3, #21
 8010878:	f023 0303 	bic.w	r3, r3, #3
 801087c:	3304      	adds	r3, #4
 801087e:	3415      	adds	r4, #21
 8010880:	42a6      	cmp	r6, r4
 8010882:	bf38      	it	cc
 8010884:	2304      	movcc	r3, #4
 8010886:	441d      	add	r5, r3
 8010888:	4473      	add	r3, lr
 801088a:	469e      	mov	lr, r3
 801088c:	462e      	mov	r6, r5
 801088e:	4566      	cmp	r6, ip
 8010890:	d30e      	bcc.n	80108b0 <__mdiff+0xec>
 8010892:	f10c 0203 	add.w	r2, ip, #3
 8010896:	1b52      	subs	r2, r2, r5
 8010898:	f022 0203 	bic.w	r2, r2, #3
 801089c:	3d03      	subs	r5, #3
 801089e:	45ac      	cmp	ip, r5
 80108a0:	bf38      	it	cc
 80108a2:	2200      	movcc	r2, #0
 80108a4:	441a      	add	r2, r3
 80108a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80108aa:	b17b      	cbz	r3, 80108cc <__mdiff+0x108>
 80108ac:	6107      	str	r7, [r0, #16]
 80108ae:	e7a3      	b.n	80107f8 <__mdiff+0x34>
 80108b0:	f856 8b04 	ldr.w	r8, [r6], #4
 80108b4:	fa11 f288 	uxtah	r2, r1, r8
 80108b8:	1414      	asrs	r4, r2, #16
 80108ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80108be:	b292      	uxth	r2, r2
 80108c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80108c4:	f84e 2b04 	str.w	r2, [lr], #4
 80108c8:	1421      	asrs	r1, r4, #16
 80108ca:	e7e0      	b.n	801088e <__mdiff+0xca>
 80108cc:	3f01      	subs	r7, #1
 80108ce:	e7ea      	b.n	80108a6 <__mdiff+0xe2>
 80108d0:	08011a27 	.word	0x08011a27
 80108d4:	08011ab4 	.word	0x08011ab4

080108d8 <__ulp>:
 80108d8:	b082      	sub	sp, #8
 80108da:	ed8d 0b00 	vstr	d0, [sp]
 80108de:	9b01      	ldr	r3, [sp, #4]
 80108e0:	4912      	ldr	r1, [pc, #72]	; (801092c <__ulp+0x54>)
 80108e2:	4019      	ands	r1, r3
 80108e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80108e8:	2900      	cmp	r1, #0
 80108ea:	dd05      	ble.n	80108f8 <__ulp+0x20>
 80108ec:	2200      	movs	r2, #0
 80108ee:	460b      	mov	r3, r1
 80108f0:	ec43 2b10 	vmov	d0, r2, r3
 80108f4:	b002      	add	sp, #8
 80108f6:	4770      	bx	lr
 80108f8:	4249      	negs	r1, r1
 80108fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80108fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010902:	f04f 0200 	mov.w	r2, #0
 8010906:	f04f 0300 	mov.w	r3, #0
 801090a:	da04      	bge.n	8010916 <__ulp+0x3e>
 801090c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010910:	fa41 f300 	asr.w	r3, r1, r0
 8010914:	e7ec      	b.n	80108f0 <__ulp+0x18>
 8010916:	f1a0 0114 	sub.w	r1, r0, #20
 801091a:	291e      	cmp	r1, #30
 801091c:	bfda      	itte	le
 801091e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010922:	fa20 f101 	lsrle.w	r1, r0, r1
 8010926:	2101      	movgt	r1, #1
 8010928:	460a      	mov	r2, r1
 801092a:	e7e1      	b.n	80108f0 <__ulp+0x18>
 801092c:	7ff00000 	.word	0x7ff00000

08010930 <__b2d>:
 8010930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010932:	6905      	ldr	r5, [r0, #16]
 8010934:	f100 0714 	add.w	r7, r0, #20
 8010938:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801093c:	1f2e      	subs	r6, r5, #4
 801093e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010942:	4620      	mov	r0, r4
 8010944:	f7ff fd48 	bl	80103d8 <__hi0bits>
 8010948:	f1c0 0320 	rsb	r3, r0, #32
 801094c:	280a      	cmp	r0, #10
 801094e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80109cc <__b2d+0x9c>
 8010952:	600b      	str	r3, [r1, #0]
 8010954:	dc14      	bgt.n	8010980 <__b2d+0x50>
 8010956:	f1c0 0e0b 	rsb	lr, r0, #11
 801095a:	fa24 f10e 	lsr.w	r1, r4, lr
 801095e:	42b7      	cmp	r7, r6
 8010960:	ea41 030c 	orr.w	r3, r1, ip
 8010964:	bf34      	ite	cc
 8010966:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801096a:	2100      	movcs	r1, #0
 801096c:	3015      	adds	r0, #21
 801096e:	fa04 f000 	lsl.w	r0, r4, r0
 8010972:	fa21 f10e 	lsr.w	r1, r1, lr
 8010976:	ea40 0201 	orr.w	r2, r0, r1
 801097a:	ec43 2b10 	vmov	d0, r2, r3
 801097e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010980:	42b7      	cmp	r7, r6
 8010982:	bf3a      	itte	cc
 8010984:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010988:	f1a5 0608 	subcc.w	r6, r5, #8
 801098c:	2100      	movcs	r1, #0
 801098e:	380b      	subs	r0, #11
 8010990:	d017      	beq.n	80109c2 <__b2d+0x92>
 8010992:	f1c0 0c20 	rsb	ip, r0, #32
 8010996:	fa04 f500 	lsl.w	r5, r4, r0
 801099a:	42be      	cmp	r6, r7
 801099c:	fa21 f40c 	lsr.w	r4, r1, ip
 80109a0:	ea45 0504 	orr.w	r5, r5, r4
 80109a4:	bf8c      	ite	hi
 80109a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80109aa:	2400      	movls	r4, #0
 80109ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80109b0:	fa01 f000 	lsl.w	r0, r1, r0
 80109b4:	fa24 f40c 	lsr.w	r4, r4, ip
 80109b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109bc:	ea40 0204 	orr.w	r2, r0, r4
 80109c0:	e7db      	b.n	801097a <__b2d+0x4a>
 80109c2:	ea44 030c 	orr.w	r3, r4, ip
 80109c6:	460a      	mov	r2, r1
 80109c8:	e7d7      	b.n	801097a <__b2d+0x4a>
 80109ca:	bf00      	nop
 80109cc:	3ff00000 	.word	0x3ff00000

080109d0 <__d2b>:
 80109d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80109d4:	4689      	mov	r9, r1
 80109d6:	2101      	movs	r1, #1
 80109d8:	ec57 6b10 	vmov	r6, r7, d0
 80109dc:	4690      	mov	r8, r2
 80109de:	f7ff fc09 	bl	80101f4 <_Balloc>
 80109e2:	4604      	mov	r4, r0
 80109e4:	b930      	cbnz	r0, 80109f4 <__d2b+0x24>
 80109e6:	4602      	mov	r2, r0
 80109e8:	4b25      	ldr	r3, [pc, #148]	; (8010a80 <__d2b+0xb0>)
 80109ea:	4826      	ldr	r0, [pc, #152]	; (8010a84 <__d2b+0xb4>)
 80109ec:	f240 310a 	movw	r1, #778	; 0x30a
 80109f0:	f000 f9f0 	bl	8010dd4 <__assert_func>
 80109f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80109f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80109fc:	bb35      	cbnz	r5, 8010a4c <__d2b+0x7c>
 80109fe:	2e00      	cmp	r6, #0
 8010a00:	9301      	str	r3, [sp, #4]
 8010a02:	d028      	beq.n	8010a56 <__d2b+0x86>
 8010a04:	4668      	mov	r0, sp
 8010a06:	9600      	str	r6, [sp, #0]
 8010a08:	f7ff fd06 	bl	8010418 <__lo0bits>
 8010a0c:	9900      	ldr	r1, [sp, #0]
 8010a0e:	b300      	cbz	r0, 8010a52 <__d2b+0x82>
 8010a10:	9a01      	ldr	r2, [sp, #4]
 8010a12:	f1c0 0320 	rsb	r3, r0, #32
 8010a16:	fa02 f303 	lsl.w	r3, r2, r3
 8010a1a:	430b      	orrs	r3, r1
 8010a1c:	40c2      	lsrs	r2, r0
 8010a1e:	6163      	str	r3, [r4, #20]
 8010a20:	9201      	str	r2, [sp, #4]
 8010a22:	9b01      	ldr	r3, [sp, #4]
 8010a24:	61a3      	str	r3, [r4, #24]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	bf14      	ite	ne
 8010a2a:	2202      	movne	r2, #2
 8010a2c:	2201      	moveq	r2, #1
 8010a2e:	6122      	str	r2, [r4, #16]
 8010a30:	b1d5      	cbz	r5, 8010a68 <__d2b+0x98>
 8010a32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010a36:	4405      	add	r5, r0
 8010a38:	f8c9 5000 	str.w	r5, [r9]
 8010a3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a40:	f8c8 0000 	str.w	r0, [r8]
 8010a44:	4620      	mov	r0, r4
 8010a46:	b003      	add	sp, #12
 8010a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a50:	e7d5      	b.n	80109fe <__d2b+0x2e>
 8010a52:	6161      	str	r1, [r4, #20]
 8010a54:	e7e5      	b.n	8010a22 <__d2b+0x52>
 8010a56:	a801      	add	r0, sp, #4
 8010a58:	f7ff fcde 	bl	8010418 <__lo0bits>
 8010a5c:	9b01      	ldr	r3, [sp, #4]
 8010a5e:	6163      	str	r3, [r4, #20]
 8010a60:	2201      	movs	r2, #1
 8010a62:	6122      	str	r2, [r4, #16]
 8010a64:	3020      	adds	r0, #32
 8010a66:	e7e3      	b.n	8010a30 <__d2b+0x60>
 8010a68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a70:	f8c9 0000 	str.w	r0, [r9]
 8010a74:	6918      	ldr	r0, [r3, #16]
 8010a76:	f7ff fcaf 	bl	80103d8 <__hi0bits>
 8010a7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a7e:	e7df      	b.n	8010a40 <__d2b+0x70>
 8010a80:	08011a27 	.word	0x08011a27
 8010a84:	08011ab4 	.word	0x08011ab4

08010a88 <__ratio>:
 8010a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a8c:	4688      	mov	r8, r1
 8010a8e:	4669      	mov	r1, sp
 8010a90:	4681      	mov	r9, r0
 8010a92:	f7ff ff4d 	bl	8010930 <__b2d>
 8010a96:	a901      	add	r1, sp, #4
 8010a98:	4640      	mov	r0, r8
 8010a9a:	ec55 4b10 	vmov	r4, r5, d0
 8010a9e:	ee10 aa10 	vmov	sl, s0
 8010aa2:	f7ff ff45 	bl	8010930 <__b2d>
 8010aa6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010aaa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010aae:	1a59      	subs	r1, r3, r1
 8010ab0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010aba:	ec57 6b10 	vmov	r6, r7, d0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	bfd6      	itet	le
 8010ac2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010ac6:	462a      	movgt	r2, r5
 8010ac8:	463a      	movle	r2, r7
 8010aca:	46ab      	mov	fp, r5
 8010acc:	bfd6      	itet	le
 8010ace:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010ad2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010ad6:	ee00 3a90 	vmovle	s1, r3
 8010ada:	ec4b ab17 	vmov	d7, sl, fp
 8010ade:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010ae2:	b003      	add	sp, #12
 8010ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ae8 <__copybits>:
 8010ae8:	3901      	subs	r1, #1
 8010aea:	b570      	push	{r4, r5, r6, lr}
 8010aec:	1149      	asrs	r1, r1, #5
 8010aee:	6914      	ldr	r4, [r2, #16]
 8010af0:	3101      	adds	r1, #1
 8010af2:	f102 0314 	add.w	r3, r2, #20
 8010af6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010afa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010afe:	1f05      	subs	r5, r0, #4
 8010b00:	42a3      	cmp	r3, r4
 8010b02:	d30c      	bcc.n	8010b1e <__copybits+0x36>
 8010b04:	1aa3      	subs	r3, r4, r2
 8010b06:	3b11      	subs	r3, #17
 8010b08:	f023 0303 	bic.w	r3, r3, #3
 8010b0c:	3211      	adds	r2, #17
 8010b0e:	42a2      	cmp	r2, r4
 8010b10:	bf88      	it	hi
 8010b12:	2300      	movhi	r3, #0
 8010b14:	4418      	add	r0, r3
 8010b16:	2300      	movs	r3, #0
 8010b18:	4288      	cmp	r0, r1
 8010b1a:	d305      	bcc.n	8010b28 <__copybits+0x40>
 8010b1c:	bd70      	pop	{r4, r5, r6, pc}
 8010b1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8010b22:	f845 6f04 	str.w	r6, [r5, #4]!
 8010b26:	e7eb      	b.n	8010b00 <__copybits+0x18>
 8010b28:	f840 3b04 	str.w	r3, [r0], #4
 8010b2c:	e7f4      	b.n	8010b18 <__copybits+0x30>

08010b2e <__any_on>:
 8010b2e:	f100 0214 	add.w	r2, r0, #20
 8010b32:	6900      	ldr	r0, [r0, #16]
 8010b34:	114b      	asrs	r3, r1, #5
 8010b36:	4298      	cmp	r0, r3
 8010b38:	b510      	push	{r4, lr}
 8010b3a:	db11      	blt.n	8010b60 <__any_on+0x32>
 8010b3c:	dd0a      	ble.n	8010b54 <__any_on+0x26>
 8010b3e:	f011 011f 	ands.w	r1, r1, #31
 8010b42:	d007      	beq.n	8010b54 <__any_on+0x26>
 8010b44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b48:	fa24 f001 	lsr.w	r0, r4, r1
 8010b4c:	fa00 f101 	lsl.w	r1, r0, r1
 8010b50:	428c      	cmp	r4, r1
 8010b52:	d10b      	bne.n	8010b6c <__any_on+0x3e>
 8010b54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	d803      	bhi.n	8010b64 <__any_on+0x36>
 8010b5c:	2000      	movs	r0, #0
 8010b5e:	bd10      	pop	{r4, pc}
 8010b60:	4603      	mov	r3, r0
 8010b62:	e7f7      	b.n	8010b54 <__any_on+0x26>
 8010b64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b68:	2900      	cmp	r1, #0
 8010b6a:	d0f5      	beq.n	8010b58 <__any_on+0x2a>
 8010b6c:	2001      	movs	r0, #1
 8010b6e:	e7f6      	b.n	8010b5e <__any_on+0x30>

08010b70 <_calloc_r>:
 8010b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b72:	fba1 2402 	umull	r2, r4, r1, r2
 8010b76:	b94c      	cbnz	r4, 8010b8c <_calloc_r+0x1c>
 8010b78:	4611      	mov	r1, r2
 8010b7a:	9201      	str	r2, [sp, #4]
 8010b7c:	f000 f87a 	bl	8010c74 <_malloc_r>
 8010b80:	9a01      	ldr	r2, [sp, #4]
 8010b82:	4605      	mov	r5, r0
 8010b84:	b930      	cbnz	r0, 8010b94 <_calloc_r+0x24>
 8010b86:	4628      	mov	r0, r5
 8010b88:	b003      	add	sp, #12
 8010b8a:	bd30      	pop	{r4, r5, pc}
 8010b8c:	220c      	movs	r2, #12
 8010b8e:	6002      	str	r2, [r0, #0]
 8010b90:	2500      	movs	r5, #0
 8010b92:	e7f8      	b.n	8010b86 <_calloc_r+0x16>
 8010b94:	4621      	mov	r1, r4
 8010b96:	f7fc ff47 	bl	800da28 <memset>
 8010b9a:	e7f4      	b.n	8010b86 <_calloc_r+0x16>

08010b9c <_free_r>:
 8010b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b9e:	2900      	cmp	r1, #0
 8010ba0:	d044      	beq.n	8010c2c <_free_r+0x90>
 8010ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ba6:	9001      	str	r0, [sp, #4]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	f1a1 0404 	sub.w	r4, r1, #4
 8010bae:	bfb8      	it	lt
 8010bb0:	18e4      	addlt	r4, r4, r3
 8010bb2:	f000 f93f 	bl	8010e34 <__malloc_lock>
 8010bb6:	4a1e      	ldr	r2, [pc, #120]	; (8010c30 <_free_r+0x94>)
 8010bb8:	9801      	ldr	r0, [sp, #4]
 8010bba:	6813      	ldr	r3, [r2, #0]
 8010bbc:	b933      	cbnz	r3, 8010bcc <_free_r+0x30>
 8010bbe:	6063      	str	r3, [r4, #4]
 8010bc0:	6014      	str	r4, [r2, #0]
 8010bc2:	b003      	add	sp, #12
 8010bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bc8:	f000 b93a 	b.w	8010e40 <__malloc_unlock>
 8010bcc:	42a3      	cmp	r3, r4
 8010bce:	d908      	bls.n	8010be2 <_free_r+0x46>
 8010bd0:	6825      	ldr	r5, [r4, #0]
 8010bd2:	1961      	adds	r1, r4, r5
 8010bd4:	428b      	cmp	r3, r1
 8010bd6:	bf01      	itttt	eq
 8010bd8:	6819      	ldreq	r1, [r3, #0]
 8010bda:	685b      	ldreq	r3, [r3, #4]
 8010bdc:	1949      	addeq	r1, r1, r5
 8010bde:	6021      	streq	r1, [r4, #0]
 8010be0:	e7ed      	b.n	8010bbe <_free_r+0x22>
 8010be2:	461a      	mov	r2, r3
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	b10b      	cbz	r3, 8010bec <_free_r+0x50>
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	d9fa      	bls.n	8010be2 <_free_r+0x46>
 8010bec:	6811      	ldr	r1, [r2, #0]
 8010bee:	1855      	adds	r5, r2, r1
 8010bf0:	42a5      	cmp	r5, r4
 8010bf2:	d10b      	bne.n	8010c0c <_free_r+0x70>
 8010bf4:	6824      	ldr	r4, [r4, #0]
 8010bf6:	4421      	add	r1, r4
 8010bf8:	1854      	adds	r4, r2, r1
 8010bfa:	42a3      	cmp	r3, r4
 8010bfc:	6011      	str	r1, [r2, #0]
 8010bfe:	d1e0      	bne.n	8010bc2 <_free_r+0x26>
 8010c00:	681c      	ldr	r4, [r3, #0]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	6053      	str	r3, [r2, #4]
 8010c06:	4421      	add	r1, r4
 8010c08:	6011      	str	r1, [r2, #0]
 8010c0a:	e7da      	b.n	8010bc2 <_free_r+0x26>
 8010c0c:	d902      	bls.n	8010c14 <_free_r+0x78>
 8010c0e:	230c      	movs	r3, #12
 8010c10:	6003      	str	r3, [r0, #0]
 8010c12:	e7d6      	b.n	8010bc2 <_free_r+0x26>
 8010c14:	6825      	ldr	r5, [r4, #0]
 8010c16:	1961      	adds	r1, r4, r5
 8010c18:	428b      	cmp	r3, r1
 8010c1a:	bf04      	itt	eq
 8010c1c:	6819      	ldreq	r1, [r3, #0]
 8010c1e:	685b      	ldreq	r3, [r3, #4]
 8010c20:	6063      	str	r3, [r4, #4]
 8010c22:	bf04      	itt	eq
 8010c24:	1949      	addeq	r1, r1, r5
 8010c26:	6021      	streq	r1, [r4, #0]
 8010c28:	6054      	str	r4, [r2, #4]
 8010c2a:	e7ca      	b.n	8010bc2 <_free_r+0x26>
 8010c2c:	b003      	add	sp, #12
 8010c2e:	bd30      	pop	{r4, r5, pc}
 8010c30:	24000bcc 	.word	0x24000bcc

08010c34 <sbrk_aligned>:
 8010c34:	b570      	push	{r4, r5, r6, lr}
 8010c36:	4e0e      	ldr	r6, [pc, #56]	; (8010c70 <sbrk_aligned+0x3c>)
 8010c38:	460c      	mov	r4, r1
 8010c3a:	6831      	ldr	r1, [r6, #0]
 8010c3c:	4605      	mov	r5, r0
 8010c3e:	b911      	cbnz	r1, 8010c46 <sbrk_aligned+0x12>
 8010c40:	f000 f896 	bl	8010d70 <_sbrk_r>
 8010c44:	6030      	str	r0, [r6, #0]
 8010c46:	4621      	mov	r1, r4
 8010c48:	4628      	mov	r0, r5
 8010c4a:	f000 f891 	bl	8010d70 <_sbrk_r>
 8010c4e:	1c43      	adds	r3, r0, #1
 8010c50:	d00a      	beq.n	8010c68 <sbrk_aligned+0x34>
 8010c52:	1cc4      	adds	r4, r0, #3
 8010c54:	f024 0403 	bic.w	r4, r4, #3
 8010c58:	42a0      	cmp	r0, r4
 8010c5a:	d007      	beq.n	8010c6c <sbrk_aligned+0x38>
 8010c5c:	1a21      	subs	r1, r4, r0
 8010c5e:	4628      	mov	r0, r5
 8010c60:	f000 f886 	bl	8010d70 <_sbrk_r>
 8010c64:	3001      	adds	r0, #1
 8010c66:	d101      	bne.n	8010c6c <sbrk_aligned+0x38>
 8010c68:	f04f 34ff 	mov.w	r4, #4294967295
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	bd70      	pop	{r4, r5, r6, pc}
 8010c70:	24000bd0 	.word	0x24000bd0

08010c74 <_malloc_r>:
 8010c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c78:	1ccd      	adds	r5, r1, #3
 8010c7a:	f025 0503 	bic.w	r5, r5, #3
 8010c7e:	3508      	adds	r5, #8
 8010c80:	2d0c      	cmp	r5, #12
 8010c82:	bf38      	it	cc
 8010c84:	250c      	movcc	r5, #12
 8010c86:	2d00      	cmp	r5, #0
 8010c88:	4607      	mov	r7, r0
 8010c8a:	db01      	blt.n	8010c90 <_malloc_r+0x1c>
 8010c8c:	42a9      	cmp	r1, r5
 8010c8e:	d905      	bls.n	8010c9c <_malloc_r+0x28>
 8010c90:	230c      	movs	r3, #12
 8010c92:	603b      	str	r3, [r7, #0]
 8010c94:	2600      	movs	r6, #0
 8010c96:	4630      	mov	r0, r6
 8010c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c9c:	4e2e      	ldr	r6, [pc, #184]	; (8010d58 <_malloc_r+0xe4>)
 8010c9e:	f000 f8c9 	bl	8010e34 <__malloc_lock>
 8010ca2:	6833      	ldr	r3, [r6, #0]
 8010ca4:	461c      	mov	r4, r3
 8010ca6:	bb34      	cbnz	r4, 8010cf6 <_malloc_r+0x82>
 8010ca8:	4629      	mov	r1, r5
 8010caa:	4638      	mov	r0, r7
 8010cac:	f7ff ffc2 	bl	8010c34 <sbrk_aligned>
 8010cb0:	1c43      	adds	r3, r0, #1
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	d14d      	bne.n	8010d52 <_malloc_r+0xde>
 8010cb6:	6834      	ldr	r4, [r6, #0]
 8010cb8:	4626      	mov	r6, r4
 8010cba:	2e00      	cmp	r6, #0
 8010cbc:	d140      	bne.n	8010d40 <_malloc_r+0xcc>
 8010cbe:	6823      	ldr	r3, [r4, #0]
 8010cc0:	4631      	mov	r1, r6
 8010cc2:	4638      	mov	r0, r7
 8010cc4:	eb04 0803 	add.w	r8, r4, r3
 8010cc8:	f000 f852 	bl	8010d70 <_sbrk_r>
 8010ccc:	4580      	cmp	r8, r0
 8010cce:	d13a      	bne.n	8010d46 <_malloc_r+0xd2>
 8010cd0:	6821      	ldr	r1, [r4, #0]
 8010cd2:	3503      	adds	r5, #3
 8010cd4:	1a6d      	subs	r5, r5, r1
 8010cd6:	f025 0503 	bic.w	r5, r5, #3
 8010cda:	3508      	adds	r5, #8
 8010cdc:	2d0c      	cmp	r5, #12
 8010cde:	bf38      	it	cc
 8010ce0:	250c      	movcc	r5, #12
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	4638      	mov	r0, r7
 8010ce6:	f7ff ffa5 	bl	8010c34 <sbrk_aligned>
 8010cea:	3001      	adds	r0, #1
 8010cec:	d02b      	beq.n	8010d46 <_malloc_r+0xd2>
 8010cee:	6823      	ldr	r3, [r4, #0]
 8010cf0:	442b      	add	r3, r5
 8010cf2:	6023      	str	r3, [r4, #0]
 8010cf4:	e00e      	b.n	8010d14 <_malloc_r+0xa0>
 8010cf6:	6822      	ldr	r2, [r4, #0]
 8010cf8:	1b52      	subs	r2, r2, r5
 8010cfa:	d41e      	bmi.n	8010d3a <_malloc_r+0xc6>
 8010cfc:	2a0b      	cmp	r2, #11
 8010cfe:	d916      	bls.n	8010d2e <_malloc_r+0xba>
 8010d00:	1961      	adds	r1, r4, r5
 8010d02:	42a3      	cmp	r3, r4
 8010d04:	6025      	str	r5, [r4, #0]
 8010d06:	bf18      	it	ne
 8010d08:	6059      	strne	r1, [r3, #4]
 8010d0a:	6863      	ldr	r3, [r4, #4]
 8010d0c:	bf08      	it	eq
 8010d0e:	6031      	streq	r1, [r6, #0]
 8010d10:	5162      	str	r2, [r4, r5]
 8010d12:	604b      	str	r3, [r1, #4]
 8010d14:	4638      	mov	r0, r7
 8010d16:	f104 060b 	add.w	r6, r4, #11
 8010d1a:	f000 f891 	bl	8010e40 <__malloc_unlock>
 8010d1e:	f026 0607 	bic.w	r6, r6, #7
 8010d22:	1d23      	adds	r3, r4, #4
 8010d24:	1af2      	subs	r2, r6, r3
 8010d26:	d0b6      	beq.n	8010c96 <_malloc_r+0x22>
 8010d28:	1b9b      	subs	r3, r3, r6
 8010d2a:	50a3      	str	r3, [r4, r2]
 8010d2c:	e7b3      	b.n	8010c96 <_malloc_r+0x22>
 8010d2e:	6862      	ldr	r2, [r4, #4]
 8010d30:	42a3      	cmp	r3, r4
 8010d32:	bf0c      	ite	eq
 8010d34:	6032      	streq	r2, [r6, #0]
 8010d36:	605a      	strne	r2, [r3, #4]
 8010d38:	e7ec      	b.n	8010d14 <_malloc_r+0xa0>
 8010d3a:	4623      	mov	r3, r4
 8010d3c:	6864      	ldr	r4, [r4, #4]
 8010d3e:	e7b2      	b.n	8010ca6 <_malloc_r+0x32>
 8010d40:	4634      	mov	r4, r6
 8010d42:	6876      	ldr	r6, [r6, #4]
 8010d44:	e7b9      	b.n	8010cba <_malloc_r+0x46>
 8010d46:	230c      	movs	r3, #12
 8010d48:	603b      	str	r3, [r7, #0]
 8010d4a:	4638      	mov	r0, r7
 8010d4c:	f000 f878 	bl	8010e40 <__malloc_unlock>
 8010d50:	e7a1      	b.n	8010c96 <_malloc_r+0x22>
 8010d52:	6025      	str	r5, [r4, #0]
 8010d54:	e7de      	b.n	8010d14 <_malloc_r+0xa0>
 8010d56:	bf00      	nop
 8010d58:	24000bcc 	.word	0x24000bcc
 8010d5c:	00000000 	.word	0x00000000

08010d60 <nan>:
 8010d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010d68 <nan+0x8>
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	00000000 	.word	0x00000000
 8010d6c:	7ff80000 	.word	0x7ff80000

08010d70 <_sbrk_r>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4d06      	ldr	r5, [pc, #24]	; (8010d8c <_sbrk_r+0x1c>)
 8010d74:	2300      	movs	r3, #0
 8010d76:	4604      	mov	r4, r0
 8010d78:	4608      	mov	r0, r1
 8010d7a:	602b      	str	r3, [r5, #0]
 8010d7c:	f7f1 fb70 	bl	8002460 <_sbrk>
 8010d80:	1c43      	adds	r3, r0, #1
 8010d82:	d102      	bne.n	8010d8a <_sbrk_r+0x1a>
 8010d84:	682b      	ldr	r3, [r5, #0]
 8010d86:	b103      	cbz	r3, 8010d8a <_sbrk_r+0x1a>
 8010d88:	6023      	str	r3, [r4, #0]
 8010d8a:	bd38      	pop	{r3, r4, r5, pc}
 8010d8c:	24000bd4 	.word	0x24000bd4

08010d90 <strncmp>:
 8010d90:	b510      	push	{r4, lr}
 8010d92:	b17a      	cbz	r2, 8010db4 <strncmp+0x24>
 8010d94:	4603      	mov	r3, r0
 8010d96:	3901      	subs	r1, #1
 8010d98:	1884      	adds	r4, r0, r2
 8010d9a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010da2:	4290      	cmp	r0, r2
 8010da4:	d101      	bne.n	8010daa <strncmp+0x1a>
 8010da6:	42a3      	cmp	r3, r4
 8010da8:	d101      	bne.n	8010dae <strncmp+0x1e>
 8010daa:	1a80      	subs	r0, r0, r2
 8010dac:	bd10      	pop	{r4, pc}
 8010dae:	2800      	cmp	r0, #0
 8010db0:	d1f3      	bne.n	8010d9a <strncmp+0xa>
 8010db2:	e7fa      	b.n	8010daa <strncmp+0x1a>
 8010db4:	4610      	mov	r0, r2
 8010db6:	e7f9      	b.n	8010dac <strncmp+0x1c>

08010db8 <__ascii_wctomb>:
 8010db8:	b149      	cbz	r1, 8010dce <__ascii_wctomb+0x16>
 8010dba:	2aff      	cmp	r2, #255	; 0xff
 8010dbc:	bf85      	ittet	hi
 8010dbe:	238a      	movhi	r3, #138	; 0x8a
 8010dc0:	6003      	strhi	r3, [r0, #0]
 8010dc2:	700a      	strbls	r2, [r1, #0]
 8010dc4:	f04f 30ff 	movhi.w	r0, #4294967295
 8010dc8:	bf98      	it	ls
 8010dca:	2001      	movls	r0, #1
 8010dcc:	4770      	bx	lr
 8010dce:	4608      	mov	r0, r1
 8010dd0:	4770      	bx	lr
	...

08010dd4 <__assert_func>:
 8010dd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dd6:	4614      	mov	r4, r2
 8010dd8:	461a      	mov	r2, r3
 8010dda:	4b09      	ldr	r3, [pc, #36]	; (8010e00 <__assert_func+0x2c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	4605      	mov	r5, r0
 8010de0:	68d8      	ldr	r0, [r3, #12]
 8010de2:	b14c      	cbz	r4, 8010df8 <__assert_func+0x24>
 8010de4:	4b07      	ldr	r3, [pc, #28]	; (8010e04 <__assert_func+0x30>)
 8010de6:	9100      	str	r1, [sp, #0]
 8010de8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010dec:	4906      	ldr	r1, [pc, #24]	; (8010e08 <__assert_func+0x34>)
 8010dee:	462b      	mov	r3, r5
 8010df0:	f000 f80e 	bl	8010e10 <fiprintf>
 8010df4:	f000 fa44 	bl	8011280 <abort>
 8010df8:	4b04      	ldr	r3, [pc, #16]	; (8010e0c <__assert_func+0x38>)
 8010dfa:	461c      	mov	r4, r3
 8010dfc:	e7f3      	b.n	8010de6 <__assert_func+0x12>
 8010dfe:	bf00      	nop
 8010e00:	2400031c 	.word	0x2400031c
 8010e04:	08011c0c 	.word	0x08011c0c
 8010e08:	08011c19 	.word	0x08011c19
 8010e0c:	08011c47 	.word	0x08011c47

08010e10 <fiprintf>:
 8010e10:	b40e      	push	{r1, r2, r3}
 8010e12:	b503      	push	{r0, r1, lr}
 8010e14:	4601      	mov	r1, r0
 8010e16:	ab03      	add	r3, sp, #12
 8010e18:	4805      	ldr	r0, [pc, #20]	; (8010e30 <fiprintf+0x20>)
 8010e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e1e:	6800      	ldr	r0, [r0, #0]
 8010e20:	9301      	str	r3, [sp, #4]
 8010e22:	f000 f83d 	bl	8010ea0 <_vfiprintf_r>
 8010e26:	b002      	add	sp, #8
 8010e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e2c:	b003      	add	sp, #12
 8010e2e:	4770      	bx	lr
 8010e30:	2400031c 	.word	0x2400031c

08010e34 <__malloc_lock>:
 8010e34:	4801      	ldr	r0, [pc, #4]	; (8010e3c <__malloc_lock+0x8>)
 8010e36:	f000 bbe3 	b.w	8011600 <__retarget_lock_acquire_recursive>
 8010e3a:	bf00      	nop
 8010e3c:	24000bd8 	.word	0x24000bd8

08010e40 <__malloc_unlock>:
 8010e40:	4801      	ldr	r0, [pc, #4]	; (8010e48 <__malloc_unlock+0x8>)
 8010e42:	f000 bbde 	b.w	8011602 <__retarget_lock_release_recursive>
 8010e46:	bf00      	nop
 8010e48:	24000bd8 	.word	0x24000bd8

08010e4c <__sfputc_r>:
 8010e4c:	6893      	ldr	r3, [r2, #8]
 8010e4e:	3b01      	subs	r3, #1
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	b410      	push	{r4}
 8010e54:	6093      	str	r3, [r2, #8]
 8010e56:	da08      	bge.n	8010e6a <__sfputc_r+0x1e>
 8010e58:	6994      	ldr	r4, [r2, #24]
 8010e5a:	42a3      	cmp	r3, r4
 8010e5c:	db01      	blt.n	8010e62 <__sfputc_r+0x16>
 8010e5e:	290a      	cmp	r1, #10
 8010e60:	d103      	bne.n	8010e6a <__sfputc_r+0x1e>
 8010e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e66:	f000 b94b 	b.w	8011100 <__swbuf_r>
 8010e6a:	6813      	ldr	r3, [r2, #0]
 8010e6c:	1c58      	adds	r0, r3, #1
 8010e6e:	6010      	str	r0, [r2, #0]
 8010e70:	7019      	strb	r1, [r3, #0]
 8010e72:	4608      	mov	r0, r1
 8010e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e78:	4770      	bx	lr

08010e7a <__sfputs_r>:
 8010e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e7c:	4606      	mov	r6, r0
 8010e7e:	460f      	mov	r7, r1
 8010e80:	4614      	mov	r4, r2
 8010e82:	18d5      	adds	r5, r2, r3
 8010e84:	42ac      	cmp	r4, r5
 8010e86:	d101      	bne.n	8010e8c <__sfputs_r+0x12>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	e007      	b.n	8010e9c <__sfputs_r+0x22>
 8010e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e90:	463a      	mov	r2, r7
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7ff ffda 	bl	8010e4c <__sfputc_r>
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	d1f3      	bne.n	8010e84 <__sfputs_r+0xa>
 8010e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ea0 <_vfiprintf_r>:
 8010ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea4:	460d      	mov	r5, r1
 8010ea6:	b09d      	sub	sp, #116	; 0x74
 8010ea8:	4614      	mov	r4, r2
 8010eaa:	4698      	mov	r8, r3
 8010eac:	4606      	mov	r6, r0
 8010eae:	b118      	cbz	r0, 8010eb8 <_vfiprintf_r+0x18>
 8010eb0:	6983      	ldr	r3, [r0, #24]
 8010eb2:	b90b      	cbnz	r3, 8010eb8 <_vfiprintf_r+0x18>
 8010eb4:	f000 fb06 	bl	80114c4 <__sinit>
 8010eb8:	4b89      	ldr	r3, [pc, #548]	; (80110e0 <_vfiprintf_r+0x240>)
 8010eba:	429d      	cmp	r5, r3
 8010ebc:	d11b      	bne.n	8010ef6 <_vfiprintf_r+0x56>
 8010ebe:	6875      	ldr	r5, [r6, #4]
 8010ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ec2:	07d9      	lsls	r1, r3, #31
 8010ec4:	d405      	bmi.n	8010ed2 <_vfiprintf_r+0x32>
 8010ec6:	89ab      	ldrh	r3, [r5, #12]
 8010ec8:	059a      	lsls	r2, r3, #22
 8010eca:	d402      	bmi.n	8010ed2 <_vfiprintf_r+0x32>
 8010ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ece:	f000 fb97 	bl	8011600 <__retarget_lock_acquire_recursive>
 8010ed2:	89ab      	ldrh	r3, [r5, #12]
 8010ed4:	071b      	lsls	r3, r3, #28
 8010ed6:	d501      	bpl.n	8010edc <_vfiprintf_r+0x3c>
 8010ed8:	692b      	ldr	r3, [r5, #16]
 8010eda:	b9eb      	cbnz	r3, 8010f18 <_vfiprintf_r+0x78>
 8010edc:	4629      	mov	r1, r5
 8010ede:	4630      	mov	r0, r6
 8010ee0:	f000 f960 	bl	80111a4 <__swsetup_r>
 8010ee4:	b1c0      	cbz	r0, 8010f18 <_vfiprintf_r+0x78>
 8010ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ee8:	07dc      	lsls	r4, r3, #31
 8010eea:	d50e      	bpl.n	8010f0a <_vfiprintf_r+0x6a>
 8010eec:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef0:	b01d      	add	sp, #116	; 0x74
 8010ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ef6:	4b7b      	ldr	r3, [pc, #492]	; (80110e4 <_vfiprintf_r+0x244>)
 8010ef8:	429d      	cmp	r5, r3
 8010efa:	d101      	bne.n	8010f00 <_vfiprintf_r+0x60>
 8010efc:	68b5      	ldr	r5, [r6, #8]
 8010efe:	e7df      	b.n	8010ec0 <_vfiprintf_r+0x20>
 8010f00:	4b79      	ldr	r3, [pc, #484]	; (80110e8 <_vfiprintf_r+0x248>)
 8010f02:	429d      	cmp	r5, r3
 8010f04:	bf08      	it	eq
 8010f06:	68f5      	ldreq	r5, [r6, #12]
 8010f08:	e7da      	b.n	8010ec0 <_vfiprintf_r+0x20>
 8010f0a:	89ab      	ldrh	r3, [r5, #12]
 8010f0c:	0598      	lsls	r0, r3, #22
 8010f0e:	d4ed      	bmi.n	8010eec <_vfiprintf_r+0x4c>
 8010f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f12:	f000 fb76 	bl	8011602 <__retarget_lock_release_recursive>
 8010f16:	e7e9      	b.n	8010eec <_vfiprintf_r+0x4c>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f1c:	2320      	movs	r3, #32
 8010f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8010f26:	2330      	movs	r3, #48	; 0x30
 8010f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80110ec <_vfiprintf_r+0x24c>
 8010f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f30:	f04f 0901 	mov.w	r9, #1
 8010f34:	4623      	mov	r3, r4
 8010f36:	469a      	mov	sl, r3
 8010f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f3c:	b10a      	cbz	r2, 8010f42 <_vfiprintf_r+0xa2>
 8010f3e:	2a25      	cmp	r2, #37	; 0x25
 8010f40:	d1f9      	bne.n	8010f36 <_vfiprintf_r+0x96>
 8010f42:	ebba 0b04 	subs.w	fp, sl, r4
 8010f46:	d00b      	beq.n	8010f60 <_vfiprintf_r+0xc0>
 8010f48:	465b      	mov	r3, fp
 8010f4a:	4622      	mov	r2, r4
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	4630      	mov	r0, r6
 8010f50:	f7ff ff93 	bl	8010e7a <__sfputs_r>
 8010f54:	3001      	adds	r0, #1
 8010f56:	f000 80aa 	beq.w	80110ae <_vfiprintf_r+0x20e>
 8010f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f5c:	445a      	add	r2, fp
 8010f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8010f60:	f89a 3000 	ldrb.w	r3, [sl]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f000 80a2 	beq.w	80110ae <_vfiprintf_r+0x20e>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f74:	f10a 0a01 	add.w	sl, sl, #1
 8010f78:	9304      	str	r3, [sp, #16]
 8010f7a:	9307      	str	r3, [sp, #28]
 8010f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f80:	931a      	str	r3, [sp, #104]	; 0x68
 8010f82:	4654      	mov	r4, sl
 8010f84:	2205      	movs	r2, #5
 8010f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f8a:	4858      	ldr	r0, [pc, #352]	; (80110ec <_vfiprintf_r+0x24c>)
 8010f8c:	f7ef f9c8 	bl	8000320 <memchr>
 8010f90:	9a04      	ldr	r2, [sp, #16]
 8010f92:	b9d8      	cbnz	r0, 8010fcc <_vfiprintf_r+0x12c>
 8010f94:	06d1      	lsls	r1, r2, #27
 8010f96:	bf44      	itt	mi
 8010f98:	2320      	movmi	r3, #32
 8010f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f9e:	0713      	lsls	r3, r2, #28
 8010fa0:	bf44      	itt	mi
 8010fa2:	232b      	movmi	r3, #43	; 0x2b
 8010fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8010fac:	2b2a      	cmp	r3, #42	; 0x2a
 8010fae:	d015      	beq.n	8010fdc <_vfiprintf_r+0x13c>
 8010fb0:	9a07      	ldr	r2, [sp, #28]
 8010fb2:	4654      	mov	r4, sl
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	f04f 0c0a 	mov.w	ip, #10
 8010fba:	4621      	mov	r1, r4
 8010fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fc0:	3b30      	subs	r3, #48	; 0x30
 8010fc2:	2b09      	cmp	r3, #9
 8010fc4:	d94e      	bls.n	8011064 <_vfiprintf_r+0x1c4>
 8010fc6:	b1b0      	cbz	r0, 8010ff6 <_vfiprintf_r+0x156>
 8010fc8:	9207      	str	r2, [sp, #28]
 8010fca:	e014      	b.n	8010ff6 <_vfiprintf_r+0x156>
 8010fcc:	eba0 0308 	sub.w	r3, r0, r8
 8010fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8010fd4:	4313      	orrs	r3, r2
 8010fd6:	9304      	str	r3, [sp, #16]
 8010fd8:	46a2      	mov	sl, r4
 8010fda:	e7d2      	b.n	8010f82 <_vfiprintf_r+0xe2>
 8010fdc:	9b03      	ldr	r3, [sp, #12]
 8010fde:	1d19      	adds	r1, r3, #4
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	9103      	str	r1, [sp, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	bfbb      	ittet	lt
 8010fe8:	425b      	neglt	r3, r3
 8010fea:	f042 0202 	orrlt.w	r2, r2, #2
 8010fee:	9307      	strge	r3, [sp, #28]
 8010ff0:	9307      	strlt	r3, [sp, #28]
 8010ff2:	bfb8      	it	lt
 8010ff4:	9204      	strlt	r2, [sp, #16]
 8010ff6:	7823      	ldrb	r3, [r4, #0]
 8010ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8010ffa:	d10c      	bne.n	8011016 <_vfiprintf_r+0x176>
 8010ffc:	7863      	ldrb	r3, [r4, #1]
 8010ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8011000:	d135      	bne.n	801106e <_vfiprintf_r+0x1ce>
 8011002:	9b03      	ldr	r3, [sp, #12]
 8011004:	1d1a      	adds	r2, r3, #4
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	9203      	str	r2, [sp, #12]
 801100a:	2b00      	cmp	r3, #0
 801100c:	bfb8      	it	lt
 801100e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011012:	3402      	adds	r4, #2
 8011014:	9305      	str	r3, [sp, #20]
 8011016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80110fc <_vfiprintf_r+0x25c>
 801101a:	7821      	ldrb	r1, [r4, #0]
 801101c:	2203      	movs	r2, #3
 801101e:	4650      	mov	r0, sl
 8011020:	f7ef f97e 	bl	8000320 <memchr>
 8011024:	b140      	cbz	r0, 8011038 <_vfiprintf_r+0x198>
 8011026:	2340      	movs	r3, #64	; 0x40
 8011028:	eba0 000a 	sub.w	r0, r0, sl
 801102c:	fa03 f000 	lsl.w	r0, r3, r0
 8011030:	9b04      	ldr	r3, [sp, #16]
 8011032:	4303      	orrs	r3, r0
 8011034:	3401      	adds	r4, #1
 8011036:	9304      	str	r3, [sp, #16]
 8011038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801103c:	482c      	ldr	r0, [pc, #176]	; (80110f0 <_vfiprintf_r+0x250>)
 801103e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011042:	2206      	movs	r2, #6
 8011044:	f7ef f96c 	bl	8000320 <memchr>
 8011048:	2800      	cmp	r0, #0
 801104a:	d03f      	beq.n	80110cc <_vfiprintf_r+0x22c>
 801104c:	4b29      	ldr	r3, [pc, #164]	; (80110f4 <_vfiprintf_r+0x254>)
 801104e:	bb1b      	cbnz	r3, 8011098 <_vfiprintf_r+0x1f8>
 8011050:	9b03      	ldr	r3, [sp, #12]
 8011052:	3307      	adds	r3, #7
 8011054:	f023 0307 	bic.w	r3, r3, #7
 8011058:	3308      	adds	r3, #8
 801105a:	9303      	str	r3, [sp, #12]
 801105c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801105e:	443b      	add	r3, r7
 8011060:	9309      	str	r3, [sp, #36]	; 0x24
 8011062:	e767      	b.n	8010f34 <_vfiprintf_r+0x94>
 8011064:	fb0c 3202 	mla	r2, ip, r2, r3
 8011068:	460c      	mov	r4, r1
 801106a:	2001      	movs	r0, #1
 801106c:	e7a5      	b.n	8010fba <_vfiprintf_r+0x11a>
 801106e:	2300      	movs	r3, #0
 8011070:	3401      	adds	r4, #1
 8011072:	9305      	str	r3, [sp, #20]
 8011074:	4619      	mov	r1, r3
 8011076:	f04f 0c0a 	mov.w	ip, #10
 801107a:	4620      	mov	r0, r4
 801107c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011080:	3a30      	subs	r2, #48	; 0x30
 8011082:	2a09      	cmp	r2, #9
 8011084:	d903      	bls.n	801108e <_vfiprintf_r+0x1ee>
 8011086:	2b00      	cmp	r3, #0
 8011088:	d0c5      	beq.n	8011016 <_vfiprintf_r+0x176>
 801108a:	9105      	str	r1, [sp, #20]
 801108c:	e7c3      	b.n	8011016 <_vfiprintf_r+0x176>
 801108e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011092:	4604      	mov	r4, r0
 8011094:	2301      	movs	r3, #1
 8011096:	e7f0      	b.n	801107a <_vfiprintf_r+0x1da>
 8011098:	ab03      	add	r3, sp, #12
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	462a      	mov	r2, r5
 801109e:	4b16      	ldr	r3, [pc, #88]	; (80110f8 <_vfiprintf_r+0x258>)
 80110a0:	a904      	add	r1, sp, #16
 80110a2:	4630      	mov	r0, r6
 80110a4:	f7fc fd58 	bl	800db58 <_printf_float>
 80110a8:	4607      	mov	r7, r0
 80110aa:	1c78      	adds	r0, r7, #1
 80110ac:	d1d6      	bne.n	801105c <_vfiprintf_r+0x1bc>
 80110ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110b0:	07d9      	lsls	r1, r3, #31
 80110b2:	d405      	bmi.n	80110c0 <_vfiprintf_r+0x220>
 80110b4:	89ab      	ldrh	r3, [r5, #12]
 80110b6:	059a      	lsls	r2, r3, #22
 80110b8:	d402      	bmi.n	80110c0 <_vfiprintf_r+0x220>
 80110ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110bc:	f000 faa1 	bl	8011602 <__retarget_lock_release_recursive>
 80110c0:	89ab      	ldrh	r3, [r5, #12]
 80110c2:	065b      	lsls	r3, r3, #25
 80110c4:	f53f af12 	bmi.w	8010eec <_vfiprintf_r+0x4c>
 80110c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110ca:	e711      	b.n	8010ef0 <_vfiprintf_r+0x50>
 80110cc:	ab03      	add	r3, sp, #12
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	462a      	mov	r2, r5
 80110d2:	4b09      	ldr	r3, [pc, #36]	; (80110f8 <_vfiprintf_r+0x258>)
 80110d4:	a904      	add	r1, sp, #16
 80110d6:	4630      	mov	r0, r6
 80110d8:	f7fc ffca 	bl	800e070 <_printf_i>
 80110dc:	e7e4      	b.n	80110a8 <_vfiprintf_r+0x208>
 80110de:	bf00      	nop
 80110e0:	08011d7c 	.word	0x08011d7c
 80110e4:	08011d9c 	.word	0x08011d9c
 80110e8:	08011d5c 	.word	0x08011d5c
 80110ec:	08011d49 	.word	0x08011d49
 80110f0:	08011d53 	.word	0x08011d53
 80110f4:	0800db59 	.word	0x0800db59
 80110f8:	08010e7b 	.word	0x08010e7b
 80110fc:	08011d4f 	.word	0x08011d4f

08011100 <__swbuf_r>:
 8011100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011102:	460e      	mov	r6, r1
 8011104:	4614      	mov	r4, r2
 8011106:	4605      	mov	r5, r0
 8011108:	b118      	cbz	r0, 8011112 <__swbuf_r+0x12>
 801110a:	6983      	ldr	r3, [r0, #24]
 801110c:	b90b      	cbnz	r3, 8011112 <__swbuf_r+0x12>
 801110e:	f000 f9d9 	bl	80114c4 <__sinit>
 8011112:	4b21      	ldr	r3, [pc, #132]	; (8011198 <__swbuf_r+0x98>)
 8011114:	429c      	cmp	r4, r3
 8011116:	d12b      	bne.n	8011170 <__swbuf_r+0x70>
 8011118:	686c      	ldr	r4, [r5, #4]
 801111a:	69a3      	ldr	r3, [r4, #24]
 801111c:	60a3      	str	r3, [r4, #8]
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	071a      	lsls	r2, r3, #28
 8011122:	d52f      	bpl.n	8011184 <__swbuf_r+0x84>
 8011124:	6923      	ldr	r3, [r4, #16]
 8011126:	b36b      	cbz	r3, 8011184 <__swbuf_r+0x84>
 8011128:	6923      	ldr	r3, [r4, #16]
 801112a:	6820      	ldr	r0, [r4, #0]
 801112c:	1ac0      	subs	r0, r0, r3
 801112e:	6963      	ldr	r3, [r4, #20]
 8011130:	b2f6      	uxtb	r6, r6
 8011132:	4283      	cmp	r3, r0
 8011134:	4637      	mov	r7, r6
 8011136:	dc04      	bgt.n	8011142 <__swbuf_r+0x42>
 8011138:	4621      	mov	r1, r4
 801113a:	4628      	mov	r0, r5
 801113c:	f000 f92e 	bl	801139c <_fflush_r>
 8011140:	bb30      	cbnz	r0, 8011190 <__swbuf_r+0x90>
 8011142:	68a3      	ldr	r3, [r4, #8]
 8011144:	3b01      	subs	r3, #1
 8011146:	60a3      	str	r3, [r4, #8]
 8011148:	6823      	ldr	r3, [r4, #0]
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	6022      	str	r2, [r4, #0]
 801114e:	701e      	strb	r6, [r3, #0]
 8011150:	6963      	ldr	r3, [r4, #20]
 8011152:	3001      	adds	r0, #1
 8011154:	4283      	cmp	r3, r0
 8011156:	d004      	beq.n	8011162 <__swbuf_r+0x62>
 8011158:	89a3      	ldrh	r3, [r4, #12]
 801115a:	07db      	lsls	r3, r3, #31
 801115c:	d506      	bpl.n	801116c <__swbuf_r+0x6c>
 801115e:	2e0a      	cmp	r6, #10
 8011160:	d104      	bne.n	801116c <__swbuf_r+0x6c>
 8011162:	4621      	mov	r1, r4
 8011164:	4628      	mov	r0, r5
 8011166:	f000 f919 	bl	801139c <_fflush_r>
 801116a:	b988      	cbnz	r0, 8011190 <__swbuf_r+0x90>
 801116c:	4638      	mov	r0, r7
 801116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011170:	4b0a      	ldr	r3, [pc, #40]	; (801119c <__swbuf_r+0x9c>)
 8011172:	429c      	cmp	r4, r3
 8011174:	d101      	bne.n	801117a <__swbuf_r+0x7a>
 8011176:	68ac      	ldr	r4, [r5, #8]
 8011178:	e7cf      	b.n	801111a <__swbuf_r+0x1a>
 801117a:	4b09      	ldr	r3, [pc, #36]	; (80111a0 <__swbuf_r+0xa0>)
 801117c:	429c      	cmp	r4, r3
 801117e:	bf08      	it	eq
 8011180:	68ec      	ldreq	r4, [r5, #12]
 8011182:	e7ca      	b.n	801111a <__swbuf_r+0x1a>
 8011184:	4621      	mov	r1, r4
 8011186:	4628      	mov	r0, r5
 8011188:	f000 f80c 	bl	80111a4 <__swsetup_r>
 801118c:	2800      	cmp	r0, #0
 801118e:	d0cb      	beq.n	8011128 <__swbuf_r+0x28>
 8011190:	f04f 37ff 	mov.w	r7, #4294967295
 8011194:	e7ea      	b.n	801116c <__swbuf_r+0x6c>
 8011196:	bf00      	nop
 8011198:	08011d7c 	.word	0x08011d7c
 801119c:	08011d9c 	.word	0x08011d9c
 80111a0:	08011d5c 	.word	0x08011d5c

080111a4 <__swsetup_r>:
 80111a4:	4b32      	ldr	r3, [pc, #200]	; (8011270 <__swsetup_r+0xcc>)
 80111a6:	b570      	push	{r4, r5, r6, lr}
 80111a8:	681d      	ldr	r5, [r3, #0]
 80111aa:	4606      	mov	r6, r0
 80111ac:	460c      	mov	r4, r1
 80111ae:	b125      	cbz	r5, 80111ba <__swsetup_r+0x16>
 80111b0:	69ab      	ldr	r3, [r5, #24]
 80111b2:	b913      	cbnz	r3, 80111ba <__swsetup_r+0x16>
 80111b4:	4628      	mov	r0, r5
 80111b6:	f000 f985 	bl	80114c4 <__sinit>
 80111ba:	4b2e      	ldr	r3, [pc, #184]	; (8011274 <__swsetup_r+0xd0>)
 80111bc:	429c      	cmp	r4, r3
 80111be:	d10f      	bne.n	80111e0 <__swsetup_r+0x3c>
 80111c0:	686c      	ldr	r4, [r5, #4]
 80111c2:	89a3      	ldrh	r3, [r4, #12]
 80111c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111c8:	0719      	lsls	r1, r3, #28
 80111ca:	d42c      	bmi.n	8011226 <__swsetup_r+0x82>
 80111cc:	06dd      	lsls	r5, r3, #27
 80111ce:	d411      	bmi.n	80111f4 <__swsetup_r+0x50>
 80111d0:	2309      	movs	r3, #9
 80111d2:	6033      	str	r3, [r6, #0]
 80111d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80111d8:	81a3      	strh	r3, [r4, #12]
 80111da:	f04f 30ff 	mov.w	r0, #4294967295
 80111de:	e03e      	b.n	801125e <__swsetup_r+0xba>
 80111e0:	4b25      	ldr	r3, [pc, #148]	; (8011278 <__swsetup_r+0xd4>)
 80111e2:	429c      	cmp	r4, r3
 80111e4:	d101      	bne.n	80111ea <__swsetup_r+0x46>
 80111e6:	68ac      	ldr	r4, [r5, #8]
 80111e8:	e7eb      	b.n	80111c2 <__swsetup_r+0x1e>
 80111ea:	4b24      	ldr	r3, [pc, #144]	; (801127c <__swsetup_r+0xd8>)
 80111ec:	429c      	cmp	r4, r3
 80111ee:	bf08      	it	eq
 80111f0:	68ec      	ldreq	r4, [r5, #12]
 80111f2:	e7e6      	b.n	80111c2 <__swsetup_r+0x1e>
 80111f4:	0758      	lsls	r0, r3, #29
 80111f6:	d512      	bpl.n	801121e <__swsetup_r+0x7a>
 80111f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111fa:	b141      	cbz	r1, 801120e <__swsetup_r+0x6a>
 80111fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011200:	4299      	cmp	r1, r3
 8011202:	d002      	beq.n	801120a <__swsetup_r+0x66>
 8011204:	4630      	mov	r0, r6
 8011206:	f7ff fcc9 	bl	8010b9c <_free_r>
 801120a:	2300      	movs	r3, #0
 801120c:	6363      	str	r3, [r4, #52]	; 0x34
 801120e:	89a3      	ldrh	r3, [r4, #12]
 8011210:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011214:	81a3      	strh	r3, [r4, #12]
 8011216:	2300      	movs	r3, #0
 8011218:	6063      	str	r3, [r4, #4]
 801121a:	6923      	ldr	r3, [r4, #16]
 801121c:	6023      	str	r3, [r4, #0]
 801121e:	89a3      	ldrh	r3, [r4, #12]
 8011220:	f043 0308 	orr.w	r3, r3, #8
 8011224:	81a3      	strh	r3, [r4, #12]
 8011226:	6923      	ldr	r3, [r4, #16]
 8011228:	b94b      	cbnz	r3, 801123e <__swsetup_r+0x9a>
 801122a:	89a3      	ldrh	r3, [r4, #12]
 801122c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011234:	d003      	beq.n	801123e <__swsetup_r+0x9a>
 8011236:	4621      	mov	r1, r4
 8011238:	4630      	mov	r0, r6
 801123a:	f000 fa09 	bl	8011650 <__smakebuf_r>
 801123e:	89a0      	ldrh	r0, [r4, #12]
 8011240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011244:	f010 0301 	ands.w	r3, r0, #1
 8011248:	d00a      	beq.n	8011260 <__swsetup_r+0xbc>
 801124a:	2300      	movs	r3, #0
 801124c:	60a3      	str	r3, [r4, #8]
 801124e:	6963      	ldr	r3, [r4, #20]
 8011250:	425b      	negs	r3, r3
 8011252:	61a3      	str	r3, [r4, #24]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	b943      	cbnz	r3, 801126a <__swsetup_r+0xc6>
 8011258:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801125c:	d1ba      	bne.n	80111d4 <__swsetup_r+0x30>
 801125e:	bd70      	pop	{r4, r5, r6, pc}
 8011260:	0781      	lsls	r1, r0, #30
 8011262:	bf58      	it	pl
 8011264:	6963      	ldrpl	r3, [r4, #20]
 8011266:	60a3      	str	r3, [r4, #8]
 8011268:	e7f4      	b.n	8011254 <__swsetup_r+0xb0>
 801126a:	2000      	movs	r0, #0
 801126c:	e7f7      	b.n	801125e <__swsetup_r+0xba>
 801126e:	bf00      	nop
 8011270:	2400031c 	.word	0x2400031c
 8011274:	08011d7c 	.word	0x08011d7c
 8011278:	08011d9c 	.word	0x08011d9c
 801127c:	08011d5c 	.word	0x08011d5c

08011280 <abort>:
 8011280:	b508      	push	{r3, lr}
 8011282:	2006      	movs	r0, #6
 8011284:	f000 fa4c 	bl	8011720 <raise>
 8011288:	2001      	movs	r0, #1
 801128a:	f7f1 f871 	bl	8002370 <_exit>
	...

08011290 <__sflush_r>:
 8011290:	898a      	ldrh	r2, [r1, #12]
 8011292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011296:	4605      	mov	r5, r0
 8011298:	0710      	lsls	r0, r2, #28
 801129a:	460c      	mov	r4, r1
 801129c:	d458      	bmi.n	8011350 <__sflush_r+0xc0>
 801129e:	684b      	ldr	r3, [r1, #4]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	dc05      	bgt.n	80112b0 <__sflush_r+0x20>
 80112a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dc02      	bgt.n	80112b0 <__sflush_r+0x20>
 80112aa:	2000      	movs	r0, #0
 80112ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112b2:	2e00      	cmp	r6, #0
 80112b4:	d0f9      	beq.n	80112aa <__sflush_r+0x1a>
 80112b6:	2300      	movs	r3, #0
 80112b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112bc:	682f      	ldr	r7, [r5, #0]
 80112be:	602b      	str	r3, [r5, #0]
 80112c0:	d032      	beq.n	8011328 <__sflush_r+0x98>
 80112c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	075a      	lsls	r2, r3, #29
 80112c8:	d505      	bpl.n	80112d6 <__sflush_r+0x46>
 80112ca:	6863      	ldr	r3, [r4, #4]
 80112cc:	1ac0      	subs	r0, r0, r3
 80112ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112d0:	b10b      	cbz	r3, 80112d6 <__sflush_r+0x46>
 80112d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112d4:	1ac0      	subs	r0, r0, r3
 80112d6:	2300      	movs	r3, #0
 80112d8:	4602      	mov	r2, r0
 80112da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112dc:	6a21      	ldr	r1, [r4, #32]
 80112de:	4628      	mov	r0, r5
 80112e0:	47b0      	blx	r6
 80112e2:	1c43      	adds	r3, r0, #1
 80112e4:	89a3      	ldrh	r3, [r4, #12]
 80112e6:	d106      	bne.n	80112f6 <__sflush_r+0x66>
 80112e8:	6829      	ldr	r1, [r5, #0]
 80112ea:	291d      	cmp	r1, #29
 80112ec:	d82c      	bhi.n	8011348 <__sflush_r+0xb8>
 80112ee:	4a2a      	ldr	r2, [pc, #168]	; (8011398 <__sflush_r+0x108>)
 80112f0:	40ca      	lsrs	r2, r1
 80112f2:	07d6      	lsls	r6, r2, #31
 80112f4:	d528      	bpl.n	8011348 <__sflush_r+0xb8>
 80112f6:	2200      	movs	r2, #0
 80112f8:	6062      	str	r2, [r4, #4]
 80112fa:	04d9      	lsls	r1, r3, #19
 80112fc:	6922      	ldr	r2, [r4, #16]
 80112fe:	6022      	str	r2, [r4, #0]
 8011300:	d504      	bpl.n	801130c <__sflush_r+0x7c>
 8011302:	1c42      	adds	r2, r0, #1
 8011304:	d101      	bne.n	801130a <__sflush_r+0x7a>
 8011306:	682b      	ldr	r3, [r5, #0]
 8011308:	b903      	cbnz	r3, 801130c <__sflush_r+0x7c>
 801130a:	6560      	str	r0, [r4, #84]	; 0x54
 801130c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801130e:	602f      	str	r7, [r5, #0]
 8011310:	2900      	cmp	r1, #0
 8011312:	d0ca      	beq.n	80112aa <__sflush_r+0x1a>
 8011314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011318:	4299      	cmp	r1, r3
 801131a:	d002      	beq.n	8011322 <__sflush_r+0x92>
 801131c:	4628      	mov	r0, r5
 801131e:	f7ff fc3d 	bl	8010b9c <_free_r>
 8011322:	2000      	movs	r0, #0
 8011324:	6360      	str	r0, [r4, #52]	; 0x34
 8011326:	e7c1      	b.n	80112ac <__sflush_r+0x1c>
 8011328:	6a21      	ldr	r1, [r4, #32]
 801132a:	2301      	movs	r3, #1
 801132c:	4628      	mov	r0, r5
 801132e:	47b0      	blx	r6
 8011330:	1c41      	adds	r1, r0, #1
 8011332:	d1c7      	bne.n	80112c4 <__sflush_r+0x34>
 8011334:	682b      	ldr	r3, [r5, #0]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d0c4      	beq.n	80112c4 <__sflush_r+0x34>
 801133a:	2b1d      	cmp	r3, #29
 801133c:	d001      	beq.n	8011342 <__sflush_r+0xb2>
 801133e:	2b16      	cmp	r3, #22
 8011340:	d101      	bne.n	8011346 <__sflush_r+0xb6>
 8011342:	602f      	str	r7, [r5, #0]
 8011344:	e7b1      	b.n	80112aa <__sflush_r+0x1a>
 8011346:	89a3      	ldrh	r3, [r4, #12]
 8011348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801134c:	81a3      	strh	r3, [r4, #12]
 801134e:	e7ad      	b.n	80112ac <__sflush_r+0x1c>
 8011350:	690f      	ldr	r7, [r1, #16]
 8011352:	2f00      	cmp	r7, #0
 8011354:	d0a9      	beq.n	80112aa <__sflush_r+0x1a>
 8011356:	0793      	lsls	r3, r2, #30
 8011358:	680e      	ldr	r6, [r1, #0]
 801135a:	bf08      	it	eq
 801135c:	694b      	ldreq	r3, [r1, #20]
 801135e:	600f      	str	r7, [r1, #0]
 8011360:	bf18      	it	ne
 8011362:	2300      	movne	r3, #0
 8011364:	eba6 0807 	sub.w	r8, r6, r7
 8011368:	608b      	str	r3, [r1, #8]
 801136a:	f1b8 0f00 	cmp.w	r8, #0
 801136e:	dd9c      	ble.n	80112aa <__sflush_r+0x1a>
 8011370:	6a21      	ldr	r1, [r4, #32]
 8011372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011374:	4643      	mov	r3, r8
 8011376:	463a      	mov	r2, r7
 8011378:	4628      	mov	r0, r5
 801137a:	47b0      	blx	r6
 801137c:	2800      	cmp	r0, #0
 801137e:	dc06      	bgt.n	801138e <__sflush_r+0xfe>
 8011380:	89a3      	ldrh	r3, [r4, #12]
 8011382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011386:	81a3      	strh	r3, [r4, #12]
 8011388:	f04f 30ff 	mov.w	r0, #4294967295
 801138c:	e78e      	b.n	80112ac <__sflush_r+0x1c>
 801138e:	4407      	add	r7, r0
 8011390:	eba8 0800 	sub.w	r8, r8, r0
 8011394:	e7e9      	b.n	801136a <__sflush_r+0xda>
 8011396:	bf00      	nop
 8011398:	20400001 	.word	0x20400001

0801139c <_fflush_r>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	690b      	ldr	r3, [r1, #16]
 80113a0:	4605      	mov	r5, r0
 80113a2:	460c      	mov	r4, r1
 80113a4:	b913      	cbnz	r3, 80113ac <_fflush_r+0x10>
 80113a6:	2500      	movs	r5, #0
 80113a8:	4628      	mov	r0, r5
 80113aa:	bd38      	pop	{r3, r4, r5, pc}
 80113ac:	b118      	cbz	r0, 80113b6 <_fflush_r+0x1a>
 80113ae:	6983      	ldr	r3, [r0, #24]
 80113b0:	b90b      	cbnz	r3, 80113b6 <_fflush_r+0x1a>
 80113b2:	f000 f887 	bl	80114c4 <__sinit>
 80113b6:	4b14      	ldr	r3, [pc, #80]	; (8011408 <_fflush_r+0x6c>)
 80113b8:	429c      	cmp	r4, r3
 80113ba:	d11b      	bne.n	80113f4 <_fflush_r+0x58>
 80113bc:	686c      	ldr	r4, [r5, #4]
 80113be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d0ef      	beq.n	80113a6 <_fflush_r+0xa>
 80113c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113c8:	07d0      	lsls	r0, r2, #31
 80113ca:	d404      	bmi.n	80113d6 <_fflush_r+0x3a>
 80113cc:	0599      	lsls	r1, r3, #22
 80113ce:	d402      	bmi.n	80113d6 <_fflush_r+0x3a>
 80113d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113d2:	f000 f915 	bl	8011600 <__retarget_lock_acquire_recursive>
 80113d6:	4628      	mov	r0, r5
 80113d8:	4621      	mov	r1, r4
 80113da:	f7ff ff59 	bl	8011290 <__sflush_r>
 80113de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113e0:	07da      	lsls	r2, r3, #31
 80113e2:	4605      	mov	r5, r0
 80113e4:	d4e0      	bmi.n	80113a8 <_fflush_r+0xc>
 80113e6:	89a3      	ldrh	r3, [r4, #12]
 80113e8:	059b      	lsls	r3, r3, #22
 80113ea:	d4dd      	bmi.n	80113a8 <_fflush_r+0xc>
 80113ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113ee:	f000 f908 	bl	8011602 <__retarget_lock_release_recursive>
 80113f2:	e7d9      	b.n	80113a8 <_fflush_r+0xc>
 80113f4:	4b05      	ldr	r3, [pc, #20]	; (801140c <_fflush_r+0x70>)
 80113f6:	429c      	cmp	r4, r3
 80113f8:	d101      	bne.n	80113fe <_fflush_r+0x62>
 80113fa:	68ac      	ldr	r4, [r5, #8]
 80113fc:	e7df      	b.n	80113be <_fflush_r+0x22>
 80113fe:	4b04      	ldr	r3, [pc, #16]	; (8011410 <_fflush_r+0x74>)
 8011400:	429c      	cmp	r4, r3
 8011402:	bf08      	it	eq
 8011404:	68ec      	ldreq	r4, [r5, #12]
 8011406:	e7da      	b.n	80113be <_fflush_r+0x22>
 8011408:	08011d7c 	.word	0x08011d7c
 801140c:	08011d9c 	.word	0x08011d9c
 8011410:	08011d5c 	.word	0x08011d5c

08011414 <std>:
 8011414:	2300      	movs	r3, #0
 8011416:	b510      	push	{r4, lr}
 8011418:	4604      	mov	r4, r0
 801141a:	e9c0 3300 	strd	r3, r3, [r0]
 801141e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011422:	6083      	str	r3, [r0, #8]
 8011424:	8181      	strh	r1, [r0, #12]
 8011426:	6643      	str	r3, [r0, #100]	; 0x64
 8011428:	81c2      	strh	r2, [r0, #14]
 801142a:	6183      	str	r3, [r0, #24]
 801142c:	4619      	mov	r1, r3
 801142e:	2208      	movs	r2, #8
 8011430:	305c      	adds	r0, #92	; 0x5c
 8011432:	f7fc faf9 	bl	800da28 <memset>
 8011436:	4b05      	ldr	r3, [pc, #20]	; (801144c <std+0x38>)
 8011438:	6263      	str	r3, [r4, #36]	; 0x24
 801143a:	4b05      	ldr	r3, [pc, #20]	; (8011450 <std+0x3c>)
 801143c:	62a3      	str	r3, [r4, #40]	; 0x28
 801143e:	4b05      	ldr	r3, [pc, #20]	; (8011454 <std+0x40>)
 8011440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011442:	4b05      	ldr	r3, [pc, #20]	; (8011458 <std+0x44>)
 8011444:	6224      	str	r4, [r4, #32]
 8011446:	6323      	str	r3, [r4, #48]	; 0x30
 8011448:	bd10      	pop	{r4, pc}
 801144a:	bf00      	nop
 801144c:	08011759 	.word	0x08011759
 8011450:	0801177b 	.word	0x0801177b
 8011454:	080117b3 	.word	0x080117b3
 8011458:	080117d7 	.word	0x080117d7

0801145c <_cleanup_r>:
 801145c:	4901      	ldr	r1, [pc, #4]	; (8011464 <_cleanup_r+0x8>)
 801145e:	f000 b8af 	b.w	80115c0 <_fwalk_reent>
 8011462:	bf00      	nop
 8011464:	0801139d 	.word	0x0801139d

08011468 <__sfmoreglue>:
 8011468:	b570      	push	{r4, r5, r6, lr}
 801146a:	2268      	movs	r2, #104	; 0x68
 801146c:	1e4d      	subs	r5, r1, #1
 801146e:	4355      	muls	r5, r2
 8011470:	460e      	mov	r6, r1
 8011472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011476:	f7ff fbfd 	bl	8010c74 <_malloc_r>
 801147a:	4604      	mov	r4, r0
 801147c:	b140      	cbz	r0, 8011490 <__sfmoreglue+0x28>
 801147e:	2100      	movs	r1, #0
 8011480:	e9c0 1600 	strd	r1, r6, [r0]
 8011484:	300c      	adds	r0, #12
 8011486:	60a0      	str	r0, [r4, #8]
 8011488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801148c:	f7fc facc 	bl	800da28 <memset>
 8011490:	4620      	mov	r0, r4
 8011492:	bd70      	pop	{r4, r5, r6, pc}

08011494 <__sfp_lock_acquire>:
 8011494:	4801      	ldr	r0, [pc, #4]	; (801149c <__sfp_lock_acquire+0x8>)
 8011496:	f000 b8b3 	b.w	8011600 <__retarget_lock_acquire_recursive>
 801149a:	bf00      	nop
 801149c:	24000bd9 	.word	0x24000bd9

080114a0 <__sfp_lock_release>:
 80114a0:	4801      	ldr	r0, [pc, #4]	; (80114a8 <__sfp_lock_release+0x8>)
 80114a2:	f000 b8ae 	b.w	8011602 <__retarget_lock_release_recursive>
 80114a6:	bf00      	nop
 80114a8:	24000bd9 	.word	0x24000bd9

080114ac <__sinit_lock_acquire>:
 80114ac:	4801      	ldr	r0, [pc, #4]	; (80114b4 <__sinit_lock_acquire+0x8>)
 80114ae:	f000 b8a7 	b.w	8011600 <__retarget_lock_acquire_recursive>
 80114b2:	bf00      	nop
 80114b4:	24000bda 	.word	0x24000bda

080114b8 <__sinit_lock_release>:
 80114b8:	4801      	ldr	r0, [pc, #4]	; (80114c0 <__sinit_lock_release+0x8>)
 80114ba:	f000 b8a2 	b.w	8011602 <__retarget_lock_release_recursive>
 80114be:	bf00      	nop
 80114c0:	24000bda 	.word	0x24000bda

080114c4 <__sinit>:
 80114c4:	b510      	push	{r4, lr}
 80114c6:	4604      	mov	r4, r0
 80114c8:	f7ff fff0 	bl	80114ac <__sinit_lock_acquire>
 80114cc:	69a3      	ldr	r3, [r4, #24]
 80114ce:	b11b      	cbz	r3, 80114d8 <__sinit+0x14>
 80114d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114d4:	f7ff bff0 	b.w	80114b8 <__sinit_lock_release>
 80114d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114dc:	6523      	str	r3, [r4, #80]	; 0x50
 80114de:	4b13      	ldr	r3, [pc, #76]	; (801152c <__sinit+0x68>)
 80114e0:	4a13      	ldr	r2, [pc, #76]	; (8011530 <__sinit+0x6c>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80114e6:	42a3      	cmp	r3, r4
 80114e8:	bf04      	itt	eq
 80114ea:	2301      	moveq	r3, #1
 80114ec:	61a3      	streq	r3, [r4, #24]
 80114ee:	4620      	mov	r0, r4
 80114f0:	f000 f820 	bl	8011534 <__sfp>
 80114f4:	6060      	str	r0, [r4, #4]
 80114f6:	4620      	mov	r0, r4
 80114f8:	f000 f81c 	bl	8011534 <__sfp>
 80114fc:	60a0      	str	r0, [r4, #8]
 80114fe:	4620      	mov	r0, r4
 8011500:	f000 f818 	bl	8011534 <__sfp>
 8011504:	2200      	movs	r2, #0
 8011506:	60e0      	str	r0, [r4, #12]
 8011508:	2104      	movs	r1, #4
 801150a:	6860      	ldr	r0, [r4, #4]
 801150c:	f7ff ff82 	bl	8011414 <std>
 8011510:	68a0      	ldr	r0, [r4, #8]
 8011512:	2201      	movs	r2, #1
 8011514:	2109      	movs	r1, #9
 8011516:	f7ff ff7d 	bl	8011414 <std>
 801151a:	68e0      	ldr	r0, [r4, #12]
 801151c:	2202      	movs	r2, #2
 801151e:	2112      	movs	r1, #18
 8011520:	f7ff ff78 	bl	8011414 <std>
 8011524:	2301      	movs	r3, #1
 8011526:	61a3      	str	r3, [r4, #24]
 8011528:	e7d2      	b.n	80114d0 <__sinit+0xc>
 801152a:	bf00      	nop
 801152c:	0801191c 	.word	0x0801191c
 8011530:	0801145d 	.word	0x0801145d

08011534 <__sfp>:
 8011534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011536:	4607      	mov	r7, r0
 8011538:	f7ff ffac 	bl	8011494 <__sfp_lock_acquire>
 801153c:	4b1e      	ldr	r3, [pc, #120]	; (80115b8 <__sfp+0x84>)
 801153e:	681e      	ldr	r6, [r3, #0]
 8011540:	69b3      	ldr	r3, [r6, #24]
 8011542:	b913      	cbnz	r3, 801154a <__sfp+0x16>
 8011544:	4630      	mov	r0, r6
 8011546:	f7ff ffbd 	bl	80114c4 <__sinit>
 801154a:	3648      	adds	r6, #72	; 0x48
 801154c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011550:	3b01      	subs	r3, #1
 8011552:	d503      	bpl.n	801155c <__sfp+0x28>
 8011554:	6833      	ldr	r3, [r6, #0]
 8011556:	b30b      	cbz	r3, 801159c <__sfp+0x68>
 8011558:	6836      	ldr	r6, [r6, #0]
 801155a:	e7f7      	b.n	801154c <__sfp+0x18>
 801155c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011560:	b9d5      	cbnz	r5, 8011598 <__sfp+0x64>
 8011562:	4b16      	ldr	r3, [pc, #88]	; (80115bc <__sfp+0x88>)
 8011564:	60e3      	str	r3, [r4, #12]
 8011566:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801156a:	6665      	str	r5, [r4, #100]	; 0x64
 801156c:	f000 f847 	bl	80115fe <__retarget_lock_init_recursive>
 8011570:	f7ff ff96 	bl	80114a0 <__sfp_lock_release>
 8011574:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011578:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801157c:	6025      	str	r5, [r4, #0]
 801157e:	61a5      	str	r5, [r4, #24]
 8011580:	2208      	movs	r2, #8
 8011582:	4629      	mov	r1, r5
 8011584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011588:	f7fc fa4e 	bl	800da28 <memset>
 801158c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011594:	4620      	mov	r0, r4
 8011596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011598:	3468      	adds	r4, #104	; 0x68
 801159a:	e7d9      	b.n	8011550 <__sfp+0x1c>
 801159c:	2104      	movs	r1, #4
 801159e:	4638      	mov	r0, r7
 80115a0:	f7ff ff62 	bl	8011468 <__sfmoreglue>
 80115a4:	4604      	mov	r4, r0
 80115a6:	6030      	str	r0, [r6, #0]
 80115a8:	2800      	cmp	r0, #0
 80115aa:	d1d5      	bne.n	8011558 <__sfp+0x24>
 80115ac:	f7ff ff78 	bl	80114a0 <__sfp_lock_release>
 80115b0:	230c      	movs	r3, #12
 80115b2:	603b      	str	r3, [r7, #0]
 80115b4:	e7ee      	b.n	8011594 <__sfp+0x60>
 80115b6:	bf00      	nop
 80115b8:	0801191c 	.word	0x0801191c
 80115bc:	ffff0001 	.word	0xffff0001

080115c0 <_fwalk_reent>:
 80115c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c4:	4606      	mov	r6, r0
 80115c6:	4688      	mov	r8, r1
 80115c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115cc:	2700      	movs	r7, #0
 80115ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115d2:	f1b9 0901 	subs.w	r9, r9, #1
 80115d6:	d505      	bpl.n	80115e4 <_fwalk_reent+0x24>
 80115d8:	6824      	ldr	r4, [r4, #0]
 80115da:	2c00      	cmp	r4, #0
 80115dc:	d1f7      	bne.n	80115ce <_fwalk_reent+0xe>
 80115de:	4638      	mov	r0, r7
 80115e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e4:	89ab      	ldrh	r3, [r5, #12]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d907      	bls.n	80115fa <_fwalk_reent+0x3a>
 80115ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115ee:	3301      	adds	r3, #1
 80115f0:	d003      	beq.n	80115fa <_fwalk_reent+0x3a>
 80115f2:	4629      	mov	r1, r5
 80115f4:	4630      	mov	r0, r6
 80115f6:	47c0      	blx	r8
 80115f8:	4307      	orrs	r7, r0
 80115fa:	3568      	adds	r5, #104	; 0x68
 80115fc:	e7e9      	b.n	80115d2 <_fwalk_reent+0x12>

080115fe <__retarget_lock_init_recursive>:
 80115fe:	4770      	bx	lr

08011600 <__retarget_lock_acquire_recursive>:
 8011600:	4770      	bx	lr

08011602 <__retarget_lock_release_recursive>:
 8011602:	4770      	bx	lr

08011604 <__swhatbuf_r>:
 8011604:	b570      	push	{r4, r5, r6, lr}
 8011606:	460e      	mov	r6, r1
 8011608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801160c:	2900      	cmp	r1, #0
 801160e:	b096      	sub	sp, #88	; 0x58
 8011610:	4614      	mov	r4, r2
 8011612:	461d      	mov	r5, r3
 8011614:	da08      	bge.n	8011628 <__swhatbuf_r+0x24>
 8011616:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801161a:	2200      	movs	r2, #0
 801161c:	602a      	str	r2, [r5, #0]
 801161e:	061a      	lsls	r2, r3, #24
 8011620:	d410      	bmi.n	8011644 <__swhatbuf_r+0x40>
 8011622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011626:	e00e      	b.n	8011646 <__swhatbuf_r+0x42>
 8011628:	466a      	mov	r2, sp
 801162a:	f000 f8fb 	bl	8011824 <_fstat_r>
 801162e:	2800      	cmp	r0, #0
 8011630:	dbf1      	blt.n	8011616 <__swhatbuf_r+0x12>
 8011632:	9a01      	ldr	r2, [sp, #4]
 8011634:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011638:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801163c:	425a      	negs	r2, r3
 801163e:	415a      	adcs	r2, r3
 8011640:	602a      	str	r2, [r5, #0]
 8011642:	e7ee      	b.n	8011622 <__swhatbuf_r+0x1e>
 8011644:	2340      	movs	r3, #64	; 0x40
 8011646:	2000      	movs	r0, #0
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	b016      	add	sp, #88	; 0x58
 801164c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011650 <__smakebuf_r>:
 8011650:	898b      	ldrh	r3, [r1, #12]
 8011652:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011654:	079d      	lsls	r5, r3, #30
 8011656:	4606      	mov	r6, r0
 8011658:	460c      	mov	r4, r1
 801165a:	d507      	bpl.n	801166c <__smakebuf_r+0x1c>
 801165c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	6123      	str	r3, [r4, #16]
 8011664:	2301      	movs	r3, #1
 8011666:	6163      	str	r3, [r4, #20]
 8011668:	b002      	add	sp, #8
 801166a:	bd70      	pop	{r4, r5, r6, pc}
 801166c:	ab01      	add	r3, sp, #4
 801166e:	466a      	mov	r2, sp
 8011670:	f7ff ffc8 	bl	8011604 <__swhatbuf_r>
 8011674:	9900      	ldr	r1, [sp, #0]
 8011676:	4605      	mov	r5, r0
 8011678:	4630      	mov	r0, r6
 801167a:	f7ff fafb 	bl	8010c74 <_malloc_r>
 801167e:	b948      	cbnz	r0, 8011694 <__smakebuf_r+0x44>
 8011680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011684:	059a      	lsls	r2, r3, #22
 8011686:	d4ef      	bmi.n	8011668 <__smakebuf_r+0x18>
 8011688:	f023 0303 	bic.w	r3, r3, #3
 801168c:	f043 0302 	orr.w	r3, r3, #2
 8011690:	81a3      	strh	r3, [r4, #12]
 8011692:	e7e3      	b.n	801165c <__smakebuf_r+0xc>
 8011694:	4b0d      	ldr	r3, [pc, #52]	; (80116cc <__smakebuf_r+0x7c>)
 8011696:	62b3      	str	r3, [r6, #40]	; 0x28
 8011698:	89a3      	ldrh	r3, [r4, #12]
 801169a:	6020      	str	r0, [r4, #0]
 801169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116a0:	81a3      	strh	r3, [r4, #12]
 80116a2:	9b00      	ldr	r3, [sp, #0]
 80116a4:	6163      	str	r3, [r4, #20]
 80116a6:	9b01      	ldr	r3, [sp, #4]
 80116a8:	6120      	str	r0, [r4, #16]
 80116aa:	b15b      	cbz	r3, 80116c4 <__smakebuf_r+0x74>
 80116ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116b0:	4630      	mov	r0, r6
 80116b2:	f000 f8c9 	bl	8011848 <_isatty_r>
 80116b6:	b128      	cbz	r0, 80116c4 <__smakebuf_r+0x74>
 80116b8:	89a3      	ldrh	r3, [r4, #12]
 80116ba:	f023 0303 	bic.w	r3, r3, #3
 80116be:	f043 0301 	orr.w	r3, r3, #1
 80116c2:	81a3      	strh	r3, [r4, #12]
 80116c4:	89a0      	ldrh	r0, [r4, #12]
 80116c6:	4305      	orrs	r5, r0
 80116c8:	81a5      	strh	r5, [r4, #12]
 80116ca:	e7cd      	b.n	8011668 <__smakebuf_r+0x18>
 80116cc:	0801145d 	.word	0x0801145d

080116d0 <_raise_r>:
 80116d0:	291f      	cmp	r1, #31
 80116d2:	b538      	push	{r3, r4, r5, lr}
 80116d4:	4604      	mov	r4, r0
 80116d6:	460d      	mov	r5, r1
 80116d8:	d904      	bls.n	80116e4 <_raise_r+0x14>
 80116da:	2316      	movs	r3, #22
 80116dc:	6003      	str	r3, [r0, #0]
 80116de:	f04f 30ff 	mov.w	r0, #4294967295
 80116e2:	bd38      	pop	{r3, r4, r5, pc}
 80116e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80116e6:	b112      	cbz	r2, 80116ee <_raise_r+0x1e>
 80116e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80116ec:	b94b      	cbnz	r3, 8011702 <_raise_r+0x32>
 80116ee:	4620      	mov	r0, r4
 80116f0:	f000 f830 	bl	8011754 <_getpid_r>
 80116f4:	462a      	mov	r2, r5
 80116f6:	4601      	mov	r1, r0
 80116f8:	4620      	mov	r0, r4
 80116fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116fe:	f000 b817 	b.w	8011730 <_kill_r>
 8011702:	2b01      	cmp	r3, #1
 8011704:	d00a      	beq.n	801171c <_raise_r+0x4c>
 8011706:	1c59      	adds	r1, r3, #1
 8011708:	d103      	bne.n	8011712 <_raise_r+0x42>
 801170a:	2316      	movs	r3, #22
 801170c:	6003      	str	r3, [r0, #0]
 801170e:	2001      	movs	r0, #1
 8011710:	e7e7      	b.n	80116e2 <_raise_r+0x12>
 8011712:	2400      	movs	r4, #0
 8011714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011718:	4628      	mov	r0, r5
 801171a:	4798      	blx	r3
 801171c:	2000      	movs	r0, #0
 801171e:	e7e0      	b.n	80116e2 <_raise_r+0x12>

08011720 <raise>:
 8011720:	4b02      	ldr	r3, [pc, #8]	; (801172c <raise+0xc>)
 8011722:	4601      	mov	r1, r0
 8011724:	6818      	ldr	r0, [r3, #0]
 8011726:	f7ff bfd3 	b.w	80116d0 <_raise_r>
 801172a:	bf00      	nop
 801172c:	2400031c 	.word	0x2400031c

08011730 <_kill_r>:
 8011730:	b538      	push	{r3, r4, r5, lr}
 8011732:	4d07      	ldr	r5, [pc, #28]	; (8011750 <_kill_r+0x20>)
 8011734:	2300      	movs	r3, #0
 8011736:	4604      	mov	r4, r0
 8011738:	4608      	mov	r0, r1
 801173a:	4611      	mov	r1, r2
 801173c:	602b      	str	r3, [r5, #0]
 801173e:	f7f0 fe07 	bl	8002350 <_kill>
 8011742:	1c43      	adds	r3, r0, #1
 8011744:	d102      	bne.n	801174c <_kill_r+0x1c>
 8011746:	682b      	ldr	r3, [r5, #0]
 8011748:	b103      	cbz	r3, 801174c <_kill_r+0x1c>
 801174a:	6023      	str	r3, [r4, #0]
 801174c:	bd38      	pop	{r3, r4, r5, pc}
 801174e:	bf00      	nop
 8011750:	24000bd4 	.word	0x24000bd4

08011754 <_getpid_r>:
 8011754:	f7f0 bdf4 	b.w	8002340 <_getpid>

08011758 <__sread>:
 8011758:	b510      	push	{r4, lr}
 801175a:	460c      	mov	r4, r1
 801175c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011760:	f000 f894 	bl	801188c <_read_r>
 8011764:	2800      	cmp	r0, #0
 8011766:	bfab      	itete	ge
 8011768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801176a:	89a3      	ldrhlt	r3, [r4, #12]
 801176c:	181b      	addge	r3, r3, r0
 801176e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011772:	bfac      	ite	ge
 8011774:	6563      	strge	r3, [r4, #84]	; 0x54
 8011776:	81a3      	strhlt	r3, [r4, #12]
 8011778:	bd10      	pop	{r4, pc}

0801177a <__swrite>:
 801177a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801177e:	461f      	mov	r7, r3
 8011780:	898b      	ldrh	r3, [r1, #12]
 8011782:	05db      	lsls	r3, r3, #23
 8011784:	4605      	mov	r5, r0
 8011786:	460c      	mov	r4, r1
 8011788:	4616      	mov	r6, r2
 801178a:	d505      	bpl.n	8011798 <__swrite+0x1e>
 801178c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011790:	2302      	movs	r3, #2
 8011792:	2200      	movs	r2, #0
 8011794:	f000 f868 	bl	8011868 <_lseek_r>
 8011798:	89a3      	ldrh	r3, [r4, #12]
 801179a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801179e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117a2:	81a3      	strh	r3, [r4, #12]
 80117a4:	4632      	mov	r2, r6
 80117a6:	463b      	mov	r3, r7
 80117a8:	4628      	mov	r0, r5
 80117aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117ae:	f000 b817 	b.w	80117e0 <_write_r>

080117b2 <__sseek>:
 80117b2:	b510      	push	{r4, lr}
 80117b4:	460c      	mov	r4, r1
 80117b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117ba:	f000 f855 	bl	8011868 <_lseek_r>
 80117be:	1c43      	adds	r3, r0, #1
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	bf15      	itete	ne
 80117c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80117c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117ce:	81a3      	strheq	r3, [r4, #12]
 80117d0:	bf18      	it	ne
 80117d2:	81a3      	strhne	r3, [r4, #12]
 80117d4:	bd10      	pop	{r4, pc}

080117d6 <__sclose>:
 80117d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117da:	f000 b813 	b.w	8011804 <_close_r>
	...

080117e0 <_write_r>:
 80117e0:	b538      	push	{r3, r4, r5, lr}
 80117e2:	4d07      	ldr	r5, [pc, #28]	; (8011800 <_write_r+0x20>)
 80117e4:	4604      	mov	r4, r0
 80117e6:	4608      	mov	r0, r1
 80117e8:	4611      	mov	r1, r2
 80117ea:	2200      	movs	r2, #0
 80117ec:	602a      	str	r2, [r5, #0]
 80117ee:	461a      	mov	r2, r3
 80117f0:	f7f0 fde5 	bl	80023be <_write>
 80117f4:	1c43      	adds	r3, r0, #1
 80117f6:	d102      	bne.n	80117fe <_write_r+0x1e>
 80117f8:	682b      	ldr	r3, [r5, #0]
 80117fa:	b103      	cbz	r3, 80117fe <_write_r+0x1e>
 80117fc:	6023      	str	r3, [r4, #0]
 80117fe:	bd38      	pop	{r3, r4, r5, pc}
 8011800:	24000bd4 	.word	0x24000bd4

08011804 <_close_r>:
 8011804:	b538      	push	{r3, r4, r5, lr}
 8011806:	4d06      	ldr	r5, [pc, #24]	; (8011820 <_close_r+0x1c>)
 8011808:	2300      	movs	r3, #0
 801180a:	4604      	mov	r4, r0
 801180c:	4608      	mov	r0, r1
 801180e:	602b      	str	r3, [r5, #0]
 8011810:	f7f0 fdf1 	bl	80023f6 <_close>
 8011814:	1c43      	adds	r3, r0, #1
 8011816:	d102      	bne.n	801181e <_close_r+0x1a>
 8011818:	682b      	ldr	r3, [r5, #0]
 801181a:	b103      	cbz	r3, 801181e <_close_r+0x1a>
 801181c:	6023      	str	r3, [r4, #0]
 801181e:	bd38      	pop	{r3, r4, r5, pc}
 8011820:	24000bd4 	.word	0x24000bd4

08011824 <_fstat_r>:
 8011824:	b538      	push	{r3, r4, r5, lr}
 8011826:	4d07      	ldr	r5, [pc, #28]	; (8011844 <_fstat_r+0x20>)
 8011828:	2300      	movs	r3, #0
 801182a:	4604      	mov	r4, r0
 801182c:	4608      	mov	r0, r1
 801182e:	4611      	mov	r1, r2
 8011830:	602b      	str	r3, [r5, #0]
 8011832:	f7f0 fdec 	bl	800240e <_fstat>
 8011836:	1c43      	adds	r3, r0, #1
 8011838:	d102      	bne.n	8011840 <_fstat_r+0x1c>
 801183a:	682b      	ldr	r3, [r5, #0]
 801183c:	b103      	cbz	r3, 8011840 <_fstat_r+0x1c>
 801183e:	6023      	str	r3, [r4, #0]
 8011840:	bd38      	pop	{r3, r4, r5, pc}
 8011842:	bf00      	nop
 8011844:	24000bd4 	.word	0x24000bd4

08011848 <_isatty_r>:
 8011848:	b538      	push	{r3, r4, r5, lr}
 801184a:	4d06      	ldr	r5, [pc, #24]	; (8011864 <_isatty_r+0x1c>)
 801184c:	2300      	movs	r3, #0
 801184e:	4604      	mov	r4, r0
 8011850:	4608      	mov	r0, r1
 8011852:	602b      	str	r3, [r5, #0]
 8011854:	f7f0 fdeb 	bl	800242e <_isatty>
 8011858:	1c43      	adds	r3, r0, #1
 801185a:	d102      	bne.n	8011862 <_isatty_r+0x1a>
 801185c:	682b      	ldr	r3, [r5, #0]
 801185e:	b103      	cbz	r3, 8011862 <_isatty_r+0x1a>
 8011860:	6023      	str	r3, [r4, #0]
 8011862:	bd38      	pop	{r3, r4, r5, pc}
 8011864:	24000bd4 	.word	0x24000bd4

08011868 <_lseek_r>:
 8011868:	b538      	push	{r3, r4, r5, lr}
 801186a:	4d07      	ldr	r5, [pc, #28]	; (8011888 <_lseek_r+0x20>)
 801186c:	4604      	mov	r4, r0
 801186e:	4608      	mov	r0, r1
 8011870:	4611      	mov	r1, r2
 8011872:	2200      	movs	r2, #0
 8011874:	602a      	str	r2, [r5, #0]
 8011876:	461a      	mov	r2, r3
 8011878:	f7f0 fde4 	bl	8002444 <_lseek>
 801187c:	1c43      	adds	r3, r0, #1
 801187e:	d102      	bne.n	8011886 <_lseek_r+0x1e>
 8011880:	682b      	ldr	r3, [r5, #0]
 8011882:	b103      	cbz	r3, 8011886 <_lseek_r+0x1e>
 8011884:	6023      	str	r3, [r4, #0]
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	24000bd4 	.word	0x24000bd4

0801188c <_read_r>:
 801188c:	b538      	push	{r3, r4, r5, lr}
 801188e:	4d07      	ldr	r5, [pc, #28]	; (80118ac <_read_r+0x20>)
 8011890:	4604      	mov	r4, r0
 8011892:	4608      	mov	r0, r1
 8011894:	4611      	mov	r1, r2
 8011896:	2200      	movs	r2, #0
 8011898:	602a      	str	r2, [r5, #0]
 801189a:	461a      	mov	r2, r3
 801189c:	f7f0 fd72 	bl	8002384 <_read>
 80118a0:	1c43      	adds	r3, r0, #1
 80118a2:	d102      	bne.n	80118aa <_read_r+0x1e>
 80118a4:	682b      	ldr	r3, [r5, #0]
 80118a6:	b103      	cbz	r3, 80118aa <_read_r+0x1e>
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	bd38      	pop	{r3, r4, r5, pc}
 80118ac:	24000bd4 	.word	0x24000bd4

080118b0 <_init>:
 80118b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b2:	bf00      	nop
 80118b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118b6:	bc08      	pop	{r3}
 80118b8:	469e      	mov	lr, r3
 80118ba:	4770      	bx	lr

080118bc <_fini>:
 80118bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118be:	bf00      	nop
 80118c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118c2:	bc08      	pop	{r3}
 80118c4:	469e      	mov	lr, r3
 80118c6:	4770      	bx	lr
