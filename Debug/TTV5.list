
TTV5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b770  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800ba40  0800ba40  0001ba40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bebc  0800bebc  0001bebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bec4  0800bec4  0001bec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bec8  0800bec8  0001bec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004ec  24000000  0800becc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004c4  240004ec  0800c3b8  000204ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009b0  0800c3b8  000209b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016b55  00000000  00000000  0002051a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026ce  00000000  00000000  0003706f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a8  00000000  00000000  00039740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010c0  00000000  00000000  0003a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000337aa  00000000  00000000  0003b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000171a8  00000000  00000000  0006f152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014dc46  00000000  00000000  000862fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3f40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bb4  00000000  00000000  001d3f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004ec 	.word	0x240004ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ba28 	.word	0x0800ba28

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004f0 	.word	0x240004f0
 800030c:	0800ba28 	.word	0x0800ba28

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <radianes_a_valor>:
char q2[BUFFER_SIZE] = {'1','2','2'};
char q3[BUFFER_SIZE] = {0};
char q4[BUFFER_SIZE] = {'1','.','5','7','0','7'};
char q5[BUFFER_SIZE] = {'1','.','5','7','0','7'};

uint32_t radianes_a_valor(float radianes) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ajusta los radianes negativos a su equivalente positivo en el rango de 0 a 2PI
    if (radianes < 0) {
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	d50b      	bpl.n	8000ae0 <radianes_a_valor+0x30>
        radianes += M_PI;
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000b28 <radianes_a_valor+0x78>
 8000ad4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ad8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000adc:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes > M_PI) {
 8000ae0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000b28 <radianes_a_valor+0x78>
 8000aec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af4:	dd01      	ble.n	8000afa <radianes_a_valor+0x4a>
        radianes = M_PI;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <radianes_a_valor+0x88>)
 8000af8:	607b      	str	r3, [r7, #4]
    }

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8000afe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b02:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000b28 <radianes_a_valor+0x78>
 8000b06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b0a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000b30 <radianes_a_valor+0x80>
 8000b0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b16:	ee17 3a90 	vmov	r3, s15
 8000b1a:	3341      	adds	r3, #65	; 0x41
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	54442d18 	.word	0x54442d18
 8000b2c:	400921fb 	.word	0x400921fb
 8000b30:	00000000 	.word	0x00000000
 8000b34:	406cc000 	.word	0x406cc000
 8000b38:	40490fdb 	.word	0x40490fdb

08000b3c <milimetros_a_pasos>:

uint32_t milimetros_a_pasos(float milimetros) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calcular el número de pasos necesarios para mover la distancia en milímetros
    float pasos_por_mm = 200.0 / 8.0; // 200 pasos por 8 mm
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <milimetros_a_pasos+0x3c>)
 8000b48:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(fabs(milimetros) * pasos_por_mm);
 8000b4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b4e:	eef0 7ae7 	vabs.f32	s15, s15
 8000b52:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b66:	ee17 3a90 	vmov	r3, s15
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	41c80000 	.word	0x41c80000

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b598      	push	{r3, r4, r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f001 f9c6 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f8a4 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 f9fe 	bl	8000f88 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b8c:	f000 f964 	bl	8000e58 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b90:	f000 f9ae 	bl	8000ef0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000b94:	f000 f8fc 	bl	8000d90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	483f      	ldr	r0, [pc, #252]	; (8000c98 <main+0x11c>)
 8000b9c:	f004 fda6 	bl	80056ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	483d      	ldr	r0, [pc, #244]	; (8000c98 <main+0x11c>)
 8000ba4:	f004 fda2 	bl	80056ec <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3,&byte,bufersize);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	493c      	ldr	r1, [pc, #240]	; (8000c9c <main+0x120>)
 8000bac:	483c      	ldr	r0, [pc, #240]	; (8000ca0 <main+0x124>)
 8000bae:	f005 fcf1 	bl	8006594 <HAL_UART_Receive_IT>

  A4988_q1();
 8000bb2:	f000 fc01 	bl	80013b8 <A4988_q1>
  A4988_q2();
 8000bb6:	f000 fc1d 	bl	80013f4 <A4988_q2>
  A4988_q3();
 8000bba:	f000 fc39 	bl	8001430 <A4988_q3>
  Home();
 8000bbe:	f000 fc59 	bl	8001474 <Home>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(Paro_emergencia == 1)
 8000bc2:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <main+0x128>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d1fa      	bne.n	8000bc2 <main+0x46>
	  {
		  q1_float = atof(q1);
 8000bcc:	4836      	ldr	r0, [pc, #216]	; (8000ca8 <main+0x12c>)
 8000bce:	f008 f867 	bl	8008ca0 <atof>
 8000bd2:	eeb0 7b40 	vmov.f64	d7, d0
 8000bd6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <main+0x130>)
 8000bdc:	edc3 7a00 	vstr	s15, [r3]
		  q4_float = atof(q4);
 8000be0:	4833      	ldr	r0, [pc, #204]	; (8000cb0 <main+0x134>)
 8000be2:	f008 f85d 	bl	8008ca0 <atof>
 8000be6:	eeb0 7b40 	vmov.f64	d7, d0
 8000bea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <main+0x138>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
		  q5_float = atof(q5);
 8000bf4:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <main+0x13c>)
 8000bf6:	f008 f853 	bl	8008ca0 <atof>
 8000bfa:	eeb0 7b40 	vmov.f64	d7, d0
 8000bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c02:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <main+0x140>)
 8000c04:	edc3 7a00 	vstr	s15, [r3]

		  // Conversión de q2 y q3 a int (truncando los valores decimales)
		  q2_int = (int)atof(q2);
 8000c08:	482d      	ldr	r0, [pc, #180]	; (8000cc0 <main+0x144>)
 8000c0a:	f008 f849 	bl	8008ca0 <atof>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c16:	ee17 2a90 	vmov	r2, s15
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <main+0x148>)
 8000c1c:	601a      	str	r2, [r3, #0]
		  q3_int = (int)atof(q3);
 8000c1e:	482a      	ldr	r0, [pc, #168]	; (8000cc8 <main+0x14c>)
 8000c20:	f008 f83e 	bl	8008ca0 <atof>
 8000c24:	eeb0 7b40 	vmov.f64	d7, d0
 8000c28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c2c:	ee17 2a90 	vmov	r2, s15
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <main+0x150>)
 8000c32:	601a      	str	r2, [r3, #0]

		  mover_motorq1_rad(q1_float);
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <main+0x130>)
 8000c36:	edd3 7a00 	vldr	s15, [r3]
 8000c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c3e:	f000 fd17 	bl	8001670 <mover_motorq1_rad>
		  mover_motorq2_mm(q2_int);
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <main+0x148>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c52:	f000 fd73 	bl	800173c <mover_motorq2_mm>
		  mover_motorq3_mm(q3_int);
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <main+0x150>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c62:	eeb0 0a67 	vmov.f32	s0, s15
 8000c66:	f000 fdd5 	bl	8001814 <mover_motorq3_mm>
		  TIM2->CCR4 = radianes_a_valor(q4_float); //q4
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <main+0x138>)
 8000c6c:	edd3 7a00 	vldr	s15, [r3]
 8000c70:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c74:	eeb0 0a67 	vmov.f32	s0, s15
 8000c78:	f7ff ff1a 	bl	8000ab0 <radianes_a_valor>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	6423      	str	r3, [r4, #64]	; 0x40
		  TIM2->CCR2 = radianes_a_valor(q5_float); //q5
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <main+0x140>)
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c8e:	f7ff ff0f 	bl	8000ab0 <radianes_a_valor>
 8000c92:	4603      	mov	r3, r0
 8000c94:	63a3      	str	r3, [r4, #56]	; 0x38
	  if(Paro_emergencia == 1)
 8000c96:	e794      	b.n	8000bc2 <main+0x46>
 8000c98:	24000508 	.word	0x24000508
 8000c9c:	24000674 	.word	0x24000674
 8000ca0:	240005e4 	.word	0x240005e4
 8000ca4:	24000302 	.word	0x24000302
 8000ca8:	2400077c 	.word	0x2400077c
 8000cac:	24000984 	.word	0x24000984
 8000cb0:	24000100 	.word	0x24000100
 8000cb4:	24000988 	.word	0x24000988
 8000cb8:	24000200 	.word	0x24000200
 8000cbc:	2400098c 	.word	0x2400098c
 8000cc0:	24000000 	.word	0x24000000
 8000cc4:	24000990 	.word	0x24000990
 8000cc8:	2400087c 	.word	0x2400087c
 8000ccc:	24000994 	.word	0x24000994

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09c      	sub	sp, #112	; 0x70
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	224c      	movs	r2, #76	; 0x4c
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f008 f80c 	bl	8008cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f008 f806 	bl	8008cfc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf0:	2002      	movs	r0, #2
 8000cf2:	f002 fa13 	bl	800311c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b24      	ldr	r3, [pc, #144]	; (8000d8c <SystemClock_Config+0xbc>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d02:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <SystemClock_Config+0xbc>)
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <SystemClock_Config+0xbc>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d16:	bf00      	nop
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <SystemClock_Config+0xbc>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d24:	d1f8      	bne.n	8000d18 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d26:	2302      	movs	r3, #2
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2e:	2340      	movs	r3, #64	; 0x40
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fa28 	bl	8003190 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d46:	f000 fded 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	233f      	movs	r3, #63	; 0x3f
 8000d4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 8000d52:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d5c:	2340      	movs	r3, #64	; 0x40
 8000d5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d6a:	2340      	movs	r3, #64	; 0x40
 8000d6c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 fdba 	bl	80038ec <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d7e:	f000 fdd1 	bl	8001924 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3770      	adds	r7, #112	; 0x70
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	58024800 	.word	0x58024800

08000d90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]
 8000db2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db4:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000dbe:	2240      	movs	r2, #64	; 0x40
 8000dc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000dca:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ddc:	481d      	ldr	r0, [pc, #116]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000dde:	f004 fc2d 	bl	800563c <HAL_TIM_PWM_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000de8:	f000 fd9c 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4816      	ldr	r0, [pc, #88]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000dfc:	f005 fa48 	bl	8006290 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e06:	f000 fd8d 	bl	8001924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0a:	2360      	movs	r3, #96	; 0x60
 8000e0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000e22:	f004 fd7f 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e2c:	f000 fd7a 	bl	8001924 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	220c      	movs	r2, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	4807      	ldr	r0, [pc, #28]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000e38:	f004 fd74 	bl	8005924 <HAL_TIM_PWM_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e42:	f000 fd6f 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <MX_TIM2_Init+0xc4>)
 8000e48:	f000 fdac 	bl	80019a4 <HAL_TIM_MspPostInit>

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000508 	.word	0x24000508

08000e58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e5c:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e5e:	4a23      	ldr	r2, [pc, #140]	; (8000eec <MX_USART1_UART_Init+0x94>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e62:	4b21      	ldr	r3, [pc, #132]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea0:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000ea2:	f005 fa91 	bl	80063c8 <HAL_UART_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000eac:	f000 fd3a 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000eb4:	f007 fe29 	bl	8008b0a <HAL_UARTEx_SetTxFifoThreshold>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ebe:	f000 fd31 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000ec6:	f007 fe5e 	bl	8008b86 <HAL_UARTEx_SetRxFifoThreshold>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed0:	f000 fd28 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_USART1_UART_Init+0x90>)
 8000ed6:	f007 fddf 	bl	8008a98 <HAL_UARTEx_DisableFifoMode>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee0:	f000 fd20 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	24000554 	.word	0x24000554
 8000eec:	40011000 	.word	0x40011000

08000ef0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000ef6:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <MX_USART3_UART_Init+0x94>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f32:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f38:	4811      	ldr	r0, [pc, #68]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f3a:	f005 fa45 	bl	80063c8 <HAL_UART_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f44:	f000 fcee 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f4c:	f007 fddd 	bl	8008b0a <HAL_UARTEx_SetTxFifoThreshold>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f56:	f000 fce5 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4808      	ldr	r0, [pc, #32]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f5e:	f007 fe12 	bl	8008b86 <HAL_UARTEx_SetRxFifoThreshold>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f68:	f000 fcdc 	bl	8001924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <MX_USART3_UART_Init+0x90>)
 8000f6e:	f007 fd93 	bl	8008a98 <HAL_UARTEx_DisableFifoMode>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f000 fcd4 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	240005e4 	.word	0x240005e4
 8000f84:	40004800 	.word	0x40004800

08000f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	4b71      	ldr	r3, [pc, #452]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a6f      	ldr	r2, [pc, #444]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b6d      	ldr	r3, [pc, #436]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbc:	4b69      	ldr	r3, [pc, #420]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a68      	ldr	r2, [pc, #416]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b65      	ldr	r3, [pc, #404]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	4b62      	ldr	r3, [pc, #392]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	4a60      	ldr	r2, [pc, #384]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fea:	4b5e      	ldr	r3, [pc, #376]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	4a59      	ldr	r2, [pc, #356]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001008:	4b56      	ldr	r3, [pc, #344]	; (8001164 <MX_GPIO_Init+0x1dc>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	4a51      	ldr	r2, [pc, #324]	; (8001164 <MX_GPIO_Init+0x1dc>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	4a4a      	ldr	r2, [pc, #296]	; (8001164 <MX_GPIO_Init+0x1dc>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001044:	4b47      	ldr	r3, [pc, #284]	; (8001164 <MX_GPIO_Init+0x1dc>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f640 2188 	movw	r1, #2696	; 0xa88
 8001058:	4843      	ldr	r0, [pc, #268]	; (8001168 <MX_GPIO_Init+0x1e0>)
 800105a:	f002 f82b 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 800105e:	2200      	movs	r2, #0
 8001060:	f64a 0155 	movw	r1, #43093	; 0xa855
 8001064:	4841      	ldr	r0, [pc, #260]	; (800116c <MX_GPIO_Init+0x1e4>)
 8001066:	f002 f825 	bl	80030b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8001070:	483f      	ldr	r0, [pc, #252]	; (8001170 <MX_GPIO_Init+0x1e8>)
 8001072:	f002 f81f 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800107c:	483d      	ldr	r0, [pc, #244]	; (8001174 <MX_GPIO_Init+0x1ec>)
 800107e:	f002 f819 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2102      	movs	r1, #2
 8001086:	483c      	ldr	r0, [pc, #240]	; (8001178 <MX_GPIO_Init+0x1f0>)
 8001088:	f002 f814 	bl	80030b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC7 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 800108c:	f640 2388 	movw	r3, #2696	; 0xa88
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	2301      	movs	r3, #1
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4830      	ldr	r0, [pc, #192]	; (8001168 <MX_GPIO_Init+0x1e0>)
 80010a6:	f001 fe5d 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80010aa:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	482d      	ldr	r0, [pc, #180]	; (8001178 <MX_GPIO_Init+0x1f0>)
 80010c2:	f001 fe4f 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD13 PD15 PD0
                           PD2 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 80010c6:	f64a 0355 	movw	r3, #43093	; 0xa855
 80010ca:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4823      	ldr	r0, [pc, #140]	; (800116c <MX_GPIO_Init+0x1e4>)
 80010e0:	f001 fe40 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80010e4:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	481c      	ldr	r0, [pc, #112]	; (8001170 <MX_GPIO_Init+0x1e8>)
 80010fe:	f001 fe31 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8001102:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8001106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	4816      	ldr	r0, [pc, #88]	; (8001174 <MX_GPIO_Init+0x1ec>)
 800111c:	f001 fe22 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001120:	2302      	movs	r3, #2
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	4619      	mov	r1, r3
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <MX_GPIO_Init+0x1f0>)
 8001138:	f001 fe14 	bl	8002d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	2017      	movs	r0, #23
 8001142:	f001 f876 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001146:	2017      	movs	r0, #23
 8001148:	f001 f88d 	bl	8002266 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2028      	movs	r0, #40	; 0x28
 8001152:	f001 f86e 	bl	8002232 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001156:	2028      	movs	r0, #40	; 0x28
 8001158:	f001 f885 	bl	8002266 <HAL_NVIC_EnableIRQ>

}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	; 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	58024400 	.word	0x58024400
 8001168:	58020800 	.word	0x58020800
 800116c:	58020c00 	.word	0x58020c00
 8001170:	58020000 	.word	0x58020000
 8001174:	58020400 	.word	0x58020400
 8001178:	58021000 	.word	0x58021000

0800117c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	2b80      	cmp	r3, #128	; 0x80
 800118a:	d102      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x16>
    	FC_Home_q2 = 0;
 800118c:	4b1d      	ldr	r3, [pc, #116]	; (8001204 <HAL_GPIO_EXTI_Callback+0x88>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_9) {
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001198:	d102      	bne.n	80011a0 <HAL_GPIO_EXTI_Callback+0x24>
    	FC_Home_q3 = 0;
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_EXTI_Callback+0x8c>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_11) {
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011a6:	d112      	bne.n	80011ce <HAL_GPIO_EXTI_Callback+0x52>
    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2102      	movs	r1, #2
 80011ac:	4817      	ldr	r0, [pc, #92]	; (800120c <HAL_GPIO_EXTI_Callback+0x90>)
 80011ae:	f001 ff81 	bl	80030b4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2110      	movs	r1, #16
 80011b6:	4816      	ldr	r0, [pc, #88]	; (8001210 <HAL_GPIO_EXTI_Callback+0x94>)
 80011b8:	f001 ff7c 	bl	80030b4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <HAL_GPIO_EXTI_Callback+0x98>)
 80011c4:	f001 ff76 	bl	80030b4 <HAL_GPIO_WritePin>
    	Paro_emergencia = 1;
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_GPIO_EXTI_Callback+0x9c>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_13) {
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d4:	d112      	bne.n	80011fc <HAL_GPIO_EXTI_Callback+0x80>

    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2102      	movs	r1, #2
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <HAL_GPIO_EXTI_Callback+0x90>)
 80011dc:	f001 ff6a 	bl	80030b4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2110      	movs	r1, #16
 80011e4:	480a      	ldr	r0, [pc, #40]	; (8001210 <HAL_GPIO_EXTI_Callback+0x94>)
 80011e6:	f001 ff65 	bl	80030b4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	4808      	ldr	r0, [pc, #32]	; (8001214 <HAL_GPIO_EXTI_Callback+0x98>)
 80011f2:	f001 ff5f 	bl	80030b4 <HAL_GPIO_WritePin>
    	Paro_emergencia = 0;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_GPIO_EXTI_Callback+0x9c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    }
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	24000300 	.word	0x24000300
 8001208:	24000301 	.word	0x24000301
 800120c:	58021000 	.word	0x58021000
 8001210:	58020c00 	.word	0x58020c00
 8001214:	58020000 	.word	0x58020000
 8001218:	24000302 	.word	0x24000302

0800121c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1a      	ldr	r2, [pc, #104]	; (8001294 <HAL_UART_RxCpltCallback+0x78>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d12e      	bne.n	800128c <HAL_UART_RxCpltCallback+0x70>
    {
        //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_LED, GPIO_PIN_SET); // Enciende el LED
        HAL_UART_Transmit(&huart3,&byte,1, 100); // Envía la cadena a través de UART
 800122e:	2364      	movs	r3, #100	; 0x64
 8001230:	2201      	movs	r2, #1
 8001232:	4919      	ldr	r1, [pc, #100]	; (8001298 <HAL_UART_RxCpltCallback+0x7c>)
 8001234:	4819      	ldr	r0, [pc, #100]	; (800129c <HAL_UART_RxCpltCallback+0x80>)
 8001236:	f005 f917 	bl	8006468 <HAL_UART_Transmit>

        // Almacenar el byte recibido en el buffer si no es '>'
        if (byte != 62) // 62 es el código ASCII para '>'
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_UART_RxCpltCallback+0x7c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b3e      	cmp	r3, #62	; 0x3e
 8001240:	d016      	beq.n	8001270 <HAL_UART_RxCpltCallback+0x54>
        {

            if (bufferIndex < BUFFER_SIZE)
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d80b      	bhi.n	8001262 <HAL_UART_RxCpltCallback+0x46>
            {

                buffer[bufferIndex++] = byte;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	1c5a      	adds	r2, r3, #1
 8001250:	b291      	uxth	r1, r2
 8001252:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 8001254:	8011      	strh	r1, [r2, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_UART_RxCpltCallback+0x7c>)
 800125a:	7819      	ldrb	r1, [r3, #0]
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_RxCpltCallback+0x88>)
 800125e:	5499      	strb	r1, [r3, r2]
 8001260:	e00f      	b.n	8001282 <HAL_UART_RxCpltCallback+0x66>

            }
            else
            {
                // Manejar el caso de desbordamiento del buffer
                bufferOverflowFlag = 1; // Establecer la bandera de desbordamiento
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_UART_RxCpltCallback+0x8c>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
                bufferIndex = 0; // Opcional: restablecer el índice del buffer
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 800126a:	2200      	movs	r2, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	e008      	b.n	8001282 <HAL_UART_RxCpltCallback+0x66>
        {
            // Aquí puedes manejar el caso cuando se recibe '>'
            // Por ejemplo, procesar el buffer y restablecer bufferIndex
        	 //HAL_UART_Transmit(&huart1, prueba_1, sizeof(prueba_1) - 1, 100);
        	 //HAL_UART_Transmit(&huart1, buffer,bufferIndex, 100);// Envía la cadena a través de UART
            processBuffer(buffer, bufferIndex);
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <HAL_UART_RxCpltCallback+0x88>)
 8001278:	f000 f818 	bl	80012ac <processBuffer>
            bufferIndex = 0;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_UART_RxCpltCallback+0x84>)
 800127e:	2200      	movs	r2, #0
 8001280:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart3, &byte, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	4904      	ldr	r1, [pc, #16]	; (8001298 <HAL_UART_RxCpltCallback+0x7c>)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_RxCpltCallback+0x80>)
 8001288:	f005 f984 	bl	8006594 <HAL_UART_Receive_IT>


        // Vuelve a habilitar la recepción por interrupción

    }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004800 	.word	0x40004800
 8001298:	24000674 	.word	0x24000674
 800129c:	240005e4 	.word	0x240005e4
 80012a0:	24000778 	.word	0x24000778
 80012a4:	24000678 	.word	0x24000678
 80012a8:	2400077a 	.word	0x2400077a

080012ac <processBuffer>:

void processBuffer(uint8_t *buffer, uint16_t length)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
    if (bufferOverflowFlag)
 80012b8:	4b37      	ldr	r3, [pc, #220]	; (8001398 <processBuffer+0xec>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d009      	beq.n	80012d4 <processBuffer+0x28>
    {
        // Manejar el desbordamiento del buffer
        // Por ejemplo, enviar un mensaje de error o realizar acciones correctivas
        HAL_UART_Transmit(&huart3, (uint8_t *)"Buffer overflow\n", 16, 100);
 80012c0:	2364      	movs	r3, #100	; 0x64
 80012c2:	2210      	movs	r2, #16
 80012c4:	4935      	ldr	r1, [pc, #212]	; (800139c <processBuffer+0xf0>)
 80012c6:	4836      	ldr	r0, [pc, #216]	; (80013a0 <processBuffer+0xf4>)
 80012c8:	f005 f8ce 	bl	8006468 <HAL_UART_Transmit>
        bufferOverflowFlag = 0; // Restablecer la bandera de desbordamiento
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <processBuffer+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
        return;
 80012d2:	e05d      	b.n	8001390 <processBuffer+0xe4>
//    char q2[BUFFER_SIZE] = {0};
//    char q3[BUFFER_SIZE] = {0};
//    char q4[BUFFER_SIZE] = {0};

    // Punteros para la división de la cadena
    char *ptr = (char *)buffer;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	617b      	str	r3, [r7, #20]
    char *start = ptr;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
    char *end = strchr(start, 'a');
 80012dc:	2161      	movs	r1, #97	; 0x61
 80012de:	6938      	ldr	r0, [r7, #16]
 80012e0:	f007 fd14 	bl	8008d0c <strchr>
 80012e4:	60f8      	str	r0, [r7, #12]

    if (end != NULL)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d047      	beq.n	800137c <processBuffer+0xd0>
    {
        strncpy(q1, start, end - start);
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	6939      	ldr	r1, [r7, #16]
 80012f6:	482b      	ldr	r0, [pc, #172]	; (80013a4 <processBuffer+0xf8>)
 80012f8:	f007 fd1d 	bl	8008d36 <strncpy>
        start = end + 1;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3301      	adds	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
        end = strchr(start, 'b');
 8001302:	2162      	movs	r1, #98	; 0x62
 8001304:	6938      	ldr	r0, [r7, #16]
 8001306:	f007 fd01 	bl	8008d0c <strchr>
 800130a:	60f8      	str	r0, [r7, #12]

        if (end != NULL)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d034      	beq.n	800137c <processBuffer+0xd0>
        {
            strncpy(q2, start, end - start);
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	4822      	ldr	r0, [pc, #136]	; (80013a8 <processBuffer+0xfc>)
 800131e:	f007 fd0a 	bl	8008d36 <strncpy>
            start = end + 1;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	3301      	adds	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
            end = strchr(start, 'c');
 8001328:	2163      	movs	r1, #99	; 0x63
 800132a:	6938      	ldr	r0, [r7, #16]
 800132c:	f007 fcee 	bl	8008d0c <strchr>
 8001330:	60f8      	str	r0, [r7, #12]

            if (end != NULL)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d021      	beq.n	800137c <processBuffer+0xd0>
            {
                strncpy(q3, start, end - start);
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	461a      	mov	r2, r3
 8001340:	6939      	ldr	r1, [r7, #16]
 8001342:	481a      	ldr	r0, [pc, #104]	; (80013ac <processBuffer+0x100>)
 8001344:	f007 fcf7 	bl	8008d36 <strncpy>
                start = end + 1;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3301      	adds	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
                end = strchr(start, 'd');
 800134e:	2164      	movs	r1, #100	; 0x64
 8001350:	6938      	ldr	r0, [r7, #16]
 8001352:	f007 fcdb 	bl	8008d0c <strchr>
 8001356:	60f8      	str	r0, [r7, #12]

                if(end != NULL){
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00e      	beq.n	800137c <processBuffer+0xd0>
                	 strncpy(q4, start, end - start);
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	461a      	mov	r2, r3
 8001366:	6939      	ldr	r1, [r7, #16]
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <processBuffer+0x104>)
 800136a:	f007 fce4 	bl	8008d36 <strncpy>
                	 start = end + 1;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3301      	adds	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
                	 strcpy(q5, start);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	480f      	ldr	r0, [pc, #60]	; (80013b4 <processBuffer+0x108>)
 8001378:	f007 fcd5 	bl	8008d26 <strcpy>
    }



    // Enviar cada parte a través de UART para verificar
    HAL_UART_Transmit(&huart3, (uint8_t *)q1, strlen(q1), 100); // 0 puntos desfazados
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <processBuffer+0xf8>)
 800137e:	f7fe ffc7 	bl	8000310 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	4906      	ldr	r1, [pc, #24]	; (80013a4 <processBuffer+0xf8>)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <processBuffer+0xf4>)
 800138c:	f005 f86c 	bl	8006468 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100); // 5 puntos desfazados
    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); // 2 puntos malos
    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100); // Enviar q4 si hay datos
}
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2400077a 	.word	0x2400077a
 800139c:	0800ba40 	.word	0x0800ba40
 80013a0:	240005e4 	.word	0x240005e4
 80013a4:	2400077c 	.word	0x2400077c
 80013a8:	24000000 	.word	0x24000000
 80013ac:	2400087c 	.word	0x2400087c
 80013b0:	24000100 	.word	0x24000100
 80013b4:	24000200 	.word	0x24000200

080013b8 <A4988_q1>:

void A4988_q1(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2102      	movs	r1, #2
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <A4988_q1+0x34>)
 80013c2:	f001 fe77 	bl	80030b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS0_PIN_q1, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <A4988_q1+0x38>)
 80013ce:	f001 fe71 	bl	80030b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS1_PIN_q1, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	4806      	ldr	r0, [pc, #24]	; (80013f0 <A4988_q1+0x38>)
 80013d8:	f001 fe6c 	bl	80030b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS2_PIN_q1, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2120      	movs	r1, #32
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <A4988_q1+0x38>)
 80013e2:	f001 fe67 	bl	80030b4 <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	58021000 	.word	0x58021000
 80013f0:	58020400 	.word	0x58020400

080013f4 <A4988_q2>:

void A4988_q2(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2110      	movs	r1, #16
 80013fc:	480a      	ldr	r0, [pc, #40]	; (8001428 <A4988_q2+0x34>)
 80013fe:	f001 fe59 	bl	80030b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS0_PIN_q2, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	2104      	movs	r1, #4
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <A4988_q2+0x34>)
 8001408:	f001 fe54 	bl	80030b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS1_PIN_q2, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2101      	movs	r1, #1
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <A4988_q2+0x34>)
 8001412:	f001 fe4f 	bl	80030b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS2_PIN_q2, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <A4988_q2+0x38>)
 800141e:	f001 fe49 	bl	80030b4 <HAL_GPIO_WritePin>
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	58020c00 	.word	0x58020c00
 800142c:	58020800 	.word	0x58020800

08001430 <A4988_q3>:

void A4988_q3(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143a:	480b      	ldr	r0, [pc, #44]	; (8001468 <A4988_q3+0x38>)
 800143c:	f001 fe3a 	bl	80030b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS0_PIN_q3, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	4809      	ldr	r0, [pc, #36]	; (800146c <A4988_q3+0x3c>)
 8001448:	f001 fe34 	bl	80030b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS1_PIN_q3, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	4806      	ldr	r0, [pc, #24]	; (800146c <A4988_q3+0x3c>)
 8001452:	f001 fe2f 	bl	80030b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS2_PIN_q3, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <A4988_q3+0x40>)
 800145e:	f001 fe29 	bl	80030b4 <HAL_GPIO_WritePin>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	58020000 	.word	0x58020000
 800146c:	58020800 	.word	0x58020800
 8001470:	58020c00 	.word	0x58020c00

08001474 <Home>:

void Home (void){
 8001474:	b598      	push	{r3, r4, r7, lr}
 8001476:	af00      	add	r7, sp, #0
	Home_q2();
 8001478:	f000 f816 	bl	80014a8 <Home_q2>
	Home_q3();
 800147c:	f000 f88a 	bl	8001594 <Home_q3>
	TIM2->CCR2 = radianes_a_valor(M_PI/2); //q5
 8001480:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001484:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80014a4 <Home+0x30>
 8001488:	f7ff fb12 	bl	8000ab0 <radianes_a_valor>
 800148c:	4603      	mov	r3, r0
 800148e:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CCR4 = radianes_a_valor(M_PI/2); //q4
 8001490:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001494:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80014a4 <Home+0x30>
 8001498:	f7ff fb0a 	bl	8000ab0 <radianes_a_valor>
 800149c:	4603      	mov	r3, r0
 800149e:	6423      	str	r3, [r4, #64]	; 0x40
}
 80014a0:	bf00      	nop
 80014a2:	bd98      	pop	{r3, r4, r7, pc}
 80014a4:	3fc90fdb 	.word	0x3fc90fdb

080014a8 <Home_q2>:

void Home_q2(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
	while(FC_Home_q2){
 80014ae:	e02f      	b.n	8001510 <Home_q2+0x68>
		HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET);  //Retroceso
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4833      	ldr	r0, [pc, #204]	; (8001584 <Home_q2+0xdc>)
 80014b8:	f001 fdfc 	bl	80030b4 <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	e014      	b.n	80014ec <Home_q2+0x44>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c8:	482e      	ldr	r0, [pc, #184]	; (8001584 <Home_q2+0xdc>)
 80014ca:	f001 fdf3 	bl	80030b4 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f000 fdb0 	bl	8002034 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014da:	482a      	ldr	r0, [pc, #168]	; (8001584 <Home_q2+0xdc>)
 80014dc:	f001 fdea 	bl	80030b4 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 fda7 	bl	8002034 <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3301      	adds	r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a26      	ldr	r2, [pc, #152]	; (8001588 <Home_q2+0xe0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	dc04      	bgt.n	80014fe <Home_q2+0x56>
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <Home_q2+0xe4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1e1      	bne.n	80014c2 <Home_q2+0x1a>
		}
		if (!FC_Home_q2) break;
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <Home_q2+0xe4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <Home_q2+0x74>
		HAL_Delay(500);
 8001508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800150c:	f000 fd92 	bl	8002034 <HAL_Delay>
	while(FC_Home_q2){
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <Home_q2+0xe4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1ca      	bne.n	80014b0 <Home_q2+0x8>
 800151a:	e000      	b.n	800151e <Home_q2+0x76>
		if (!FC_Home_q2) break;
 800151c:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001524:	4817      	ldr	r0, [pc, #92]	; (8001584 <Home_q2+0xdc>)
 8001526:	f001 fdc5 	bl	80030b4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 2500; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	e019      	b.n	8001564 <Home_q2+0xbc>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001536:	4813      	ldr	r0, [pc, #76]	; (8001584 <Home_q2+0xdc>)
 8001538:	f001 fdbc 	bl	80030b4 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800153c:	2000      	movs	r0, #0
 800153e:	f000 fd79 	bl	8002034 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <Home_q2+0xdc>)
 800154a:	f001 fdb3 	bl	80030b4 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800154e:	2000      	movs	r0, #0
 8001550:	f000 fd70 	bl	8002034 <HAL_Delay>
		paso_actual_q2--;
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <Home_q2+0xe8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3b01      	subs	r3, #1
 800155a:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <Home_q2+0xe8>)
 800155c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 2500; i++) {
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800156a:	4293      	cmp	r3, r2
 800156c:	dde0      	ble.n	8001530 <Home_q2+0x88>
	}
	HAL_Delay(500);
 800156e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001572:	f000 fd5f 	bl	8002034 <HAL_Delay>
	FC_Home_q2 = 1;
 8001576:	4b05      	ldr	r3, [pc, #20]	; (800158c <Home_q2+0xe4>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	58020000 	.word	0x58020000
 8001588:	0001869f 	.word	0x0001869f
 800158c:	24000300 	.word	0x24000300
 8001590:	24000304 	.word	0x24000304

08001594 <Home_q3>:

void Home_q3(void){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
	while(FC_Home_q3){
 800159a:	e02f      	b.n	80015fc <Home_q3+0x68>
		HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015a2:	4830      	ldr	r0, [pc, #192]	; (8001664 <Home_q3+0xd0>)
 80015a4:	f001 fd86 	bl	80030b4 <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	e014      	b.n	80015d8 <Home_q3+0x44>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b4:	482b      	ldr	r0, [pc, #172]	; (8001664 <Home_q3+0xd0>)
 80015b6:	f001 fd7d 	bl	80030b4 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 fd3a 	bl	8002034 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015c6:	4827      	ldr	r0, [pc, #156]	; (8001664 <Home_q3+0xd0>)
 80015c8:	f001 fd74 	bl	80030b4 <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f000 fd31 	bl	8002034 <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3301      	adds	r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <Home_q3+0xd4>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	dc04      	bgt.n	80015ea <Home_q3+0x56>
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <Home_q3+0xd8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1e1      	bne.n	80015ae <Home_q3+0x1a>
		}
		if (!FC_Home_q3) break;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <Home_q3+0xd8>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <Home_q3+0x74>
		HAL_Delay(500);
 80015f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015f8:	f000 fd1c 	bl	8002034 <HAL_Delay>
	while(FC_Home_q3){
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <Home_q3+0xd8>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ca      	bne.n	800159c <Home_q3+0x8>
 8001606:	e000      	b.n	800160a <Home_q3+0x76>
		if (!FC_Home_q3) break;
 8001608:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	4814      	ldr	r0, [pc, #80]	; (8001664 <Home_q3+0xd0>)
 8001612:	f001 fd4f 	bl	80030b4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 80; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	e014      	b.n	8001646 <Home_q3+0xb2>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <Home_q3+0xd0>)
 8001624:	f001 fd46 	bl	80030b4 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fd03 	bl	8002034 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <Home_q3+0xd0>)
 8001636:	f001 fd3d 	bl	80030b4 <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 fcfa 	bl	8002034 <HAL_Delay>
	for (int i = 0; i < 80; i++) {
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	603b      	str	r3, [r7, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b4f      	cmp	r3, #79	; 0x4f
 800164a:	dde7      	ble.n	800161c <Home_q3+0x88>
	}
	HAL_Delay(500);
 800164c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001650:	f000 fcf0 	bl	8002034 <HAL_Delay>
	FC_Home_q3 = 1;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <Home_q3+0xd8>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	58020c00 	.word	0x58020c00
 8001668:	0001869f 	.word	0x0001869f
 800166c:	24000301 	.word	0x24000301

08001670 <mover_motorq1_rad>:

void mover_motorq1_rad(float radianes){
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	ed87 0a01 	vstr	s0, [r7, #4]

    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 800167a:	edd7 7a01 	vldr	s15, [r7, #4]
 800167e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001682:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8001720 <mover_motorq1_rad+0xb0>
 8001686:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800168a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8001728 <mover_motorq1_rad+0xb8>
 800168e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001692:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001696:	ee17 3a90 	vmov	r3, s15
 800169a:	613b      	str	r3, [r7, #16]
    int nuevo_paso = pasos;
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	60fb      	str	r3, [r7, #12]
    int diferencia_pasos = nuevo_paso - paso_actual_q1;
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <mover_motorq1_rad+0xc0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	60bb      	str	r3, [r7, #8]

    if (diferencia_pasos > 0) {
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	dd1e      	ble.n	80016ee <mover_motorq1_rad+0x7e>
        // Movimiento hacia adelante
    	HAL_GPIO_WritePin(GPIOD, DIR_q1, GPIO_PIN_RESET); //Antihorario
 80016b0:	2200      	movs	r2, #0
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	481f      	ldr	r0, [pc, #124]	; (8001734 <mover_motorq1_rad+0xc4>)
 80016b6:	f001 fcfd 	bl	80030b4 <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e012      	b.n	80016e6 <mover_motorq1_rad+0x76>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2108      	movs	r1, #8
 80016c4:	481c      	ldr	r0, [pc, #112]	; (8001738 <mover_motorq1_rad+0xc8>)
 80016c6:	f001 fcf5 	bl	80030b4 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f000 fcb2 	bl	8002034 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2108      	movs	r1, #8
 80016d4:	4818      	ldr	r0, [pc, #96]	; (8001738 <mover_motorq1_rad+0xc8>)
 80016d6:	f001 fced 	bl	80030b4 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 fcaa 	bl	8002034 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	3301      	adds	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dbe8      	blt.n	80016c0 <mover_motorq1_rad+0x50>
    	}
    }

    if(radianes == (2*M_PI))
 80016ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80016f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f6:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8001720 <mover_motorq1_rad+0xb0>
 80016fa:	eeb4 7b46 	vcmp.f64	d7, d6
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	d102      	bne.n	800170a <mover_motorq1_rad+0x9a>
    {
    	radianes = 0;
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
//    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
//    		HAL_Delay(VELOCIDAD);
//    	}
//    }

    paso_actual_q1 = nuevo_paso;
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <mover_motorq1_rad+0xc0>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 8001710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001714:	f000 fc8e 	bl	8002034 <HAL_Delay>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	54442d18 	.word	0x54442d18
 8001724:	401921fb 	.word	0x401921fb
 8001728:	00000000 	.word	0x00000000
 800172c:	40790000 	.word	0x40790000
 8001730:	2400097c 	.word	0x2400097c
 8001734:	58020c00 	.word	0x58020c00
 8001738:	58020400 	.word	0x58020400

0800173c <mover_motorq2_mm>:

void mover_motorq2_mm(float milimetros){
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	ed87 0a01 	vstr	s0, [r7, #4]

    if (milimetros < 0) {
 8001746:	edd7 7a01 	vldr	s15, [r7, #4]
 800174a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d503      	bpl.n	800175c <mover_motorq2_mm+0x20>
        milimetros = 0;
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e00a      	b.n	8001772 <mover_motorq2_mm+0x36>
    }
    else if (milimetros > 210) {
 800175c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001760:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001804 <mover_motorq2_mm+0xc8>
 8001764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	dd01      	ble.n	8001772 <mover_motorq2_mm+0x36>
        milimetros = 210;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <mover_motorq2_mm+0xcc>)
 8001770:	607b      	str	r3, [r7, #4]
    }

    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001772:	ed97 0a01 	vldr	s0, [r7, #4]
 8001776:	f7ff f9e1 	bl	8000b3c <milimetros_a_pasos>
 800177a:	60f8      	str	r0, [r7, #12]
    int diferencia_pasos = pasos - paso_actual_q2;
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <mover_motorq2_mm+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1a9b      	subs	r3, r3, r2
 8001786:	617b      	str	r3, [r7, #20]

    if (diferencia_pasos != 0) {
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d031      	beq.n	80017f2 <mover_motorq2_mm+0xb6>
        if (diferencia_pasos > 0) {
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dd06      	ble.n	80017a2 <mover_motorq2_mm+0x66>
        	 HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET); //Retroceso
 8001794:	2200      	movs	r2, #0
 8001796:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800179a:	481d      	ldr	r0, [pc, #116]	; (8001810 <mover_motorq2_mm+0xd4>)
 800179c:	f001 fc8a 	bl	80030b4 <HAL_GPIO_WritePin>
 80017a0:	e008      	b.n	80017b4 <mover_motorq2_mm+0x78>
        }
        else {
        	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a8:	4819      	ldr	r0, [pc, #100]	; (8001810 <mover_motorq2_mm+0xd4>)
 80017aa:	f001 fc83 	bl	80030b4 <HAL_GPIO_WritePin>
            diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	425b      	negs	r3, r3
 80017b2:	617b      	str	r3, [r7, #20]
        }

        for (int i = 0; i < diferencia_pasos; i++) {
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e014      	b.n	80017e4 <mover_motorq2_mm+0xa8>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c0:	4813      	ldr	r0, [pc, #76]	; (8001810 <mover_motorq2_mm+0xd4>)
 80017c2:	f001 fc77 	bl	80030b4 <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 fc34 	bl	8002034 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d2:	480f      	ldr	r0, [pc, #60]	; (8001810 <mover_motorq2_mm+0xd4>)
 80017d4:	f001 fc6e 	bl	80030b4 <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 80017d8:	2000      	movs	r0, #0
 80017da:	f000 fc2b 	bl	8002034 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	3301      	adds	r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbe6      	blt.n	80017ba <mover_motorq2_mm+0x7e>
        }

        paso_actual_q2 = pasos;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <mover_motorq2_mm+0xd0>)
 80017f0:	6013      	str	r3, [r2, #0]
    }

    HAL_Delay(500);
 80017f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f6:	f000 fc1d 	bl	8002034 <HAL_Delay>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	43520000 	.word	0x43520000
 8001808:	43520000 	.word	0x43520000
 800180c:	24000304 	.word	0x24000304
 8001810:	58020000 	.word	0x58020000

08001814 <mover_motorq3_mm>:

void mover_motorq3_mm(float milimetros){
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	ed87 0a01 	vstr	s0, [r7, #4]

	if (milimetros < 0) {
 800181e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d503      	bpl.n	8001834 <mover_motorq3_mm+0x20>
		milimetros = 0;
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	e00a      	b.n	800184a <mover_motorq3_mm+0x36>
	}
	else if (milimetros > 215) {
 8001834:	edd7 7a01 	vldr	s15, [r7, #4]
 8001838:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001914 <mover_motorq3_mm+0x100>
 800183c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001844:	dd01      	ble.n	800184a <mover_motorq3_mm+0x36>
		milimetros = 215;
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <mover_motorq3_mm+0x104>)
 8001848:	607b      	str	r3, [r7, #4]
	}

    uint32_t pasos = milimetros_a_pasos(milimetros);
 800184a:	ed97 0a01 	vldr	s0, [r7, #4]
 800184e:	f7ff f975 	bl	8000b3c <milimetros_a_pasos>
 8001852:	6178      	str	r0, [r7, #20]
    int nuevo_paso = pasos;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
    int diferencia_pasos = nuevo_paso - paso_actual_q3;
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <mover_motorq3_mm+0x108>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	dd22      	ble.n	80018ae <mover_motorq3_mm+0x9a>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800186e:	482c      	ldr	r0, [pc, #176]	; (8001920 <mover_motorq3_mm+0x10c>)
 8001870:	f001 fc20 	bl	80030b4 <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	e014      	b.n	80018a4 <mover_motorq3_mm+0x90>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001880:	4827      	ldr	r0, [pc, #156]	; (8001920 <mover_motorq3_mm+0x10c>)
 8001882:	f001 fc17 	bl	80030b4 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001886:	2000      	movs	r0, #0
 8001888:	f000 fbd4 	bl	8002034 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001892:	4823      	ldr	r0, [pc, #140]	; (8001920 <mover_motorq3_mm+0x10c>)
 8001894:	f001 fc0e 	bl	80030b4 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 fbcb 	bl	8002034 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dbe6      	blt.n	800187a <mover_motorq3_mm+0x66>
 80018ac:	e027      	b.n	80018fe <mover_motorq3_mm+0xea>
    	}
    }

    else if (diferencia_pasos < 0) {
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da24      	bge.n	80018fe <mover_motorq3_mm+0xea>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ba:	4819      	ldr	r0, [pc, #100]	; (8001920 <mover_motorq3_mm+0x10c>)
 80018bc:	f001 fbfa 	bl	80030b4 <HAL_GPIO_WritePin>
    	diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	425b      	negs	r3, r3
 80018c4:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < diferencia_pasos; i++) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	e014      	b.n	80018f6 <mover_motorq3_mm+0xe2>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	4813      	ldr	r0, [pc, #76]	; (8001920 <mover_motorq3_mm+0x10c>)
 80018d4:	f001 fbee 	bl	80030b4 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80018d8:	2000      	movs	r0, #0
 80018da:	f000 fbab 	bl	8002034 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e4:	480e      	ldr	r0, [pc, #56]	; (8001920 <mover_motorq3_mm+0x10c>)
 80018e6:	f001 fbe5 	bl	80030b4 <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f000 fba2 	bl	8002034 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbe6      	blt.n	80018cc <mover_motorq3_mm+0xb8>
    	}
    }

    paso_actual_q3 = nuevo_paso;
 80018fe:	4a07      	ldr	r2, [pc, #28]	; (800191c <mover_motorq3_mm+0x108>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 8001904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001908:	f000 fb94 	bl	8002034 <HAL_Delay>
}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	43570000 	.word	0x43570000
 8001918:	43570000 	.word	0x43570000
 800191c:	24000980 	.word	0x24000980
 8001920:	58020c00 	.word	0x58020c00

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_MspInit+0x30>)
 8001938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800193c:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x30>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x30>)
 8001948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	58024400 	.word	0x58024400

08001964 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d10e      	bne.n	8001994 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800197c:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_TIM_PWM_MspInit+0x3c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58024400 	.word	0x58024400

080019a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c4:	d11e      	bne.n	8001a04 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_TIM_MspPostInit+0x68>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_TIM_MspPostInit+0x68>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_TIM_MspPostInit+0x68>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80019e4:	230a      	movs	r3, #10
 80019e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f4:	2301      	movs	r3, #1
 80019f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	4804      	ldr	r0, [pc, #16]	; (8001a10 <HAL_TIM_MspPostInit+0x6c>)
 8001a00:	f001 f9b0 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3720      	adds	r7, #32
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	58024400 	.word	0x58024400
 8001a10:	58020000 	.word	0x58020000

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b0b8      	sub	sp, #224	; 0xe0
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	22b4      	movs	r2, #180	; 0xb4
 8001a32:	2100      	movs	r1, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f007 f961 	bl	8008cfc <memset>
  if(huart->Instance==USART1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a51      	ldr	r2, [pc, #324]	; (8001b84 <HAL_UART_MspInit+0x170>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d14b      	bne.n	8001adc <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4e:	f107 0318 	add.w	r3, r7, #24
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fad6 	bl	8004004 <HAL_RCCEx_PeriphCLKConfig>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a5e:	f7ff ff61 	bl	8001924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a68:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a80:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a90:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4831      	ldr	r0, [pc, #196]	; (8001b8c <HAL_UART_MspInit+0x178>)
 8001ac6:	f001 f94d 	bl	8002d64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2025      	movs	r0, #37	; 0x25
 8001ad0:	f000 fbaf 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ad4:	2025      	movs	r0, #37	; 0x25
 8001ad6:	f000 fbc6 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ada:	e04f      	b.n	8001b7c <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <HAL_UART_MspInit+0x17c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d14a      	bne.n	8001b7c <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fa85 	bl	8004004 <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001b00:	f7ff ff10 	bl	8001924 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_UART_MspInit+0x174>)
 8001b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b64:	4619      	mov	r1, r3
 8001b66:	4809      	ldr	r0, [pc, #36]	; (8001b8c <HAL_UART_MspInit+0x178>)
 8001b68:	f001 f8fc 	bl	8002d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2027      	movs	r0, #39	; 0x27
 8001b72:	f000 fb5e 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b76:	2027      	movs	r0, #39	; 0x27
 8001b78:	f000 fb75 	bl	8002266 <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	37e0      	adds	r7, #224	; 0xe0
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40011000 	.word	0x40011000
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	58020400 	.word	0x58020400
 8001b90:	40004800 	.word	0x40004800

08001b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <NMI_Handler+0x4>

08001b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <HardFault_Handler+0x4>

08001ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <MemManage_Handler+0x4>

08001ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <BusFault_Handler+0x4>

08001bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <UsageFault_Handler+0x4>

08001bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be0:	f000 fa08 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bec:	2080      	movs	r0, #128	; 0x80
 8001bee:	f001 fa7a 	bl	80030e6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001bf2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bf6:	f001 fa76 	bl	80030e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <USART1_IRQHandler+0x10>)
 8001c06:	f004 fd1b 	bl	8006640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	24000554 	.word	0x24000554

08001c14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <USART3_IRQHandler+0x10>)
 8001c1a:	f004 fd11 	bl	8006640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	240005e4 	.word	0x240005e4

08001c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c30:	f001 fa59 	bl	80030e6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c38:	f001 fa55 	bl	80030e6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <_kill>:

int _kill(int pid, int sig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c5a:	f007 f825 	bl	8008ca8 <__errno>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2216      	movs	r2, #22
 8001c62:	601a      	str	r2, [r3, #0]
	return -1;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_exit>:

void _exit (int status)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ffe7 	bl	8001c50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c82:	e7fe      	b.n	8001c82 <_exit+0x12>

08001c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
	}

return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf1      	blt.n	8001cd0 <_write+0x12>
	}
	return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_close>:

int _close(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <_isatty>:

int _isatty(int file)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
	return 1;
 8001d36:	2301      	movs	r3, #1
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f006 ff8a 	bl	8008ca8 <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	24050000 	.word	0x24050000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	24000998 	.word	0x24000998
 8001dc8:	240009b0 	.word	0x240009b0

08001dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <SystemInit+0xd0>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <SystemInit+0xd0>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <SystemInit+0xd4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	2b06      	cmp	r3, #6
 8001dea:	d807      	bhi.n	8001dfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <SystemInit+0xd4>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 030f 	bic.w	r3, r3, #15
 8001df4:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <SystemInit+0xd4>)
 8001df6:	f043 0307 	orr.w	r3, r3, #7
 8001dfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <SystemInit+0xd8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <SystemInit+0xd8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <SystemInit+0xd8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <SystemInit+0xd8>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4924      	ldr	r1, [pc, #144]	; (8001ea4 <SystemInit+0xd8>)
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <SystemInit+0xdc>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e1a:	4b21      	ldr	r3, [pc, #132]	; (8001ea0 <SystemInit+0xd4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d007      	beq.n	8001e36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e26:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <SystemInit+0xd4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 030f 	bic.w	r3, r3, #15
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <SystemInit+0xd4>)
 8001e30:	f043 0307 	orr.w	r3, r3, #7
 8001e34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <SystemInit+0xd8>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <SystemInit+0xd8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <SystemInit+0xd8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <SystemInit+0xd8>)
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <SystemInit+0xe0>)
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <SystemInit+0xd8>)
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <SystemInit+0xe4>)
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <SystemInit+0xd8>)
 8001e56:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <SystemInit+0xe8>)
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <SystemInit+0xd8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <SystemInit+0xd8>)
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <SystemInit+0xe8>)
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <SystemInit+0xd8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <SystemInit+0xd8>)
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <SystemInit+0xe8>)
 8001e70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <SystemInit+0xd8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <SystemInit+0xd8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <SystemInit+0xd8>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <SystemInit+0xd8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <SystemInit+0xec>)
 8001e8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e92:	bf00      	nop
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	52002000 	.word	0x52002000
 8001ea4:	58024400 	.word	0x58024400
 8001ea8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001eac:	02020200 	.word	0x02020200
 8001eb0:	01ff0000 	.word	0x01ff0000
 8001eb4:	01010280 	.word	0x01010280
 8001eb8:	52004000 	.word	0x52004000

08001ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ec0:	f7ff ff84 	bl	8001dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec4:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ec6:	490d      	ldr	r1, [pc, #52]	; (8001efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ecc:	e002      	b.n	8001ed4 <LoopCopyDataInit>

08001ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed2:	3304      	adds	r3, #4

08001ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed8:	d3f9      	bcc.n	8001ece <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001edc:	4c0a      	ldr	r4, [pc, #40]	; (8001f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee0:	e001      	b.n	8001ee6 <LoopFillZerobss>

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee4:	3204      	adds	r2, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eea:	f006 fee3 	bl	8008cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eee:	f7fe fe45 	bl	8000b7c <main>
  bx  lr
 8001ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001ef8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001efc:	240004ec 	.word	0x240004ec
  ldr r2, =_sidata
 8001f00:	0800becc 	.word	0x0800becc
  ldr r2, =_sbss
 8001f04:	240004ec 	.word	0x240004ec
  ldr r4, =_ebss
 8001f08:	240009b0 	.word	0x240009b0

08001f0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC3_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f16:	2003      	movs	r0, #3
 8001f18:	f000 f980 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f1c:	f001 fe9c 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_Init+0x68>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	4913      	ldr	r1, [pc, #76]	; (8001f7c <HAL_Init+0x6c>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_Init+0x68>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_Init+0x6c>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_Init+0x70>)
 8001f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f54:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_Init+0x74>)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f000 f814 	bl	8001f88 <HAL_InitTick>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e002      	b.n	8001f70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6a:	f7ff fce1 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	0800ba54 	.word	0x0800ba54
 8001f80:	2400030c 	.word	0x2400030c
 8001f84:	24000308 	.word	0x24000308

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_InitTick+0x60>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e021      	b.n	8001fe0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_InitTick+0x64>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_InitTick+0x60>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f965 	bl	8002282 <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f92f 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_InitTick+0x68>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	24000314 	.word	0x24000314
 8001fec:	24000308 	.word	0x24000308
 8001ff0:	24000310 	.word	0x24000310

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	24000314 	.word	0x24000314
 8002018:	2400099c 	.word	0x2400099c

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	2400099c 	.word	0x2400099c

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	24000314 	.word	0x24000314

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <__NVIC_SetPriorityGrouping+0x40>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x40>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00
 80020c0:	05fa0000 	.word	0x05fa0000

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	; (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff40 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff90 	bl	8002170 <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5f 	bl	800211c <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff33 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa4 	bl	80021d8 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff feba 	bl	800201c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e2dc      	b.n	800286e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d008      	beq.n	80022d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e2cd      	b.n	800286e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a76      	ldr	r2, [pc, #472]	; (80024b0 <HAL_DMA_Abort+0x214>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d04a      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a74      	ldr	r2, [pc, #464]	; (80024b4 <HAL_DMA_Abort+0x218>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d045      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a73      	ldr	r2, [pc, #460]	; (80024b8 <HAL_DMA_Abort+0x21c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d040      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a71      	ldr	r2, [pc, #452]	; (80024bc <HAL_DMA_Abort+0x220>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d03b      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a70      	ldr	r2, [pc, #448]	; (80024c0 <HAL_DMA_Abort+0x224>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d036      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6e      	ldr	r2, [pc, #440]	; (80024c4 <HAL_DMA_Abort+0x228>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d031      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a6d      	ldr	r2, [pc, #436]	; (80024c8 <HAL_DMA_Abort+0x22c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d02c      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6b      	ldr	r2, [pc, #428]	; (80024cc <HAL_DMA_Abort+0x230>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d027      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6a      	ldr	r2, [pc, #424]	; (80024d0 <HAL_DMA_Abort+0x234>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d022      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a68      	ldr	r2, [pc, #416]	; (80024d4 <HAL_DMA_Abort+0x238>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01d      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a67      	ldr	r2, [pc, #412]	; (80024d8 <HAL_DMA_Abort+0x23c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d018      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a65      	ldr	r2, [pc, #404]	; (80024dc <HAL_DMA_Abort+0x240>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d013      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a64      	ldr	r2, [pc, #400]	; (80024e0 <HAL_DMA_Abort+0x244>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d00e      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a62      	ldr	r2, [pc, #392]	; (80024e4 <HAL_DMA_Abort+0x248>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a61      	ldr	r2, [pc, #388]	; (80024e8 <HAL_DMA_Abort+0x24c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d004      	beq.n	8002372 <HAL_DMA_Abort+0xd6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a5f      	ldr	r2, [pc, #380]	; (80024ec <HAL_DMA_Abort+0x250>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Abort+0xda>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_DMA_Abort+0xdc>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 021e 	bic.w	r2, r2, #30
 800238a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e00a      	b.n	80023ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 020e 	bic.w	r2, r2, #14
 80023b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a3c      	ldr	r2, [pc, #240]	; (80024b0 <HAL_DMA_Abort+0x214>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d072      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3a      	ldr	r2, [pc, #232]	; (80024b4 <HAL_DMA_Abort+0x218>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d06d      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <HAL_DMA_Abort+0x21c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d068      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a37      	ldr	r2, [pc, #220]	; (80024bc <HAL_DMA_Abort+0x220>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d063      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a36      	ldr	r2, [pc, #216]	; (80024c0 <HAL_DMA_Abort+0x224>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d05e      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <HAL_DMA_Abort+0x228>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d059      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a33      	ldr	r2, [pc, #204]	; (80024c8 <HAL_DMA_Abort+0x22c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d054      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a31      	ldr	r2, [pc, #196]	; (80024cc <HAL_DMA_Abort+0x230>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d04f      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a30      	ldr	r2, [pc, #192]	; (80024d0 <HAL_DMA_Abort+0x234>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d04a      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a2e      	ldr	r2, [pc, #184]	; (80024d4 <HAL_DMA_Abort+0x238>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d045      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2d      	ldr	r2, [pc, #180]	; (80024d8 <HAL_DMA_Abort+0x23c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d040      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2b      	ldr	r2, [pc, #172]	; (80024dc <HAL_DMA_Abort+0x240>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d03b      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2a      	ldr	r2, [pc, #168]	; (80024e0 <HAL_DMA_Abort+0x244>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d036      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a28      	ldr	r2, [pc, #160]	; (80024e4 <HAL_DMA_Abort+0x248>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d031      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a27      	ldr	r2, [pc, #156]	; (80024e8 <HAL_DMA_Abort+0x24c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d02c      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a25      	ldr	r2, [pc, #148]	; (80024ec <HAL_DMA_Abort+0x250>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d027      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <HAL_DMA_Abort+0x254>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a22      	ldr	r2, [pc, #136]	; (80024f4 <HAL_DMA_Abort+0x258>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01d      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_DMA_Abort+0x25c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d018      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_DMA_Abort+0x260>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <HAL_DMA_Abort+0x264>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00e      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_DMA_Abort+0x268>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <HAL_DMA_Abort+0x26c>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_DMA_Abort+0x20e>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a19      	ldr	r2, [pc, #100]	; (800250c <HAL_DMA_Abort+0x270>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d132      	bne.n	8002510 <HAL_DMA_Abort+0x274>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e031      	b.n	8002512 <HAL_DMA_Abort+0x276>
 80024ae:	bf00      	nop
 80024b0:	40020010 	.word	0x40020010
 80024b4:	40020028 	.word	0x40020028
 80024b8:	40020040 	.word	0x40020040
 80024bc:	40020058 	.word	0x40020058
 80024c0:	40020070 	.word	0x40020070
 80024c4:	40020088 	.word	0x40020088
 80024c8:	400200a0 	.word	0x400200a0
 80024cc:	400200b8 	.word	0x400200b8
 80024d0:	40020410 	.word	0x40020410
 80024d4:	40020428 	.word	0x40020428
 80024d8:	40020440 	.word	0x40020440
 80024dc:	40020458 	.word	0x40020458
 80024e0:	40020470 	.word	0x40020470
 80024e4:	40020488 	.word	0x40020488
 80024e8:	400204a0 	.word	0x400204a0
 80024ec:	400204b8 	.word	0x400204b8
 80024f0:	58025408 	.word	0x58025408
 80024f4:	5802541c 	.word	0x5802541c
 80024f8:	58025430 	.word	0x58025430
 80024fc:	58025444 	.word	0x58025444
 8002500:	58025458 	.word	0x58025458
 8002504:	5802546c 	.word	0x5802546c
 8002508:	58025480 	.word	0x58025480
 800250c:	58025494 	.word	0x58025494
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002524:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6d      	ldr	r2, [pc, #436]	; (80026e0 <HAL_DMA_Abort+0x444>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d04a      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6b      	ldr	r2, [pc, #428]	; (80026e4 <HAL_DMA_Abort+0x448>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d045      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_DMA_Abort+0x44c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d040      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a68      	ldr	r2, [pc, #416]	; (80026ec <HAL_DMA_Abort+0x450>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d03b      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a67      	ldr	r2, [pc, #412]	; (80026f0 <HAL_DMA_Abort+0x454>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d036      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a65      	ldr	r2, [pc, #404]	; (80026f4 <HAL_DMA_Abort+0x458>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d031      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a64      	ldr	r2, [pc, #400]	; (80026f8 <HAL_DMA_Abort+0x45c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d02c      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a62      	ldr	r2, [pc, #392]	; (80026fc <HAL_DMA_Abort+0x460>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d027      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a61      	ldr	r2, [pc, #388]	; (8002700 <HAL_DMA_Abort+0x464>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5f      	ldr	r2, [pc, #380]	; (8002704 <HAL_DMA_Abort+0x468>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01d      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5e      	ldr	r2, [pc, #376]	; (8002708 <HAL_DMA_Abort+0x46c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d018      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5c      	ldr	r2, [pc, #368]	; (800270c <HAL_DMA_Abort+0x470>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <HAL_DMA_Abort+0x474>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00e      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a59      	ldr	r2, [pc, #356]	; (8002714 <HAL_DMA_Abort+0x478>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_DMA_Abort+0x47c>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_DMA_Abort+0x32a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a56      	ldr	r2, [pc, #344]	; (800271c <HAL_DMA_Abort+0x480>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d108      	bne.n	80025d8 <HAL_DMA_Abort+0x33c>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e007      	b.n	80025e8 <HAL_DMA_Abort+0x34c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025e8:	e013      	b.n	8002612 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ea:	f7ff fd17 	bl	800201c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d90c      	bls.n	8002612 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2203      	movs	r2, #3
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e12d      	b.n	800286e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e5      	bne.n	80025ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <HAL_DMA_Abort+0x444>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d04a      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a2d      	ldr	r2, [pc, #180]	; (80026e4 <HAL_DMA_Abort+0x448>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d045      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2c      	ldr	r2, [pc, #176]	; (80026e8 <HAL_DMA_Abort+0x44c>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d040      	beq.n	80026be <HAL_DMA_Abort+0x422>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <HAL_DMA_Abort+0x450>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d03b      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_DMA_Abort+0x454>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d036      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_DMA_Abort+0x458>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d031      	beq.n	80026be <HAL_DMA_Abort+0x422>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_DMA_Abort+0x45c>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d02c      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_DMA_Abort+0x460>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d027      	beq.n	80026be <HAL_DMA_Abort+0x422>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a23      	ldr	r2, [pc, #140]	; (8002700 <HAL_DMA_Abort+0x464>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_DMA_Abort+0x468>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01d      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a20      	ldr	r2, [pc, #128]	; (8002708 <HAL_DMA_Abort+0x46c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d018      	beq.n	80026be <HAL_DMA_Abort+0x422>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <HAL_DMA_Abort+0x470>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_DMA_Abort+0x422>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_DMA_Abort+0x474>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00e      	beq.n	80026be <HAL_DMA_Abort+0x422>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_DMA_Abort+0x478>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d009      	beq.n	80026be <HAL_DMA_Abort+0x422>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <HAL_DMA_Abort+0x47c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d004      	beq.n	80026be <HAL_DMA_Abort+0x422>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_DMA_Abort+0x480>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_DMA_Abort+0x426>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_DMA_Abort+0x428>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d02b      	beq.n	8002720 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	223f      	movs	r2, #63	; 0x3f
 80026d8:	409a      	lsls	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	e02a      	b.n	8002736 <HAL_DMA_Abort+0x49a>
 80026e0:	40020010 	.word	0x40020010
 80026e4:	40020028 	.word	0x40020028
 80026e8:	40020040 	.word	0x40020040
 80026ec:	40020058 	.word	0x40020058
 80026f0:	40020070 	.word	0x40020070
 80026f4:	40020088 	.word	0x40020088
 80026f8:	400200a0 	.word	0x400200a0
 80026fc:	400200b8 	.word	0x400200b8
 8002700:	40020410 	.word	0x40020410
 8002704:	40020428 	.word	0x40020428
 8002708:	40020440 	.word	0x40020440
 800270c:	40020458 	.word	0x40020458
 8002710:	40020470 	.word	0x40020470
 8002714:	40020488 	.word	0x40020488
 8002718:	400204a0 	.word	0x400204a0
 800271c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2201      	movs	r2, #1
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4f      	ldr	r2, [pc, #316]	; (8002878 <HAL_DMA_Abort+0x5dc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d072      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <HAL_DMA_Abort+0x5e0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d06d      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <HAL_DMA_Abort+0x5e4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d068      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a4a      	ldr	r2, [pc, #296]	; (8002884 <HAL_DMA_Abort+0x5e8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d063      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a49      	ldr	r2, [pc, #292]	; (8002888 <HAL_DMA_Abort+0x5ec>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d05e      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a47      	ldr	r2, [pc, #284]	; (800288c <HAL_DMA_Abort+0x5f0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d059      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a46      	ldr	r2, [pc, #280]	; (8002890 <HAL_DMA_Abort+0x5f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d054      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a44      	ldr	r2, [pc, #272]	; (8002894 <HAL_DMA_Abort+0x5f8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d04f      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a43      	ldr	r2, [pc, #268]	; (8002898 <HAL_DMA_Abort+0x5fc>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a41      	ldr	r2, [pc, #260]	; (800289c <HAL_DMA_Abort+0x600>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <HAL_DMA_Abort+0x604>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a3e      	ldr	r2, [pc, #248]	; (80028a4 <HAL_DMA_Abort+0x608>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <HAL_DMA_Abort+0x60c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3b      	ldr	r2, [pc, #236]	; (80028ac <HAL_DMA_Abort+0x610>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <HAL_DMA_Abort+0x614>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a38      	ldr	r2, [pc, #224]	; (80028b4 <HAL_DMA_Abort+0x618>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a37      	ldr	r2, [pc, #220]	; (80028b8 <HAL_DMA_Abort+0x61c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a35      	ldr	r2, [pc, #212]	; (80028bc <HAL_DMA_Abort+0x620>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a34      	ldr	r2, [pc, #208]	; (80028c0 <HAL_DMA_Abort+0x624>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a32      	ldr	r2, [pc, #200]	; (80028c4 <HAL_DMA_Abort+0x628>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <HAL_DMA_Abort+0x62c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2f      	ldr	r2, [pc, #188]	; (80028cc <HAL_DMA_Abort+0x630>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <HAL_DMA_Abort+0x634>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_Abort+0x58a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <HAL_DMA_Abort+0x638>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_DMA_Abort+0x58e>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_DMA_Abort+0x590>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002838:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00c      	beq.n	800285c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002850:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800285a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020010 	.word	0x40020010
 800287c:	40020028 	.word	0x40020028
 8002880:	40020040 	.word	0x40020040
 8002884:	40020058 	.word	0x40020058
 8002888:	40020070 	.word	0x40020070
 800288c:	40020088 	.word	0x40020088
 8002890:	400200a0 	.word	0x400200a0
 8002894:	400200b8 	.word	0x400200b8
 8002898:	40020410 	.word	0x40020410
 800289c:	40020428 	.word	0x40020428
 80028a0:	40020440 	.word	0x40020440
 80028a4:	40020458 	.word	0x40020458
 80028a8:	40020470 	.word	0x40020470
 80028ac:	40020488 	.word	0x40020488
 80028b0:	400204a0 	.word	0x400204a0
 80028b4:	400204b8 	.word	0x400204b8
 80028b8:	58025408 	.word	0x58025408
 80028bc:	5802541c 	.word	0x5802541c
 80028c0:	58025430 	.word	0x58025430
 80028c4:	58025444 	.word	0x58025444
 80028c8:	58025458 	.word	0x58025458
 80028cc:	5802546c 	.word	0x5802546c
 80028d0:	58025480 	.word	0x58025480
 80028d4:	58025494 	.word	0x58025494

080028d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e237      	b.n	8002d5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d004      	beq.n	8002900 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e22c      	b.n	8002d5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5c      	ldr	r2, [pc, #368]	; (8002a78 <HAL_DMA_Abort_IT+0x1a0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04a      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5b      	ldr	r2, [pc, #364]	; (8002a7c <HAL_DMA_Abort_IT+0x1a4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d045      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a59      	ldr	r2, [pc, #356]	; (8002a80 <HAL_DMA_Abort_IT+0x1a8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d040      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_DMA_Abort_IT+0x1ac>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d03b      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_DMA_Abort_IT+0x1b0>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d036      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a55      	ldr	r2, [pc, #340]	; (8002a8c <HAL_DMA_Abort_IT+0x1b4>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d031      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a53      	ldr	r2, [pc, #332]	; (8002a90 <HAL_DMA_Abort_IT+0x1b8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d02c      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_DMA_Abort_IT+0x1bc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d027      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a50      	ldr	r2, [pc, #320]	; (8002a98 <HAL_DMA_Abort_IT+0x1c0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d022      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a4f      	ldr	r2, [pc, #316]	; (8002a9c <HAL_DMA_Abort_IT+0x1c4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d01d      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <HAL_DMA_Abort_IT+0x1c8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a4c      	ldr	r2, [pc, #304]	; (8002aa4 <HAL_DMA_Abort_IT+0x1cc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a4a      	ldr	r2, [pc, #296]	; (8002aa8 <HAL_DMA_Abort_IT+0x1d0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a49      	ldr	r2, [pc, #292]	; (8002aac <HAL_DMA_Abort_IT+0x1d4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a47      	ldr	r2, [pc, #284]	; (8002ab0 <HAL_DMA_Abort_IT+0x1d8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_DMA_Abort_IT+0xc8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <HAL_DMA_Abort_IT+0x1dc>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_DMA_Abort_IT+0xcc>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_DMA_Abort_IT+0xce>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8086 	beq.w	8002ab8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_DMA_Abort_IT+0x1a0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d04a      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2e      	ldr	r2, [pc, #184]	; (8002a7c <HAL_DMA_Abort_IT+0x1a4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d045      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2c      	ldr	r2, [pc, #176]	; (8002a80 <HAL_DMA_Abort_IT+0x1a8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d040      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2b      	ldr	r2, [pc, #172]	; (8002a84 <HAL_DMA_Abort_IT+0x1ac>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d03b      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a29      	ldr	r2, [pc, #164]	; (8002a88 <HAL_DMA_Abort_IT+0x1b0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d036      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <HAL_DMA_Abort_IT+0x1b4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d031      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a26      	ldr	r2, [pc, #152]	; (8002a90 <HAL_DMA_Abort_IT+0x1b8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02c      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <HAL_DMA_Abort_IT+0x1bc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d027      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <HAL_DMA_Abort_IT+0x1c0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d022      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <HAL_DMA_Abort_IT+0x1c4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d01d      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <HAL_DMA_Abort_IT+0x1c8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d018      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <HAL_DMA_Abort_IT+0x1cc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a1d      	ldr	r2, [pc, #116]	; (8002aa8 <HAL_DMA_Abort_IT+0x1d0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00e      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <HAL_DMA_Abort_IT+0x1d4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <HAL_DMA_Abort_IT+0x1d8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d004      	beq.n	8002a54 <HAL_DMA_Abort_IT+0x17c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <HAL_DMA_Abort_IT+0x1dc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d108      	bne.n	8002a66 <HAL_DMA_Abort_IT+0x18e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e178      	b.n	8002d58 <HAL_DMA_Abort_IT+0x480>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e16f      	b.n	8002d58 <HAL_DMA_Abort_IT+0x480>
 8002a78:	40020010 	.word	0x40020010
 8002a7c:	40020028 	.word	0x40020028
 8002a80:	40020040 	.word	0x40020040
 8002a84:	40020058 	.word	0x40020058
 8002a88:	40020070 	.word	0x40020070
 8002a8c:	40020088 	.word	0x40020088
 8002a90:	400200a0 	.word	0x400200a0
 8002a94:	400200b8 	.word	0x400200b8
 8002a98:	40020410 	.word	0x40020410
 8002a9c:	40020428 	.word	0x40020428
 8002aa0:	40020440 	.word	0x40020440
 8002aa4:	40020458 	.word	0x40020458
 8002aa8:	40020470 	.word	0x40020470
 8002aac:	40020488 	.word	0x40020488
 8002ab0:	400204a0 	.word	0x400204a0
 8002ab4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 020e 	bic.w	r2, r2, #14
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6c      	ldr	r2, [pc, #432]	; (8002c80 <HAL_DMA_Abort_IT+0x3a8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d04a      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6b      	ldr	r2, [pc, #428]	; (8002c84 <HAL_DMA_Abort_IT+0x3ac>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d045      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a69      	ldr	r2, [pc, #420]	; (8002c88 <HAL_DMA_Abort_IT+0x3b0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d040      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a68      	ldr	r2, [pc, #416]	; (8002c8c <HAL_DMA_Abort_IT+0x3b4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d03b      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a66      	ldr	r2, [pc, #408]	; (8002c90 <HAL_DMA_Abort_IT+0x3b8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d036      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_DMA_Abort_IT+0x3bc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d031      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a63      	ldr	r2, [pc, #396]	; (8002c98 <HAL_DMA_Abort_IT+0x3c0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d02c      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a62      	ldr	r2, [pc, #392]	; (8002c9c <HAL_DMA_Abort_IT+0x3c4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d027      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a60      	ldr	r2, [pc, #384]	; (8002ca0 <HAL_DMA_Abort_IT+0x3c8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d022      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a5f      	ldr	r2, [pc, #380]	; (8002ca4 <HAL_DMA_Abort_IT+0x3cc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d01d      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a5d      	ldr	r2, [pc, #372]	; (8002ca8 <HAL_DMA_Abort_IT+0x3d0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d018      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5c      	ldr	r2, [pc, #368]	; (8002cac <HAL_DMA_Abort_IT+0x3d4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d013      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5a      	ldr	r2, [pc, #360]	; (8002cb0 <HAL_DMA_Abort_IT+0x3d8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00e      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a59      	ldr	r2, [pc, #356]	; (8002cb4 <HAL_DMA_Abort_IT+0x3dc>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d009      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a57      	ldr	r2, [pc, #348]	; (8002cb8 <HAL_DMA_Abort_IT+0x3e0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x290>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a56      	ldr	r2, [pc, #344]	; (8002cbc <HAL_DMA_Abort_IT+0x3e4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d108      	bne.n	8002b7a <HAL_DMA_Abort_IT+0x2a2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	e007      	b.n	8002b8a <HAL_DMA_Abort_IT+0x2b2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3c      	ldr	r2, [pc, #240]	; (8002c80 <HAL_DMA_Abort_IT+0x3a8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d072      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <HAL_DMA_Abort_IT+0x3ac>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d06d      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <HAL_DMA_Abort_IT+0x3b0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d068      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <HAL_DMA_Abort_IT+0x3b4>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d063      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_DMA_Abort_IT+0x3b8>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d05e      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a34      	ldr	r2, [pc, #208]	; (8002c94 <HAL_DMA_Abort_IT+0x3bc>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d059      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a33      	ldr	r2, [pc, #204]	; (8002c98 <HAL_DMA_Abort_IT+0x3c0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d054      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a31      	ldr	r2, [pc, #196]	; (8002c9c <HAL_DMA_Abort_IT+0x3c4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d04f      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <HAL_DMA_Abort_IT+0x3c8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d04a      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a2e      	ldr	r2, [pc, #184]	; (8002ca4 <HAL_DMA_Abort_IT+0x3cc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d045      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2d      	ldr	r2, [pc, #180]	; (8002ca8 <HAL_DMA_Abort_IT+0x3d0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d040      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a2b      	ldr	r2, [pc, #172]	; (8002cac <HAL_DMA_Abort_IT+0x3d4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d03b      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a2a      	ldr	r2, [pc, #168]	; (8002cb0 <HAL_DMA_Abort_IT+0x3d8>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d036      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a28      	ldr	r2, [pc, #160]	; (8002cb4 <HAL_DMA_Abort_IT+0x3dc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d031      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_DMA_Abort_IT+0x3e0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d02c      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_DMA_Abort_IT+0x3e4>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d027      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <HAL_DMA_Abort_IT+0x3e8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d022      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a22      	ldr	r2, [pc, #136]	; (8002cc4 <HAL_DMA_Abort_IT+0x3ec>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d01d      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a21      	ldr	r2, [pc, #132]	; (8002cc8 <HAL_DMA_Abort_IT+0x3f0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d018      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a1f      	ldr	r2, [pc, #124]	; (8002ccc <HAL_DMA_Abort_IT+0x3f4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d013      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_DMA_Abort_IT+0x3f8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00e      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_DMA_Abort_IT+0x3fc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d009      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <HAL_DMA_Abort_IT+0x400>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_DMA_Abort_IT+0x3a2>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a19      	ldr	r2, [pc, #100]	; (8002cdc <HAL_DMA_Abort_IT+0x404>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d132      	bne.n	8002ce0 <HAL_DMA_Abort_IT+0x408>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e031      	b.n	8002ce2 <HAL_DMA_Abort_IT+0x40a>
 8002c7e:	bf00      	nop
 8002c80:	40020010 	.word	0x40020010
 8002c84:	40020028 	.word	0x40020028
 8002c88:	40020040 	.word	0x40020040
 8002c8c:	40020058 	.word	0x40020058
 8002c90:	40020070 	.word	0x40020070
 8002c94:	40020088 	.word	0x40020088
 8002c98:	400200a0 	.word	0x400200a0
 8002c9c:	400200b8 	.word	0x400200b8
 8002ca0:	40020410 	.word	0x40020410
 8002ca4:	40020428 	.word	0x40020428
 8002ca8:	40020440 	.word	0x40020440
 8002cac:	40020458 	.word	0x40020458
 8002cb0:	40020470 	.word	0x40020470
 8002cb4:	40020488 	.word	0x40020488
 8002cb8:	400204a0 	.word	0x400204a0
 8002cbc:	400204b8 	.word	0x400204b8
 8002cc0:	58025408 	.word	0x58025408
 8002cc4:	5802541c 	.word	0x5802541c
 8002cc8:	58025430 	.word	0x58025430
 8002ccc:	58025444 	.word	0x58025444
 8002cd0:	58025458 	.word	0x58025458
 8002cd4:	5802546c 	.word	0x5802546c
 8002cd8:	58025480 	.word	0x58025480
 8002cdc:	58025494 	.word	0x58025494
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d028      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2201      	movs	r2, #1
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d72:	4b86      	ldr	r3, [pc, #536]	; (8002f8c <HAL_GPIO_Init+0x228>)
 8002d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d76:	e18c      	b.n	8003092 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	4013      	ands	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 817e 	beq.w	800308c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d005      	beq.n	8002da8 <HAL_GPIO_Init+0x44>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d130      	bne.n	8002e0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dde:	2201      	movs	r2, #1
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f003 0201 	and.w	r2, r3, #1
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d017      	beq.n	8002e46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	2203      	movs	r2, #3
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d123      	bne.n	8002e9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	08da      	lsrs	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3208      	adds	r2, #8
 8002e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	220f      	movs	r2, #15
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	69b9      	ldr	r1, [r7, #24]
 8002e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f003 0203 	and.w	r2, r3, #3
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 80d8 	beq.w	800308c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002edc:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <HAL_GPIO_Init+0x22c>)
 8002ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ee2:	4a2b      	ldr	r2, [pc, #172]	; (8002f90 <HAL_GPIO_Init+0x22c>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_GPIO_Init+0x22c>)
 8002eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002efa:	4a26      	ldr	r2, [pc, #152]	; (8002f94 <HAL_GPIO_Init+0x230>)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	089b      	lsrs	r3, r3, #2
 8002f00:	3302      	adds	r3, #2
 8002f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	220f      	movs	r2, #15
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_GPIO_Init+0x234>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d04a      	beq.n	8002fbc <HAL_GPIO_Init+0x258>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a1c      	ldr	r2, [pc, #112]	; (8002f9c <HAL_GPIO_Init+0x238>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02b      	beq.n	8002f86 <HAL_GPIO_Init+0x222>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_GPIO_Init+0x23c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d025      	beq.n	8002f82 <HAL_GPIO_Init+0x21e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_GPIO_Init+0x240>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01f      	beq.n	8002f7e <HAL_GPIO_Init+0x21a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_GPIO_Init+0x244>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d019      	beq.n	8002f7a <HAL_GPIO_Init+0x216>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a18      	ldr	r2, [pc, #96]	; (8002fac <HAL_GPIO_Init+0x248>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <HAL_GPIO_Init+0x24c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00d      	beq.n	8002f72 <HAL_GPIO_Init+0x20e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_GPIO_Init+0x250>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <HAL_GPIO_Init+0x20a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <HAL_GPIO_Init+0x254>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_GPIO_Init+0x206>
 8002f66:	2309      	movs	r3, #9
 8002f68:	e029      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f6a:	230a      	movs	r3, #10
 8002f6c:	e027      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f6e:	2307      	movs	r3, #7
 8002f70:	e025      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f72:	2306      	movs	r3, #6
 8002f74:	e023      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f76:	2305      	movs	r3, #5
 8002f78:	e021      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	e01f      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e01d      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e01b      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e019      	b.n	8002fbe <HAL_GPIO_Init+0x25a>
 8002f8a:	bf00      	nop
 8002f8c:	58000080 	.word	0x58000080
 8002f90:	58024400 	.word	0x58024400
 8002f94:	58000400 	.word	0x58000400
 8002f98:	58020000 	.word	0x58020000
 8002f9c:	58020400 	.word	0x58020400
 8002fa0:	58020800 	.word	0x58020800
 8002fa4:	58020c00 	.word	0x58020c00
 8002fa8:	58021000 	.word	0x58021000
 8002fac:	58021400 	.word	0x58021400
 8002fb0:	58021800 	.word	0x58021800
 8002fb4:	58021c00 	.word	0x58021c00
 8002fb8:	58022400 	.word	0x58022400
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	f002 0203 	and.w	r2, r2, #3
 8002fc4:	0092      	lsls	r2, r2, #2
 8002fc6:	4093      	lsls	r3, r2
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fce:	4938      	ldr	r1, [pc, #224]	; (80030b0 <HAL_GPIO_Init+0x34c>)
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	089b      	lsrs	r3, r3, #2
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800300a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	43db      	mvns	r3, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4013      	ands	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	3301      	adds	r3, #1
 8003090:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	f47f ae6b 	bne.w	8002d78 <HAL_GPIO_Init+0x14>
  }
}
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	3724      	adds	r7, #36	; 0x24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	58000400 	.word	0x58000400

080030b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	807b      	strh	r3, [r7, #2]
 80030c0:	4613      	mov	r3, r2
 80030c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030c4:	787b      	ldrb	r3, [r7, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030d0:	e003      	b.n	80030da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030d2:	887b      	ldrh	r3, [r7, #2]
 80030d4:	041a      	lsls	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	619a      	str	r2, [r3, #24]
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4603      	mov	r3, r0
 80030ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80030f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003104:	88fb      	ldrh	r3, [r7, #6]
 8003106:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe f835 	bl	800117c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_PWREx_ConfigSupply+0x70>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b04      	cmp	r3, #4
 800312e:	d00a      	beq.n	8003146 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <HAL_PWREx_ConfigSupply+0x70>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e01f      	b.n	8003182 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e01d      	b.n	8003182 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_PWREx_ConfigSupply+0x70>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	490f      	ldr	r1, [pc, #60]	; (800318c <HAL_PWREx_ConfigSupply+0x70>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4313      	orrs	r3, r2
 8003154:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003156:	f7fe ff61 	bl	800201c <HAL_GetTick>
 800315a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800315c:	e009      	b.n	8003172 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800315e:	f7fe ff5d 	bl	800201c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800316c:	d901      	bls.n	8003172 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e007      	b.n	8003182 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003172:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_PWREx_ConfigSupply+0x70>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800317a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317e:	d1ee      	bne.n	800315e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	58024800 	.word	0x58024800

08003190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e39d      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8087 	beq.w	80032be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b0:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031ba:	4b86      	ldr	r3, [pc, #536]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d007      	beq.n	80031d6 <HAL_RCC_OscConfig+0x46>
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b18      	cmp	r3, #24
 80031ca:	d110      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
 80031cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d10b      	bne.n	80031ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d6:	4b7f      	ldr	r3, [pc, #508]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d06c      	beq.n	80032bc <HAL_RCC_OscConfig+0x12c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d168      	bne.n	80032bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e377      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x76>
 80031f8:	4b76      	ldr	r3, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a75      	ldr	r2, [pc, #468]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e02e      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x98>
 800320e:	4b71      	ldr	r3, [pc, #452]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a70      	ldr	r2, [pc, #448]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b6e      	ldr	r3, [pc, #440]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6d      	ldr	r2, [pc, #436]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0xbc>
 8003232:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a67      	ldr	r2, [pc, #412]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a64      	ldr	r2, [pc, #400]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xd4>
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b5e      	ldr	r3, [pc, #376]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5d      	ldr	r2, [pc, #372]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fed6 	bl	800201c <HAL_GetTick>
 8003270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fe fed2 	bl	800201c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e32b      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003286:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xe4>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe fec2 	bl	800201c <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fe febe 	bl	800201c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e317      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032ae:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x10c>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 808c 	beq.w	80033e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032cc:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <HAL_RCC_OscConfig+0x162>
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	2b18      	cmp	r3, #24
 80032e6:	d137      	bne.n	8003358 <HAL_RCC_OscConfig+0x1c8>
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d132      	bne.n	8003358 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f2:	4b38      	ldr	r3, [pc, #224]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_RCC_OscConfig+0x17a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e2e9      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800330a:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 0219 	bic.w	r2, r3, #25
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	492f      	ldr	r1, [pc, #188]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800331c:	f7fe fe7e 	bl	800201c <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003324:	f7fe fe7a 	bl	800201c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b02      	cmp	r3, #2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e2d3      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003336:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b24      	ldr	r3, [pc, #144]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	4920      	ldr	r1, [pc, #128]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003352:	4313      	orrs	r3, r2
 8003354:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003356:	e045      	b.n	80033e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d026      	beq.n	80033ae <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 0219 	bic.w	r2, r3, #25
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4919      	ldr	r1, [pc, #100]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800336e:	4313      	orrs	r3, r2
 8003370:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003372:	f7fe fe53 	bl	800201c <HAL_GetTick>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe fe4f 	bl	800201c <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e2a8      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0f0      	beq.n	800337a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	490b      	ldr	r1, [pc, #44]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
 80033ac:	e01a      	b.n	80033e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <HAL_RCC_OscConfig+0x244>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe fe2f 	bl	800201c <HAL_GetTick>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fe2b 	bl	800201c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d903      	bls.n	80033d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e284      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
 80033d4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033d8:	4b96      	ldr	r3, [pc, #600]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ee      	bne.n	80033c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d06a      	beq.n	80034c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f0:	4b90      	ldr	r3, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033fa:	4b8e      	ldr	r3, [pc, #568]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b08      	cmp	r3, #8
 8003404:	d007      	beq.n	8003416 <HAL_RCC_OscConfig+0x286>
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b18      	cmp	r3, #24
 800340a:	d11b      	bne.n	8003444 <HAL_RCC_OscConfig+0x2b4>
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b01      	cmp	r3, #1
 8003414:	d116      	bne.n	8003444 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003416:	4b87      	ldr	r3, [pc, #540]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_RCC_OscConfig+0x29e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2b80      	cmp	r3, #128	; 0x80
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e257      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800342e:	4b81      	ldr	r3, [pc, #516]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	497d      	ldr	r1, [pc, #500]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003442:	e040      	b.n	80034c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800344c:	4b79      	ldr	r3, [pc, #484]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a78      	ldr	r2, [pc, #480]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003458:	f7fe fde0 	bl	800201c <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003460:	f7fe fddc 	bl	800201c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e235      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003472:	4b70      	ldr	r3, [pc, #448]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	061b      	lsls	r3, r3, #24
 800348c:	4969      	ldr	r1, [pc, #420]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	60cb      	str	r3, [r1, #12]
 8003492:	e018      	b.n	80034c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003494:	4b67      	ldr	r3, [pc, #412]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a66      	ldr	r2, [pc, #408]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800349a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fdbc 	bl	800201c <HAL_GetTick>
 80034a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034a8:	f7fe fdb8 	bl	800201c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e211      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034ba:	4b5e      	ldr	r3, [pc, #376]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d036      	beq.n	8003540 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d019      	beq.n	800350e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	4a55      	ldr	r2, [pc, #340]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fe fd99 	bl	800201c <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fe fd95 	bl	800201c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1ee      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003500:	4b4c      	ldr	r3, [pc, #304]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x35e>
 800350c:	e018      	b.n	8003540 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800350e:	4b49      	ldr	r3, [pc, #292]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	4a48      	ldr	r2, [pc, #288]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003514:	f023 0301 	bic.w	r3, r3, #1
 8003518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351a:	f7fe fd7f 	bl	800201c <HAL_GetTick>
 800351e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003522:	f7fe fd7b 	bl	800201c <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e1d4      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003534:	4b3f      	ldr	r3, [pc, #252]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1f0      	bne.n	8003522 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d036      	beq.n	80035ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d019      	beq.n	8003588 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003554:	4b37      	ldr	r3, [pc, #220]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a36      	ldr	r2, [pc, #216]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800355a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800355e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003560:	f7fe fd5c 	bl	800201c <HAL_GetTick>
 8003564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003568:	f7fe fd58 	bl	800201c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1b1      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800357a:	4b2e      	ldr	r3, [pc, #184]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x3d8>
 8003586:	e018      	b.n	80035ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003588:	4b2a      	ldr	r3, [pc, #168]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a29      	ldr	r2, [pc, #164]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800358e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003592:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003594:	f7fe fd42 	bl	800201c <HAL_GetTick>
 8003598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800359c:	f7fe fd3e 	bl	800201c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e197      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8086 	beq.w	80036d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035c8:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x4a8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_RCC_OscConfig+0x4a8>)
 80035ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fd22 	bl	800201c <HAL_GetTick>
 80035d8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035dc:	f7fe fd1e 	bl	800201c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e177      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_OscConfig+0x4a8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d106      	bne.n	8003610 <HAL_RCC_OscConfig+0x480>
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6713      	str	r3, [r2, #112]	; 0x70
 800360e:	e032      	b.n	8003676 <HAL_RCC_OscConfig+0x4e6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d111      	bne.n	800363c <HAL_RCC_OscConfig+0x4ac>
 8003618:	4b06      	ldr	r3, [pc, #24]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a05      	ldr	r2, [pc, #20]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a02      	ldr	r2, [pc, #8]	; (8003634 <HAL_RCC_OscConfig+0x4a4>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	e021      	b.n	8003676 <HAL_RCC_OscConfig+0x4e6>
 8003632:	bf00      	nop
 8003634:	58024400 	.word	0x58024400
 8003638:	58024800 	.word	0x58024800
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b05      	cmp	r3, #5
 8003642:	d10c      	bne.n	800365e <HAL_RCC_OscConfig+0x4ce>
 8003644:	4b83      	ldr	r3, [pc, #524]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a82      	ldr	r2, [pc, #520]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
 8003650:	4b80      	ldr	r3, [pc, #512]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a7f      	ldr	r2, [pc, #508]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	e00b      	b.n	8003676 <HAL_RCC_OscConfig+0x4e6>
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003662:	4a7c      	ldr	r2, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a79      	ldr	r2, [pc, #484]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003670:	f023 0304 	bic.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d015      	beq.n	80036aa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe fccd 	bl	800201c <HAL_GetTick>
 8003682:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7fe fcc9 	bl	800201c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e120      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800369c:	4b6d      	ldr	r3, [pc, #436]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0ee      	beq.n	8003686 <HAL_RCC_OscConfig+0x4f6>
 80036a8:	e014      	b.n	80036d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fe fcb7 	bl	800201c <HAL_GetTick>
 80036ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fe fcb3 	bl	800201c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e10a      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036c8:	4b62      	ldr	r3, [pc, #392]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ee      	bne.n	80036b2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80ff 	beq.w	80038dc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036de:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e6:	2b18      	cmp	r3, #24
 80036e8:	f000 80ba 	beq.w	8003860 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	f040 8095 	bne.w	8003820 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b57      	ldr	r3, [pc, #348]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a56      	ldr	r2, [pc, #344]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80036fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003702:	f7fe fc8b 	bl	800201c <HAL_GetTick>
 8003706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe fc87 	bl	800201c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e0e0      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800371c:	4b4d      	ldr	r3, [pc, #308]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003728:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800372a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372c:	4b4a      	ldr	r3, [pc, #296]	; (8003858 <HAL_RCC_OscConfig+0x6c8>)
 800372e:	4013      	ands	r3, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	430a      	orrs	r2, r1
 800373c:	4945      	ldr	r1, [pc, #276]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	628b      	str	r3, [r1, #40]	; 0x28
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	3b01      	subs	r3, #1
 8003748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	3b01      	subs	r3, #1
 8003752:	025b      	lsls	r3, r3, #9
 8003754:	b29b      	uxth	r3, r3
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	3b01      	subs	r3, #1
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	3b01      	subs	r3, #1
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003772:	4938      	ldr	r1, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003778:	4b36      	ldr	r3, [pc, #216]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a35      	ldr	r2, [pc, #212]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800377e:	f023 0301 	bic.w	r3, r3, #1
 8003782:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003784:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003788:	4b34      	ldr	r3, [pc, #208]	; (800385c <HAL_RCC_OscConfig+0x6cc>)
 800378a:	4013      	ands	r3, r2
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003790:	00d2      	lsls	r2, r2, #3
 8003792:	4930      	ldr	r1, [pc, #192]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003798:	4b2e      	ldr	r3, [pc, #184]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f023 020c 	bic.w	r2, r3, #12
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	492b      	ldr	r1, [pc, #172]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037aa:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	f023 0202 	bic.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	4927      	ldr	r1, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037bc:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	4a24      	ldr	r2, [pc, #144]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a21      	ldr	r2, [pc, #132]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fc10 	bl	800201c <HAL_GetTick>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe fc0c 	bl	800201c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e065      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x670>
 800381e:	e05d      	b.n	80038dc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fbf6 	bl	800201c <HAL_GetTick>
 8003830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe fbf2 	bl	800201c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e04b      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003846:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_OscConfig+0x6c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x6a4>
 8003852:	e043      	b.n	80038dc <HAL_RCC_OscConfig+0x74c>
 8003854:	58024400 	.word	0x58024400
 8003858:	fffffc0c 	.word	0xfffffc0c
 800385c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003860:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <HAL_RCC_OscConfig+0x758>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_RCC_OscConfig+0x758>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	2b01      	cmp	r3, #1
 8003872:	d031      	beq.n	80038d8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d12a      	bne.n	80038d8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	091b      	lsrs	r3, r3, #4
 8003886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d122      	bne.n	80038d8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d11a      	bne.n	80038d8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	0a5b      	lsrs	r3, r3, #9
 80038a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d111      	bne.n	80038d8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d108      	bne.n	80038d8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3730      	adds	r7, #48	; 0x30
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	58024400 	.word	0x58024400

080038ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e19c      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003900:	4b8a      	ldr	r3, [pc, #552]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d910      	bls.n	8003930 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390e:	4b87      	ldr	r3, [pc, #540]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 020f 	bic.w	r2, r3, #15
 8003916:	4985      	ldr	r1, [pc, #532]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b83      	ldr	r3, [pc, #524]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e184      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	4b7b      	ldr	r3, [pc, #492]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003948:	429a      	cmp	r2, r3
 800394a:	d908      	bls.n	800395e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800394c:	4b78      	ldr	r3, [pc, #480]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	4975      	ldr	r1, [pc, #468]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 800395a:	4313      	orrs	r3, r2
 800395c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d010      	beq.n	800398c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	4b70      	ldr	r3, [pc, #448]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003976:	429a      	cmp	r2, r3
 8003978:	d908      	bls.n	800398c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800397a:	4b6d      	ldr	r3, [pc, #436]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	496a      	ldr	r1, [pc, #424]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003988:	4313      	orrs	r3, r2
 800398a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	4b64      	ldr	r3, [pc, #400]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d908      	bls.n	80039ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039a8:	4b61      	ldr	r3, [pc, #388]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	495e      	ldr	r1, [pc, #376]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d908      	bls.n	80039e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039d6:	4b56      	ldr	r3, [pc, #344]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4953      	ldr	r1, [pc, #332]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	4b4d      	ldr	r3, [pc, #308]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d908      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b4a      	ldr	r3, [pc, #296]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	f023 020f 	bic.w	r2, r3, #15
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	4947      	ldr	r1, [pc, #284]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d055      	beq.n	8003ace <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a22:	4b43      	ldr	r3, [pc, #268]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	4940      	ldr	r1, [pc, #256]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a3c:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d121      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0f6      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a54:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d115      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0ea      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a6c:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d109      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0de      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0d6      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	f023 0207 	bic.w	r2, r3, #7
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4925      	ldr	r1, [pc, #148]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9e:	f7fe fabd 	bl	800201c <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa6:	f7fe fab9 	bl	800201c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0be      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abc:	4b1c      	ldr	r3, [pc, #112]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d1eb      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d010      	beq.n	8003afc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d208      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f023 020f 	bic.w	r2, r3, #15
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	490e      	ldr	r1, [pc, #56]	; (8003b30 <HAL_RCC_ClockConfig+0x244>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d214      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 020f 	bic.w	r2, r3, #15
 8003b12:	4906      	ldr	r1, [pc, #24]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCC_ClockConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e086      	b.n	8003c3a <HAL_RCC_ClockConfig+0x34e>
 8003b2c:	52002000 	.word	0x52002000
 8003b30:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	4b3f      	ldr	r3, [pc, #252]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d208      	bcs.n	8003b62 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b50:	4b3c      	ldr	r3, [pc, #240]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	4939      	ldr	r1, [pc, #228]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d208      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b7e:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	492e      	ldr	r1, [pc, #184]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	4b28      	ldr	r3, [pc, #160]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d208      	bcs.n	8003bbe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	4922      	ldr	r1, [pc, #136]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d208      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4917      	ldr	r1, [pc, #92]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003bec:	f000 f834 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	0a1b      	lsrs	r3, r3, #8
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	4912      	ldr	r1, [pc, #72]	; (8003c48 <HAL_RCC_ClockConfig+0x35c>)
 8003bfe:	5ccb      	ldrb	r3, [r1, r3]
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	fa22 f303 	lsr.w	r3, r2, r3
 8003c08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <HAL_RCC_ClockConfig+0x358>)
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <HAL_RCC_ClockConfig+0x35c>)
 8003c14:	5cd3      	ldrb	r3, [r2, r3]
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <HAL_RCC_ClockConfig+0x360>)
 8003c22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c24:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <HAL_RCC_ClockConfig+0x364>)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_RCC_ClockConfig+0x368>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe f9aa 	bl	8001f88 <HAL_InitTick>
 8003c34:	4603      	mov	r3, r0
 8003c36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	58024400 	.word	0x58024400
 8003c48:	0800ba54 	.word	0x0800ba54
 8003c4c:	2400030c 	.word	0x2400030c
 8003c50:	24000308 	.word	0x24000308
 8003c54:	24000310 	.word	0x24000310

08003c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5e:	4bb3      	ldr	r3, [pc, #716]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c66:	2b18      	cmp	r3, #24
 8003c68:	f200 8155 	bhi.w	8003f16 <HAL_RCC_GetSysClockFreq+0x2be>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003cd9 	.word	0x08003cd9
 8003c78:	08003f17 	.word	0x08003f17
 8003c7c:	08003f17 	.word	0x08003f17
 8003c80:	08003f17 	.word	0x08003f17
 8003c84:	08003f17 	.word	0x08003f17
 8003c88:	08003f17 	.word	0x08003f17
 8003c8c:	08003f17 	.word	0x08003f17
 8003c90:	08003f17 	.word	0x08003f17
 8003c94:	08003cff 	.word	0x08003cff
 8003c98:	08003f17 	.word	0x08003f17
 8003c9c:	08003f17 	.word	0x08003f17
 8003ca0:	08003f17 	.word	0x08003f17
 8003ca4:	08003f17 	.word	0x08003f17
 8003ca8:	08003f17 	.word	0x08003f17
 8003cac:	08003f17 	.word	0x08003f17
 8003cb0:	08003f17 	.word	0x08003f17
 8003cb4:	08003d05 	.word	0x08003d05
 8003cb8:	08003f17 	.word	0x08003f17
 8003cbc:	08003f17 	.word	0x08003f17
 8003cc0:	08003f17 	.word	0x08003f17
 8003cc4:	08003f17 	.word	0x08003f17
 8003cc8:	08003f17 	.word	0x08003f17
 8003ccc:	08003f17 	.word	0x08003f17
 8003cd0:	08003f17 	.word	0x08003f17
 8003cd4:	08003d0b 	.word	0x08003d0b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cd8:	4b94      	ldr	r3, [pc, #592]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ce4:	4b91      	ldr	r3, [pc, #580]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	4a90      	ldr	r2, [pc, #576]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003cf6:	e111      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003cf8:	4b8d      	ldr	r3, [pc, #564]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cfa:	61bb      	str	r3, [r7, #24]
    break;
 8003cfc:	e10e      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003cfe:	4b8d      	ldr	r3, [pc, #564]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d00:	61bb      	str	r3, [r7, #24]
    break;
 8003d02:	e10b      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d04:	4b8c      	ldr	r3, [pc, #560]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d06:	61bb      	str	r3, [r7, #24]
    break;
 8003d08:	e108      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d0a:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d14:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d1e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d20:	4b82      	ldr	r3, [pc, #520]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d2a:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d2e:	08db      	lsrs	r3, r3, #3
 8003d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d42:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80e1 	beq.w	8003f10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	f000 8083 	beq.w	8003e5c <HAL_RCC_GetSysClockFreq+0x204>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	f200 80a1 	bhi.w	8003ea0 <HAL_RCC_GetSysClockFreq+0x248>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x114>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d056      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d6a:	e099      	b.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02d      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d78:	4b6c      	ldr	r3, [pc, #432]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	4a6b      	ldr	r2, [pc, #428]	; (8003f30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da2:	4b62      	ldr	r3, [pc, #392]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003db6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003dd2:	e087      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de6:	4b51      	ldr	r3, [pc, #324]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dfa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e16:	e065      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e5a:	e043      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e9e:	e021      	b.n	8003ee4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	0a5b      	lsrs	r3, r3, #9
 8003eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eee:	3301      	adds	r3, #1
 8003ef0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	ee07 3a90 	vmov	s15, r3
 8003ef8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f08:	ee17 3a90 	vmov	r3, s15
 8003f0c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f0e:	e005      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61bb      	str	r3, [r7, #24]
    break;
 8003f14:	e002      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f18:	61bb      	str	r3, [r7, #24]
    break;
 8003f1a:	bf00      	nop
  }

  return sysclockfreq;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3724      	adds	r7, #36	; 0x24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	03d09000 	.word	0x03d09000
 8003f34:	003d0900 	.word	0x003d0900
 8003f38:	017d7840 	.word	0x017d7840
 8003f3c:	46000000 	.word	0x46000000
 8003f40:	4c742400 	.word	0x4c742400
 8003f44:	4a742400 	.word	0x4a742400
 8003f48:	4bbebc20 	.word	0x4bbebc20

08003f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f52:	f7ff fe81 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	0a1b      	lsrs	r3, r3, #8
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	490f      	ldr	r1, [pc, #60]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f64:	5ccb      	ldrb	r3, [r1, r3]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f8a:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	0800ba54 	.word	0x0800ba54
 8003fa4:	2400030c 	.word	0x2400030c
 8003fa8:	24000308 	.word	0x24000308

08003fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003fb0:	f7ff ffcc 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4904      	ldr	r1, [pc, #16]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	0800ba54 	.word	0x0800ba54

08003fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003fdc:	f7ff ffb6 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4904      	ldr	r1, [pc, #16]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	58024400 	.word	0x58024400
 8004000:	0800ba54 	.word	0x0800ba54

08004004 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800400c:	2300      	movs	r3, #0
 800400e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004010:	2300      	movs	r3, #0
 8004012:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d03f      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004024:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004028:	d02a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800402a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800402e:	d824      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004034:	d018      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800403a:	d81e      	bhi.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004044:	d007      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004046:	e018      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004048:	4ba4      	ldr	r3, [pc, #656]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	4aa3      	ldr	r2, [pc, #652]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800404e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004054:	e015      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3304      	adds	r3, #4
 800405a:	2102      	movs	r1, #2
 800405c:	4618      	mov	r0, r3
 800405e:	f001 f989 	bl	8005374 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004066:	e00c      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3324      	adds	r3, #36	; 0x24
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fa32 	bl	80054d8 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004078:	e003      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
      break;
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004082:	7dfb      	ldrb	r3, [r7, #23]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d109      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004088:	4b94      	ldr	r3, [pc, #592]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004094:	4991      	ldr	r1, [pc, #580]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004096:	4313      	orrs	r3, r2
 8004098:	650b      	str	r3, [r1, #80]	; 0x50
 800409a:	e001      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d03d      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d826      	bhi.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040d1 	.word	0x080040d1
 80040c0:	080040df 	.word	0x080040df
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	08004109 	.word	0x08004109
 80040cc:	08004109 	.word	0x08004109
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d0:	4b82      	ldr	r3, [pc, #520]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	4a81      	ldr	r2, [pc, #516]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80040d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040dc:	e015      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f945 	bl	8005374 <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040ee:	e00c      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3324      	adds	r3, #36	; 0x24
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f9ee 	bl	80054d8 <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004100:	e003      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
      break;
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800410a:	7dfb      	ldrb	r3, [r7, #23]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004110:	4b72      	ldr	r3, [pc, #456]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004114:	f023 0207 	bic.w	r2, r3, #7
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	496f      	ldr	r1, [pc, #444]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800411e:	4313      	orrs	r3, r2
 8004120:	650b      	str	r3, [r1, #80]	; 0x50
 8004122:	e001      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d051      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800413a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800413e:	d036      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004140:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004144:	d830      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800414a:	d032      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800414c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004150:	d82a      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004152:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004156:	d02e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800415c:	d824      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800415e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004162:	d018      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004168:	d81e      	bhi.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800416e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004172:	d007      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004174:	e018      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004176:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800417c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004180:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004182:	e019      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f8f2 	bl	8005374 <RCCEx_PLL2_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004194:	e010      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3324      	adds	r3, #36	; 0x24
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f99b 	bl	80054d8 <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041a6:	e007      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	75fb      	strb	r3, [r7, #23]
      break;
 80041ac:	e004      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041ae:	bf00      	nop
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041b2:	bf00      	nop
 80041b4:	e000      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80041c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041cc:	4943      	ldr	r1, [pc, #268]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	658b      	str	r3, [r1, #88]	; 0x58
 80041d2:	e001      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d051      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041ee:	d036      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80041f0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041f4:	d830      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80041f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041fa:	d032      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80041fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004200:	d82a      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004202:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004206:	d02e      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004208:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800420c:	d824      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800420e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004212:	d018      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004214:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004218:	d81e      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800421e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004222:	d007      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004224:	e018      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004232:	e019      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f001 f89a 	bl	8005374 <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004244:	e010      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3324      	adds	r3, #36	; 0x24
 800424a:	2100      	movs	r1, #0
 800424c:	4618      	mov	r0, r3
 800424e:	f001 f943 	bl	80054d8 <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004256:	e007      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
      break;
 800425c:	e004      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800425e:	bf00      	nop
 8004260:	e002      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800427c:	4917      	ldr	r1, [pc, #92]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800427e:	4313      	orrs	r3, r2
 8004280:	658b      	str	r3, [r1, #88]	; 0x58
 8004282:	e001      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d035      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d01c      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800429c:	2b30      	cmp	r3, #48	; 0x30
 800429e:	d817      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d00c      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d813      	bhi.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d019      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80042ac:	2b10      	cmp	r3, #16
 80042ae:	d10f      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	4a09      	ldr	r2, [pc, #36]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042bc:	e011      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2102      	movs	r1, #2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f855 	bl	8005374 <RCCEx_PLL2_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042ce:	e008      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	75fb      	strb	r3, [r7, #23]
      break;
 80042d4:	e005      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80042d6:	bf00      	nop
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
      break;
 80042e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d109      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042e8:	4ba3      	ldr	r3, [pc, #652]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80042ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f4:	49a0      	ldr	r1, [pc, #640]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042fa:	e001      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d047      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004314:	d030      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8004316:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800431a:	d82a      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800431c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004320:	d02c      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004322:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004326:	d824      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432c:	d018      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800432e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004332:	d81e      	bhi.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433c:	d007      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800433e:	e018      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4b8d      	ldr	r3, [pc, #564]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	4a8c      	ldr	r2, [pc, #560]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800434c:	e017      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	2100      	movs	r1, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f001 f80d 	bl	8005374 <RCCEx_PLL2_Config>
 800435a:	4603      	mov	r3, r0
 800435c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800435e:	e00e      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3324      	adds	r3, #36	; 0x24
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f8b6 	bl	80054d8 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004370:	e005      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	75fb      	strb	r3, [r7, #23]
      break;
 8004376:	e002      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800437c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004384:	4b7c      	ldr	r3, [pc, #496]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	4979      	ldr	r1, [pc, #484]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004392:	4313      	orrs	r3, r2
 8004394:	650b      	str	r3, [r1, #80]	; 0x50
 8004396:	e001      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d049      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b0:	d02e      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b6:	d828      	bhi.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043bc:	d02a      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80043be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043c2:	d822      	bhi.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043c8:	d026      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80043ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043ce:	d81c      	bhi.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043d4:	d010      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80043d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043da:	d816      	bhi.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d111      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 ffc1 	bl	8005374 <RCCEx_PLL2_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80043f6:	e012      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3324      	adds	r3, #36	; 0x24
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f86a 	bl	80054d8 <RCCEx_PLL3_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004408:	e009      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	75fb      	strb	r3, [r7, #23]
      break;
 800440e:	e006      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004410:	bf00      	nop
 8004412:	e004      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004414:	bf00      	nop
 8004416:	e002      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004418:	bf00      	nop
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800441c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441e:	7dfb      	ldrb	r3, [r7, #23]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004424:	4b54      	ldr	r3, [pc, #336]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	4951      	ldr	r1, [pc, #324]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004432:	4313      	orrs	r3, r2
 8004434:	650b      	str	r3, [r1, #80]	; 0x50
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d04b      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800444e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004452:	d02e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004458:	d828      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d02a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004464:	d822      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800446a:	d026      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800446c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004470:	d81c      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004476:	d010      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800447c:	d816      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01d      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004486:	d111      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	2101      	movs	r1, #1
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ff70 	bl	8005374 <RCCEx_PLL2_Config>
 8004494:	4603      	mov	r3, r0
 8004496:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004498:	e012      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3324      	adds	r3, #36	; 0x24
 800449e:	2101      	movs	r1, #1
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 f819 	bl	80054d8 <RCCEx_PLL3_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80044aa:	e009      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
      break;
 80044b0:	e006      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044b2:	bf00      	nop
 80044b4:	e004      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c0:	7dfb      	ldrb	r3, [r7, #23]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044c6:	4b2c      	ldr	r3, [pc, #176]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044d4:	4928      	ldr	r1, [pc, #160]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	658b      	str	r3, [r1, #88]	; 0x58
 80044da:	e001      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02f      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f4:	d00e      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80044f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044fa:	d814      	bhi.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004504:	d10f      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800450c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004512:	e00c      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f000 ff2a 	bl	8005374 <RCCEx_PLL2_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
      break;
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004540:	490d      	ldr	r1, [pc, #52]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004542:	4313      	orrs	r3, r2
 8004544:	650b      	str	r3, [r1, #80]	; 0x50
 8004546:	e001      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d034      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	2b03      	cmp	r3, #3
 800455e:	d81d      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	080045a3 	.word	0x080045a3
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458b 	.word	0x0800458b
 8004574:	080045a3 	.word	0x080045a3
 8004578:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800457c:	4bb1      	ldr	r3, [pc, #708]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4ab0      	ldr	r2, [pc, #704]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004588:	e00c      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3304      	adds	r3, #4
 800458e:	2102      	movs	r1, #2
 8004590:	4618      	mov	r0, r3
 8004592:	f000 feef 	bl	8005374 <RCCEx_PLL2_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
      break;
 80045a0:	e000      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80045a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d109      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80045aa:	4ba6      	ldr	r3, [pc, #664]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80045ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ae:	f023 0203 	bic.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b6:	49a3      	ldr	r1, [pc, #652]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045bc:	e001      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	7dfb      	ldrb	r3, [r7, #23]
 80045c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8086 	beq.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d0:	4b9d      	ldr	r3, [pc, #628]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a9c      	ldr	r2, [pc, #624]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80045d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045dc:	f7fd fd1e 	bl	800201c <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e2:	e009      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e4:	f7fd fd1a 	bl	800201c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d902      	bls.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	75fb      	strb	r3, [r7, #23]
        break;
 80045f6:	e005      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045f8:	4b93      	ldr	r3, [pc, #588]	; (8004848 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ef      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8004604:	7dfb      	ldrb	r3, [r7, #23]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d166      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800460a:	4b8e      	ldr	r3, [pc, #568]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800460c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004614:	4053      	eors	r3, r2
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	2b00      	cmp	r3, #0
 800461c:	d013      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800461e:	4b89      	ldr	r3, [pc, #548]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004626:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004628:	4b86      	ldr	r3, [pc, #536]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	4a85      	ldr	r2, [pc, #532]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800462e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004632:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004634:	4b83      	ldr	r3, [pc, #524]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a82      	ldr	r2, [pc, #520]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800463a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004640:	4a80      	ldr	r2, [pc, #512]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800464c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004650:	d115      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd fce3 	bl	800201c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004658:	e00b      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465a:	f7fd fcdf 	bl	800201c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	f241 3288 	movw	r2, #5000	; 0x1388
 8004668:	4293      	cmp	r3, r2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	75fb      	strb	r3, [r7, #23]
            break;
 8004670:	e005      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004672:	4b74      	ldr	r3, [pc, #464]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ed      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800467e:	7dfb      	ldrb	r3, [r7, #23]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d126      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004692:	d10d      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004694:	4b6b      	ldr	r3, [pc, #428]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046a2:	0919      	lsrs	r1, r3, #4
 80046a4:	4b69      	ldr	r3, [pc, #420]	; (800484c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	4966      	ldr	r1, [pc, #408]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	610b      	str	r3, [r1, #16]
 80046ae:	e005      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80046b0:	4b64      	ldr	r3, [pc, #400]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	4a63      	ldr	r2, [pc, #396]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046ba:	6113      	str	r3, [r2, #16]
 80046bc:	4b61      	ldr	r3, [pc, #388]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ca:	495e      	ldr	r1, [pc, #376]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	670b      	str	r3, [r1, #112]	; 0x70
 80046d0:	e004      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046d2:	7dfb      	ldrb	r3, [r7, #23]
 80046d4:	75bb      	strb	r3, [r7, #22]
 80046d6:	e001      	b.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d07e      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ec:	2b28      	cmp	r3, #40	; 0x28
 80046ee:	d867      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80046f0:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80046f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f6:	bf00      	nop
 80046f8:	080047c7 	.word	0x080047c7
 80046fc:	080047c1 	.word	0x080047c1
 8004700:	080047c1 	.word	0x080047c1
 8004704:	080047c1 	.word	0x080047c1
 8004708:	080047c1 	.word	0x080047c1
 800470c:	080047c1 	.word	0x080047c1
 8004710:	080047c1 	.word	0x080047c1
 8004714:	080047c1 	.word	0x080047c1
 8004718:	0800479d 	.word	0x0800479d
 800471c:	080047c1 	.word	0x080047c1
 8004720:	080047c1 	.word	0x080047c1
 8004724:	080047c1 	.word	0x080047c1
 8004728:	080047c1 	.word	0x080047c1
 800472c:	080047c1 	.word	0x080047c1
 8004730:	080047c1 	.word	0x080047c1
 8004734:	080047c1 	.word	0x080047c1
 8004738:	080047af 	.word	0x080047af
 800473c:	080047c1 	.word	0x080047c1
 8004740:	080047c1 	.word	0x080047c1
 8004744:	080047c1 	.word	0x080047c1
 8004748:	080047c1 	.word	0x080047c1
 800474c:	080047c1 	.word	0x080047c1
 8004750:	080047c1 	.word	0x080047c1
 8004754:	080047c1 	.word	0x080047c1
 8004758:	080047c7 	.word	0x080047c7
 800475c:	080047c1 	.word	0x080047c1
 8004760:	080047c1 	.word	0x080047c1
 8004764:	080047c1 	.word	0x080047c1
 8004768:	080047c1 	.word	0x080047c1
 800476c:	080047c1 	.word	0x080047c1
 8004770:	080047c1 	.word	0x080047c1
 8004774:	080047c1 	.word	0x080047c1
 8004778:	080047c7 	.word	0x080047c7
 800477c:	080047c1 	.word	0x080047c1
 8004780:	080047c1 	.word	0x080047c1
 8004784:	080047c1 	.word	0x080047c1
 8004788:	080047c1 	.word	0x080047c1
 800478c:	080047c1 	.word	0x080047c1
 8004790:	080047c1 	.word	0x080047c1
 8004794:	080047c1 	.word	0x080047c1
 8004798:	080047c7 	.word	0x080047c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fde6 	bl	8005374 <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047ac:	e00c      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3324      	adds	r3, #36	; 0x24
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fe8f 	bl	80054d8 <RCCEx_PLL3_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047be:	e003      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	e000      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80047c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047ce:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80047d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047da:	491a      	ldr	r1, [pc, #104]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	654b      	str	r3, [r1, #84]	; 0x54
 80047e0:	e001      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	7dfb      	ldrb	r3, [r7, #23]
 80047e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d03e      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	2b05      	cmp	r3, #5
 80047f8:	d820      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x838>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004851 	.word	0x08004851
 8004804:	08004819 	.word	0x08004819
 8004808:	0800482b 	.word	0x0800482b
 800480c:	08004851 	.word	0x08004851
 8004810:	08004851 	.word	0x08004851
 8004814:	08004851 	.word	0x08004851
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fda8 	bl	8005374 <RCCEx_PLL2_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004828:	e013      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3324      	adds	r3, #36	; 0x24
 800482e:	2101      	movs	r1, #1
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fe51 	bl	80054d8 <RCCEx_PLL3_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800483a:	e00a      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
      break;
 8004840:	e007      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004842:	bf00      	nop
 8004844:	58024400 	.word	0x58024400
 8004848:	58024800 	.word	0x58024800
 800484c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004858:	4b9f      	ldr	r3, [pc, #636]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f023 0207 	bic.w	r2, r3, #7
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	499c      	ldr	r1, [pc, #624]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004866:	4313      	orrs	r3, r2
 8004868:	654b      	str	r3, [r1, #84]	; 0x54
 800486a:	e001      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d039      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004882:	2b05      	cmp	r3, #5
 8004884:	d820      	bhi.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004886:	a201      	add	r2, pc, #4	; (adr r2, 800488c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048cf 	.word	0x080048cf
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048b7 	.word	0x080048b7
 8004898:	080048cf 	.word	0x080048cf
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	080048cf 	.word	0x080048cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	2101      	movs	r1, #1
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fd62 	bl	8005374 <RCCEx_PLL2_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048b4:	e00c      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3324      	adds	r3, #36	; 0x24
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fe0b 	bl	80054d8 <RCCEx_PLL3_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048c6:	e003      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
      break;
 80048cc:	e000      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80048ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d6:	4b80      	ldr	r3, [pc, #512]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	f023 0207 	bic.w	r2, r3, #7
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e4:	497c      	ldr	r1, [pc, #496]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	658b      	str	r3, [r1, #88]	; 0x58
 80048ea:	e001      	b.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d04b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004906:	d02e      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800490c:	d828      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800490e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004912:	d02a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d822      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800491a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800491e:	d026      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004920:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004924:	d81c      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492a:	d010      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800492c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004930:	d816      	bhi.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d01d      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004936:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800493a:	d111      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	2100      	movs	r1, #0
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd16 	bl	8005374 <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800494c:	e012      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3324      	adds	r3, #36	; 0x24
 8004952:	2102      	movs	r1, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fdbf 	bl	80054d8 <RCCEx_PLL3_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800495e:	e009      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75fb      	strb	r3, [r7, #23]
      break;
 8004964:	e006      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004966:	bf00      	nop
 8004968:	e004      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800496a:	bf00      	nop
 800496c:	e002      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800496e:	bf00      	nop
 8004970:	e000      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800497a:	4b57      	ldr	r3, [pc, #348]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800497c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004988:	4953      	ldr	r1, [pc, #332]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800498a:	4313      	orrs	r3, r2
 800498c:	654b      	str	r3, [r1, #84]	; 0x54
 800498e:	e001      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d04b      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049aa:	d02e      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80049ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049b0:	d828      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	d02a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d822      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c2:	d026      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80049c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c8:	d81c      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ce:	d010      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d816      	bhi.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01d      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80049da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049de:	d111      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2100      	movs	r1, #0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fcc4 	bl	8005374 <RCCEx_PLL2_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80049f0:	e012      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fd6d 	bl	80054d8 <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a02:	e009      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
      break;
 8004a08:	e006      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2c:	492a      	ldr	r1, [pc, #168]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	658b      	str	r3, [r1, #88]	; 0x58
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d04d      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a4e:	d02e      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004a50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a54:	d828      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5a:	d02a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	d822      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a66:	d026      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004a68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a6c:	d81c      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a72:	d010      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a78:	d816      	bhi.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01d      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a82:	d111      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fc72 	bl	8005374 <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a94:	e012      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3324      	adds	r3, #36	; 0x24
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fd1b 	bl	80054d8 <RCCEx_PLL3_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004aa6:	e009      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	e006      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ad0:	4901      	ldr	r1, [pc, #4]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad6:	e003      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004ad8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004adc:	7dfb      	ldrb	r3, [r7, #23]
 8004ade:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d018      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3324      	adds	r3, #36	; 0x24
 8004afa:	2102      	movs	r1, #2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 fceb 	bl	80054d8 <RCCEx_PLL3_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b0c:	4b8a      	ldr	r3, [pc, #552]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b18:	4987      	ldr	r1, [pc, #540]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d01a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b34:	d10a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3324      	adds	r3, #36	; 0x24
 8004b3a:	2102      	movs	r1, #2
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fccb 	bl	80054d8 <RCCEx_PLL3_Config>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b4c:	4b7a      	ldr	r3, [pc, #488]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	4977      	ldr	r1, [pc, #476]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d034      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b76:	d01d      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b7c:	d817      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b86:	d009      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004b88:	e011      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fbef 	bl	8005374 <RCCEx_PLL2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b9a:	e00c      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3324      	adds	r3, #36	; 0x24
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fc98 	bl	80054d8 <RCCEx_PLL3_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004bac:	e003      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10a      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bbc:	4b5e      	ldr	r3, [pc, #376]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bca:	495b      	ldr	r1, [pc, #364]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	658b      	str	r3, [r1, #88]	; 0x58
 8004bd0:	e001      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d033      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bec:	d01c      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004bee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bf2:	d816      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004bfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfe:	d007      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004c00:	e00f      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c02:	4b4d      	ldr	r3, [pc, #308]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a4c      	ldr	r2, [pc, #304]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c0e:	e00c      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3324      	adds	r3, #36	; 0x24
 8004c14:	2101      	movs	r1, #1
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fc5e 	bl	80054d8 <RCCEx_PLL3_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c20:	e003      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
      break;
 8004c26:	e000      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c30:	4b41      	ldr	r3, [pc, #260]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c3e:	493e      	ldr	r1, [pc, #248]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	654b      	str	r3, [r1, #84]	; 0x54
 8004c44:	e001      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d029      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d007      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004c64:	e00f      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c66:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c72:	e00b      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3304      	adds	r3, #4
 8004c78:	2102      	movs	r1, #2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fb7a 	bl	8005374 <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9e:	4926      	ldr	r1, [pc, #152]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ca4:	e001      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	7dfb      	ldrb	r3, [r7, #23]
 8004ca8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3324      	adds	r3, #36	; 0x24
 8004cba:	2102      	movs	r1, #2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fc0b 	bl	80054d8 <RCCEx_PLL3_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d033      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce0:	d017      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce6:	d811      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d013      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8004cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cf2:	d80b      	bhi.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8004cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cfc:	d106      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfe:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	4a0d      	ldr	r2, [pc, #52]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d0a:	e007      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d10:	e004      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004d12:	bf00      	nop
 8004d14:	e002      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004d16:	bf00      	nop
 8004d18:	e000      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10c      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2e:	4902      	ldr	r1, [pc, #8]	; (8004d38 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	654b      	str	r3, [r1, #84]	; 0x54
 8004d34:	e004      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004d36:	bf00      	nop
 8004d38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d58:	4926      	ldr	r1, [pc, #152]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d008      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d6a:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d76:	491f      	ldr	r1, [pc, #124]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d88:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	4a19      	ldr	r2, [pc, #100]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d92:	6113      	str	r3, [r2, #16]
 8004d94:	4b17      	ldr	r3, [pc, #92]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d9e:	4915      	ldr	r1, [pc, #84]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da08      	bge.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004dac:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	490e      	ldr	r1, [pc, #56]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd8:	4906      	ldr	r1, [pc, #24]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004dde:	7dbb      	ldrb	r3, [r7, #22]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	58024400 	.word	0x58024400

08004df8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004dfc:	f7ff f8a6 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4904      	ldr	r1, [pc, #16]	; (8004e20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	0800ba54 	.word	0x0800ba54

08004e24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	; 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e2c:	4ba1      	ldr	r3, [pc, #644]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004e36:	4b9f      	ldr	r3, [pc, #636]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	0b1b      	lsrs	r3, r3, #12
 8004e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e42:	4b9c      	ldr	r3, [pc, #624]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004e4e:	4b99      	ldr	r3, [pc, #612]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	08db      	lsrs	r3, r3, #3
 8004e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8111 	beq.w	8005094 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f000 8083 	beq.w	8004f80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f200 80a1 	bhi.w	8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d056      	beq.n	8004f3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e8e:	e099      	b.n	8004fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e90:	4b88      	ldr	r3, [pc, #544]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02d      	beq.n	8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e9c:	4b85      	ldr	r3, [pc, #532]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	08db      	lsrs	r3, r3, #3
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	4a84      	ldr	r2, [pc, #528]	; (80050b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ef6:	e087      	b.n	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b6a      	ldr	r3, [pc, #424]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f3a:	e065      	b.n	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b59      	ldr	r3, [pc, #356]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f7e:	e043      	b.n	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b48      	ldr	r3, [pc, #288]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fc2:	e021      	b.n	8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b37      	ldr	r3, [pc, #220]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005006:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	0a5b      	lsrs	r3, r3, #9
 800500e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800501e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005022:	edd7 6a07 	vldr	s13, [r7, #28]
 8005026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502e:	ee17 2a90 	vmov	r2, s15
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005036:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800504c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005050:	edd7 6a07 	vldr	s13, [r7, #28]
 8005054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505c:	ee17 2a90 	vmov	r2, s15
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005092:	e008      	b.n	80050a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
}
 80050a6:	bf00      	nop
 80050a8:	3724      	adds	r7, #36	; 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	46000000 	.word	0x46000000
 80050c0:	4c742400 	.word	0x4c742400
 80050c4:	4a742400 	.word	0x4a742400
 80050c8:	4bbebc20 	.word	0x4bbebc20

080050cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b089      	sub	sp, #36	; 0x24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050d4:	4ba1      	ldr	r3, [pc, #644]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80050de:	4b9f      	ldr	r3, [pc, #636]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e2:	0d1b      	lsrs	r3, r3, #20
 80050e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050ea:	4b9c      	ldr	r3, [pc, #624]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80050f6:	4b99      	ldr	r3, [pc, #612]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	08db      	lsrs	r3, r3, #3
 80050fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	fb02 f303 	mul.w	r3, r2, r3
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8111 	beq.w	800533c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	2b02      	cmp	r3, #2
 800511e:	f000 8083 	beq.w	8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b02      	cmp	r3, #2
 8005126:	f200 80a1 	bhi.w	800526c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d056      	beq.n	80051e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005136:	e099      	b.n	800526c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005138:	4b88      	ldr	r3, [pc, #544]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b00      	cmp	r3, #0
 8005142:	d02d      	beq.n	80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005144:	4b85      	ldr	r3, [pc, #532]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	08db      	lsrs	r3, r3, #3
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	4a84      	ldr	r2, [pc, #528]	; (8005360 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
 8005154:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516e:	4b7b      	ldr	r3, [pc, #492]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005182:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800519e:	e087      	b.n	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005368 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b2:	4b6a      	ldr	r3, [pc, #424]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051e2:	e065      	b.n	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800536c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f6:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005206:	ed97 6a03 	vldr	s12, [r7, #12]
 800520a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800520e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800521a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005226:	e043      	b.n	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005370 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523a:	4b48      	ldr	r3, [pc, #288]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524a:	ed97 6a03 	vldr	s12, [r7, #12]
 800524e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005266:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800526a:	e021      	b.n	80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800536c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b37      	ldr	r3, [pc, #220]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005292:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80052b0:	4b2a      	ldr	r3, [pc, #168]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	0a5b      	lsrs	r3, r3, #9
 80052b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d6:	ee17 2a90 	vmov	r2, s15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80052de:	4b1f      	ldr	r3, [pc, #124]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80052fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005304:	ee17 2a90 	vmov	r2, s15
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800530c:	4b13      	ldr	r3, [pc, #76]	; (800535c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	0e1b      	lsrs	r3, r3, #24
 8005312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005326:	edd7 6a07 	vldr	s13, [r7, #28]
 800532a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800532e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005332:	ee17 2a90 	vmov	r2, s15
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800533a:	e008      	b.n	800534e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
}
 800534e:	bf00      	nop
 8005350:	3724      	adds	r7, #36	; 0x24
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	58024400 	.word	0x58024400
 8005360:	03d09000 	.word	0x03d09000
 8005364:	46000000 	.word	0x46000000
 8005368:	4c742400 	.word	0x4c742400
 800536c:	4a742400 	.word	0x4a742400
 8005370:	4bbebc20 	.word	0x4bbebc20

08005374 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005382:	4b53      	ldr	r3, [pc, #332]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b03      	cmp	r3, #3
 800538c:	d101      	bne.n	8005392 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e099      	b.n	80054c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005392:	4b4f      	ldr	r3, [pc, #316]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a4e      	ldr	r2, [pc, #312]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005398:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800539c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539e:	f7fc fe3d 	bl	800201c <HAL_GetTick>
 80053a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053a4:	e008      	b.n	80053b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053a6:	f7fc fe39 	bl	800201c <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d901      	bls.n	80053b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e086      	b.n	80054c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053b8:	4b45      	ldr	r3, [pc, #276]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1f0      	bne.n	80053a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053c4:	4b42      	ldr	r3, [pc, #264]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	031b      	lsls	r3, r3, #12
 80053d2:	493f      	ldr	r1, [pc, #252]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	628b      	str	r3, [r1, #40]	; 0x28
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	3b01      	subs	r3, #1
 80053de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	025b      	lsls	r3, r3, #9
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	431a      	orrs	r2, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	3b01      	subs	r3, #1
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005408:	4931      	ldr	r1, [pc, #196]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800540a:	4313      	orrs	r3, r2
 800540c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800540e:	4b30      	ldr	r3, [pc, #192]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005412:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	492d      	ldr	r1, [pc, #180]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005424:	f023 0220 	bic.w	r2, r3, #32
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	4928      	ldr	r1, [pc, #160]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800542e:	4313      	orrs	r3, r2
 8005430:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005432:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005438:	f023 0310 	bic.w	r3, r3, #16
 800543c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800543e:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005442:	4b24      	ldr	r3, [pc, #144]	; (80054d4 <RCCEx_PLL2_Config+0x160>)
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	69d2      	ldr	r2, [r2, #28]
 800544a:	00d2      	lsls	r2, r2, #3
 800544c:	4920      	ldr	r1, [pc, #128]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800544e:	4313      	orrs	r3, r2
 8005450:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005452:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005458:	f043 0310 	orr.w	r3, r3, #16
 800545c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d106      	bne.n	8005472 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005464:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	4a19      	ldr	r2, [pc, #100]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800546a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800546e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005470:	e00f      	b.n	8005492 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d106      	bne.n	8005486 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800547e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005482:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005484:	e005      	b.n	8005492 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005486:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548a:	4a11      	ldr	r2, [pc, #68]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 800548c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005490:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005492:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a0e      	ldr	r2, [pc, #56]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 8005498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800549c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800549e:	f7fc fdbd 	bl	800201c <HAL_GetTick>
 80054a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054a4:	e008      	b.n	80054b8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054a6:	f7fc fdb9 	bl	800201c <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e006      	b.n	80054c6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054b8:	4b05      	ldr	r3, [pc, #20]	; (80054d0 <RCCEx_PLL2_Config+0x15c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	58024400 	.word	0x58024400
 80054d4:	ffff0007 	.word	0xffff0007

080054d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054e6:	4b53      	ldr	r3, [pc, #332]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d101      	bne.n	80054f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e099      	b.n	800562a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80054f6:	4b4f      	ldr	r3, [pc, #316]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a4e      	ldr	r2, [pc, #312]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005502:	f7fc fd8b 	bl	800201c <HAL_GetTick>
 8005506:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005508:	e008      	b.n	800551c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800550a:	f7fc fd87 	bl	800201c <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e086      	b.n	800562a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800551c:	4b45      	ldr	r3, [pc, #276]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f0      	bne.n	800550a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005528:	4b42      	ldr	r3, [pc, #264]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	051b      	lsls	r3, r3, #20
 8005536:	493f      	ldr	r1, [pc, #252]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	628b      	str	r3, [r1, #40]	; 0x28
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	3b01      	subs	r3, #1
 8005542:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	3b01      	subs	r3, #1
 800554c:	025b      	lsls	r3, r3, #9
 800554e:	b29b      	uxth	r3, r3
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	3b01      	subs	r3, #1
 8005558:	041b      	lsls	r3, r3, #16
 800555a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	3b01      	subs	r3, #1
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800556c:	4931      	ldr	r1, [pc, #196]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 800556e:	4313      	orrs	r3, r2
 8005570:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005572:	4b30      	ldr	r3, [pc, #192]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	492d      	ldr	r1, [pc, #180]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005584:	4b2b      	ldr	r3, [pc, #172]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	4928      	ldr	r1, [pc, #160]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005596:	4b27      	ldr	r3, [pc, #156]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	4a26      	ldr	r2, [pc, #152]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 800559c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055a2:	4b24      	ldr	r3, [pc, #144]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a6:	4b24      	ldr	r3, [pc, #144]	; (8005638 <RCCEx_PLL3_Config+0x160>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	69d2      	ldr	r2, [r2, #28]
 80055ae:	00d2      	lsls	r2, r2, #3
 80055b0:	4920      	ldr	r1, [pc, #128]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055b6:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d106      	bne.n	80055d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055c8:	4b1a      	ldr	r3, [pc, #104]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055d4:	e00f      	b.n	80055f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d106      	bne.n	80055ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055dc:	4b15      	ldr	r3, [pc, #84]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a14      	ldr	r2, [pc, #80]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055e8:	e005      	b.n	80055f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a11      	ldr	r2, [pc, #68]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a0e      	ldr	r2, [pc, #56]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005600:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005602:	f7fc fd0b 	bl	800201c <HAL_GetTick>
 8005606:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005608:	e008      	b.n	800561c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800560a:	f7fc fd07 	bl	800201c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e006      	b.n	800562a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <RCCEx_PLL3_Config+0x15c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	58024400 	.word	0x58024400
 8005638:	ffff0007 	.word	0xffff0007

0800563c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e049      	b.n	80056e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc f97e 	bl	8001964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	4619      	mov	r1, r3
 800567a:	4610      	mov	r0, r2
 800567c:	f000 fa66 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <HAL_TIM_PWM_Start+0x24>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e03c      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b04      	cmp	r3, #4
 8005714:	d109      	bne.n	800572a <HAL_TIM_PWM_Start+0x3e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	bf14      	ite	ne
 8005722:	2301      	movne	r3, #1
 8005724:	2300      	moveq	r3, #0
 8005726:	b2db      	uxtb	r3, r3
 8005728:	e02f      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b08      	cmp	r3, #8
 800572e:	d109      	bne.n	8005744 <HAL_TIM_PWM_Start+0x58>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	e022      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b0c      	cmp	r3, #12
 8005748:	d109      	bne.n	800575e <HAL_TIM_PWM_Start+0x72>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b01      	cmp	r3, #1
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e015      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b10      	cmp	r3, #16
 8005762:	d109      	bne.n	8005778 <HAL_TIM_PWM_Start+0x8c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b01      	cmp	r3, #1
 800576e:	bf14      	ite	ne
 8005770:	2301      	movne	r3, #1
 8005772:	2300      	moveq	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	e008      	b.n	800578a <HAL_TIM_PWM_Start+0x9e>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	bf14      	ite	ne
 8005784:	2301      	movne	r3, #1
 8005786:	2300      	moveq	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0ab      	b.n	80058ea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <HAL_TIM_PWM_Start+0xb6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2202      	movs	r2, #2
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057a0:	e023      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xc6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b0:	e01b      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0xd6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c0:	e013      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xe6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d0:	e00b      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Start+0xf6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e0:	e003      	b.n	80057ea <HAL_TIM_PWM_Start+0xfe>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2201      	movs	r2, #1
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fd26 	bl	8006244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a3d      	ldr	r2, [pc, #244]	; (80058f4 <HAL_TIM_PWM_Start+0x208>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a3c      	ldr	r2, [pc, #240]	; (80058f8 <HAL_TIM_PWM_Start+0x20c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <HAL_TIM_PWM_Start+0x210>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a39      	ldr	r2, [pc, #228]	; (8005900 <HAL_TIM_PWM_Start+0x214>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIM_PWM_Start+0x13e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a37      	ldr	r2, [pc, #220]	; (8005904 <HAL_TIM_PWM_Start+0x218>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_TIM_PWM_Start+0x142>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_TIM_PWM_Start+0x144>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005842:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <HAL_TIM_PWM_Start+0x208>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d02c      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d027      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a2a      	ldr	r2, [pc, #168]	; (8005908 <HAL_TIM_PWM_Start+0x21c>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d022      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a29      	ldr	r2, [pc, #164]	; (800590c <HAL_TIM_PWM_Start+0x220>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d01d      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a27      	ldr	r2, [pc, #156]	; (8005910 <HAL_TIM_PWM_Start+0x224>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d018      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1f      	ldr	r2, [pc, #124]	; (80058f8 <HAL_TIM_PWM_Start+0x20c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a23      	ldr	r2, [pc, #140]	; (8005914 <HAL_TIM_PWM_Start+0x228>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d00e      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a1b      	ldr	r2, [pc, #108]	; (80058fc <HAL_TIM_PWM_Start+0x210>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d009      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <HAL_TIM_PWM_Start+0x22c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIM_PWM_Start+0x1bc>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	; (800591c <HAL_TIM_PWM_Start+0x230>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d115      	bne.n	80058d4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	4b1c      	ldr	r3, [pc, #112]	; (8005920 <HAL_TIM_PWM_Start+0x234>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d015      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x1fa>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d011      	beq.n	80058e6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f042 0201 	orr.w	r2, r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d2:	e008      	b.n	80058e6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e000      	b.n	80058e8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40001800 	.word	0x40001800
 8005918:	4000e000 	.word	0x4000e000
 800591c:	4000e400 	.word	0x4000e400
 8005920:	00010007 	.word	0x00010007

08005924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800593e:	2302      	movs	r3, #2
 8005940:	e0ff      	b.n	8005b42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b14      	cmp	r3, #20
 800594e:	f200 80f0 	bhi.w	8005b32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	080059ad 	.word	0x080059ad
 800595c:	08005b33 	.word	0x08005b33
 8005960:	08005b33 	.word	0x08005b33
 8005964:	08005b33 	.word	0x08005b33
 8005968:	080059ed 	.word	0x080059ed
 800596c:	08005b33 	.word	0x08005b33
 8005970:	08005b33 	.word	0x08005b33
 8005974:	08005b33 	.word	0x08005b33
 8005978:	08005a2f 	.word	0x08005a2f
 800597c:	08005b33 	.word	0x08005b33
 8005980:	08005b33 	.word	0x08005b33
 8005984:	08005b33 	.word	0x08005b33
 8005988:	08005a6f 	.word	0x08005a6f
 800598c:	08005b33 	.word	0x08005b33
 8005990:	08005b33 	.word	0x08005b33
 8005994:	08005b33 	.word	0x08005b33
 8005998:	08005ab1 	.word	0x08005ab1
 800599c:	08005b33 	.word	0x08005b33
 80059a0:	08005b33 	.word	0x08005b33
 80059a4:	08005b33 	.word	0x08005b33
 80059a8:	08005af1 	.word	0x08005af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f970 	bl	8005c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0208 	orr.w	r2, r2, #8
 80059c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0204 	bic.w	r2, r2, #4
 80059d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6999      	ldr	r1, [r3, #24]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	619a      	str	r2, [r3, #24]
      break;
 80059ea:	e0a5      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f9e0 	bl	8005db8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699a      	ldr	r2, [r3, #24]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6999      	ldr	r1, [r3, #24]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	619a      	str	r2, [r3, #24]
      break;
 8005a2c:	e084      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fa49 	bl	8005ecc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0208 	orr.w	r2, r2, #8
 8005a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69da      	ldr	r2, [r3, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0204 	bic.w	r2, r2, #4
 8005a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69d9      	ldr	r1, [r3, #28]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	61da      	str	r2, [r3, #28]
      break;
 8005a6c:	e064      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68b9      	ldr	r1, [r7, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fab1 	bl	8005fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69da      	ldr	r2, [r3, #28]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	69d9      	ldr	r1, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	021a      	lsls	r2, r3, #8
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	61da      	str	r2, [r3, #28]
      break;
 8005aae:	e043      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fafa 	bl	80060b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0208 	orr.w	r2, r2, #8
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0204 	bic.w	r2, r2, #4
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005aee:	e023      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fb3e 	bl	8006178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b30:	e002      	b.n	8005b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
      break;
 8005b36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop

08005b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a44      	ldr	r2, [pc, #272]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6a:	d00f      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a41      	ldr	r2, [pc, #260]	; (8005c74 <TIM_Base_SetConfig+0x128>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a40      	ldr	r2, [pc, #256]	; (8005c78 <TIM_Base_SetConfig+0x12c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <TIM_Base_SetConfig+0x130>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3e      	ldr	r2, [pc, #248]	; (8005c80 <TIM_Base_SetConfig+0x134>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d108      	bne.n	8005b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a33      	ldr	r2, [pc, #204]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d027      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bac:	d023      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a30      	ldr	r2, [pc, #192]	; (8005c74 <TIM_Base_SetConfig+0x128>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d01f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2f      	ldr	r2, [pc, #188]	; (8005c78 <TIM_Base_SetConfig+0x12c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2e      	ldr	r2, [pc, #184]	; (8005c7c <TIM_Base_SetConfig+0x130>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d017      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2d      	ldr	r2, [pc, #180]	; (8005c80 <TIM_Base_SetConfig+0x134>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2c      	ldr	r2, [pc, #176]	; (8005c84 <TIM_Base_SetConfig+0x138>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2b      	ldr	r2, [pc, #172]	; (8005c88 <TIM_Base_SetConfig+0x13c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	; (8005c8c <TIM_Base_SetConfig+0x140>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a29      	ldr	r2, [pc, #164]	; (8005c90 <TIM_Base_SetConfig+0x144>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_Base_SetConfig+0xaa>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a28      	ldr	r2, [pc, #160]	; (8005c94 <TIM_Base_SetConfig+0x148>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d108      	bne.n	8005c08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a10      	ldr	r2, [pc, #64]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x108>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a12      	ldr	r2, [pc, #72]	; (8005c80 <TIM_Base_SetConfig+0x134>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x108>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a11      	ldr	r2, [pc, #68]	; (8005c84 <TIM_Base_SetConfig+0x138>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x108>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a10      	ldr	r2, [pc, #64]	; (8005c88 <TIM_Base_SetConfig+0x13c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x108>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a0f      	ldr	r2, [pc, #60]	; (8005c8c <TIM_Base_SetConfig+0x140>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00
 8005c80:	40010400 	.word	0x40010400
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800
 8005c90:	4000e000 	.word	0x4000e000
 8005c94:	4000e400 	.word	0x4000e400

08005c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f023 0201 	bic.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	4b37      	ldr	r3, [pc, #220]	; (8005da0 <TIM_OC1_SetConfig+0x108>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0303 	bic.w	r3, r3, #3
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f023 0302 	bic.w	r3, r3, #2
 8005ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a2d      	ldr	r2, [pc, #180]	; (8005da4 <TIM_OC1_SetConfig+0x10c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00f      	beq.n	8005d14 <TIM_OC1_SetConfig+0x7c>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a2c      	ldr	r2, [pc, #176]	; (8005da8 <TIM_OC1_SetConfig+0x110>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <TIM_OC1_SetConfig+0x7c>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a2b      	ldr	r2, [pc, #172]	; (8005dac <TIM_OC1_SetConfig+0x114>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_OC1_SetConfig+0x7c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2a      	ldr	r2, [pc, #168]	; (8005db0 <TIM_OC1_SetConfig+0x118>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_OC1_SetConfig+0x7c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a29      	ldr	r2, [pc, #164]	; (8005db4 <TIM_OC1_SetConfig+0x11c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d10c      	bne.n	8005d2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0308 	bic.w	r3, r3, #8
 8005d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 0304 	bic.w	r3, r3, #4
 8005d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <TIM_OC1_SetConfig+0x10c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <TIM_OC1_SetConfig+0xbe>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1b      	ldr	r2, [pc, #108]	; (8005da8 <TIM_OC1_SetConfig+0x110>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00b      	beq.n	8005d56 <TIM_OC1_SetConfig+0xbe>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1a      	ldr	r2, [pc, #104]	; (8005dac <TIM_OC1_SetConfig+0x114>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_OC1_SetConfig+0xbe>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <TIM_OC1_SetConfig+0x118>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC1_SetConfig+0xbe>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <TIM_OC1_SetConfig+0x11c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d111      	bne.n	8005d7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	621a      	str	r2, [r3, #32]
}
 8005d94:	bf00      	nop
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	fffeff8f 	.word	0xfffeff8f
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40010400 	.word	0x40010400
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400
 8005db4:	40014800 	.word	0x40014800

08005db8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	f023 0210 	bic.w	r2, r3, #16
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4b34      	ldr	r3, [pc, #208]	; (8005eb4 <TIM_OC2_SetConfig+0xfc>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0320 	bic.w	r3, r3, #32
 8005e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a29      	ldr	r2, [pc, #164]	; (8005eb8 <TIM_OC2_SetConfig+0x100>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_OC2_SetConfig+0x68>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a28      	ldr	r2, [pc, #160]	; (8005ebc <TIM_OC2_SetConfig+0x104>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d10d      	bne.n	8005e3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a1e      	ldr	r2, [pc, #120]	; (8005eb8 <TIM_OC2_SetConfig+0x100>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00f      	beq.n	8005e64 <TIM_OC2_SetConfig+0xac>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	; (8005ebc <TIM_OC2_SetConfig+0x104>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d00b      	beq.n	8005e64 <TIM_OC2_SetConfig+0xac>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <TIM_OC2_SetConfig+0x108>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d007      	beq.n	8005e64 <TIM_OC2_SetConfig+0xac>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1b      	ldr	r2, [pc, #108]	; (8005ec4 <TIM_OC2_SetConfig+0x10c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d003      	beq.n	8005e64 <TIM_OC2_SetConfig+0xac>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1a      	ldr	r2, [pc, #104]	; (8005ec8 <TIM_OC2_SetConfig+0x110>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d113      	bne.n	8005e8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	621a      	str	r2, [r3, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	feff8fff 	.word	0xfeff8fff
 8005eb8:	40010000 	.word	0x40010000
 8005ebc:	40010400 	.word	0x40010400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4b33      	ldr	r3, [pc, #204]	; (8005fc4 <TIM_OC3_SetConfig+0xf8>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	021b      	lsls	r3, r3, #8
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a28      	ldr	r2, [pc, #160]	; (8005fc8 <TIM_OC3_SetConfig+0xfc>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_OC3_SetConfig+0x66>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a27      	ldr	r2, [pc, #156]	; (8005fcc <TIM_OC3_SetConfig+0x100>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10d      	bne.n	8005f4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	021b      	lsls	r3, r3, #8
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a1d      	ldr	r2, [pc, #116]	; (8005fc8 <TIM_OC3_SetConfig+0xfc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00f      	beq.n	8005f76 <TIM_OC3_SetConfig+0xaa>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <TIM_OC3_SetConfig+0x100>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00b      	beq.n	8005f76 <TIM_OC3_SetConfig+0xaa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <TIM_OC3_SetConfig+0x104>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d007      	beq.n	8005f76 <TIM_OC3_SetConfig+0xaa>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1a      	ldr	r2, [pc, #104]	; (8005fd4 <TIM_OC3_SetConfig+0x108>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_OC3_SetConfig+0xaa>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a19      	ldr	r2, [pc, #100]	; (8005fd8 <TIM_OC3_SetConfig+0x10c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d113      	bne.n	8005f9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	621a      	str	r2, [r3, #32]
}
 8005fb8:	bf00      	nop
 8005fba:	371c      	adds	r7, #28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	fffeff8f 	.word	0xfffeff8f
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40010400 	.word	0x40010400
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40014400 	.word	0x40014400
 8005fd8:	40014800 	.word	0x40014800

08005fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <TIM_OC4_SetConfig+0xbc>)
 8006008:	4013      	ands	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4313      	orrs	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	031b      	lsls	r3, r3, #12
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a19      	ldr	r2, [pc, #100]	; (800609c <TIM_OC4_SetConfig+0xc0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00f      	beq.n	800605c <TIM_OC4_SetConfig+0x80>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <TIM_OC4_SetConfig+0xc4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00b      	beq.n	800605c <TIM_OC4_SetConfig+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <TIM_OC4_SetConfig+0xc8>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d007      	beq.n	800605c <TIM_OC4_SetConfig+0x80>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <TIM_OC4_SetConfig+0xcc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_OC4_SetConfig+0x80>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a15      	ldr	r2, [pc, #84]	; (80060ac <TIM_OC4_SetConfig+0xd0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d109      	bne.n	8006070 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	019b      	lsls	r3, r3, #6
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	621a      	str	r2, [r3, #32]
}
 800608a:	bf00      	nop
 800608c:	371c      	adds	r7, #28
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	feff8fff 	.word	0xfeff8fff
 800609c:	40010000 	.word	0x40010000
 80060a0:	40010400 	.word	0x40010400
 80060a4:	40014000 	.word	0x40014000
 80060a8:	40014400 	.word	0x40014400
 80060ac:	40014800 	.word	0x40014800

080060b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <TIM_OC5_SetConfig+0xb0>)
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80060f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	041b      	lsls	r3, r3, #16
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a18      	ldr	r2, [pc, #96]	; (8006164 <TIM_OC5_SetConfig+0xb4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00f      	beq.n	8006126 <TIM_OC5_SetConfig+0x76>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a17      	ldr	r2, [pc, #92]	; (8006168 <TIM_OC5_SetConfig+0xb8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d00b      	beq.n	8006126 <TIM_OC5_SetConfig+0x76>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a16      	ldr	r2, [pc, #88]	; (800616c <TIM_OC5_SetConfig+0xbc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d007      	beq.n	8006126 <TIM_OC5_SetConfig+0x76>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a15      	ldr	r2, [pc, #84]	; (8006170 <TIM_OC5_SetConfig+0xc0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d003      	beq.n	8006126 <TIM_OC5_SetConfig+0x76>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a14      	ldr	r2, [pc, #80]	; (8006174 <TIM_OC5_SetConfig+0xc4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d109      	bne.n	800613a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	621a      	str	r2, [r3, #32]
}
 8006154:	bf00      	nop
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	fffeff8f 	.word	0xfffeff8f
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400
 800616c:	40014000 	.word	0x40014000
 8006170:	40014400 	.word	0x40014400
 8006174:	40014800 	.word	0x40014800

08006178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	4b22      	ldr	r3, [pc, #136]	; (800622c <TIM_OC6_SetConfig+0xb4>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	051b      	lsls	r3, r3, #20
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a19      	ldr	r2, [pc, #100]	; (8006230 <TIM_OC6_SetConfig+0xb8>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00f      	beq.n	80061f0 <TIM_OC6_SetConfig+0x78>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a18      	ldr	r2, [pc, #96]	; (8006234 <TIM_OC6_SetConfig+0xbc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00b      	beq.n	80061f0 <TIM_OC6_SetConfig+0x78>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a17      	ldr	r2, [pc, #92]	; (8006238 <TIM_OC6_SetConfig+0xc0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <TIM_OC6_SetConfig+0x78>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a16      	ldr	r2, [pc, #88]	; (800623c <TIM_OC6_SetConfig+0xc4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC6_SetConfig+0x78>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a15      	ldr	r2, [pc, #84]	; (8006240 <TIM_OC6_SetConfig+0xc8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d109      	bne.n	8006204 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	029b      	lsls	r3, r3, #10
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	feff8fff 	.word	0xfeff8fff
 8006230:	40010000 	.word	0x40010000
 8006234:	40010400 	.word	0x40010400
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800

08006244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2201      	movs	r2, #1
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	43db      	mvns	r3, r3
 8006266:	401a      	ands	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a1a      	ldr	r2, [r3, #32]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	fa01 f303 	lsl.w	r3, r1, r3
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
	...

08006290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e077      	b.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a35      	ldr	r2, [pc, #212]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a34      	ldr	r2, [pc, #208]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a25      	ldr	r2, [pc, #148]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d02c      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800631a:	d027      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a22      	ldr	r2, [pc, #136]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d022      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a21      	ldr	r2, [pc, #132]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d01d      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1f      	ldr	r2, [pc, #124]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d018      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a1a      	ldr	r2, [pc, #104]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1b      	ldr	r2, [pc, #108]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a1a      	ldr	r2, [pc, #104]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a18      	ldr	r2, [pc, #96]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a17      	ldr	r2, [pc, #92]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d10c      	bne.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	4313      	orrs	r3, r2
 800637c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40010000 	.word	0x40010000
 80063a8:	40010400 	.word	0x40010400
 80063ac:	40000400 	.word	0x40000400
 80063b0:	40000800 	.word	0x40000800
 80063b4:	40000c00 	.word	0x40000c00
 80063b8:	40001800 	.word	0x40001800
 80063bc:	40014000 	.word	0x40014000
 80063c0:	4000e000 	.word	0x4000e000
 80063c4:	4000e400 	.word	0x4000e400

080063c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e042      	b.n	8006460 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7fb fb11 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2224      	movs	r2, #36	; 0x24
 80063f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fcd6 	bl	8006dbc <UART_SetConfig>
 8006410:	4603      	mov	r3, r0
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e022      	b.n	8006460 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fb36 	bl	8007a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 fbbd 	bl	8007bd8 <UART_CheckIdleState>
 800645e:	4603      	mov	r3, r0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647e:	2b20      	cmp	r3, #32
 8006480:	f040 8083 	bne.w	800658a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <HAL_UART_Transmit+0x28>
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e07b      	b.n	800658c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_UART_Transmit+0x3a>
 800649e:	2302      	movs	r3, #2
 80064a0:	e074      	b.n	800658c <HAL_UART_Transmit+0x124>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2221      	movs	r2, #33	; 0x21
 80064b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ba:	f7fb fdaf 	bl	800201c <HAL_GetTick>
 80064be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	88fa      	ldrh	r2, [r7, #6]
 80064c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	88fa      	ldrh	r2, [r7, #6]
 80064cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d8:	d108      	bne.n	80064ec <HAL_UART_Transmit+0x84>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e003      	b.n	80064f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80064fc:	e02c      	b.n	8006558 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	2180      	movs	r1, #128	; 0x80
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f001 fbb0 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e039      	b.n	800658c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10b      	bne.n	8006536 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800652c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	3302      	adds	r3, #2
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e007      	b.n	8006546 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	781a      	ldrb	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	3301      	adds	r3, #1
 8006544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1cc      	bne.n	80064fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	9300      	str	r3, [sp, #0]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2200      	movs	r2, #0
 800656c:	2140      	movs	r1, #64	; 0x40
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 fb7d 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e006      	b.n	800658c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e000      	b.n	800658c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
  }
}
 800658c:	4618      	mov	r0, r3
 800658e:	3720      	adds	r7, #32
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	d142      	bne.n	8006632 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d002      	beq.n	80065b8 <HAL_UART_Receive_IT+0x24>
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e03b      	b.n	8006634 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_UART_Receive_IT+0x36>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e034      	b.n	8006634 <HAL_UART_Receive_IT+0xa0>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_UART_Receive_IT+0xa8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d01f      	beq.n	8006622 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d018      	beq.n	8006622 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	613b      	str	r3, [r7, #16]
   return(result);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	69f9      	ldr	r1, [r7, #28]
 8006614:	6a3a      	ldr	r2, [r7, #32]
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	61bb      	str	r3, [r7, #24]
   return(result);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e6      	bne.n	80065f0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	461a      	mov	r2, r3
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f001 fbe9 	bl	8007e00 <UART_Start_Receive_IT>
 800662e:	4603      	mov	r3, r0
 8006630:	e000      	b.n	8006634 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006632:	2302      	movs	r3, #2
  }
}
 8006634:	4618      	mov	r0, r3
 8006636:	3728      	adds	r7, #40	; 0x28
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	58000c00 	.word	0x58000c00

08006640 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b0ba      	sub	sp, #232	; 0xe8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006666:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800666a:	f640 030f 	movw	r3, #2063	; 0x80f
 800666e:	4013      	ands	r3, r2
 8006670:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006678:	2b00      	cmp	r3, #0
 800667a:	d11b      	bne.n	80066b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d009      	beq.n	80066b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 835a 	beq.w	8006d5e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	4798      	blx	r3
      }
      return;
 80066b2:	e354      	b.n	8006d5e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 811f 	beq.w	80068fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066c2:	4b8b      	ldr	r3, [pc, #556]	; (80068f0 <HAL_UART_IRQHandler+0x2b0>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066ce:	4b89      	ldr	r3, [pc, #548]	; (80068f4 <HAL_UART_IRQHandler+0x2b4>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8112 	beq.w	80068fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d011      	beq.n	8006708 <HAL_UART_IRQHandler+0xc8>
 80066e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d011      	beq.n	8006738 <HAL_UART_IRQHandler+0xf8>
 8006714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00b      	beq.n	8006738 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2202      	movs	r2, #2
 8006726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672e:	f043 0204 	orr.w	r2, r3, #4
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d011      	beq.n	8006768 <HAL_UART_IRQHandler+0x128>
 8006744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2204      	movs	r2, #4
 8006756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006780:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006784:	4b5a      	ldr	r3, [pc, #360]	; (80068f0 <HAL_UART_IRQHandler+0x2b0>)
 8006786:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2208      	movs	r2, #8
 8006792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800679a:	f043 0208 	orr.w	r2, r3, #8
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_UART_IRQHandler+0x196>
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00c      	beq.n	80067d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 82c0 	beq.w	8006d62 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d105      	bne.n	8006806 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800681c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	d005      	beq.n	800683a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800682e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006832:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006836:	2b00      	cmp	r3, #0
 8006838:	d04f      	beq.n	80068da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fc0a 	bl	8008054 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d141      	bne.n	80068d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3308      	adds	r3, #8
 8006876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800687a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800687e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1d9      	bne.n	800684e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d013      	beq.n	80068ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a6:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <HAL_UART_IRQHandler+0x2b8>)
 80068a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fc f812 	bl	80028d8 <HAL_DMA_Abort_IT>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d017      	beq.n	80068ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c8:	e00f      	b.n	80068ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa60 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d0:	e00b      	b.n	80068ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa5c 	bl	8006d90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068d8:	e007      	b.n	80068ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa58 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80068e8:	e23b      	b.n	8006d62 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ea:	bf00      	nop
    return;
 80068ec:	e239      	b.n	8006d62 <HAL_UART_IRQHandler+0x722>
 80068ee:	bf00      	nop
 80068f0:	10000001 	.word	0x10000001
 80068f4:	04000120 	.word	0x04000120
 80068f8:	08008121 	.word	0x08008121

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006900:	2b01      	cmp	r3, #1
 8006902:	f040 81ce 	bne.w	8006ca2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690a:	f003 0310 	and.w	r3, r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 81c7 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 81c0 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2210      	movs	r2, #16
 8006928:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	f040 813b 	bne.w	8006bb0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a8b      	ldr	r2, [pc, #556]	; (8006b70 <HAL_UART_IRQHandler+0x530>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d059      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a89      	ldr	r2, [pc, #548]	; (8006b74 <HAL_UART_IRQHandler+0x534>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d053      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a87      	ldr	r2, [pc, #540]	; (8006b78 <HAL_UART_IRQHandler+0x538>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d04d      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a85      	ldr	r2, [pc, #532]	; (8006b7c <HAL_UART_IRQHandler+0x53c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d047      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a83      	ldr	r2, [pc, #524]	; (8006b80 <HAL_UART_IRQHandler+0x540>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d041      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a81      	ldr	r2, [pc, #516]	; (8006b84 <HAL_UART_IRQHandler+0x544>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d03b      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a7f      	ldr	r2, [pc, #508]	; (8006b88 <HAL_UART_IRQHandler+0x548>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d035      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a7d      	ldr	r2, [pc, #500]	; (8006b8c <HAL_UART_IRQHandler+0x54c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d02f      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7b      	ldr	r2, [pc, #492]	; (8006b90 <HAL_UART_IRQHandler+0x550>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d029      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a79      	ldr	r2, [pc, #484]	; (8006b94 <HAL_UART_IRQHandler+0x554>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d023      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a77      	ldr	r2, [pc, #476]	; (8006b98 <HAL_UART_IRQHandler+0x558>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a75      	ldr	r2, [pc, #468]	; (8006b9c <HAL_UART_IRQHandler+0x55c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d017      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a73      	ldr	r2, [pc, #460]	; (8006ba0 <HAL_UART_IRQHandler+0x560>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d011      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a71      	ldr	r2, [pc, #452]	; (8006ba4 <HAL_UART_IRQHandler+0x564>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a6f      	ldr	r2, [pc, #444]	; (8006ba8 <HAL_UART_IRQHandler+0x568>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d005      	beq.n	80069fa <HAL_UART_IRQHandler+0x3ba>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a6d      	ldr	r2, [pc, #436]	; (8006bac <HAL_UART_IRQHandler+0x56c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d105      	bne.n	8006a06 <HAL_UART_IRQHandler+0x3c6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	e004      	b.n	8006a10 <HAL_UART_IRQHandler+0x3d0>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 81a4 	beq.w	8006d66 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	f080 819c 	bcs.w	8006d66 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a42:	f000 8086 	beq.w	8006b52 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a74:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1da      	bne.n	8006a46 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ab4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006abc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e1      	bne.n	8006a90 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad6:	e853 3f00 	ldrex	r3, [r3]
 8006ada:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3308      	adds	r3, #8
 8006aec:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006af0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006af2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006af6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006afe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e3      	bne.n	8006acc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b34:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b36:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e4      	bne.n	8006b12 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fb fba5 	bl	800229c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f91c 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b6c:	e0fb      	b.n	8006d66 <HAL_UART_IRQHandler+0x726>
 8006b6e:	bf00      	nop
 8006b70:	40020010 	.word	0x40020010
 8006b74:	40020028 	.word	0x40020028
 8006b78:	40020040 	.word	0x40020040
 8006b7c:	40020058 	.word	0x40020058
 8006b80:	40020070 	.word	0x40020070
 8006b84:	40020088 	.word	0x40020088
 8006b88:	400200a0 	.word	0x400200a0
 8006b8c:	400200b8 	.word	0x400200b8
 8006b90:	40020410 	.word	0x40020410
 8006b94:	40020428 	.word	0x40020428
 8006b98:	40020440 	.word	0x40020440
 8006b9c:	40020458 	.word	0x40020458
 8006ba0:	40020470 	.word	0x40020470
 8006ba4:	40020488 	.word	0x40020488
 8006ba8:	400204a0 	.word	0x400204a0
 8006bac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80cc 	beq.w	8006d6a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8006bd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80c7 	beq.w	8006d6a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	e853 3f00 	ldrex	r3, [r3]
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006c00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e4      	bne.n	8006bdc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3308      	adds	r3, #8
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	623b      	str	r3, [r7, #32]
   return(result);
 8006c22:	6a3a      	ldr	r2, [r7, #32]
 8006c24:	4b54      	ldr	r3, [pc, #336]	; (8006d78 <HAL_UART_IRQHandler+0x738>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c36:	633a      	str	r2, [r7, #48]	; 0x30
 8006c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e3      	bne.n	8006c12 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	69b9      	ldr	r1, [r7, #24]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e4      	bne.n	8006c5e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f882 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ca0:	e063      	b.n	8006d6a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00e      	beq.n	8006ccc <HAL_UART_IRQHandler+0x68c>
 8006cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d008      	beq.n	8006ccc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fec9 	bl	8008a5c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cca:	e051      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d014      	beq.n	8006d02 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d105      	bne.n	8006cf0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ce4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d03a      	beq.n	8006d6e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
    }
    return;
 8006d00:	e035      	b.n	8006d6e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <HAL_UART_IRQHandler+0x6e2>
 8006d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fa16 	bl	800814c <UART_EndTransmit_IT>
    return;
 8006d20:	e026      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_UART_IRQHandler+0x702>
 8006d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f001 fea2 	bl	8008a84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d40:	e016      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <HAL_UART_IRQHandler+0x730>
 8006d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da0c      	bge.n	8006d70 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fe8a 	bl	8008a70 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d5c:	e008      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
      return;
 8006d5e:	bf00      	nop
 8006d60:	e006      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
    return;
 8006d62:	bf00      	nop
 8006d64:	e004      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
      return;
 8006d66:	bf00      	nop
 8006d68:	e002      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
      return;
 8006d6a:	bf00      	nop
 8006d6c:	e000      	b.n	8006d70 <HAL_UART_IRQHandler+0x730>
    return;
 8006d6e:	bf00      	nop
  }
}
 8006d70:	37e8      	adds	r7, #232	; 0xe8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	effffffe 	.word	0xeffffffe

08006d7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc0:	b092      	sub	sp, #72	; 0x48
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4bbe      	ldr	r3, [pc, #760]	; (80070e4 <UART_SetConfig+0x328>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	6812      	ldr	r2, [r2, #0]
 8006df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006df4:	430b      	orrs	r3, r1
 8006df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	430a      	orrs	r2, r1
 8006e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4ab3      	ldr	r2, [pc, #716]	; (80070e8 <UART_SetConfig+0x32c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e24:	4313      	orrs	r3, r2
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689a      	ldr	r2, [r3, #8]
 8006e2e:	4baf      	ldr	r3, [pc, #700]	; (80070ec <UART_SetConfig+0x330>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	6812      	ldr	r2, [r2, #0]
 8006e36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	f023 010f 	bic.w	r1, r3, #15
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4aa6      	ldr	r2, [pc, #664]	; (80070f0 <UART_SetConfig+0x334>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d177      	bne.n	8006f4c <UART_SetConfig+0x190>
 8006e5c:	4ba5      	ldr	r3, [pc, #660]	; (80070f4 <UART_SetConfig+0x338>)
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e64:	2b28      	cmp	r3, #40	; 0x28
 8006e66:	d86d      	bhi.n	8006f44 <UART_SetConfig+0x188>
 8006e68:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <UART_SetConfig+0xb4>)
 8006e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6e:	bf00      	nop
 8006e70:	08006f15 	.word	0x08006f15
 8006e74:	08006f45 	.word	0x08006f45
 8006e78:	08006f45 	.word	0x08006f45
 8006e7c:	08006f45 	.word	0x08006f45
 8006e80:	08006f45 	.word	0x08006f45
 8006e84:	08006f45 	.word	0x08006f45
 8006e88:	08006f45 	.word	0x08006f45
 8006e8c:	08006f45 	.word	0x08006f45
 8006e90:	08006f1d 	.word	0x08006f1d
 8006e94:	08006f45 	.word	0x08006f45
 8006e98:	08006f45 	.word	0x08006f45
 8006e9c:	08006f45 	.word	0x08006f45
 8006ea0:	08006f45 	.word	0x08006f45
 8006ea4:	08006f45 	.word	0x08006f45
 8006ea8:	08006f45 	.word	0x08006f45
 8006eac:	08006f45 	.word	0x08006f45
 8006eb0:	08006f25 	.word	0x08006f25
 8006eb4:	08006f45 	.word	0x08006f45
 8006eb8:	08006f45 	.word	0x08006f45
 8006ebc:	08006f45 	.word	0x08006f45
 8006ec0:	08006f45 	.word	0x08006f45
 8006ec4:	08006f45 	.word	0x08006f45
 8006ec8:	08006f45 	.word	0x08006f45
 8006ecc:	08006f45 	.word	0x08006f45
 8006ed0:	08006f2d 	.word	0x08006f2d
 8006ed4:	08006f45 	.word	0x08006f45
 8006ed8:	08006f45 	.word	0x08006f45
 8006edc:	08006f45 	.word	0x08006f45
 8006ee0:	08006f45 	.word	0x08006f45
 8006ee4:	08006f45 	.word	0x08006f45
 8006ee8:	08006f45 	.word	0x08006f45
 8006eec:	08006f45 	.word	0x08006f45
 8006ef0:	08006f35 	.word	0x08006f35
 8006ef4:	08006f45 	.word	0x08006f45
 8006ef8:	08006f45 	.word	0x08006f45
 8006efc:	08006f45 	.word	0x08006f45
 8006f00:	08006f45 	.word	0x08006f45
 8006f04:	08006f45 	.word	0x08006f45
 8006f08:	08006f45 	.word	0x08006f45
 8006f0c:	08006f45 	.word	0x08006f45
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1a:	e326      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f22:	e322      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f2a:	e31e      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e31a      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f34:	2320      	movs	r3, #32
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e316      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e312      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e30e      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a69      	ldr	r2, [pc, #420]	; (80070f8 <UART_SetConfig+0x33c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d130      	bne.n	8006fb8 <UART_SetConfig+0x1fc>
 8006f56:	4b67      	ldr	r3, [pc, #412]	; (80070f4 <UART_SetConfig+0x338>)
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	d826      	bhi.n	8006fb0 <UART_SetConfig+0x1f4>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0x1ac>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006f81 	.word	0x08006f81
 8006f6c:	08006f89 	.word	0x08006f89
 8006f70:	08006f91 	.word	0x08006f91
 8006f74:	08006f99 	.word	0x08006f99
 8006f78:	08006fa1 	.word	0x08006fa1
 8006f7c:	08006fa9 	.word	0x08006fa9
 8006f80:	2300      	movs	r3, #0
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f86:	e2f0      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8e:	e2ec      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f96:	e2e8      	b.n	800756a <UART_SetConfig+0x7ae>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e2e4      	b.n	800756a <UART_SetConfig+0x7ae>
 8006fa0:	2320      	movs	r3, #32
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e2e0      	b.n	800756a <UART_SetConfig+0x7ae>
 8006fa8:	2340      	movs	r3, #64	; 0x40
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e2dc      	b.n	800756a <UART_SetConfig+0x7ae>
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e2d8      	b.n	800756a <UART_SetConfig+0x7ae>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a4f      	ldr	r2, [pc, #316]	; (80070fc <UART_SetConfig+0x340>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d130      	bne.n	8007024 <UART_SetConfig+0x268>
 8006fc2:	4b4c      	ldr	r3, [pc, #304]	; (80070f4 <UART_SetConfig+0x338>)
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b05      	cmp	r3, #5
 8006fcc:	d826      	bhi.n	800701c <UART_SetConfig+0x260>
 8006fce:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <UART_SetConfig+0x218>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08006fed 	.word	0x08006fed
 8006fd8:	08006ff5 	.word	0x08006ff5
 8006fdc:	08006ffd 	.word	0x08006ffd
 8006fe0:	08007005 	.word	0x08007005
 8006fe4:	0800700d 	.word	0x0800700d
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff2:	e2ba      	b.n	800756a <UART_SetConfig+0x7ae>
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffa:	e2b6      	b.n	800756a <UART_SetConfig+0x7ae>
 8006ffc:	2308      	movs	r3, #8
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007002:	e2b2      	b.n	800756a <UART_SetConfig+0x7ae>
 8007004:	2310      	movs	r3, #16
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e2ae      	b.n	800756a <UART_SetConfig+0x7ae>
 800700c:	2320      	movs	r3, #32
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e2aa      	b.n	800756a <UART_SetConfig+0x7ae>
 8007014:	2340      	movs	r3, #64	; 0x40
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e2a6      	b.n	800756a <UART_SetConfig+0x7ae>
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e2a2      	b.n	800756a <UART_SetConfig+0x7ae>
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a35      	ldr	r2, [pc, #212]	; (8007100 <UART_SetConfig+0x344>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d130      	bne.n	8007090 <UART_SetConfig+0x2d4>
 800702e:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <UART_SetConfig+0x338>)
 8007030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b05      	cmp	r3, #5
 8007038:	d826      	bhi.n	8007088 <UART_SetConfig+0x2cc>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x284>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007059 	.word	0x08007059
 8007044:	08007061 	.word	0x08007061
 8007048:	08007069 	.word	0x08007069
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	2300      	movs	r3, #0
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705e:	e284      	b.n	800756a <UART_SetConfig+0x7ae>
 8007060:	2304      	movs	r3, #4
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007066:	e280      	b.n	800756a <UART_SetConfig+0x7ae>
 8007068:	2308      	movs	r3, #8
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706e:	e27c      	b.n	800756a <UART_SetConfig+0x7ae>
 8007070:	2310      	movs	r3, #16
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007076:	e278      	b.n	800756a <UART_SetConfig+0x7ae>
 8007078:	2320      	movs	r3, #32
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707e:	e274      	b.n	800756a <UART_SetConfig+0x7ae>
 8007080:	2340      	movs	r3, #64	; 0x40
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007086:	e270      	b.n	800756a <UART_SetConfig+0x7ae>
 8007088:	2380      	movs	r3, #128	; 0x80
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e26c      	b.n	800756a <UART_SetConfig+0x7ae>
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1b      	ldr	r2, [pc, #108]	; (8007104 <UART_SetConfig+0x348>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d142      	bne.n	8007120 <UART_SetConfig+0x364>
 800709a:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <UART_SetConfig+0x338>)
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	2b05      	cmp	r3, #5
 80070a4:	d838      	bhi.n	8007118 <UART_SetConfig+0x35c>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0x2f0>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070c5 	.word	0x080070c5
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	080070d5 	.word	0x080070d5
 80070b8:	080070dd 	.word	0x080070dd
 80070bc:	08007109 	.word	0x08007109
 80070c0:	08007111 	.word	0x08007111
 80070c4:	2300      	movs	r3, #0
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ca:	e24e      	b.n	800756a <UART_SetConfig+0x7ae>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d2:	e24a      	b.n	800756a <UART_SetConfig+0x7ae>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070da:	e246      	b.n	800756a <UART_SetConfig+0x7ae>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e2:	e242      	b.n	800756a <UART_SetConfig+0x7ae>
 80070e4:	cfff69f3 	.word	0xcfff69f3
 80070e8:	58000c00 	.word	0x58000c00
 80070ec:	11fff4ff 	.word	0x11fff4ff
 80070f0:	40011000 	.word	0x40011000
 80070f4:	58024400 	.word	0x58024400
 80070f8:	40004400 	.word	0x40004400
 80070fc:	40004800 	.word	0x40004800
 8007100:	40004c00 	.word	0x40004c00
 8007104:	40005000 	.word	0x40005000
 8007108:	2320      	movs	r3, #32
 800710a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710e:	e22c      	b.n	800756a <UART_SetConfig+0x7ae>
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007116:	e228      	b.n	800756a <UART_SetConfig+0x7ae>
 8007118:	2380      	movs	r3, #128	; 0x80
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711e:	e224      	b.n	800756a <UART_SetConfig+0x7ae>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4ab1      	ldr	r2, [pc, #708]	; (80073ec <UART_SetConfig+0x630>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d176      	bne.n	8007218 <UART_SetConfig+0x45c>
 800712a:	4bb1      	ldr	r3, [pc, #708]	; (80073f0 <UART_SetConfig+0x634>)
 800712c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007132:	2b28      	cmp	r3, #40	; 0x28
 8007134:	d86c      	bhi.n	8007210 <UART_SetConfig+0x454>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x380>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	080071e1 	.word	0x080071e1
 8007140:	08007211 	.word	0x08007211
 8007144:	08007211 	.word	0x08007211
 8007148:	08007211 	.word	0x08007211
 800714c:	08007211 	.word	0x08007211
 8007150:	08007211 	.word	0x08007211
 8007154:	08007211 	.word	0x08007211
 8007158:	08007211 	.word	0x08007211
 800715c:	080071e9 	.word	0x080071e9
 8007160:	08007211 	.word	0x08007211
 8007164:	08007211 	.word	0x08007211
 8007168:	08007211 	.word	0x08007211
 800716c:	08007211 	.word	0x08007211
 8007170:	08007211 	.word	0x08007211
 8007174:	08007211 	.word	0x08007211
 8007178:	08007211 	.word	0x08007211
 800717c:	080071f1 	.word	0x080071f1
 8007180:	08007211 	.word	0x08007211
 8007184:	08007211 	.word	0x08007211
 8007188:	08007211 	.word	0x08007211
 800718c:	08007211 	.word	0x08007211
 8007190:	08007211 	.word	0x08007211
 8007194:	08007211 	.word	0x08007211
 8007198:	08007211 	.word	0x08007211
 800719c:	080071f9 	.word	0x080071f9
 80071a0:	08007211 	.word	0x08007211
 80071a4:	08007211 	.word	0x08007211
 80071a8:	08007211 	.word	0x08007211
 80071ac:	08007211 	.word	0x08007211
 80071b0:	08007211 	.word	0x08007211
 80071b4:	08007211 	.word	0x08007211
 80071b8:	08007211 	.word	0x08007211
 80071bc:	08007201 	.word	0x08007201
 80071c0:	08007211 	.word	0x08007211
 80071c4:	08007211 	.word	0x08007211
 80071c8:	08007211 	.word	0x08007211
 80071cc:	08007211 	.word	0x08007211
 80071d0:	08007211 	.word	0x08007211
 80071d4:	08007211 	.word	0x08007211
 80071d8:	08007211 	.word	0x08007211
 80071dc:	08007209 	.word	0x08007209
 80071e0:	2301      	movs	r3, #1
 80071e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e6:	e1c0      	b.n	800756a <UART_SetConfig+0x7ae>
 80071e8:	2304      	movs	r3, #4
 80071ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ee:	e1bc      	b.n	800756a <UART_SetConfig+0x7ae>
 80071f0:	2308      	movs	r3, #8
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f6:	e1b8      	b.n	800756a <UART_SetConfig+0x7ae>
 80071f8:	2310      	movs	r3, #16
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e1b4      	b.n	800756a <UART_SetConfig+0x7ae>
 8007200:	2320      	movs	r3, #32
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e1b0      	b.n	800756a <UART_SetConfig+0x7ae>
 8007208:	2340      	movs	r3, #64	; 0x40
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e1ac      	b.n	800756a <UART_SetConfig+0x7ae>
 8007210:	2380      	movs	r3, #128	; 0x80
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e1a8      	b.n	800756a <UART_SetConfig+0x7ae>
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a75      	ldr	r2, [pc, #468]	; (80073f4 <UART_SetConfig+0x638>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d130      	bne.n	8007284 <UART_SetConfig+0x4c8>
 8007222:	4b73      	ldr	r3, [pc, #460]	; (80073f0 <UART_SetConfig+0x634>)
 8007224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b05      	cmp	r3, #5
 800722c:	d826      	bhi.n	800727c <UART_SetConfig+0x4c0>
 800722e:	a201      	add	r2, pc, #4	; (adr r2, 8007234 <UART_SetConfig+0x478>)
 8007230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007234:	0800724d 	.word	0x0800724d
 8007238:	08007255 	.word	0x08007255
 800723c:	0800725d 	.word	0x0800725d
 8007240:	08007265 	.word	0x08007265
 8007244:	0800726d 	.word	0x0800726d
 8007248:	08007275 	.word	0x08007275
 800724c:	2300      	movs	r3, #0
 800724e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007252:	e18a      	b.n	800756a <UART_SetConfig+0x7ae>
 8007254:	2304      	movs	r3, #4
 8007256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725a:	e186      	b.n	800756a <UART_SetConfig+0x7ae>
 800725c:	2308      	movs	r3, #8
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007262:	e182      	b.n	800756a <UART_SetConfig+0x7ae>
 8007264:	2310      	movs	r3, #16
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e17e      	b.n	800756a <UART_SetConfig+0x7ae>
 800726c:	2320      	movs	r3, #32
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e17a      	b.n	800756a <UART_SetConfig+0x7ae>
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e176      	b.n	800756a <UART_SetConfig+0x7ae>
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e172      	b.n	800756a <UART_SetConfig+0x7ae>
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a5b      	ldr	r2, [pc, #364]	; (80073f8 <UART_SetConfig+0x63c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d130      	bne.n	80072f0 <UART_SetConfig+0x534>
 800728e:	4b58      	ldr	r3, [pc, #352]	; (80073f0 <UART_SetConfig+0x634>)
 8007290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007292:	f003 0307 	and.w	r3, r3, #7
 8007296:	2b05      	cmp	r3, #5
 8007298:	d826      	bhi.n	80072e8 <UART_SetConfig+0x52c>
 800729a:	a201      	add	r2, pc, #4	; (adr r2, 80072a0 <UART_SetConfig+0x4e4>)
 800729c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a0:	080072b9 	.word	0x080072b9
 80072a4:	080072c1 	.word	0x080072c1
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072d1 	.word	0x080072d1
 80072b0:	080072d9 	.word	0x080072d9
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072be:	e154      	b.n	800756a <UART_SetConfig+0x7ae>
 80072c0:	2304      	movs	r3, #4
 80072c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c6:	e150      	b.n	800756a <UART_SetConfig+0x7ae>
 80072c8:	2308      	movs	r3, #8
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ce:	e14c      	b.n	800756a <UART_SetConfig+0x7ae>
 80072d0:	2310      	movs	r3, #16
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d6:	e148      	b.n	800756a <UART_SetConfig+0x7ae>
 80072d8:	2320      	movs	r3, #32
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072de:	e144      	b.n	800756a <UART_SetConfig+0x7ae>
 80072e0:	2340      	movs	r3, #64	; 0x40
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e6:	e140      	b.n	800756a <UART_SetConfig+0x7ae>
 80072e8:	2380      	movs	r3, #128	; 0x80
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e13c      	b.n	800756a <UART_SetConfig+0x7ae>
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a41      	ldr	r2, [pc, #260]	; (80073fc <UART_SetConfig+0x640>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	f040 8082 	bne.w	8007400 <UART_SetConfig+0x644>
 80072fc:	4b3c      	ldr	r3, [pc, #240]	; (80073f0 <UART_SetConfig+0x634>)
 80072fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007300:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007304:	2b28      	cmp	r3, #40	; 0x28
 8007306:	d86d      	bhi.n	80073e4 <UART_SetConfig+0x628>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <UART_SetConfig+0x554>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	080073b5 	.word	0x080073b5
 8007314:	080073e5 	.word	0x080073e5
 8007318:	080073e5 	.word	0x080073e5
 800731c:	080073e5 	.word	0x080073e5
 8007320:	080073e5 	.word	0x080073e5
 8007324:	080073e5 	.word	0x080073e5
 8007328:	080073e5 	.word	0x080073e5
 800732c:	080073e5 	.word	0x080073e5
 8007330:	080073bd 	.word	0x080073bd
 8007334:	080073e5 	.word	0x080073e5
 8007338:	080073e5 	.word	0x080073e5
 800733c:	080073e5 	.word	0x080073e5
 8007340:	080073e5 	.word	0x080073e5
 8007344:	080073e5 	.word	0x080073e5
 8007348:	080073e5 	.word	0x080073e5
 800734c:	080073e5 	.word	0x080073e5
 8007350:	080073c5 	.word	0x080073c5
 8007354:	080073e5 	.word	0x080073e5
 8007358:	080073e5 	.word	0x080073e5
 800735c:	080073e5 	.word	0x080073e5
 8007360:	080073e5 	.word	0x080073e5
 8007364:	080073e5 	.word	0x080073e5
 8007368:	080073e5 	.word	0x080073e5
 800736c:	080073e5 	.word	0x080073e5
 8007370:	080073cd 	.word	0x080073cd
 8007374:	080073e5 	.word	0x080073e5
 8007378:	080073e5 	.word	0x080073e5
 800737c:	080073e5 	.word	0x080073e5
 8007380:	080073e5 	.word	0x080073e5
 8007384:	080073e5 	.word	0x080073e5
 8007388:	080073e5 	.word	0x080073e5
 800738c:	080073e5 	.word	0x080073e5
 8007390:	080073d5 	.word	0x080073d5
 8007394:	080073e5 	.word	0x080073e5
 8007398:	080073e5 	.word	0x080073e5
 800739c:	080073e5 	.word	0x080073e5
 80073a0:	080073e5 	.word	0x080073e5
 80073a4:	080073e5 	.word	0x080073e5
 80073a8:	080073e5 	.word	0x080073e5
 80073ac:	080073e5 	.word	0x080073e5
 80073b0:	080073dd 	.word	0x080073dd
 80073b4:	2301      	movs	r3, #1
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ba:	e0d6      	b.n	800756a <UART_SetConfig+0x7ae>
 80073bc:	2304      	movs	r3, #4
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073c2:	e0d2      	b.n	800756a <UART_SetConfig+0x7ae>
 80073c4:	2308      	movs	r3, #8
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ca:	e0ce      	b.n	800756a <UART_SetConfig+0x7ae>
 80073cc:	2310      	movs	r3, #16
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d2:	e0ca      	b.n	800756a <UART_SetConfig+0x7ae>
 80073d4:	2320      	movs	r3, #32
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073da:	e0c6      	b.n	800756a <UART_SetConfig+0x7ae>
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e2:	e0c2      	b.n	800756a <UART_SetConfig+0x7ae>
 80073e4:	2380      	movs	r3, #128	; 0x80
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e0be      	b.n	800756a <UART_SetConfig+0x7ae>
 80073ec:	40011400 	.word	0x40011400
 80073f0:	58024400 	.word	0x58024400
 80073f4:	40007800 	.word	0x40007800
 80073f8:	40007c00 	.word	0x40007c00
 80073fc:	40011800 	.word	0x40011800
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4aad      	ldr	r2, [pc, #692]	; (80076bc <UART_SetConfig+0x900>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d176      	bne.n	80074f8 <UART_SetConfig+0x73c>
 800740a:	4bad      	ldr	r3, [pc, #692]	; (80076c0 <UART_SetConfig+0x904>)
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007412:	2b28      	cmp	r3, #40	; 0x28
 8007414:	d86c      	bhi.n	80074f0 <UART_SetConfig+0x734>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x660>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	080074c1 	.word	0x080074c1
 8007420:	080074f1 	.word	0x080074f1
 8007424:	080074f1 	.word	0x080074f1
 8007428:	080074f1 	.word	0x080074f1
 800742c:	080074f1 	.word	0x080074f1
 8007430:	080074f1 	.word	0x080074f1
 8007434:	080074f1 	.word	0x080074f1
 8007438:	080074f1 	.word	0x080074f1
 800743c:	080074c9 	.word	0x080074c9
 8007440:	080074f1 	.word	0x080074f1
 8007444:	080074f1 	.word	0x080074f1
 8007448:	080074f1 	.word	0x080074f1
 800744c:	080074f1 	.word	0x080074f1
 8007450:	080074f1 	.word	0x080074f1
 8007454:	080074f1 	.word	0x080074f1
 8007458:	080074f1 	.word	0x080074f1
 800745c:	080074d1 	.word	0x080074d1
 8007460:	080074f1 	.word	0x080074f1
 8007464:	080074f1 	.word	0x080074f1
 8007468:	080074f1 	.word	0x080074f1
 800746c:	080074f1 	.word	0x080074f1
 8007470:	080074f1 	.word	0x080074f1
 8007474:	080074f1 	.word	0x080074f1
 8007478:	080074f1 	.word	0x080074f1
 800747c:	080074d9 	.word	0x080074d9
 8007480:	080074f1 	.word	0x080074f1
 8007484:	080074f1 	.word	0x080074f1
 8007488:	080074f1 	.word	0x080074f1
 800748c:	080074f1 	.word	0x080074f1
 8007490:	080074f1 	.word	0x080074f1
 8007494:	080074f1 	.word	0x080074f1
 8007498:	080074f1 	.word	0x080074f1
 800749c:	080074e1 	.word	0x080074e1
 80074a0:	080074f1 	.word	0x080074f1
 80074a4:	080074f1 	.word	0x080074f1
 80074a8:	080074f1 	.word	0x080074f1
 80074ac:	080074f1 	.word	0x080074f1
 80074b0:	080074f1 	.word	0x080074f1
 80074b4:	080074f1 	.word	0x080074f1
 80074b8:	080074f1 	.word	0x080074f1
 80074bc:	080074e9 	.word	0x080074e9
 80074c0:	2301      	movs	r3, #1
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074c6:	e050      	b.n	800756a <UART_SetConfig+0x7ae>
 80074c8:	2304      	movs	r3, #4
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ce:	e04c      	b.n	800756a <UART_SetConfig+0x7ae>
 80074d0:	2308      	movs	r3, #8
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074d6:	e048      	b.n	800756a <UART_SetConfig+0x7ae>
 80074d8:	2310      	movs	r3, #16
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e044      	b.n	800756a <UART_SetConfig+0x7ae>
 80074e0:	2320      	movs	r3, #32
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e6:	e040      	b.n	800756a <UART_SetConfig+0x7ae>
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ee:	e03c      	b.n	800756a <UART_SetConfig+0x7ae>
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f6:	e038      	b.n	800756a <UART_SetConfig+0x7ae>
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a71      	ldr	r2, [pc, #452]	; (80076c4 <UART_SetConfig+0x908>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d130      	bne.n	8007564 <UART_SetConfig+0x7a8>
 8007502:	4b6f      	ldr	r3, [pc, #444]	; (80076c0 <UART_SetConfig+0x904>)
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	2b05      	cmp	r3, #5
 800750c:	d826      	bhi.n	800755c <UART_SetConfig+0x7a0>
 800750e:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x758>)
 8007510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007514:	0800752d 	.word	0x0800752d
 8007518:	08007535 	.word	0x08007535
 800751c:	0800753d 	.word	0x0800753d
 8007520:	08007545 	.word	0x08007545
 8007524:	0800754d 	.word	0x0800754d
 8007528:	08007555 	.word	0x08007555
 800752c:	2302      	movs	r3, #2
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007532:	e01a      	b.n	800756a <UART_SetConfig+0x7ae>
 8007534:	2304      	movs	r3, #4
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800753a:	e016      	b.n	800756a <UART_SetConfig+0x7ae>
 800753c:	2308      	movs	r3, #8
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007542:	e012      	b.n	800756a <UART_SetConfig+0x7ae>
 8007544:	2310      	movs	r3, #16
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754a:	e00e      	b.n	800756a <UART_SetConfig+0x7ae>
 800754c:	2320      	movs	r3, #32
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007552:	e00a      	b.n	800756a <UART_SetConfig+0x7ae>
 8007554:	2340      	movs	r3, #64	; 0x40
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755a:	e006      	b.n	800756a <UART_SetConfig+0x7ae>
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007562:	e002      	b.n	800756a <UART_SetConfig+0x7ae>
 8007564:	2380      	movs	r3, #128	; 0x80
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a55      	ldr	r2, [pc, #340]	; (80076c4 <UART_SetConfig+0x908>)
 8007570:	4293      	cmp	r3, r2
 8007572:	f040 80f8 	bne.w	8007766 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007576:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800757a:	2b20      	cmp	r3, #32
 800757c:	dc46      	bgt.n	800760c <UART_SetConfig+0x850>
 800757e:	2b02      	cmp	r3, #2
 8007580:	db75      	blt.n	800766e <UART_SetConfig+0x8b2>
 8007582:	3b02      	subs	r3, #2
 8007584:	2b1e      	cmp	r3, #30
 8007586:	d872      	bhi.n	800766e <UART_SetConfig+0x8b2>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <UART_SetConfig+0x7d4>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	08007613 	.word	0x08007613
 8007594:	0800766f 	.word	0x0800766f
 8007598:	0800761b 	.word	0x0800761b
 800759c:	0800766f 	.word	0x0800766f
 80075a0:	0800766f 	.word	0x0800766f
 80075a4:	0800766f 	.word	0x0800766f
 80075a8:	0800762b 	.word	0x0800762b
 80075ac:	0800766f 	.word	0x0800766f
 80075b0:	0800766f 	.word	0x0800766f
 80075b4:	0800766f 	.word	0x0800766f
 80075b8:	0800766f 	.word	0x0800766f
 80075bc:	0800766f 	.word	0x0800766f
 80075c0:	0800766f 	.word	0x0800766f
 80075c4:	0800766f 	.word	0x0800766f
 80075c8:	0800763b 	.word	0x0800763b
 80075cc:	0800766f 	.word	0x0800766f
 80075d0:	0800766f 	.word	0x0800766f
 80075d4:	0800766f 	.word	0x0800766f
 80075d8:	0800766f 	.word	0x0800766f
 80075dc:	0800766f 	.word	0x0800766f
 80075e0:	0800766f 	.word	0x0800766f
 80075e4:	0800766f 	.word	0x0800766f
 80075e8:	0800766f 	.word	0x0800766f
 80075ec:	0800766f 	.word	0x0800766f
 80075f0:	0800766f 	.word	0x0800766f
 80075f4:	0800766f 	.word	0x0800766f
 80075f8:	0800766f 	.word	0x0800766f
 80075fc:	0800766f 	.word	0x0800766f
 8007600:	0800766f 	.word	0x0800766f
 8007604:	0800766f 	.word	0x0800766f
 8007608:	08007661 	.word	0x08007661
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d02a      	beq.n	8007666 <UART_SetConfig+0x8aa>
 8007610:	e02d      	b.n	800766e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007612:	f7fd fbf1 	bl	8004df8 <HAL_RCCEx_GetD3PCLK1Freq>
 8007616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007618:	e02f      	b.n	800767a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800761a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800761e:	4618      	mov	r0, r3
 8007620:	f7fd fc00 	bl	8004e24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007628:	e027      	b.n	800767a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800762a:	f107 0318 	add.w	r3, r7, #24
 800762e:	4618      	mov	r0, r3
 8007630:	f7fd fd4c 	bl	80050cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007638:	e01f      	b.n	800767a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800763a:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <UART_SetConfig+0x904>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007646:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <UART_SetConfig+0x904>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	08db      	lsrs	r3, r3, #3
 800764c:	f003 0303 	and.w	r3, r3, #3
 8007650:	4a1d      	ldr	r2, [pc, #116]	; (80076c8 <UART_SetConfig+0x90c>)
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007658:	e00f      	b.n	800767a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800765a:	4b1b      	ldr	r3, [pc, #108]	; (80076c8 <UART_SetConfig+0x90c>)
 800765c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765e:	e00c      	b.n	800767a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007660:	4b1a      	ldr	r3, [pc, #104]	; (80076cc <UART_SetConfig+0x910>)
 8007662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007664:	e009      	b.n	800767a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800766a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800766c:	e005      	b.n	800767a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007678:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 81ee 	beq.w	8007a5e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	4a12      	ldr	r2, [pc, #72]	; (80076d0 <UART_SetConfig+0x914>)
 8007688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800768c:	461a      	mov	r2, r3
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	fbb3 f3f2 	udiv	r3, r3, r2
 8007694:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d305      	bcc.n	80076b2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d910      	bls.n	80076d4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076b8:	e1d1      	b.n	8007a5e <UART_SetConfig+0xca2>
 80076ba:	bf00      	nop
 80076bc:	40011c00 	.word	0x40011c00
 80076c0:	58024400 	.word	0x58024400
 80076c4:	58000c00 	.word	0x58000c00
 80076c8:	03d09000 	.word	0x03d09000
 80076cc:	003d0900 	.word	0x003d0900
 80076d0:	0800ba64 	.word	0x0800ba64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d6:	2200      	movs	r2, #0
 80076d8:	60bb      	str	r3, [r7, #8]
 80076da:	60fa      	str	r2, [r7, #12]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	4ac0      	ldr	r2, [pc, #768]	; (80079e4 <UART_SetConfig+0xc28>)
 80076e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2200      	movs	r2, #0
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076f6:	f7f9 f81f 	bl	8000738 <__aeabi_uldivmod>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4610      	mov	r0, r2
 8007700:	4619      	mov	r1, r3
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	020b      	lsls	r3, r1, #8
 800770c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007710:	0202      	lsls	r2, r0, #8
 8007712:	6979      	ldr	r1, [r7, #20]
 8007714:	6849      	ldr	r1, [r1, #4]
 8007716:	0849      	lsrs	r1, r1, #1
 8007718:	2000      	movs	r0, #0
 800771a:	460c      	mov	r4, r1
 800771c:	4605      	mov	r5, r0
 800771e:	eb12 0804 	adds.w	r8, r2, r4
 8007722:	eb43 0905 	adc.w	r9, r3, r5
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	469a      	mov	sl, r3
 800772e:	4693      	mov	fp, r2
 8007730:	4652      	mov	r2, sl
 8007732:	465b      	mov	r3, fp
 8007734:	4640      	mov	r0, r8
 8007736:	4649      	mov	r1, r9
 8007738:	f7f8 fffe 	bl	8000738 <__aeabi_uldivmod>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4613      	mov	r3, r2
 8007742:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800774a:	d308      	bcc.n	800775e <UART_SetConfig+0x9a2>
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007752:	d204      	bcs.n	800775e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800775a:	60da      	str	r2, [r3, #12]
 800775c:	e17f      	b.n	8007a5e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007764:	e17b      	b.n	8007a5e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776e:	f040 80bd 	bne.w	80078ec <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007772:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007776:	2b20      	cmp	r3, #32
 8007778:	dc48      	bgt.n	800780c <UART_SetConfig+0xa50>
 800777a:	2b00      	cmp	r3, #0
 800777c:	db7b      	blt.n	8007876 <UART_SetConfig+0xaba>
 800777e:	2b20      	cmp	r3, #32
 8007780:	d879      	bhi.n	8007876 <UART_SetConfig+0xaba>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x9cc>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007813 	.word	0x08007813
 800778c:	0800781b 	.word	0x0800781b
 8007790:	08007877 	.word	0x08007877
 8007794:	08007877 	.word	0x08007877
 8007798:	08007823 	.word	0x08007823
 800779c:	08007877 	.word	0x08007877
 80077a0:	08007877 	.word	0x08007877
 80077a4:	08007877 	.word	0x08007877
 80077a8:	08007833 	.word	0x08007833
 80077ac:	08007877 	.word	0x08007877
 80077b0:	08007877 	.word	0x08007877
 80077b4:	08007877 	.word	0x08007877
 80077b8:	08007877 	.word	0x08007877
 80077bc:	08007877 	.word	0x08007877
 80077c0:	08007877 	.word	0x08007877
 80077c4:	08007877 	.word	0x08007877
 80077c8:	08007843 	.word	0x08007843
 80077cc:	08007877 	.word	0x08007877
 80077d0:	08007877 	.word	0x08007877
 80077d4:	08007877 	.word	0x08007877
 80077d8:	08007877 	.word	0x08007877
 80077dc:	08007877 	.word	0x08007877
 80077e0:	08007877 	.word	0x08007877
 80077e4:	08007877 	.word	0x08007877
 80077e8:	08007877 	.word	0x08007877
 80077ec:	08007877 	.word	0x08007877
 80077f0:	08007877 	.word	0x08007877
 80077f4:	08007877 	.word	0x08007877
 80077f8:	08007877 	.word	0x08007877
 80077fc:	08007877 	.word	0x08007877
 8007800:	08007877 	.word	0x08007877
 8007804:	08007877 	.word	0x08007877
 8007808:	08007869 	.word	0x08007869
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d02e      	beq.n	800786e <UART_SetConfig+0xab2>
 8007810:	e031      	b.n	8007876 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007812:	f7fc fbcb 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8007816:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007818:	e033      	b.n	8007882 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781a:	f7fc fbdd 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 800781e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007820:	e02f      	b.n	8007882 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007826:	4618      	mov	r0, r3
 8007828:	f7fd fafc 	bl	8004e24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007830:	e027      	b.n	8007882 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007832:	f107 0318 	add.w	r3, r7, #24
 8007836:	4618      	mov	r0, r3
 8007838:	f7fd fc48 	bl	80050cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007840:	e01f      	b.n	8007882 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007842:	4b69      	ldr	r3, [pc, #420]	; (80079e8 <UART_SetConfig+0xc2c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800784e:	4b66      	ldr	r3, [pc, #408]	; (80079e8 <UART_SetConfig+0xc2c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	08db      	lsrs	r3, r3, #3
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	4a64      	ldr	r2, [pc, #400]	; (80079ec <UART_SetConfig+0xc30>)
 800785a:	fa22 f303 	lsr.w	r3, r2, r3
 800785e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007860:	e00f      	b.n	8007882 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8007862:	4b62      	ldr	r3, [pc, #392]	; (80079ec <UART_SetConfig+0xc30>)
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007866:	e00c      	b.n	8007882 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007868:	4b61      	ldr	r3, [pc, #388]	; (80079f0 <UART_SetConfig+0xc34>)
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800786c:	e009      	b.n	8007882 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800786e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007874:	e005      	b.n	8007882 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007880:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80ea 	beq.w	8007a5e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	4a55      	ldr	r2, [pc, #340]	; (80079e4 <UART_SetConfig+0xc28>)
 8007890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007894:	461a      	mov	r2, r3
 8007896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007898:	fbb3 f3f2 	udiv	r3, r3, r2
 800789c:	005a      	lsls	r2, r3, #1
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	441a      	add	r2, r3
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	2b0f      	cmp	r3, #15
 80078b4:	d916      	bls.n	80078e4 <UART_SetConfig+0xb28>
 80078b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078bc:	d212      	bcs.n	80078e4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f023 030f 	bic.w	r3, r3, #15
 80078c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078d6:	4313      	orrs	r3, r2
 80078d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80078e0:	60da      	str	r2, [r3, #12]
 80078e2:	e0bc      	b.n	8007a5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80078ea:	e0b8      	b.n	8007a5e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	dc4b      	bgt.n	800798c <UART_SetConfig+0xbd0>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f2c0 8087 	blt.w	8007a08 <UART_SetConfig+0xc4c>
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	f200 8084 	bhi.w	8007a08 <UART_SetConfig+0xc4c>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0xb4c>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	08007993 	.word	0x08007993
 800790c:	0800799b 	.word	0x0800799b
 8007910:	08007a09 	.word	0x08007a09
 8007914:	08007a09 	.word	0x08007a09
 8007918:	080079a3 	.word	0x080079a3
 800791c:	08007a09 	.word	0x08007a09
 8007920:	08007a09 	.word	0x08007a09
 8007924:	08007a09 	.word	0x08007a09
 8007928:	080079b3 	.word	0x080079b3
 800792c:	08007a09 	.word	0x08007a09
 8007930:	08007a09 	.word	0x08007a09
 8007934:	08007a09 	.word	0x08007a09
 8007938:	08007a09 	.word	0x08007a09
 800793c:	08007a09 	.word	0x08007a09
 8007940:	08007a09 	.word	0x08007a09
 8007944:	08007a09 	.word	0x08007a09
 8007948:	080079c3 	.word	0x080079c3
 800794c:	08007a09 	.word	0x08007a09
 8007950:	08007a09 	.word	0x08007a09
 8007954:	08007a09 	.word	0x08007a09
 8007958:	08007a09 	.word	0x08007a09
 800795c:	08007a09 	.word	0x08007a09
 8007960:	08007a09 	.word	0x08007a09
 8007964:	08007a09 	.word	0x08007a09
 8007968:	08007a09 	.word	0x08007a09
 800796c:	08007a09 	.word	0x08007a09
 8007970:	08007a09 	.word	0x08007a09
 8007974:	08007a09 	.word	0x08007a09
 8007978:	08007a09 	.word	0x08007a09
 800797c:	08007a09 	.word	0x08007a09
 8007980:	08007a09 	.word	0x08007a09
 8007984:	08007a09 	.word	0x08007a09
 8007988:	080079fb 	.word	0x080079fb
 800798c:	2b40      	cmp	r3, #64	; 0x40
 800798e:	d037      	beq.n	8007a00 <UART_SetConfig+0xc44>
 8007990:	e03a      	b.n	8007a08 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007992:	f7fc fb0b 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8007996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007998:	e03c      	b.n	8007a14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800799a:	f7fc fb1d 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 800799e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079a0:	e038      	b.n	8007a14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd fa3c 	bl	8004e24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079b0:	e030      	b.n	8007a14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079b2:	f107 0318 	add.w	r3, r7, #24
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fd fb88 	bl	80050cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c0:	e028      	b.n	8007a14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <UART_SetConfig+0xc2c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d012      	beq.n	80079f4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079ce:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <UART_SetConfig+0xc2c>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	08db      	lsrs	r3, r3, #3
 80079d4:	f003 0303 	and.w	r3, r3, #3
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <UART_SetConfig+0xc30>)
 80079da:	fa22 f303 	lsr.w	r3, r2, r3
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079e0:	e018      	b.n	8007a14 <UART_SetConfig+0xc58>
 80079e2:	bf00      	nop
 80079e4:	0800ba64 	.word	0x0800ba64
 80079e8:	58024400 	.word	0x58024400
 80079ec:	03d09000 	.word	0x03d09000
 80079f0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80079f4:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <UART_SetConfig+0xccc>)
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079f8:	e00c      	b.n	8007a14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <UART_SetConfig+0xcd0>)
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079fe:	e009      	b.n	8007a14 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a06:	e005      	b.n	8007a14 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a12:	bf00      	nop
    }

    if (pclk != 0U)
 8007a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d021      	beq.n	8007a5e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	4a1c      	ldr	r2, [pc, #112]	; (8007a90 <UART_SetConfig+0xcd4>)
 8007a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a28:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	441a      	add	r2, r3
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	2b0f      	cmp	r3, #15
 8007a42:	d909      	bls.n	8007a58 <UART_SetConfig+0xc9c>
 8007a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a4a:	d205      	bcs.n	8007a58 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60da      	str	r2, [r3, #12]
 8007a56:	e002      	b.n	8007a5e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	2200      	movs	r2, #0
 8007a72:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2200      	movs	r2, #0
 8007a78:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a7a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3748      	adds	r7, #72	; 0x48
 8007a82:	46bd      	mov	sp, r7
 8007a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a88:	03d09000 	.word	0x03d09000
 8007a8c:	003d0900 	.word	0x003d0900
 8007a90:	0800ba64 	.word	0x0800ba64

08007a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01a      	beq.n	8007baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b92:	d10a      	bne.n	8007baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	605a      	str	r2, [r3, #4]
  }
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007be8:	f7fa fa18 	bl	800201c <HAL_GetTick>
 8007bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d10e      	bne.n	8007c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f82f 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e025      	b.n	8007c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d10e      	bne.n	8007c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f819 	bl	8007c6e <UART_WaitOnFlagUntilTimeout>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d001      	beq.n	8007c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e00f      	b.n	8007c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b09c      	sub	sp, #112	; 0x70
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	60f8      	str	r0, [r7, #12]
 8007c76:	60b9      	str	r1, [r7, #8]
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c7e:	e0a9      	b.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c86:	f000 80a5 	beq.w	8007dd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c8a:	f7fa f9c7 	bl	800201c <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d302      	bcc.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d140      	bne.n	8007d22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e6      	bne.n	8007ca0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cdc:	e853 3f00 	ldrex	r3, [r3]
 8007ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cfa:	e841 2300 	strex	r3, r2, [r1]
 8007cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1e5      	bne.n	8007cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2220      	movs	r2, #32
 8007d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e069      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d051      	beq.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3e:	d149      	bne.n	8007dd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d68:	637b      	str	r3, [r7, #52]	; 0x34
 8007d6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e6      	bne.n	8007d4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3308      	adds	r3, #8
 8007d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	e853 3f00 	ldrex	r3, [r3]
 8007d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d9c:	623a      	str	r2, [r7, #32]
 8007d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	69f9      	ldr	r1, [r7, #28]
 8007da2:	6a3a      	ldr	r2, [r7, #32]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e5      	bne.n	8007d7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2220      	movs	r2, #32
 8007db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e010      	b.n	8007df6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69da      	ldr	r2, [r3, #28]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	f43f af46 	beq.w	8007c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3770      	adds	r7, #112	; 0x70
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b0a3      	sub	sp, #140	; 0x8c
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	88fa      	ldrh	r2, [r7, #6]
 8007e18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e32:	d10e      	bne.n	8007e52 <UART_Start_Receive_IT+0x52>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d105      	bne.n	8007e48 <UART_Start_Receive_IT+0x48>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e46:	e02d      	b.n	8007ea4 <UART_Start_Receive_IT+0xa4>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	22ff      	movs	r2, #255	; 0xff
 8007e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e50:	e028      	b.n	8007ea4 <UART_Start_Receive_IT+0xa4>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10d      	bne.n	8007e76 <UART_Start_Receive_IT+0x76>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d104      	bne.n	8007e6c <UART_Start_Receive_IT+0x6c>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	22ff      	movs	r2, #255	; 0xff
 8007e66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e6a:	e01b      	b.n	8007ea4 <UART_Start_Receive_IT+0xa4>
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	227f      	movs	r2, #127	; 0x7f
 8007e70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e74:	e016      	b.n	8007ea4 <UART_Start_Receive_IT+0xa4>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e7e:	d10d      	bne.n	8007e9c <UART_Start_Receive_IT+0x9c>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <UART_Start_Receive_IT+0x92>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	227f      	movs	r2, #127	; 0x7f
 8007e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e90:	e008      	b.n	8007ea4 <UART_Start_Receive_IT+0xa4>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	223f      	movs	r2, #63	; 0x3f
 8007e96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e9a:	e003      	b.n	8007ea4 <UART_Start_Receive_IT+0xa4>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2222      	movs	r2, #34	; 0x22
 8007eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ebe:	e853 3f00 	ldrex	r3, [r3]
 8007ec2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ec6:	f043 0301 	orr.w	r3, r3, #1
 8007eca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ed8:	673a      	str	r2, [r7, #112]	; 0x70
 8007eda:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ede:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007ee6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e3      	bne.n	8007eb4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef4:	d153      	bne.n	8007f9e <UART_Start_Receive_IT+0x19e>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007efc:	88fa      	ldrh	r2, [r7, #6]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d34d      	bcc.n	8007f9e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f0a:	d107      	bne.n	8007f1c <UART_Start_Receive_IT+0x11c>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	4a4b      	ldr	r2, [pc, #300]	; (8008044 <UART_Start_Receive_IT+0x244>)
 8007f18:	671a      	str	r2, [r3, #112]	; 0x70
 8007f1a:	e002      	b.n	8007f22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a4a      	ldr	r2, [pc, #296]	; (8008048 <UART_Start_Receive_IT+0x248>)
 8007f20:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d01a      	beq.n	8007f68 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f3a:	e853 3f00 	ldrex	r3, [r3]
 8007f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f56:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f5c:	e841 2300 	strex	r3, r2, [r1]
 8007f60:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e4      	bne.n	8007f32 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f88:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f8a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e5      	bne.n	8007f68 <UART_Start_Receive_IT+0x168>
 8007f9c:	e04a      	b.n	8008034 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa6:	d107      	bne.n	8007fb8 <UART_Start_Receive_IT+0x1b8>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4a26      	ldr	r2, [pc, #152]	; (800804c <UART_Start_Receive_IT+0x24c>)
 8007fb4:	671a      	str	r2, [r3, #112]	; 0x70
 8007fb6:	e002      	b.n	8007fbe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a25      	ldr	r2, [pc, #148]	; (8008050 <UART_Start_Receive_IT+0x250>)
 8007fbc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d019      	beq.n	8008002 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fe2:	677b      	str	r3, [r7, #116]	; 0x74
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
 8007fee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_Start_Receive_IT+0x1ce>
 8008000:	e018      	b.n	8008034 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	e853 3f00 	ldrex	r3, [r3]
 800800e:	613b      	str	r3, [r7, #16]
   return(result);
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f043 0320 	orr.w	r3, r3, #32
 8008016:	67bb      	str	r3, [r7, #120]	; 0x78
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008020:	623b      	str	r3, [r7, #32]
 8008022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	69f9      	ldr	r1, [r7, #28]
 8008026:	6a3a      	ldr	r2, [r7, #32]
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	61bb      	str	r3, [r7, #24]
   return(result);
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e6      	bne.n	8008002 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	378c      	adds	r7, #140	; 0x8c
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	0800875d 	.word	0x0800875d
 8008048:	08008465 	.word	0x08008465
 800804c:	08008303 	.word	0x08008303
 8008050:	080081a3 	.word	0x080081a3

08008054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008054:	b480      	push	{r7}
 8008056:	b095      	sub	sp, #84	; 0x54
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008070:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807a:	643b      	str	r3, [r7, #64]	; 0x40
 800807c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008080:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e6      	bne.n	800805c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6a3b      	ldr	r3, [r7, #32]
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	61fb      	str	r3, [r7, #28]
   return(result);
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	4b1e      	ldr	r3, [pc, #120]	; (800811c <UART_EndRxTransfer+0xc8>)
 80080a2:	4013      	ands	r3, r2
 80080a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e5      	bne.n	800808e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d118      	bne.n	80080fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f023 0310 	bic.w	r3, r3, #16
 80080de:	647b      	str	r3, [r7, #68]	; 0x44
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e8:	61bb      	str	r3, [r7, #24]
 80080ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6979      	ldr	r1, [r7, #20]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	613b      	str	r3, [r7, #16]
   return(result);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008110:	bf00      	nop
 8008112:	3754      	adds	r7, #84	; 0x54
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	effffffe 	.word	0xeffffffe

08008120 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7fe fe26 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	e853 3f00 	ldrex	r3, [r3]
 8008160:	60bb      	str	r3, [r7, #8]
   return(result);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008168:	61fb      	str	r3, [r7, #28]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	61bb      	str	r3, [r7, #24]
 8008174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008176:	6979      	ldr	r1, [r7, #20]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	e841 2300 	strex	r3, r2, [r1]
 800817e:	613b      	str	r3, [r7, #16]
   return(result);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e6      	bne.n	8008154 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f7fe fdf1 	bl	8006d7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800819a:	bf00      	nop
 800819c:	3720      	adds	r7, #32
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b096      	sub	sp, #88	; 0x58
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ba:	2b22      	cmp	r3, #34	; 0x22
 80081bc:	f040 8095 	bne.w	80082ea <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081ca:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081ce:	b2d9      	uxtb	r1, r3
 80081d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081da:	400a      	ands	r2, r1
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d178      	bne.n	80082fa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800821c:	653b      	str	r3, [r7, #80]	; 0x50
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008226:	647b      	str	r3, [r7, #68]	; 0x44
 8008228:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800822c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	e853 3f00 	ldrex	r3, [r3]
 8008248:	623b      	str	r3, [r7, #32]
   return(result);
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800825a:	633a      	str	r2, [r7, #48]	; 0x30
 800825c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008262:	e841 2300 	strex	r3, r2, [r1]
 8008266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1e5      	bne.n	800823a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d12e      	bne.n	80082e2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	e853 3f00 	ldrex	r3, [r3]
 8008296:	60fb      	str	r3, [r7, #12]
   return(result);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 0310 	bic.w	r3, r3, #16
 800829e:	64bb      	str	r3, [r7, #72]	; 0x48
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a8:	61fb      	str	r3, [r7, #28]
 80082aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ac:	69b9      	ldr	r1, [r7, #24]
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	e841 2300 	strex	r3, r2, [r1]
 80082b4:	617b      	str	r3, [r7, #20]
   return(result);
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1e6      	bne.n	800828a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	f003 0310 	and.w	r3, r3, #16
 80082c6:	2b10      	cmp	r3, #16
 80082c8:	d103      	bne.n	80082d2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2210      	movs	r2, #16
 80082d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7fe fd62 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082e0:	e00b      	b.n	80082fa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7f8 ff9a 	bl	800121c <HAL_UART_RxCpltCallback>
}
 80082e8:	e007      	b.n	80082fa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699a      	ldr	r2, [r3, #24]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f042 0208 	orr.w	r2, r2, #8
 80082f8:	619a      	str	r2, [r3, #24]
}
 80082fa:	bf00      	nop
 80082fc:	3758      	adds	r7, #88	; 0x58
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b096      	sub	sp, #88	; 0x58
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008310:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831a:	2b22      	cmp	r3, #34	; 0x22
 800831c:	f040 8095 	bne.w	800844a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008330:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008334:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008338:	4013      	ands	r3, r2
 800833a:	b29a      	uxth	r2, r3
 800833c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800833e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008344:	1c9a      	adds	r2, r3, #2
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d178      	bne.n	800845a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008370:	e853 3f00 	ldrex	r3, [r3]
 8008374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800837c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	461a      	mov	r2, r3
 8008384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008386:	643b      	str	r3, [r7, #64]	; 0x40
 8008388:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800838c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1e6      	bne.n	8008368 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f023 0301 	bic.w	r3, r3, #1
 80083b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e5      	bne.n	800839a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2220      	movs	r2, #32
 80083d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d12e      	bne.n	8008442 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	e853 3f00 	ldrex	r3, [r3]
 80083f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f023 0310 	bic.w	r3, r3, #16
 80083fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008408:	61bb      	str	r3, [r7, #24]
 800840a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6979      	ldr	r1, [r7, #20]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	e841 2300 	strex	r3, r2, [r1]
 8008414:	613b      	str	r3, [r7, #16]
   return(result);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d1e6      	bne.n	80083ea <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f003 0310 	and.w	r3, r3, #16
 8008426:	2b10      	cmp	r3, #16
 8008428:	d103      	bne.n	8008432 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2210      	movs	r2, #16
 8008430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008438:	4619      	mov	r1, r3
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7fe fcb2 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008440:	e00b      	b.n	800845a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7f8 feea 	bl	800121c <HAL_UART_RxCpltCallback>
}
 8008448:	e007      	b.n	800845a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	699a      	ldr	r2, [r3, #24]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0208 	orr.w	r2, r2, #8
 8008458:	619a      	str	r2, [r3, #24]
}
 800845a:	bf00      	nop
 800845c:	3758      	adds	r7, #88	; 0x58
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b0a6      	sub	sp, #152	; 0x98
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008472:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849a:	2b22      	cmp	r3, #34	; 0x22
 800849c:	f040 814d 	bne.w	800873a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084a6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084aa:	e0f4      	b.n	8008696 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084b6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80084ba:	b2d9      	uxtb	r1, r3
 80084bc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c6:	400a      	ands	r2, r1
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d0:	1c5a      	adds	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80084f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d053      	beq.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d011      	beq.n	800852e <UART_RxISR_8BIT_FIFOEN+0xca>
 800850a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800850e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2201      	movs	r2, #1
 800851c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008524:	f043 0201 	orr.w	r2, r3, #1
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800852e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d011      	beq.n	800855e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800853a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2202      	movs	r2, #2
 800854c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008554:	f043 0204 	orr.w	r2, r3, #4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800855e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d011      	beq.n	800858e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800856a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00b      	beq.n	800858e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2204      	movs	r2, #4
 800857c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008584:	f043 0202 	orr.w	r2, r3, #2
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d006      	beq.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7fe fbf9 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d171      	bne.n	8008696 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ba:	e853 3f00 	ldrex	r3, [r3]
 80085be:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80085c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80085d6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80085da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80085e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e4      	bne.n	80085b2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80085f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085fa:	4b56      	ldr	r3, [pc, #344]	; (8008754 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008608:	657a      	str	r2, [r7, #84]	; 0x54
 800860a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800860e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800862e:	2b01      	cmp	r3, #1
 8008630:	d12e      	bne.n	8008690 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	f023 0310 	bic.w	r3, r3, #16
 800864c:	67bb      	str	r3, [r7, #120]	; 0x78
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008656:	643b      	str	r3, [r7, #64]	; 0x40
 8008658:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800865c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e6      	bne.n	8008638 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	f003 0310 	and.w	r3, r3, #16
 8008674:	2b10      	cmp	r3, #16
 8008676:	d103      	bne.n	8008680 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2210      	movs	r2, #16
 800867e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008686:	4619      	mov	r1, r3
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7fe fb8b 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
 800868e:	e002      	b.n	8008696 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7f8 fdc3 	bl	800121c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008696:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800869a:	2b00      	cmp	r3, #0
 800869c:	d006      	beq.n	80086ac <UART_RxISR_8BIT_FIFOEN+0x248>
 800869e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086a2:	f003 0320 	and.w	r3, r3, #32
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f47f af00 	bne.w	80084ac <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d045      	beq.n	800874a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d23e      	bcs.n	800874a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3308      	adds	r3, #8
 80086d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	61fb      	str	r3, [r7, #28]
   return(result);
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e2:	673b      	str	r3, [r7, #112]	; 0x70
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80086ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086f4:	e841 2300 	strex	r3, r2, [r1]
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1e5      	bne.n	80086cc <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a15      	ldr	r2, [pc, #84]	; (8008758 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008704:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	60bb      	str	r3, [r7, #8]
   return(result);
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f043 0320 	orr.w	r3, r3, #32
 800871a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008724:	61bb      	str	r3, [r7, #24]
 8008726:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	6979      	ldr	r1, [r7, #20]
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	613b      	str	r3, [r7, #16]
   return(result);
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e6      	bne.n	8008706 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008738:	e007      	b.n	800874a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0208 	orr.w	r2, r2, #8
 8008748:	619a      	str	r2, [r3, #24]
}
 800874a:	bf00      	nop
 800874c:	3798      	adds	r7, #152	; 0x98
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	effffffe 	.word	0xeffffffe
 8008758:	080081a3 	.word	0x080081a3

0800875c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b0a8      	sub	sp, #160	; 0xa0
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800876a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008792:	2b22      	cmp	r3, #34	; 0x22
 8008794:	f040 8151 	bne.w	8008a3a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800879e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087a2:	e0f8      	b.n	8008996 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80087b6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80087ba:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80087be:	4013      	ands	r3, r2
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087cc:	1c9a      	adds	r2, r3, #2
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087d8:	b29b      	uxth	r3, r3
 80087da:	3b01      	subs	r3, #1
 80087dc:	b29a      	uxth	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80087ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d053      	beq.n	80088a2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d011      	beq.n	800882a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800880a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2201      	movs	r2, #1
 8008818:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008820:	f043 0201 	orr.w	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800882a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d011      	beq.n	800885a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008836:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2202      	movs	r2, #2
 8008848:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008850:	f043 0204 	orr.w	r2, r3, #4
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800885a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800885e:	f003 0304 	and.w	r3, r3, #4
 8008862:	2b00      	cmp	r3, #0
 8008864:	d011      	beq.n	800888a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2204      	movs	r2, #4
 8008878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008880:	f043 0202 	orr.w	r2, r3, #2
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d006      	beq.n	80088a2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7fe fa7b 	bl	8006d90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d173      	bne.n	8008996 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088d2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e4      	bne.n	80088ae <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f6:	4b57      	ldr	r3, [pc, #348]	; (8008a54 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008908:	65ba      	str	r2, [r7, #88]	; 0x58
 800890a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800890e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008910:	e841 2300 	strex	r3, r2, [r1]
 8008914:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008918:	2b00      	cmp	r3, #0
 800891a:	d1e3      	bne.n	80088e4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2220      	movs	r2, #32
 8008920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800892e:	2b01      	cmp	r3, #1
 8008930:	d12e      	bne.n	8008990 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008948:	f023 0310 	bic.w	r3, r3, #16
 800894c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008956:	647b      	str	r3, [r7, #68]	; 0x44
 8008958:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800895c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e6      	bne.n	8008938 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b10      	cmp	r3, #16
 8008976:	d103      	bne.n	8008980 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2210      	movs	r2, #16
 800897e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008986:	4619      	mov	r1, r3
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7fe fa0b 	bl	8006da4 <HAL_UARTEx_RxEventCallback>
 800898e:	e002      	b.n	8008996 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7f8 fc43 	bl	800121c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008996:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800899a:	2b00      	cmp	r3, #0
 800899c:	d006      	beq.n	80089ac <UART_RxISR_16BIT_FIFOEN+0x250>
 800899e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089a2:	f003 0320 	and.w	r3, r3, #32
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f47f aefc 	bne.w	80087a4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80089b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d045      	beq.n	8008a4a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089c4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d23e      	bcs.n	8008a4a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3308      	adds	r3, #8
 80089d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	e853 3f00 	ldrex	r3, [r3]
 80089da:	623b      	str	r3, [r7, #32]
   return(result);
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089e2:	677b      	str	r3, [r7, #116]	; 0x74
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80089ec:	633a      	str	r2, [r7, #48]	; 0x30
 80089ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f4:	e841 2300 	strex	r3, r2, [r1]
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e5      	bne.n	80089cc <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a15      	ldr	r2, [pc, #84]	; (8008a58 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008a04:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f043 0320 	orr.w	r3, r3, #32
 8008a1a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	461a      	mov	r2, r3
 8008a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a24:	61fb      	str	r3, [r7, #28]
 8008a26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a28:	69b9      	ldr	r1, [r7, #24]
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	e841 2300 	strex	r3, r2, [r1]
 8008a30:	617b      	str	r3, [r7, #20]
   return(result);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e6      	bne.n	8008a06 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a38:	e007      	b.n	8008a4a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	699a      	ldr	r2, [r3, #24]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0208 	orr.w	r2, r2, #8
 8008a48:	619a      	str	r2, [r3, #24]
}
 8008a4a:	bf00      	nop
 8008a4c:	37a0      	adds	r7, #160	; 0xa0
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	effffffe 	.word	0xeffffffe
 8008a58:	08008303 	.word	0x08008303

08008a5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a64:	bf00      	nop
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <HAL_UARTEx_DisableFifoMode+0x16>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	e027      	b.n	8008afe <HAL_UARTEx_DisableFifoMode+0x66>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2224      	movs	r2, #36	; 0x24
 8008aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f022 0201 	bic.w	r2, r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008adc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d101      	bne.n	8008b22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	e02d      	b.n	8008b7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2224      	movs	r2, #36	; 0x24
 8008b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0201 	bic.w	r2, r2, #1
 8008b48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f850 	bl	8008c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b9a:	2302      	movs	r3, #2
 8008b9c:	e02d      	b.n	8008bfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2224      	movs	r2, #36	; 0x24
 8008baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0201 	bic.w	r2, r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f812 	bl	8008c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d108      	bne.n	8008c26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c24:	e031      	b.n	8008c8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c26:	2310      	movs	r3, #16
 8008c28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c2a:	2310      	movs	r3, #16
 8008c2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	0e5b      	lsrs	r3, r3, #25
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	0f5b      	lsrs	r3, r3, #29
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	7b3a      	ldrb	r2, [r7, #12]
 8008c52:	4911      	ldr	r1, [pc, #68]	; (8008c98 <UARTEx_SetNbDataToProcess+0x94>)
 8008c54:	5c8a      	ldrb	r2, [r1, r2]
 8008c56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c5a:	7b3a      	ldrb	r2, [r7, #12]
 8008c5c:	490f      	ldr	r1, [pc, #60]	; (8008c9c <UARTEx_SetNbDataToProcess+0x98>)
 8008c5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	7b7a      	ldrb	r2, [r7, #13]
 8008c70:	4909      	ldr	r1, [pc, #36]	; (8008c98 <UARTEx_SetNbDataToProcess+0x94>)
 8008c72:	5c8a      	ldrb	r2, [r1, r2]
 8008c74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c78:	7b7a      	ldrb	r2, [r7, #13]
 8008c7a:	4908      	ldr	r1, [pc, #32]	; (8008c9c <UARTEx_SetNbDataToProcess+0x98>)
 8008c7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	0800ba7c 	.word	0x0800ba7c
 8008c9c:	0800ba84 	.word	0x0800ba84

08008ca0 <atof>:
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	f000 be2b 	b.w	80098fc <strtod>
	...

08008ca8 <__errno>:
 8008ca8:	4b01      	ldr	r3, [pc, #4]	; (8008cb0 <__errno+0x8>)
 8008caa:	6818      	ldr	r0, [r3, #0]
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	24000318 	.word	0x24000318

08008cb4 <__libc_init_array>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	4d0d      	ldr	r5, [pc, #52]	; (8008cec <__libc_init_array+0x38>)
 8008cb8:	4c0d      	ldr	r4, [pc, #52]	; (8008cf0 <__libc_init_array+0x3c>)
 8008cba:	1b64      	subs	r4, r4, r5
 8008cbc:	10a4      	asrs	r4, r4, #2
 8008cbe:	2600      	movs	r6, #0
 8008cc0:	42a6      	cmp	r6, r4
 8008cc2:	d109      	bne.n	8008cd8 <__libc_init_array+0x24>
 8008cc4:	4d0b      	ldr	r5, [pc, #44]	; (8008cf4 <__libc_init_array+0x40>)
 8008cc6:	4c0c      	ldr	r4, [pc, #48]	; (8008cf8 <__libc_init_array+0x44>)
 8008cc8:	f002 feae 	bl	800ba28 <_init>
 8008ccc:	1b64      	subs	r4, r4, r5
 8008cce:	10a4      	asrs	r4, r4, #2
 8008cd0:	2600      	movs	r6, #0
 8008cd2:	42a6      	cmp	r6, r4
 8008cd4:	d105      	bne.n	8008ce2 <__libc_init_array+0x2e>
 8008cd6:	bd70      	pop	{r4, r5, r6, pc}
 8008cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cdc:	4798      	blx	r3
 8008cde:	3601      	adds	r6, #1
 8008ce0:	e7ee      	b.n	8008cc0 <__libc_init_array+0xc>
 8008ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce6:	4798      	blx	r3
 8008ce8:	3601      	adds	r6, #1
 8008cea:	e7f2      	b.n	8008cd2 <__libc_init_array+0x1e>
 8008cec:	0800bec4 	.word	0x0800bec4
 8008cf0:	0800bec4 	.word	0x0800bec4
 8008cf4:	0800bec4 	.word	0x0800bec4
 8008cf8:	0800bec8 	.word	0x0800bec8

08008cfc <memset>:
 8008cfc:	4402      	add	r2, r0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d100      	bne.n	8008d06 <memset+0xa>
 8008d04:	4770      	bx	lr
 8008d06:	f803 1b01 	strb.w	r1, [r3], #1
 8008d0a:	e7f9      	b.n	8008d00 <memset+0x4>

08008d0c <strchr>:
 8008d0c:	b2c9      	uxtb	r1, r1
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d14:	b11a      	cbz	r2, 8008d1e <strchr+0x12>
 8008d16:	428a      	cmp	r2, r1
 8008d18:	d1f9      	bne.n	8008d0e <strchr+0x2>
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	4770      	bx	lr
 8008d1e:	2900      	cmp	r1, #0
 8008d20:	bf18      	it	ne
 8008d22:	2300      	movne	r3, #0
 8008d24:	e7f9      	b.n	8008d1a <strchr+0xe>

08008d26 <strcpy>:
 8008d26:	4603      	mov	r3, r0
 8008d28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d2c:	f803 2b01 	strb.w	r2, [r3], #1
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	d1f9      	bne.n	8008d28 <strcpy+0x2>
 8008d34:	4770      	bx	lr

08008d36 <strncpy>:
 8008d36:	b510      	push	{r4, lr}
 8008d38:	3901      	subs	r1, #1
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	b132      	cbz	r2, 8008d4c <strncpy+0x16>
 8008d3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d42:	f803 4b01 	strb.w	r4, [r3], #1
 8008d46:	3a01      	subs	r2, #1
 8008d48:	2c00      	cmp	r4, #0
 8008d4a:	d1f7      	bne.n	8008d3c <strncpy+0x6>
 8008d4c:	441a      	add	r2, r3
 8008d4e:	2100      	movs	r1, #0
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d100      	bne.n	8008d56 <strncpy+0x20>
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	f803 1b01 	strb.w	r1, [r3], #1
 8008d5a:	e7f9      	b.n	8008d50 <strncpy+0x1a>

08008d5c <sulp>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	4604      	mov	r4, r0
 8008d60:	460d      	mov	r5, r1
 8008d62:	4616      	mov	r6, r2
 8008d64:	ec45 4b10 	vmov	d0, r4, r5
 8008d68:	f001 fcd6 	bl	800a718 <__ulp>
 8008d6c:	b17e      	cbz	r6, 8008d8e <sulp+0x32>
 8008d6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	dd09      	ble.n	8008d8e <sulp+0x32>
 8008d7a:	051b      	lsls	r3, r3, #20
 8008d7c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008d80:	2000      	movs	r0, #0
 8008d82:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008d86:	ec41 0b17 	vmov	d7, r0, r1
 8008d8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008d8e:	bd70      	pop	{r4, r5, r6, pc}

08008d90 <_strtod_l>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	ed2d 8b0e 	vpush	{d8-d14}
 8008d98:	b097      	sub	sp, #92	; 0x5c
 8008d9a:	461f      	mov	r7, r3
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9312      	str	r3, [sp, #72]	; 0x48
 8008da0:	4ba1      	ldr	r3, [pc, #644]	; (8009028 <_strtod_l+0x298>)
 8008da2:	920d      	str	r2, [sp, #52]	; 0x34
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	9307      	str	r3, [sp, #28]
 8008da8:	4604      	mov	r4, r0
 8008daa:	4618      	mov	r0, r3
 8008dac:	468b      	mov	fp, r1
 8008dae:	f7f7 faaf 	bl	8000310 <strlen>
 8008db2:	f04f 0800 	mov.w	r8, #0
 8008db6:	4605      	mov	r5, r0
 8008db8:	f04f 0900 	mov.w	r9, #0
 8008dbc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008dc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dc2:	7813      	ldrb	r3, [r2, #0]
 8008dc4:	2b2b      	cmp	r3, #43	; 0x2b
 8008dc6:	d04d      	beq.n	8008e64 <_strtod_l+0xd4>
 8008dc8:	d83a      	bhi.n	8008e40 <_strtod_l+0xb0>
 8008dca:	2b0d      	cmp	r3, #13
 8008dcc:	d833      	bhi.n	8008e36 <_strtod_l+0xa6>
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d833      	bhi.n	8008e3a <_strtod_l+0xaa>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d03d      	beq.n	8008e52 <_strtod_l+0xc2>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9308      	str	r3, [sp, #32]
 8008dda:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008ddc:	7833      	ldrb	r3, [r6, #0]
 8008dde:	2b30      	cmp	r3, #48	; 0x30
 8008de0:	f040 80b0 	bne.w	8008f44 <_strtod_l+0x1b4>
 8008de4:	7873      	ldrb	r3, [r6, #1]
 8008de6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008dea:	2b58      	cmp	r3, #88	; 0x58
 8008dec:	d167      	bne.n	8008ebe <_strtod_l+0x12e>
 8008dee:	9b08      	ldr	r3, [sp, #32]
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	ab12      	add	r3, sp, #72	; 0x48
 8008df4:	9702      	str	r7, [sp, #8]
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	4a8c      	ldr	r2, [pc, #560]	; (800902c <_strtod_l+0x29c>)
 8008dfa:	ab13      	add	r3, sp, #76	; 0x4c
 8008dfc:	a911      	add	r1, sp, #68	; 0x44
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 fdf0 	bl	80099e4 <__gethex>
 8008e04:	f010 0507 	ands.w	r5, r0, #7
 8008e08:	4607      	mov	r7, r0
 8008e0a:	d005      	beq.n	8008e18 <_strtod_l+0x88>
 8008e0c:	2d06      	cmp	r5, #6
 8008e0e:	d12b      	bne.n	8008e68 <_strtod_l+0xd8>
 8008e10:	3601      	adds	r6, #1
 8008e12:	2300      	movs	r3, #0
 8008e14:	9611      	str	r6, [sp, #68]	; 0x44
 8008e16:	9308      	str	r3, [sp, #32]
 8008e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 854e 	bne.w	80098bc <_strtod_l+0xb2c>
 8008e20:	9b08      	ldr	r3, [sp, #32]
 8008e22:	b1e3      	cbz	r3, 8008e5e <_strtod_l+0xce>
 8008e24:	ec49 8b17 	vmov	d7, r8, r9
 8008e28:	eeb1 0b47 	vneg.f64	d0, d7
 8008e2c:	b017      	add	sp, #92	; 0x5c
 8008e2e:	ecbd 8b0e 	vpop	{d8-d14}
 8008e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d1cd      	bne.n	8008dd6 <_strtod_l+0x46>
 8008e3a:	3201      	adds	r2, #1
 8008e3c:	9211      	str	r2, [sp, #68]	; 0x44
 8008e3e:	e7bf      	b.n	8008dc0 <_strtod_l+0x30>
 8008e40:	2b2d      	cmp	r3, #45	; 0x2d
 8008e42:	d1c8      	bne.n	8008dd6 <_strtod_l+0x46>
 8008e44:	2301      	movs	r3, #1
 8008e46:	9308      	str	r3, [sp, #32]
 8008e48:	1c53      	adds	r3, r2, #1
 8008e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8008e4c:	7853      	ldrb	r3, [r2, #1]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1c3      	bne.n	8008dda <_strtod_l+0x4a>
 8008e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e54:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f040 852d 	bne.w	80098b8 <_strtod_l+0xb28>
 8008e5e:	ec49 8b10 	vmov	d0, r8, r9
 8008e62:	e7e3      	b.n	8008e2c <_strtod_l+0x9c>
 8008e64:	2300      	movs	r3, #0
 8008e66:	e7ee      	b.n	8008e46 <_strtod_l+0xb6>
 8008e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e6a:	b13a      	cbz	r2, 8008e7c <_strtod_l+0xec>
 8008e6c:	2135      	movs	r1, #53	; 0x35
 8008e6e:	a814      	add	r0, sp, #80	; 0x50
 8008e70:	f001 fd5a 	bl	800a928 <__copybits>
 8008e74:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e76:	4620      	mov	r0, r4
 8008e78:	f001 f91c 	bl	800a0b4 <_Bfree>
 8008e7c:	3d01      	subs	r5, #1
 8008e7e:	2d04      	cmp	r5, #4
 8008e80:	d806      	bhi.n	8008e90 <_strtod_l+0x100>
 8008e82:	e8df f005 	tbb	[pc, r5]
 8008e86:	030a      	.short	0x030a
 8008e88:	1714      	.short	0x1714
 8008e8a:	0a          	.byte	0x0a
 8008e8b:	00          	.byte	0x00
 8008e8c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008e90:	073f      	lsls	r7, r7, #28
 8008e92:	d5c1      	bpl.n	8008e18 <_strtod_l+0x88>
 8008e94:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008e98:	e7be      	b.n	8008e18 <_strtod_l+0x88>
 8008e9a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008e9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ea0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ea4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ea8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008eac:	e7f0      	b.n	8008e90 <_strtod_l+0x100>
 8008eae:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8009030 <_strtod_l+0x2a0>
 8008eb2:	e7ed      	b.n	8008e90 <_strtod_l+0x100>
 8008eb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008eb8:	f04f 38ff 	mov.w	r8, #4294967295
 8008ebc:	e7e8      	b.n	8008e90 <_strtod_l+0x100>
 8008ebe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	9211      	str	r2, [sp, #68]	; 0x44
 8008ec4:	785b      	ldrb	r3, [r3, #1]
 8008ec6:	2b30      	cmp	r3, #48	; 0x30
 8008ec8:	d0f9      	beq.n	8008ebe <_strtod_l+0x12e>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0a4      	beq.n	8008e18 <_strtod_l+0x88>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f04f 0a00 	mov.w	sl, #0
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ed8:	930a      	str	r3, [sp, #40]	; 0x28
 8008eda:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008ede:	f8cd a018 	str.w	sl, [sp, #24]
 8008ee2:	220a      	movs	r2, #10
 8008ee4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008ee6:	7807      	ldrb	r7, [r0, #0]
 8008ee8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008eec:	b2d9      	uxtb	r1, r3
 8008eee:	2909      	cmp	r1, #9
 8008ef0:	d92a      	bls.n	8008f48 <_strtod_l+0x1b8>
 8008ef2:	9907      	ldr	r1, [sp, #28]
 8008ef4:	462a      	mov	r2, r5
 8008ef6:	f001 fe1f 	bl	800ab38 <strncmp>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d033      	beq.n	8008f66 <_strtod_l+0x1d6>
 8008efe:	2000      	movs	r0, #0
 8008f00:	9b06      	ldr	r3, [sp, #24]
 8008f02:	463a      	mov	r2, r7
 8008f04:	4601      	mov	r1, r0
 8008f06:	4607      	mov	r7, r0
 8008f08:	2a65      	cmp	r2, #101	; 0x65
 8008f0a:	d001      	beq.n	8008f10 <_strtod_l+0x180>
 8008f0c:	2a45      	cmp	r2, #69	; 0x45
 8008f0e:	d117      	bne.n	8008f40 <_strtod_l+0x1b0>
 8008f10:	b91b      	cbnz	r3, 8008f1a <_strtod_l+0x18a>
 8008f12:	9b04      	ldr	r3, [sp, #16]
 8008f14:	4303      	orrs	r3, r0
 8008f16:	d09c      	beq.n	8008e52 <_strtod_l+0xc2>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008f1e:	f10b 0201 	add.w	r2, fp, #1
 8008f22:	9211      	str	r2, [sp, #68]	; 0x44
 8008f24:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008f28:	2a2b      	cmp	r2, #43	; 0x2b
 8008f2a:	d071      	beq.n	8009010 <_strtod_l+0x280>
 8008f2c:	2a2d      	cmp	r2, #45	; 0x2d
 8008f2e:	d077      	beq.n	8009020 <_strtod_l+0x290>
 8008f30:	f04f 0e00 	mov.w	lr, #0
 8008f34:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008f38:	2d09      	cmp	r5, #9
 8008f3a:	d97f      	bls.n	800903c <_strtod_l+0x2ac>
 8008f3c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008f40:	2500      	movs	r5, #0
 8008f42:	e09b      	b.n	800907c <_strtod_l+0x2ec>
 8008f44:	2300      	movs	r3, #0
 8008f46:	e7c3      	b.n	8008ed0 <_strtod_l+0x140>
 8008f48:	9906      	ldr	r1, [sp, #24]
 8008f4a:	2908      	cmp	r1, #8
 8008f4c:	bfdd      	ittte	le
 8008f4e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f50:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f54:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f56:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	3301      	adds	r3, #1
 8008f60:	9306      	str	r3, [sp, #24]
 8008f62:	9011      	str	r0, [sp, #68]	; 0x44
 8008f64:	e7be      	b.n	8008ee4 <_strtod_l+0x154>
 8008f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f68:	195a      	adds	r2, r3, r5
 8008f6a:	9211      	str	r2, [sp, #68]	; 0x44
 8008f6c:	5d5a      	ldrb	r2, [r3, r5]
 8008f6e:	9b06      	ldr	r3, [sp, #24]
 8008f70:	b3a3      	cbz	r3, 8008fdc <_strtod_l+0x24c>
 8008f72:	4607      	mov	r7, r0
 8008f74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f78:	2909      	cmp	r1, #9
 8008f7a:	d912      	bls.n	8008fa2 <_strtod_l+0x212>
 8008f7c:	2101      	movs	r1, #1
 8008f7e:	e7c3      	b.n	8008f08 <_strtod_l+0x178>
 8008f80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	9211      	str	r2, [sp, #68]	; 0x44
 8008f86:	785a      	ldrb	r2, [r3, #1]
 8008f88:	3001      	adds	r0, #1
 8008f8a:	2a30      	cmp	r2, #48	; 0x30
 8008f8c:	d0f8      	beq.n	8008f80 <_strtod_l+0x1f0>
 8008f8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008f92:	2b08      	cmp	r3, #8
 8008f94:	f200 8497 	bhi.w	80098c6 <_strtod_l+0xb36>
 8008f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f9c:	4607      	mov	r7, r0
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	3a30      	subs	r2, #48	; 0x30
 8008fa4:	f100 0101 	add.w	r1, r0, #1
 8008fa8:	d012      	beq.n	8008fd0 <_strtod_l+0x240>
 8008faa:	440f      	add	r7, r1
 8008fac:	eb00 0c03 	add.w	ip, r0, r3
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	250a      	movs	r5, #10
 8008fb4:	4561      	cmp	r1, ip
 8008fb6:	d113      	bne.n	8008fe0 <_strtod_l+0x250>
 8008fb8:	1819      	adds	r1, r3, r0
 8008fba:	2908      	cmp	r1, #8
 8008fbc:	f103 0301 	add.w	r3, r3, #1
 8008fc0:	4403      	add	r3, r0
 8008fc2:	dc1c      	bgt.n	8008ffe <_strtod_l+0x26e>
 8008fc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc6:	210a      	movs	r1, #10
 8008fc8:	fb01 2200 	mla	r2, r1, r0, r2
 8008fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8008fce:	2100      	movs	r1, #0
 8008fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fd2:	1c50      	adds	r0, r2, #1
 8008fd4:	9011      	str	r0, [sp, #68]	; 0x44
 8008fd6:	7852      	ldrb	r2, [r2, #1]
 8008fd8:	4608      	mov	r0, r1
 8008fda:	e7cb      	b.n	8008f74 <_strtod_l+0x1e4>
 8008fdc:	9806      	ldr	r0, [sp, #24]
 8008fde:	e7d4      	b.n	8008f8a <_strtod_l+0x1fa>
 8008fe0:	2908      	cmp	r1, #8
 8008fe2:	dc04      	bgt.n	8008fee <_strtod_l+0x25e>
 8008fe4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008fe6:	436e      	muls	r6, r5
 8008fe8:	9609      	str	r6, [sp, #36]	; 0x24
 8008fea:	3101      	adds	r1, #1
 8008fec:	e7e2      	b.n	8008fb4 <_strtod_l+0x224>
 8008fee:	f101 0e01 	add.w	lr, r1, #1
 8008ff2:	f1be 0f10 	cmp.w	lr, #16
 8008ff6:	bfd8      	it	le
 8008ff8:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008ffc:	e7f5      	b.n	8008fea <_strtod_l+0x25a>
 8008ffe:	2b10      	cmp	r3, #16
 8009000:	bfdc      	itt	le
 8009002:	210a      	movle	r1, #10
 8009004:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8009008:	e7e1      	b.n	8008fce <_strtod_l+0x23e>
 800900a:	2700      	movs	r7, #0
 800900c:	2101      	movs	r1, #1
 800900e:	e780      	b.n	8008f12 <_strtod_l+0x182>
 8009010:	f04f 0e00 	mov.w	lr, #0
 8009014:	f10b 0202 	add.w	r2, fp, #2
 8009018:	9211      	str	r2, [sp, #68]	; 0x44
 800901a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800901e:	e789      	b.n	8008f34 <_strtod_l+0x1a4>
 8009020:	f04f 0e01 	mov.w	lr, #1
 8009024:	e7f6      	b.n	8009014 <_strtod_l+0x284>
 8009026:	bf00      	nop
 8009028:	0800bb68 	.word	0x0800bb68
 800902c:	0800ba9c 	.word	0x0800ba9c
 8009030:	7ff00000 	.word	0x7ff00000
 8009034:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009036:	1c55      	adds	r5, r2, #1
 8009038:	9511      	str	r5, [sp, #68]	; 0x44
 800903a:	7852      	ldrb	r2, [r2, #1]
 800903c:	2a30      	cmp	r2, #48	; 0x30
 800903e:	d0f9      	beq.n	8009034 <_strtod_l+0x2a4>
 8009040:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009044:	2d08      	cmp	r5, #8
 8009046:	f63f af7b 	bhi.w	8008f40 <_strtod_l+0x1b0>
 800904a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800904e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009050:	9207      	str	r2, [sp, #28]
 8009052:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009054:	1c55      	adds	r5, r2, #1
 8009056:	9511      	str	r5, [sp, #68]	; 0x44
 8009058:	7852      	ldrb	r2, [r2, #1]
 800905a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800905e:	2e09      	cmp	r6, #9
 8009060:	d937      	bls.n	80090d2 <_strtod_l+0x342>
 8009062:	9e07      	ldr	r6, [sp, #28]
 8009064:	1bad      	subs	r5, r5, r6
 8009066:	2d08      	cmp	r5, #8
 8009068:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800906c:	dc02      	bgt.n	8009074 <_strtod_l+0x2e4>
 800906e:	4565      	cmp	r5, ip
 8009070:	bfa8      	it	ge
 8009072:	4665      	movge	r5, ip
 8009074:	f1be 0f00 	cmp.w	lr, #0
 8009078:	d000      	beq.n	800907c <_strtod_l+0x2ec>
 800907a:	426d      	negs	r5, r5
 800907c:	2b00      	cmp	r3, #0
 800907e:	d14d      	bne.n	800911c <_strtod_l+0x38c>
 8009080:	9b04      	ldr	r3, [sp, #16]
 8009082:	4303      	orrs	r3, r0
 8009084:	f47f aec8 	bne.w	8008e18 <_strtod_l+0x88>
 8009088:	2900      	cmp	r1, #0
 800908a:	f47f aee2 	bne.w	8008e52 <_strtod_l+0xc2>
 800908e:	2a69      	cmp	r2, #105	; 0x69
 8009090:	d027      	beq.n	80090e2 <_strtod_l+0x352>
 8009092:	dc24      	bgt.n	80090de <_strtod_l+0x34e>
 8009094:	2a49      	cmp	r2, #73	; 0x49
 8009096:	d024      	beq.n	80090e2 <_strtod_l+0x352>
 8009098:	2a4e      	cmp	r2, #78	; 0x4e
 800909a:	f47f aeda 	bne.w	8008e52 <_strtod_l+0xc2>
 800909e:	4996      	ldr	r1, [pc, #600]	; (80092f8 <_strtod_l+0x568>)
 80090a0:	a811      	add	r0, sp, #68	; 0x44
 80090a2:	f000 fef7 	bl	8009e94 <__match>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f aed3 	beq.w	8008e52 <_strtod_l+0xc2>
 80090ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b28      	cmp	r3, #40	; 0x28
 80090b2:	d12d      	bne.n	8009110 <_strtod_l+0x380>
 80090b4:	4991      	ldr	r1, [pc, #580]	; (80092fc <_strtod_l+0x56c>)
 80090b6:	aa14      	add	r2, sp, #80	; 0x50
 80090b8:	a811      	add	r0, sp, #68	; 0x44
 80090ba:	f000 feff 	bl	8009ebc <__hexnan>
 80090be:	2805      	cmp	r0, #5
 80090c0:	d126      	bne.n	8009110 <_strtod_l+0x380>
 80090c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090c4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80090c8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80090cc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80090d0:	e6a2      	b.n	8008e18 <_strtod_l+0x88>
 80090d2:	250a      	movs	r5, #10
 80090d4:	fb05 250c 	mla	r5, r5, ip, r2
 80090d8:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80090dc:	e7b9      	b.n	8009052 <_strtod_l+0x2c2>
 80090de:	2a6e      	cmp	r2, #110	; 0x6e
 80090e0:	e7db      	b.n	800909a <_strtod_l+0x30a>
 80090e2:	4987      	ldr	r1, [pc, #540]	; (8009300 <_strtod_l+0x570>)
 80090e4:	a811      	add	r0, sp, #68	; 0x44
 80090e6:	f000 fed5 	bl	8009e94 <__match>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f43f aeb1 	beq.w	8008e52 <_strtod_l+0xc2>
 80090f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090f2:	4984      	ldr	r1, [pc, #528]	; (8009304 <_strtod_l+0x574>)
 80090f4:	3b01      	subs	r3, #1
 80090f6:	a811      	add	r0, sp, #68	; 0x44
 80090f8:	9311      	str	r3, [sp, #68]	; 0x44
 80090fa:	f000 fecb 	bl	8009e94 <__match>
 80090fe:	b910      	cbnz	r0, 8009106 <_strtod_l+0x376>
 8009100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009102:	3301      	adds	r3, #1
 8009104:	9311      	str	r3, [sp, #68]	; 0x44
 8009106:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009318 <_strtod_l+0x588>
 800910a:	f04f 0800 	mov.w	r8, #0
 800910e:	e683      	b.n	8008e18 <_strtod_l+0x88>
 8009110:	487d      	ldr	r0, [pc, #500]	; (8009308 <_strtod_l+0x578>)
 8009112:	f001 fcf9 	bl	800ab08 <nan>
 8009116:	ec59 8b10 	vmov	r8, r9, d0
 800911a:	e67d      	b.n	8008e18 <_strtod_l+0x88>
 800911c:	1bea      	subs	r2, r5, r7
 800911e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8009122:	9207      	str	r2, [sp, #28]
 8009124:	9a06      	ldr	r2, [sp, #24]
 8009126:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800912a:	2a00      	cmp	r2, #0
 800912c:	bf08      	it	eq
 800912e:	461a      	moveq	r2, r3
 8009130:	2b10      	cmp	r3, #16
 8009132:	9206      	str	r2, [sp, #24]
 8009134:	461a      	mov	r2, r3
 8009136:	bfa8      	it	ge
 8009138:	2210      	movge	r2, #16
 800913a:	2b09      	cmp	r3, #9
 800913c:	ec59 8b17 	vmov	r8, r9, d7
 8009140:	dd0c      	ble.n	800915c <_strtod_l+0x3cc>
 8009142:	4972      	ldr	r1, [pc, #456]	; (800930c <_strtod_l+0x57c>)
 8009144:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009148:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800914c:	ee06 aa90 	vmov	s13, sl
 8009150:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8009154:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009158:	ec59 8b16 	vmov	r8, r9, d6
 800915c:	2b0f      	cmp	r3, #15
 800915e:	dc36      	bgt.n	80091ce <_strtod_l+0x43e>
 8009160:	9907      	ldr	r1, [sp, #28]
 8009162:	2900      	cmp	r1, #0
 8009164:	f43f ae58 	beq.w	8008e18 <_strtod_l+0x88>
 8009168:	dd23      	ble.n	80091b2 <_strtod_l+0x422>
 800916a:	2916      	cmp	r1, #22
 800916c:	dc0b      	bgt.n	8009186 <_strtod_l+0x3f6>
 800916e:	4b67      	ldr	r3, [pc, #412]	; (800930c <_strtod_l+0x57c>)
 8009170:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009174:	ed93 7b00 	vldr	d7, [r3]
 8009178:	ec49 8b16 	vmov	d6, r8, r9
 800917c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009180:	ec59 8b17 	vmov	r8, r9, d7
 8009184:	e648      	b.n	8008e18 <_strtod_l+0x88>
 8009186:	9807      	ldr	r0, [sp, #28]
 8009188:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800918c:	4281      	cmp	r1, r0
 800918e:	db1e      	blt.n	80091ce <_strtod_l+0x43e>
 8009190:	4a5e      	ldr	r2, [pc, #376]	; (800930c <_strtod_l+0x57c>)
 8009192:	f1c3 030f 	rsb	r3, r3, #15
 8009196:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800919a:	ed91 7b00 	vldr	d7, [r1]
 800919e:	ec49 8b16 	vmov	d6, r8, r9
 80091a2:	1ac3      	subs	r3, r0, r3
 80091a4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80091a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091ac:	ed92 6b00 	vldr	d6, [r2]
 80091b0:	e7e4      	b.n	800917c <_strtod_l+0x3ec>
 80091b2:	9907      	ldr	r1, [sp, #28]
 80091b4:	3116      	adds	r1, #22
 80091b6:	db0a      	blt.n	80091ce <_strtod_l+0x43e>
 80091b8:	4b54      	ldr	r3, [pc, #336]	; (800930c <_strtod_l+0x57c>)
 80091ba:	1b7d      	subs	r5, r7, r5
 80091bc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80091c0:	ed95 7b00 	vldr	d7, [r5]
 80091c4:	ec49 8b16 	vmov	d6, r8, r9
 80091c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80091cc:	e7d8      	b.n	8009180 <_strtod_l+0x3f0>
 80091ce:	9907      	ldr	r1, [sp, #28]
 80091d0:	1a9a      	subs	r2, r3, r2
 80091d2:	440a      	add	r2, r1
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	dd6f      	ble.n	80092b8 <_strtod_l+0x528>
 80091d8:	f012 000f 	ands.w	r0, r2, #15
 80091dc:	d00a      	beq.n	80091f4 <_strtod_l+0x464>
 80091de:	494b      	ldr	r1, [pc, #300]	; (800930c <_strtod_l+0x57c>)
 80091e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80091e4:	ed91 7b00 	vldr	d7, [r1]
 80091e8:	ec49 8b16 	vmov	d6, r8, r9
 80091ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091f0:	ec59 8b17 	vmov	r8, r9, d7
 80091f4:	f032 020f 	bics.w	r2, r2, #15
 80091f8:	d04f      	beq.n	800929a <_strtod_l+0x50a>
 80091fa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80091fe:	dd22      	ble.n	8009246 <_strtod_l+0x4b6>
 8009200:	2500      	movs	r5, #0
 8009202:	462e      	mov	r6, r5
 8009204:	9506      	str	r5, [sp, #24]
 8009206:	462f      	mov	r7, r5
 8009208:	2322      	movs	r3, #34	; 0x22
 800920a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009318 <_strtod_l+0x588>
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	f04f 0800 	mov.w	r8, #0
 8009214:	9b06      	ldr	r3, [sp, #24]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f43f adfe 	beq.w	8008e18 <_strtod_l+0x88>
 800921c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800921e:	4620      	mov	r0, r4
 8009220:	f000 ff48 	bl	800a0b4 <_Bfree>
 8009224:	4639      	mov	r1, r7
 8009226:	4620      	mov	r0, r4
 8009228:	f000 ff44 	bl	800a0b4 <_Bfree>
 800922c:	4631      	mov	r1, r6
 800922e:	4620      	mov	r0, r4
 8009230:	f000 ff40 	bl	800a0b4 <_Bfree>
 8009234:	9906      	ldr	r1, [sp, #24]
 8009236:	4620      	mov	r0, r4
 8009238:	f000 ff3c 	bl	800a0b4 <_Bfree>
 800923c:	4629      	mov	r1, r5
 800923e:	4620      	mov	r0, r4
 8009240:	f000 ff38 	bl	800a0b4 <_Bfree>
 8009244:	e5e8      	b.n	8008e18 <_strtod_l+0x88>
 8009246:	2000      	movs	r0, #0
 8009248:	ec49 8b17 	vmov	d7, r8, r9
 800924c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009310 <_strtod_l+0x580>
 8009250:	1112      	asrs	r2, r2, #4
 8009252:	4601      	mov	r1, r0
 8009254:	2a01      	cmp	r2, #1
 8009256:	dc23      	bgt.n	80092a0 <_strtod_l+0x510>
 8009258:	b108      	cbz	r0, 800925e <_strtod_l+0x4ce>
 800925a:	ec59 8b17 	vmov	r8, r9, d7
 800925e:	4a2c      	ldr	r2, [pc, #176]	; (8009310 <_strtod_l+0x580>)
 8009260:	482c      	ldr	r0, [pc, #176]	; (8009314 <_strtod_l+0x584>)
 8009262:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009266:	ed92 7b00 	vldr	d7, [r2]
 800926a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800926e:	ec49 8b16 	vmov	d6, r8, r9
 8009272:	4a29      	ldr	r2, [pc, #164]	; (8009318 <_strtod_l+0x588>)
 8009274:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009278:	ee17 1a90 	vmov	r1, s15
 800927c:	400a      	ands	r2, r1
 800927e:	4282      	cmp	r2, r0
 8009280:	ec59 8b17 	vmov	r8, r9, d7
 8009284:	d8bc      	bhi.n	8009200 <_strtod_l+0x470>
 8009286:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800928a:	4282      	cmp	r2, r0
 800928c:	bf86      	itte	hi
 800928e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800931c <_strtod_l+0x58c>
 8009292:	f04f 38ff 	movhi.w	r8, #4294967295
 8009296:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800929a:	2200      	movs	r2, #0
 800929c:	9204      	str	r2, [sp, #16]
 800929e:	e078      	b.n	8009392 <_strtod_l+0x602>
 80092a0:	07d6      	lsls	r6, r2, #31
 80092a2:	d504      	bpl.n	80092ae <_strtod_l+0x51e>
 80092a4:	ed9c 6b00 	vldr	d6, [ip]
 80092a8:	2001      	movs	r0, #1
 80092aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092ae:	3101      	adds	r1, #1
 80092b0:	1052      	asrs	r2, r2, #1
 80092b2:	f10c 0c08 	add.w	ip, ip, #8
 80092b6:	e7cd      	b.n	8009254 <_strtod_l+0x4c4>
 80092b8:	d0ef      	beq.n	800929a <_strtod_l+0x50a>
 80092ba:	4252      	negs	r2, r2
 80092bc:	f012 000f 	ands.w	r0, r2, #15
 80092c0:	d00a      	beq.n	80092d8 <_strtod_l+0x548>
 80092c2:	4912      	ldr	r1, [pc, #72]	; (800930c <_strtod_l+0x57c>)
 80092c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80092c8:	ed91 7b00 	vldr	d7, [r1]
 80092cc:	ec49 8b16 	vmov	d6, r8, r9
 80092d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80092d4:	ec59 8b17 	vmov	r8, r9, d7
 80092d8:	1112      	asrs	r2, r2, #4
 80092da:	d0de      	beq.n	800929a <_strtod_l+0x50a>
 80092dc:	2a1f      	cmp	r2, #31
 80092de:	dd1f      	ble.n	8009320 <_strtod_l+0x590>
 80092e0:	2500      	movs	r5, #0
 80092e2:	462e      	mov	r6, r5
 80092e4:	9506      	str	r5, [sp, #24]
 80092e6:	462f      	mov	r7, r5
 80092e8:	2322      	movs	r3, #34	; 0x22
 80092ea:	f04f 0800 	mov.w	r8, #0
 80092ee:	f04f 0900 	mov.w	r9, #0
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	e78e      	b.n	8009214 <_strtod_l+0x484>
 80092f6:	bf00      	nop
 80092f8:	0800ba99 	.word	0x0800ba99
 80092fc:	0800bab0 	.word	0x0800bab0
 8009300:	0800ba90 	.word	0x0800ba90
 8009304:	0800ba93 	.word	0x0800ba93
 8009308:	0800bd27 	.word	0x0800bd27
 800930c:	0800bc18 	.word	0x0800bc18
 8009310:	0800bbf0 	.word	0x0800bbf0
 8009314:	7ca00000 	.word	0x7ca00000
 8009318:	7ff00000 	.word	0x7ff00000
 800931c:	7fefffff 	.word	0x7fefffff
 8009320:	f012 0110 	ands.w	r1, r2, #16
 8009324:	bf18      	it	ne
 8009326:	216a      	movne	r1, #106	; 0x6a
 8009328:	9104      	str	r1, [sp, #16]
 800932a:	ec49 8b17 	vmov	d7, r8, r9
 800932e:	49be      	ldr	r1, [pc, #760]	; (8009628 <_strtod_l+0x898>)
 8009330:	2000      	movs	r0, #0
 8009332:	07d6      	lsls	r6, r2, #31
 8009334:	d504      	bpl.n	8009340 <_strtod_l+0x5b0>
 8009336:	ed91 6b00 	vldr	d6, [r1]
 800933a:	2001      	movs	r0, #1
 800933c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009340:	1052      	asrs	r2, r2, #1
 8009342:	f101 0108 	add.w	r1, r1, #8
 8009346:	d1f4      	bne.n	8009332 <_strtod_l+0x5a2>
 8009348:	b108      	cbz	r0, 800934e <_strtod_l+0x5be>
 800934a:	ec59 8b17 	vmov	r8, r9, d7
 800934e:	9a04      	ldr	r2, [sp, #16]
 8009350:	b1c2      	cbz	r2, 8009384 <_strtod_l+0x5f4>
 8009352:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8009356:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800935a:	2a00      	cmp	r2, #0
 800935c:	4648      	mov	r0, r9
 800935e:	dd11      	ble.n	8009384 <_strtod_l+0x5f4>
 8009360:	2a1f      	cmp	r2, #31
 8009362:	f340 812e 	ble.w	80095c2 <_strtod_l+0x832>
 8009366:	2a34      	cmp	r2, #52	; 0x34
 8009368:	bfde      	ittt	le
 800936a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800936e:	f04f 32ff 	movle.w	r2, #4294967295
 8009372:	fa02 f101 	lslle.w	r1, r2, r1
 8009376:	f04f 0800 	mov.w	r8, #0
 800937a:	bfcc      	ite	gt
 800937c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009380:	ea01 0900 	andle.w	r9, r1, r0
 8009384:	ec49 8b17 	vmov	d7, r8, r9
 8009388:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800938c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009390:	d0a6      	beq.n	80092e0 <_strtod_l+0x550>
 8009392:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009394:	9200      	str	r2, [sp, #0]
 8009396:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009398:	9a06      	ldr	r2, [sp, #24]
 800939a:	4620      	mov	r0, r4
 800939c:	f000 fef2 	bl	800a184 <__s2b>
 80093a0:	9006      	str	r0, [sp, #24]
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f43f af2c 	beq.w	8009200 <_strtod_l+0x470>
 80093a8:	9b07      	ldr	r3, [sp, #28]
 80093aa:	1b7d      	subs	r5, r7, r5
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	bfb4      	ite	lt
 80093b0:	462b      	movlt	r3, r5
 80093b2:	2300      	movge	r3, #0
 80093b4:	9309      	str	r3, [sp, #36]	; 0x24
 80093b6:	9b07      	ldr	r3, [sp, #28]
 80093b8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009608 <_strtod_l+0x878>
 80093bc:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009610 <_strtod_l+0x880>
 80093c0:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009618 <_strtod_l+0x888>
 80093c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093c8:	2500      	movs	r5, #0
 80093ca:	930c      	str	r3, [sp, #48]	; 0x30
 80093cc:	462e      	mov	r6, r5
 80093ce:	9b06      	ldr	r3, [sp, #24]
 80093d0:	4620      	mov	r0, r4
 80093d2:	6859      	ldr	r1, [r3, #4]
 80093d4:	f000 fe2e 	bl	800a034 <_Balloc>
 80093d8:	4607      	mov	r7, r0
 80093da:	2800      	cmp	r0, #0
 80093dc:	f43f af14 	beq.w	8009208 <_strtod_l+0x478>
 80093e0:	9b06      	ldr	r3, [sp, #24]
 80093e2:	691a      	ldr	r2, [r3, #16]
 80093e4:	3202      	adds	r2, #2
 80093e6:	f103 010c 	add.w	r1, r3, #12
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	300c      	adds	r0, #12
 80093ee:	f000 fe13 	bl	800a018 <memcpy>
 80093f2:	ec49 8b10 	vmov	d0, r8, r9
 80093f6:	aa14      	add	r2, sp, #80	; 0x50
 80093f8:	a913      	add	r1, sp, #76	; 0x4c
 80093fa:	4620      	mov	r0, r4
 80093fc:	f001 fa08 	bl	800a810 <__d2b>
 8009400:	ec49 8b18 	vmov	d8, r8, r9
 8009404:	9012      	str	r0, [sp, #72]	; 0x48
 8009406:	2800      	cmp	r0, #0
 8009408:	f43f aefe 	beq.w	8009208 <_strtod_l+0x478>
 800940c:	2101      	movs	r1, #1
 800940e:	4620      	mov	r0, r4
 8009410:	f000 ff52 	bl	800a2b8 <__i2b>
 8009414:	4606      	mov	r6, r0
 8009416:	2800      	cmp	r0, #0
 8009418:	f43f aef6 	beq.w	8009208 <_strtod_l+0x478>
 800941c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800941e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009420:	2b00      	cmp	r3, #0
 8009422:	bfab      	itete	ge
 8009424:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8009426:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009428:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800942c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009430:	bfac      	ite	ge
 8009432:	eb03 0b02 	addge.w	fp, r3, r2
 8009436:	eba2 0a03 	sublt.w	sl, r2, r3
 800943a:	9a04      	ldr	r2, [sp, #16]
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	440b      	add	r3, r1
 8009440:	4a7a      	ldr	r2, [pc, #488]	; (800962c <_strtod_l+0x89c>)
 8009442:	3b01      	subs	r3, #1
 8009444:	4293      	cmp	r3, r2
 8009446:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800944a:	f280 80cd 	bge.w	80095e8 <_strtod_l+0x858>
 800944e:	1ad2      	subs	r2, r2, r3
 8009450:	2a1f      	cmp	r2, #31
 8009452:	eba1 0102 	sub.w	r1, r1, r2
 8009456:	f04f 0001 	mov.w	r0, #1
 800945a:	f300 80b9 	bgt.w	80095d0 <_strtod_l+0x840>
 800945e:	fa00 f302 	lsl.w	r3, r0, r2
 8009462:	930b      	str	r3, [sp, #44]	; 0x2c
 8009464:	2300      	movs	r3, #0
 8009466:	930a      	str	r3, [sp, #40]	; 0x28
 8009468:	eb0b 0301 	add.w	r3, fp, r1
 800946c:	9a04      	ldr	r2, [sp, #16]
 800946e:	459b      	cmp	fp, r3
 8009470:	448a      	add	sl, r1
 8009472:	4492      	add	sl, r2
 8009474:	465a      	mov	r2, fp
 8009476:	bfa8      	it	ge
 8009478:	461a      	movge	r2, r3
 800947a:	4552      	cmp	r2, sl
 800947c:	bfa8      	it	ge
 800947e:	4652      	movge	r2, sl
 8009480:	2a00      	cmp	r2, #0
 8009482:	bfc2      	ittt	gt
 8009484:	1a9b      	subgt	r3, r3, r2
 8009486:	ebaa 0a02 	subgt.w	sl, sl, r2
 800948a:	ebab 0b02 	subgt.w	fp, fp, r2
 800948e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009490:	2a00      	cmp	r2, #0
 8009492:	dd18      	ble.n	80094c6 <_strtod_l+0x736>
 8009494:	4631      	mov	r1, r6
 8009496:	4620      	mov	r0, r4
 8009498:	930f      	str	r3, [sp, #60]	; 0x3c
 800949a:	f000 ffcd 	bl	800a438 <__pow5mult>
 800949e:	4606      	mov	r6, r0
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f43f aeb1 	beq.w	8009208 <_strtod_l+0x478>
 80094a6:	4601      	mov	r1, r0
 80094a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094aa:	4620      	mov	r0, r4
 80094ac:	f000 ff1a 	bl	800a2e4 <__multiply>
 80094b0:	900e      	str	r0, [sp, #56]	; 0x38
 80094b2:	2800      	cmp	r0, #0
 80094b4:	f43f aea8 	beq.w	8009208 <_strtod_l+0x478>
 80094b8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fdfa 	bl	800a0b4 <_Bfree>
 80094c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094c4:	9212      	str	r2, [sp, #72]	; 0x48
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f300 8093 	bgt.w	80095f2 <_strtod_l+0x862>
 80094cc:	9b07      	ldr	r3, [sp, #28]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	dd08      	ble.n	80094e4 <_strtod_l+0x754>
 80094d2:	4639      	mov	r1, r7
 80094d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 ffae 	bl	800a438 <__pow5mult>
 80094dc:	4607      	mov	r7, r0
 80094de:	2800      	cmp	r0, #0
 80094e0:	f43f ae92 	beq.w	8009208 <_strtod_l+0x478>
 80094e4:	f1ba 0f00 	cmp.w	sl, #0
 80094e8:	dd08      	ble.n	80094fc <_strtod_l+0x76c>
 80094ea:	4639      	mov	r1, r7
 80094ec:	4652      	mov	r2, sl
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 fffc 	bl	800a4ec <__lshift>
 80094f4:	4607      	mov	r7, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f43f ae86 	beq.w	8009208 <_strtod_l+0x478>
 80094fc:	f1bb 0f00 	cmp.w	fp, #0
 8009500:	dd08      	ble.n	8009514 <_strtod_l+0x784>
 8009502:	4631      	mov	r1, r6
 8009504:	465a      	mov	r2, fp
 8009506:	4620      	mov	r0, r4
 8009508:	f000 fff0 	bl	800a4ec <__lshift>
 800950c:	4606      	mov	r6, r0
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f ae7a 	beq.w	8009208 <_strtod_l+0x478>
 8009514:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009516:	463a      	mov	r2, r7
 8009518:	4620      	mov	r0, r4
 800951a:	f001 f873 	bl	800a604 <__mdiff>
 800951e:	4605      	mov	r5, r0
 8009520:	2800      	cmp	r0, #0
 8009522:	f43f ae71 	beq.w	8009208 <_strtod_l+0x478>
 8009526:	2300      	movs	r3, #0
 8009528:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800952c:	60c3      	str	r3, [r0, #12]
 800952e:	4631      	mov	r1, r6
 8009530:	f001 f84c 	bl	800a5cc <__mcmp>
 8009534:	2800      	cmp	r0, #0
 8009536:	da7d      	bge.n	8009634 <_strtod_l+0x8a4>
 8009538:	ea5a 0308 	orrs.w	r3, sl, r8
 800953c:	f040 80a3 	bne.w	8009686 <_strtod_l+0x8f6>
 8009540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009544:	2b00      	cmp	r3, #0
 8009546:	f040 809e 	bne.w	8009686 <_strtod_l+0x8f6>
 800954a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800954e:	0d1b      	lsrs	r3, r3, #20
 8009550:	051b      	lsls	r3, r3, #20
 8009552:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009556:	f240 8096 	bls.w	8009686 <_strtod_l+0x8f6>
 800955a:	696b      	ldr	r3, [r5, #20]
 800955c:	b91b      	cbnz	r3, 8009566 <_strtod_l+0x7d6>
 800955e:	692b      	ldr	r3, [r5, #16]
 8009560:	2b01      	cmp	r3, #1
 8009562:	f340 8090 	ble.w	8009686 <_strtod_l+0x8f6>
 8009566:	4629      	mov	r1, r5
 8009568:	2201      	movs	r2, #1
 800956a:	4620      	mov	r0, r4
 800956c:	f000 ffbe 	bl	800a4ec <__lshift>
 8009570:	4631      	mov	r1, r6
 8009572:	4605      	mov	r5, r0
 8009574:	f001 f82a 	bl	800a5cc <__mcmp>
 8009578:	2800      	cmp	r0, #0
 800957a:	f340 8084 	ble.w	8009686 <_strtod_l+0x8f6>
 800957e:	9904      	ldr	r1, [sp, #16]
 8009580:	4a2b      	ldr	r2, [pc, #172]	; (8009630 <_strtod_l+0x8a0>)
 8009582:	464b      	mov	r3, r9
 8009584:	2900      	cmp	r1, #0
 8009586:	f000 809d 	beq.w	80096c4 <_strtod_l+0x934>
 800958a:	ea02 0109 	and.w	r1, r2, r9
 800958e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009592:	f300 8097 	bgt.w	80096c4 <_strtod_l+0x934>
 8009596:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800959a:	f77f aea5 	ble.w	80092e8 <_strtod_l+0x558>
 800959e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009620 <_strtod_l+0x890>
 80095a2:	ec49 8b16 	vmov	d6, r8, r9
 80095a6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80095aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80095ae:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	bf08      	it	eq
 80095b6:	2322      	moveq	r3, #34	; 0x22
 80095b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80095bc:	bf08      	it	eq
 80095be:	6023      	streq	r3, [r4, #0]
 80095c0:	e62c      	b.n	800921c <_strtod_l+0x48c>
 80095c2:	f04f 31ff 	mov.w	r1, #4294967295
 80095c6:	fa01 f202 	lsl.w	r2, r1, r2
 80095ca:	ea02 0808 	and.w	r8, r2, r8
 80095ce:	e6d9      	b.n	8009384 <_strtod_l+0x5f4>
 80095d0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80095d4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80095d8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80095dc:	33e2      	adds	r3, #226	; 0xe2
 80095de:	fa00 f303 	lsl.w	r3, r0, r3
 80095e2:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80095e6:	e73f      	b.n	8009468 <_strtod_l+0x6d8>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2301      	movs	r3, #1
 80095ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095f0:	e73a      	b.n	8009468 <_strtod_l+0x6d8>
 80095f2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80095f4:	461a      	mov	r2, r3
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 ff78 	bl	800a4ec <__lshift>
 80095fc:	9012      	str	r0, [sp, #72]	; 0x48
 80095fe:	2800      	cmp	r0, #0
 8009600:	f47f af64 	bne.w	80094cc <_strtod_l+0x73c>
 8009604:	e600      	b.n	8009208 <_strtod_l+0x478>
 8009606:	bf00      	nop
 8009608:	94a03595 	.word	0x94a03595
 800960c:	3fcfffff 	.word	0x3fcfffff
 8009610:	94a03595 	.word	0x94a03595
 8009614:	3fdfffff 	.word	0x3fdfffff
 8009618:	35afe535 	.word	0x35afe535
 800961c:	3fe00000 	.word	0x3fe00000
 8009620:	00000000 	.word	0x00000000
 8009624:	39500000 	.word	0x39500000
 8009628:	0800bac8 	.word	0x0800bac8
 800962c:	fffffc02 	.word	0xfffffc02
 8009630:	7ff00000 	.word	0x7ff00000
 8009634:	46cb      	mov	fp, r9
 8009636:	d15f      	bne.n	80096f8 <_strtod_l+0x968>
 8009638:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800963c:	f1ba 0f00 	cmp.w	sl, #0
 8009640:	d02a      	beq.n	8009698 <_strtod_l+0x908>
 8009642:	4aa7      	ldr	r2, [pc, #668]	; (80098e0 <_strtod_l+0xb50>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d12b      	bne.n	80096a0 <_strtod_l+0x910>
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	4642      	mov	r2, r8
 800964c:	b1fb      	cbz	r3, 800968e <_strtod_l+0x8fe>
 800964e:	4ba5      	ldr	r3, [pc, #660]	; (80098e4 <_strtod_l+0xb54>)
 8009650:	ea09 0303 	and.w	r3, r9, r3
 8009654:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009658:	f04f 31ff 	mov.w	r1, #4294967295
 800965c:	d81a      	bhi.n	8009694 <_strtod_l+0x904>
 800965e:	0d1b      	lsrs	r3, r3, #20
 8009660:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009664:	fa01 f303 	lsl.w	r3, r1, r3
 8009668:	429a      	cmp	r2, r3
 800966a:	d119      	bne.n	80096a0 <_strtod_l+0x910>
 800966c:	4b9e      	ldr	r3, [pc, #632]	; (80098e8 <_strtod_l+0xb58>)
 800966e:	459b      	cmp	fp, r3
 8009670:	d102      	bne.n	8009678 <_strtod_l+0x8e8>
 8009672:	3201      	adds	r2, #1
 8009674:	f43f adc8 	beq.w	8009208 <_strtod_l+0x478>
 8009678:	4b9a      	ldr	r3, [pc, #616]	; (80098e4 <_strtod_l+0xb54>)
 800967a:	ea0b 0303 	and.w	r3, fp, r3
 800967e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009682:	f04f 0800 	mov.w	r8, #0
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d188      	bne.n	800959e <_strtod_l+0x80e>
 800968c:	e5c6      	b.n	800921c <_strtod_l+0x48c>
 800968e:	f04f 33ff 	mov.w	r3, #4294967295
 8009692:	e7e9      	b.n	8009668 <_strtod_l+0x8d8>
 8009694:	460b      	mov	r3, r1
 8009696:	e7e7      	b.n	8009668 <_strtod_l+0x8d8>
 8009698:	ea53 0308 	orrs.w	r3, r3, r8
 800969c:	f43f af6f 	beq.w	800957e <_strtod_l+0x7ee>
 80096a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a2:	b1cb      	cbz	r3, 80096d8 <_strtod_l+0x948>
 80096a4:	ea13 0f0b 	tst.w	r3, fp
 80096a8:	d0ed      	beq.n	8009686 <_strtod_l+0x8f6>
 80096aa:	9a04      	ldr	r2, [sp, #16]
 80096ac:	4640      	mov	r0, r8
 80096ae:	4649      	mov	r1, r9
 80096b0:	f1ba 0f00 	cmp.w	sl, #0
 80096b4:	d014      	beq.n	80096e0 <_strtod_l+0x950>
 80096b6:	f7ff fb51 	bl	8008d5c <sulp>
 80096ba:	ee38 7b00 	vadd.f64	d7, d8, d0
 80096be:	ec59 8b17 	vmov	r8, r9, d7
 80096c2:	e7e0      	b.n	8009686 <_strtod_l+0x8f6>
 80096c4:	4013      	ands	r3, r2
 80096c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80096ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80096d2:	f04f 38ff 	mov.w	r8, #4294967295
 80096d6:	e7d6      	b.n	8009686 <_strtod_l+0x8f6>
 80096d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096da:	ea13 0f08 	tst.w	r3, r8
 80096de:	e7e3      	b.n	80096a8 <_strtod_l+0x918>
 80096e0:	f7ff fb3c 	bl	8008d5c <sulp>
 80096e4:	ee38 0b40 	vsub.f64	d0, d8, d0
 80096e8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80096ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f0:	ec59 8b10 	vmov	r8, r9, d0
 80096f4:	d1c7      	bne.n	8009686 <_strtod_l+0x8f6>
 80096f6:	e5f7      	b.n	80092e8 <_strtod_l+0x558>
 80096f8:	4631      	mov	r1, r6
 80096fa:	4628      	mov	r0, r5
 80096fc:	f001 f8e4 	bl	800a8c8 <__ratio>
 8009700:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8009704:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800970c:	d865      	bhi.n	80097da <_strtod_l+0xa4a>
 800970e:	f1ba 0f00 	cmp.w	sl, #0
 8009712:	d042      	beq.n	800979a <_strtod_l+0xa0a>
 8009714:	4b75      	ldr	r3, [pc, #468]	; (80098ec <_strtod_l+0xb5c>)
 8009716:	2200      	movs	r2, #0
 8009718:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800971c:	4871      	ldr	r0, [pc, #452]	; (80098e4 <_strtod_l+0xb54>)
 800971e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80098f8 <_strtod_l+0xb68>
 8009722:	ea0b 0100 	and.w	r1, fp, r0
 8009726:	4561      	cmp	r1, ip
 8009728:	f040 808e 	bne.w	8009848 <_strtod_l+0xab8>
 800972c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009730:	ec49 8b10 	vmov	d0, r8, r9
 8009734:	ec43 2b1c 	vmov	d12, r2, r3
 8009738:	910a      	str	r1, [sp, #40]	; 0x28
 800973a:	f000 ffed 	bl	800a718 <__ulp>
 800973e:	ec49 8b1e 	vmov	d14, r8, r9
 8009742:	4868      	ldr	r0, [pc, #416]	; (80098e4 <_strtod_l+0xb54>)
 8009744:	eeac eb00 	vfma.f64	d14, d12, d0
 8009748:	ee1e 3a90 	vmov	r3, s29
 800974c:	4a68      	ldr	r2, [pc, #416]	; (80098f0 <_strtod_l+0xb60>)
 800974e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009750:	4018      	ands	r0, r3
 8009752:	4290      	cmp	r0, r2
 8009754:	ec59 8b1e 	vmov	r8, r9, d14
 8009758:	d94e      	bls.n	80097f8 <_strtod_l+0xa68>
 800975a:	ee18 3a90 	vmov	r3, s17
 800975e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009762:	4293      	cmp	r3, r2
 8009764:	d104      	bne.n	8009770 <_strtod_l+0x9e0>
 8009766:	ee18 3a10 	vmov	r3, s16
 800976a:	3301      	adds	r3, #1
 800976c:	f43f ad4c 	beq.w	8009208 <_strtod_l+0x478>
 8009770:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80098e8 <_strtod_l+0xb58>
 8009774:	f04f 38ff 	mov.w	r8, #4294967295
 8009778:	9912      	ldr	r1, [sp, #72]	; 0x48
 800977a:	4620      	mov	r0, r4
 800977c:	f000 fc9a 	bl	800a0b4 <_Bfree>
 8009780:	4639      	mov	r1, r7
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fc96 	bl	800a0b4 <_Bfree>
 8009788:	4631      	mov	r1, r6
 800978a:	4620      	mov	r0, r4
 800978c:	f000 fc92 	bl	800a0b4 <_Bfree>
 8009790:	4629      	mov	r1, r5
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fc8e 	bl	800a0b4 <_Bfree>
 8009798:	e619      	b.n	80093ce <_strtod_l+0x63e>
 800979a:	f1b8 0f00 	cmp.w	r8, #0
 800979e:	d112      	bne.n	80097c6 <_strtod_l+0xa36>
 80097a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097a4:	b9b3      	cbnz	r3, 80097d4 <_strtod_l+0xa44>
 80097a6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80097aa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80097ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80097b6:	bf58      	it	pl
 80097b8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80097bc:	eeb1 7b4d 	vneg.f64	d7, d13
 80097c0:	ec53 2b17 	vmov	r2, r3, d7
 80097c4:	e7aa      	b.n	800971c <_strtod_l+0x98c>
 80097c6:	f1b8 0f01 	cmp.w	r8, #1
 80097ca:	d103      	bne.n	80097d4 <_strtod_l+0xa44>
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	f43f ad8a 	beq.w	80092e8 <_strtod_l+0x558>
 80097d4:	4b47      	ldr	r3, [pc, #284]	; (80098f4 <_strtod_l+0xb64>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	e79e      	b.n	8009718 <_strtod_l+0x988>
 80097da:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80097de:	ee20 db0d 	vmul.f64	d13, d0, d13
 80097e2:	f1ba 0f00 	cmp.w	sl, #0
 80097e6:	d104      	bne.n	80097f2 <_strtod_l+0xa62>
 80097e8:	eeb1 7b4d 	vneg.f64	d7, d13
 80097ec:	ec53 2b17 	vmov	r2, r3, d7
 80097f0:	e794      	b.n	800971c <_strtod_l+0x98c>
 80097f2:	eeb0 7b4d 	vmov.f64	d7, d13
 80097f6:	e7f9      	b.n	80097ec <_strtod_l+0xa5c>
 80097f8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80097fc:	9b04      	ldr	r3, [sp, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1ba      	bne.n	8009778 <_strtod_l+0x9e8>
 8009802:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009806:	0d1b      	lsrs	r3, r3, #20
 8009808:	051b      	lsls	r3, r3, #20
 800980a:	4299      	cmp	r1, r3
 800980c:	d1b4      	bne.n	8009778 <_strtod_l+0x9e8>
 800980e:	ec51 0b1d 	vmov	r0, r1, d13
 8009812:	f7f6 ffa9 	bl	8000768 <__aeabi_d2lz>
 8009816:	f7f6 ff61 	bl	80006dc <__aeabi_l2d>
 800981a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800981e:	ec41 0b17 	vmov	d7, r0, r1
 8009822:	ea43 0308 	orr.w	r3, r3, r8
 8009826:	ea53 030a 	orrs.w	r3, r3, sl
 800982a:	ee3d db47 	vsub.f64	d13, d13, d7
 800982e:	d03c      	beq.n	80098aa <_strtod_l+0xb1a>
 8009830:	eeb4 dbca 	vcmpe.f64	d13, d10
 8009834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009838:	f53f acf0 	bmi.w	800921c <_strtod_l+0x48c>
 800983c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009844:	dd98      	ble.n	8009778 <_strtod_l+0x9e8>
 8009846:	e4e9      	b.n	800921c <_strtod_l+0x48c>
 8009848:	9804      	ldr	r0, [sp, #16]
 800984a:	b1f0      	cbz	r0, 800988a <_strtod_l+0xafa>
 800984c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009850:	d81b      	bhi.n	800988a <_strtod_l+0xafa>
 8009852:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80098d8 <_strtod_l+0xb48>
 8009856:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985e:	d811      	bhi.n	8009884 <_strtod_l+0xaf4>
 8009860:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8009864:	ee1d 3a10 	vmov	r3, s26
 8009868:	2b01      	cmp	r3, #1
 800986a:	bf38      	it	cc
 800986c:	2301      	movcc	r3, #1
 800986e:	ee0d 3a10 	vmov	s26, r3
 8009872:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8009876:	f1ba 0f00 	cmp.w	sl, #0
 800987a:	d113      	bne.n	80098a4 <_strtod_l+0xb14>
 800987c:	eeb1 7b4d 	vneg.f64	d7, d13
 8009880:	ec53 2b17 	vmov	r2, r3, d7
 8009884:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009888:	1a43      	subs	r3, r0, r1
 800988a:	eeb0 0b48 	vmov.f64	d0, d8
 800988e:	ec43 2b1c 	vmov	d12, r2, r3
 8009892:	910a      	str	r1, [sp, #40]	; 0x28
 8009894:	f000 ff40 	bl	800a718 <__ulp>
 8009898:	990a      	ldr	r1, [sp, #40]	; 0x28
 800989a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800989e:	ec59 8b18 	vmov	r8, r9, d8
 80098a2:	e7ab      	b.n	80097fc <_strtod_l+0xa6c>
 80098a4:	eeb0 7b4d 	vmov.f64	d7, d13
 80098a8:	e7ea      	b.n	8009880 <_strtod_l+0xaf0>
 80098aa:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80098ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b2:	f57f af61 	bpl.w	8009778 <_strtod_l+0x9e8>
 80098b6:	e4b1      	b.n	800921c <_strtod_l+0x48c>
 80098b8:	2300      	movs	r3, #0
 80098ba:	9308      	str	r3, [sp, #32]
 80098bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	f7ff baad 	b.w	8008e20 <_strtod_l+0x90>
 80098c6:	2a65      	cmp	r2, #101	; 0x65
 80098c8:	f43f ab9f 	beq.w	800900a <_strtod_l+0x27a>
 80098cc:	2a45      	cmp	r2, #69	; 0x45
 80098ce:	f43f ab9c 	beq.w	800900a <_strtod_l+0x27a>
 80098d2:	2101      	movs	r1, #1
 80098d4:	f7ff bbd4 	b.w	8009080 <_strtod_l+0x2f0>
 80098d8:	ffc00000 	.word	0xffc00000
 80098dc:	41dfffff 	.word	0x41dfffff
 80098e0:	000fffff 	.word	0x000fffff
 80098e4:	7ff00000 	.word	0x7ff00000
 80098e8:	7fefffff 	.word	0x7fefffff
 80098ec:	3ff00000 	.word	0x3ff00000
 80098f0:	7c9fffff 	.word	0x7c9fffff
 80098f4:	bff00000 	.word	0xbff00000
 80098f8:	7fe00000 	.word	0x7fe00000

080098fc <strtod>:
 80098fc:	460a      	mov	r2, r1
 80098fe:	4601      	mov	r1, r0
 8009900:	4802      	ldr	r0, [pc, #8]	; (800990c <strtod+0x10>)
 8009902:	4b03      	ldr	r3, [pc, #12]	; (8009910 <strtod+0x14>)
 8009904:	6800      	ldr	r0, [r0, #0]
 8009906:	f7ff ba43 	b.w	8008d90 <_strtod_l>
 800990a:	bf00      	nop
 800990c:	24000318 	.word	0x24000318
 8009910:	24000380 	.word	0x24000380

08009914 <rshift>:
 8009914:	6903      	ldr	r3, [r0, #16]
 8009916:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800991a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800991e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009922:	f100 0414 	add.w	r4, r0, #20
 8009926:	dd45      	ble.n	80099b4 <rshift+0xa0>
 8009928:	f011 011f 	ands.w	r1, r1, #31
 800992c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009930:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009934:	d10c      	bne.n	8009950 <rshift+0x3c>
 8009936:	f100 0710 	add.w	r7, r0, #16
 800993a:	4629      	mov	r1, r5
 800993c:	42b1      	cmp	r1, r6
 800993e:	d334      	bcc.n	80099aa <rshift+0x96>
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	1eea      	subs	r2, r5, #3
 8009946:	4296      	cmp	r6, r2
 8009948:	bf38      	it	cc
 800994a:	2300      	movcc	r3, #0
 800994c:	4423      	add	r3, r4
 800994e:	e015      	b.n	800997c <rshift+0x68>
 8009950:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009954:	f1c1 0820 	rsb	r8, r1, #32
 8009958:	40cf      	lsrs	r7, r1
 800995a:	f105 0e04 	add.w	lr, r5, #4
 800995e:	46a1      	mov	r9, r4
 8009960:	4576      	cmp	r6, lr
 8009962:	46f4      	mov	ip, lr
 8009964:	d815      	bhi.n	8009992 <rshift+0x7e>
 8009966:	1a9a      	subs	r2, r3, r2
 8009968:	0092      	lsls	r2, r2, #2
 800996a:	3a04      	subs	r2, #4
 800996c:	3501      	adds	r5, #1
 800996e:	42ae      	cmp	r6, r5
 8009970:	bf38      	it	cc
 8009972:	2200      	movcc	r2, #0
 8009974:	18a3      	adds	r3, r4, r2
 8009976:	50a7      	str	r7, [r4, r2]
 8009978:	b107      	cbz	r7, 800997c <rshift+0x68>
 800997a:	3304      	adds	r3, #4
 800997c:	1b1a      	subs	r2, r3, r4
 800997e:	42a3      	cmp	r3, r4
 8009980:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009984:	bf08      	it	eq
 8009986:	2300      	moveq	r3, #0
 8009988:	6102      	str	r2, [r0, #16]
 800998a:	bf08      	it	eq
 800998c:	6143      	streq	r3, [r0, #20]
 800998e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009992:	f8dc c000 	ldr.w	ip, [ip]
 8009996:	fa0c fc08 	lsl.w	ip, ip, r8
 800999a:	ea4c 0707 	orr.w	r7, ip, r7
 800999e:	f849 7b04 	str.w	r7, [r9], #4
 80099a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099a6:	40cf      	lsrs	r7, r1
 80099a8:	e7da      	b.n	8009960 <rshift+0x4c>
 80099aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80099ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80099b2:	e7c3      	b.n	800993c <rshift+0x28>
 80099b4:	4623      	mov	r3, r4
 80099b6:	e7e1      	b.n	800997c <rshift+0x68>

080099b8 <__hexdig_fun>:
 80099b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80099bc:	2b09      	cmp	r3, #9
 80099be:	d802      	bhi.n	80099c6 <__hexdig_fun+0xe>
 80099c0:	3820      	subs	r0, #32
 80099c2:	b2c0      	uxtb	r0, r0
 80099c4:	4770      	bx	lr
 80099c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80099ca:	2b05      	cmp	r3, #5
 80099cc:	d801      	bhi.n	80099d2 <__hexdig_fun+0x1a>
 80099ce:	3847      	subs	r0, #71	; 0x47
 80099d0:	e7f7      	b.n	80099c2 <__hexdig_fun+0xa>
 80099d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	d801      	bhi.n	80099de <__hexdig_fun+0x26>
 80099da:	3827      	subs	r0, #39	; 0x27
 80099dc:	e7f1      	b.n	80099c2 <__hexdig_fun+0xa>
 80099de:	2000      	movs	r0, #0
 80099e0:	4770      	bx	lr
	...

080099e4 <__gethex>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	ed2d 8b02 	vpush	{d8}
 80099ec:	b089      	sub	sp, #36	; 0x24
 80099ee:	ee08 0a10 	vmov	s16, r0
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	4bb4      	ldr	r3, [pc, #720]	; (8009cc8 <__gethex+0x2e4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	4618      	mov	r0, r3
 80099fc:	468b      	mov	fp, r1
 80099fe:	4690      	mov	r8, r2
 8009a00:	f7f6 fc86 	bl	8000310 <strlen>
 8009a04:	9b01      	ldr	r3, [sp, #4]
 8009a06:	f8db 2000 	ldr.w	r2, [fp]
 8009a0a:	4403      	add	r3, r0
 8009a0c:	4682      	mov	sl, r0
 8009a0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	1c93      	adds	r3, r2, #2
 8009a16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a1e:	32fe      	adds	r2, #254	; 0xfe
 8009a20:	18d1      	adds	r1, r2, r3
 8009a22:	461f      	mov	r7, r3
 8009a24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a28:	9100      	str	r1, [sp, #0]
 8009a2a:	2830      	cmp	r0, #48	; 0x30
 8009a2c:	d0f8      	beq.n	8009a20 <__gethex+0x3c>
 8009a2e:	f7ff ffc3 	bl	80099b8 <__hexdig_fun>
 8009a32:	4604      	mov	r4, r0
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d13a      	bne.n	8009aae <__gethex+0xca>
 8009a38:	9901      	ldr	r1, [sp, #4]
 8009a3a:	4652      	mov	r2, sl
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f001 f87b 	bl	800ab38 <strncmp>
 8009a42:	4605      	mov	r5, r0
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d168      	bne.n	8009b1a <__gethex+0x136>
 8009a48:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009a4c:	eb07 060a 	add.w	r6, r7, sl
 8009a50:	f7ff ffb2 	bl	80099b8 <__hexdig_fun>
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d062      	beq.n	8009b1e <__gethex+0x13a>
 8009a58:	4633      	mov	r3, r6
 8009a5a:	7818      	ldrb	r0, [r3, #0]
 8009a5c:	2830      	cmp	r0, #48	; 0x30
 8009a5e:	461f      	mov	r7, r3
 8009a60:	f103 0301 	add.w	r3, r3, #1
 8009a64:	d0f9      	beq.n	8009a5a <__gethex+0x76>
 8009a66:	f7ff ffa7 	bl	80099b8 <__hexdig_fun>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	fab0 f480 	clz	r4, r0
 8009a70:	0964      	lsrs	r4, r4, #5
 8009a72:	4635      	mov	r5, r6
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	463a      	mov	r2, r7
 8009a78:	4616      	mov	r6, r2
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	7830      	ldrb	r0, [r6, #0]
 8009a7e:	f7ff ff9b 	bl	80099b8 <__hexdig_fun>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d1f8      	bne.n	8009a78 <__gethex+0x94>
 8009a86:	9901      	ldr	r1, [sp, #4]
 8009a88:	4652      	mov	r2, sl
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f001 f854 	bl	800ab38 <strncmp>
 8009a90:	b980      	cbnz	r0, 8009ab4 <__gethex+0xd0>
 8009a92:	b94d      	cbnz	r5, 8009aa8 <__gethex+0xc4>
 8009a94:	eb06 050a 	add.w	r5, r6, sl
 8009a98:	462a      	mov	r2, r5
 8009a9a:	4616      	mov	r6, r2
 8009a9c:	3201      	adds	r2, #1
 8009a9e:	7830      	ldrb	r0, [r6, #0]
 8009aa0:	f7ff ff8a 	bl	80099b8 <__hexdig_fun>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	d1f8      	bne.n	8009a9a <__gethex+0xb6>
 8009aa8:	1bad      	subs	r5, r5, r6
 8009aaa:	00ad      	lsls	r5, r5, #2
 8009aac:	e004      	b.n	8009ab8 <__gethex+0xd4>
 8009aae:	2400      	movs	r4, #0
 8009ab0:	4625      	mov	r5, r4
 8009ab2:	e7e0      	b.n	8009a76 <__gethex+0x92>
 8009ab4:	2d00      	cmp	r5, #0
 8009ab6:	d1f7      	bne.n	8009aa8 <__gethex+0xc4>
 8009ab8:	7833      	ldrb	r3, [r6, #0]
 8009aba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009abe:	2b50      	cmp	r3, #80	; 0x50
 8009ac0:	d13b      	bne.n	8009b3a <__gethex+0x156>
 8009ac2:	7873      	ldrb	r3, [r6, #1]
 8009ac4:	2b2b      	cmp	r3, #43	; 0x2b
 8009ac6:	d02c      	beq.n	8009b22 <__gethex+0x13e>
 8009ac8:	2b2d      	cmp	r3, #45	; 0x2d
 8009aca:	d02e      	beq.n	8009b2a <__gethex+0x146>
 8009acc:	1c71      	adds	r1, r6, #1
 8009ace:	f04f 0900 	mov.w	r9, #0
 8009ad2:	7808      	ldrb	r0, [r1, #0]
 8009ad4:	f7ff ff70 	bl	80099b8 <__hexdig_fun>
 8009ad8:	1e43      	subs	r3, r0, #1
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b18      	cmp	r3, #24
 8009ade:	d82c      	bhi.n	8009b3a <__gethex+0x156>
 8009ae0:	f1a0 0210 	sub.w	r2, r0, #16
 8009ae4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ae8:	f7ff ff66 	bl	80099b8 <__hexdig_fun>
 8009aec:	1e43      	subs	r3, r0, #1
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b18      	cmp	r3, #24
 8009af2:	d91d      	bls.n	8009b30 <__gethex+0x14c>
 8009af4:	f1b9 0f00 	cmp.w	r9, #0
 8009af8:	d000      	beq.n	8009afc <__gethex+0x118>
 8009afa:	4252      	negs	r2, r2
 8009afc:	4415      	add	r5, r2
 8009afe:	f8cb 1000 	str.w	r1, [fp]
 8009b02:	b1e4      	cbz	r4, 8009b3e <__gethex+0x15a>
 8009b04:	9b00      	ldr	r3, [sp, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	bf14      	ite	ne
 8009b0a:	2700      	movne	r7, #0
 8009b0c:	2706      	moveq	r7, #6
 8009b0e:	4638      	mov	r0, r7
 8009b10:	b009      	add	sp, #36	; 0x24
 8009b12:	ecbd 8b02 	vpop	{d8}
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1a:	463e      	mov	r6, r7
 8009b1c:	4625      	mov	r5, r4
 8009b1e:	2401      	movs	r4, #1
 8009b20:	e7ca      	b.n	8009ab8 <__gethex+0xd4>
 8009b22:	f04f 0900 	mov.w	r9, #0
 8009b26:	1cb1      	adds	r1, r6, #2
 8009b28:	e7d3      	b.n	8009ad2 <__gethex+0xee>
 8009b2a:	f04f 0901 	mov.w	r9, #1
 8009b2e:	e7fa      	b.n	8009b26 <__gethex+0x142>
 8009b30:	230a      	movs	r3, #10
 8009b32:	fb03 0202 	mla	r2, r3, r2, r0
 8009b36:	3a10      	subs	r2, #16
 8009b38:	e7d4      	b.n	8009ae4 <__gethex+0x100>
 8009b3a:	4631      	mov	r1, r6
 8009b3c:	e7df      	b.n	8009afe <__gethex+0x11a>
 8009b3e:	1bf3      	subs	r3, r6, r7
 8009b40:	3b01      	subs	r3, #1
 8009b42:	4621      	mov	r1, r4
 8009b44:	2b07      	cmp	r3, #7
 8009b46:	dc0b      	bgt.n	8009b60 <__gethex+0x17c>
 8009b48:	ee18 0a10 	vmov	r0, s16
 8009b4c:	f000 fa72 	bl	800a034 <_Balloc>
 8009b50:	4604      	mov	r4, r0
 8009b52:	b940      	cbnz	r0, 8009b66 <__gethex+0x182>
 8009b54:	4b5d      	ldr	r3, [pc, #372]	; (8009ccc <__gethex+0x2e8>)
 8009b56:	4602      	mov	r2, r0
 8009b58:	21de      	movs	r1, #222	; 0xde
 8009b5a:	485d      	ldr	r0, [pc, #372]	; (8009cd0 <__gethex+0x2ec>)
 8009b5c:	f001 f80e 	bl	800ab7c <__assert_func>
 8009b60:	3101      	adds	r1, #1
 8009b62:	105b      	asrs	r3, r3, #1
 8009b64:	e7ee      	b.n	8009b44 <__gethex+0x160>
 8009b66:	f100 0914 	add.w	r9, r0, #20
 8009b6a:	f04f 0b00 	mov.w	fp, #0
 8009b6e:	f1ca 0301 	rsb	r3, sl, #1
 8009b72:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b76:	f8cd b000 	str.w	fp, [sp]
 8009b7a:	9306      	str	r3, [sp, #24]
 8009b7c:	42b7      	cmp	r7, r6
 8009b7e:	d340      	bcc.n	8009c02 <__gethex+0x21e>
 8009b80:	9802      	ldr	r0, [sp, #8]
 8009b82:	9b00      	ldr	r3, [sp, #0]
 8009b84:	f840 3b04 	str.w	r3, [r0], #4
 8009b88:	eba0 0009 	sub.w	r0, r0, r9
 8009b8c:	1080      	asrs	r0, r0, #2
 8009b8e:	0146      	lsls	r6, r0, #5
 8009b90:	6120      	str	r0, [r4, #16]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fb40 	bl	800a218 <__hi0bits>
 8009b98:	1a30      	subs	r0, r6, r0
 8009b9a:	f8d8 6000 	ldr.w	r6, [r8]
 8009b9e:	42b0      	cmp	r0, r6
 8009ba0:	dd63      	ble.n	8009c6a <__gethex+0x286>
 8009ba2:	1b87      	subs	r7, r0, r6
 8009ba4:	4639      	mov	r1, r7
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f000 fee1 	bl	800a96e <__any_on>
 8009bac:	4682      	mov	sl, r0
 8009bae:	b1a8      	cbz	r0, 8009bdc <__gethex+0x1f8>
 8009bb0:	1e7b      	subs	r3, r7, #1
 8009bb2:	1159      	asrs	r1, r3, #5
 8009bb4:	f003 021f 	and.w	r2, r3, #31
 8009bb8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009bbc:	f04f 0a01 	mov.w	sl, #1
 8009bc0:	fa0a f202 	lsl.w	r2, sl, r2
 8009bc4:	420a      	tst	r2, r1
 8009bc6:	d009      	beq.n	8009bdc <__gethex+0x1f8>
 8009bc8:	4553      	cmp	r3, sl
 8009bca:	dd05      	ble.n	8009bd8 <__gethex+0x1f4>
 8009bcc:	1eb9      	subs	r1, r7, #2
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fecd 	bl	800a96e <__any_on>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	d145      	bne.n	8009c64 <__gethex+0x280>
 8009bd8:	f04f 0a02 	mov.w	sl, #2
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4620      	mov	r0, r4
 8009be0:	f7ff fe98 	bl	8009914 <rshift>
 8009be4:	443d      	add	r5, r7
 8009be6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bea:	42ab      	cmp	r3, r5
 8009bec:	da4c      	bge.n	8009c88 <__gethex+0x2a4>
 8009bee:	ee18 0a10 	vmov	r0, s16
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	f000 fa5e 	bl	800a0b4 <_Bfree>
 8009bf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	27a3      	movs	r7, #163	; 0xa3
 8009c00:	e785      	b.n	8009b0e <__gethex+0x12a>
 8009c02:	1e73      	subs	r3, r6, #1
 8009c04:	9a05      	ldr	r2, [sp, #20]
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d019      	beq.n	8009c44 <__gethex+0x260>
 8009c10:	f1bb 0f20 	cmp.w	fp, #32
 8009c14:	d107      	bne.n	8009c26 <__gethex+0x242>
 8009c16:	9b02      	ldr	r3, [sp, #8]
 8009c18:	9a00      	ldr	r2, [sp, #0]
 8009c1a:	f843 2b04 	str.w	r2, [r3], #4
 8009c1e:	9302      	str	r3, [sp, #8]
 8009c20:	2300      	movs	r3, #0
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	469b      	mov	fp, r3
 8009c26:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c2a:	f7ff fec5 	bl	80099b8 <__hexdig_fun>
 8009c2e:	9b00      	ldr	r3, [sp, #0]
 8009c30:	f000 000f 	and.w	r0, r0, #15
 8009c34:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c38:	4303      	orrs	r3, r0
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	f10b 0b04 	add.w	fp, fp, #4
 8009c40:	9b03      	ldr	r3, [sp, #12]
 8009c42:	e00d      	b.n	8009c60 <__gethex+0x27c>
 8009c44:	9b03      	ldr	r3, [sp, #12]
 8009c46:	9a06      	ldr	r2, [sp, #24]
 8009c48:	4413      	add	r3, r2
 8009c4a:	42bb      	cmp	r3, r7
 8009c4c:	d3e0      	bcc.n	8009c10 <__gethex+0x22c>
 8009c4e:	4618      	mov	r0, r3
 8009c50:	9901      	ldr	r1, [sp, #4]
 8009c52:	9307      	str	r3, [sp, #28]
 8009c54:	4652      	mov	r2, sl
 8009c56:	f000 ff6f 	bl	800ab38 <strncmp>
 8009c5a:	9b07      	ldr	r3, [sp, #28]
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d1d7      	bne.n	8009c10 <__gethex+0x22c>
 8009c60:	461e      	mov	r6, r3
 8009c62:	e78b      	b.n	8009b7c <__gethex+0x198>
 8009c64:	f04f 0a03 	mov.w	sl, #3
 8009c68:	e7b8      	b.n	8009bdc <__gethex+0x1f8>
 8009c6a:	da0a      	bge.n	8009c82 <__gethex+0x29e>
 8009c6c:	1a37      	subs	r7, r6, r0
 8009c6e:	4621      	mov	r1, r4
 8009c70:	ee18 0a10 	vmov	r0, s16
 8009c74:	463a      	mov	r2, r7
 8009c76:	f000 fc39 	bl	800a4ec <__lshift>
 8009c7a:	1bed      	subs	r5, r5, r7
 8009c7c:	4604      	mov	r4, r0
 8009c7e:	f100 0914 	add.w	r9, r0, #20
 8009c82:	f04f 0a00 	mov.w	sl, #0
 8009c86:	e7ae      	b.n	8009be6 <__gethex+0x202>
 8009c88:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c8c:	42a8      	cmp	r0, r5
 8009c8e:	dd72      	ble.n	8009d76 <__gethex+0x392>
 8009c90:	1b45      	subs	r5, r0, r5
 8009c92:	42ae      	cmp	r6, r5
 8009c94:	dc36      	bgt.n	8009d04 <__gethex+0x320>
 8009c96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c9a:	2b02      	cmp	r3, #2
 8009c9c:	d02a      	beq.n	8009cf4 <__gethex+0x310>
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d02c      	beq.n	8009cfc <__gethex+0x318>
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d11c      	bne.n	8009ce0 <__gethex+0x2fc>
 8009ca6:	42ae      	cmp	r6, r5
 8009ca8:	d11a      	bne.n	8009ce0 <__gethex+0x2fc>
 8009caa:	2e01      	cmp	r6, #1
 8009cac:	d112      	bne.n	8009cd4 <__gethex+0x2f0>
 8009cae:	9a04      	ldr	r2, [sp, #16]
 8009cb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cb4:	6013      	str	r3, [r2, #0]
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	6123      	str	r3, [r4, #16]
 8009cba:	f8c9 3000 	str.w	r3, [r9]
 8009cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cc0:	2762      	movs	r7, #98	; 0x62
 8009cc2:	601c      	str	r4, [r3, #0]
 8009cc4:	e723      	b.n	8009b0e <__gethex+0x12a>
 8009cc6:	bf00      	nop
 8009cc8:	0800bb68 	.word	0x0800bb68
 8009ccc:	0800baf0 	.word	0x0800baf0
 8009cd0:	0800bb01 	.word	0x0800bb01
 8009cd4:	1e71      	subs	r1, r6, #1
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f000 fe49 	bl	800a96e <__any_on>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d1e6      	bne.n	8009cae <__gethex+0x2ca>
 8009ce0:	ee18 0a10 	vmov	r0, s16
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f000 f9e5 	bl	800a0b4 <_Bfree>
 8009cea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cec:	2300      	movs	r3, #0
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	2750      	movs	r7, #80	; 0x50
 8009cf2:	e70c      	b.n	8009b0e <__gethex+0x12a>
 8009cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1f2      	bne.n	8009ce0 <__gethex+0x2fc>
 8009cfa:	e7d8      	b.n	8009cae <__gethex+0x2ca>
 8009cfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1d5      	bne.n	8009cae <__gethex+0x2ca>
 8009d02:	e7ed      	b.n	8009ce0 <__gethex+0x2fc>
 8009d04:	1e6f      	subs	r7, r5, #1
 8009d06:	f1ba 0f00 	cmp.w	sl, #0
 8009d0a:	d131      	bne.n	8009d70 <__gethex+0x38c>
 8009d0c:	b127      	cbz	r7, 8009d18 <__gethex+0x334>
 8009d0e:	4639      	mov	r1, r7
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 fe2c 	bl	800a96e <__any_on>
 8009d16:	4682      	mov	sl, r0
 8009d18:	117b      	asrs	r3, r7, #5
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d20:	f007 071f 	and.w	r7, r7, #31
 8009d24:	fa01 f707 	lsl.w	r7, r1, r7
 8009d28:	421f      	tst	r7, r3
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	bf18      	it	ne
 8009d30:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d34:	1b76      	subs	r6, r6, r5
 8009d36:	f7ff fded 	bl	8009914 <rshift>
 8009d3a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d3e:	2702      	movs	r7, #2
 8009d40:	f1ba 0f00 	cmp.w	sl, #0
 8009d44:	d048      	beq.n	8009dd8 <__gethex+0x3f4>
 8009d46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d015      	beq.n	8009d7a <__gethex+0x396>
 8009d4e:	2b03      	cmp	r3, #3
 8009d50:	d017      	beq.n	8009d82 <__gethex+0x39e>
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d109      	bne.n	8009d6a <__gethex+0x386>
 8009d56:	f01a 0f02 	tst.w	sl, #2
 8009d5a:	d006      	beq.n	8009d6a <__gethex+0x386>
 8009d5c:	f8d9 0000 	ldr.w	r0, [r9]
 8009d60:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d64:	f01a 0f01 	tst.w	sl, #1
 8009d68:	d10e      	bne.n	8009d88 <__gethex+0x3a4>
 8009d6a:	f047 0710 	orr.w	r7, r7, #16
 8009d6e:	e033      	b.n	8009dd8 <__gethex+0x3f4>
 8009d70:	f04f 0a01 	mov.w	sl, #1
 8009d74:	e7d0      	b.n	8009d18 <__gethex+0x334>
 8009d76:	2701      	movs	r7, #1
 8009d78:	e7e2      	b.n	8009d40 <__gethex+0x35c>
 8009d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d7c:	f1c3 0301 	rsb	r3, r3, #1
 8009d80:	9315      	str	r3, [sp, #84]	; 0x54
 8009d82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0f0      	beq.n	8009d6a <__gethex+0x386>
 8009d88:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d8c:	f104 0314 	add.w	r3, r4, #20
 8009d90:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d94:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009d98:	f04f 0c00 	mov.w	ip, #0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009da6:	d01c      	beq.n	8009de2 <__gethex+0x3fe>
 8009da8:	3201      	adds	r2, #1
 8009daa:	6002      	str	r2, [r0, #0]
 8009dac:	2f02      	cmp	r7, #2
 8009dae:	f104 0314 	add.w	r3, r4, #20
 8009db2:	d13f      	bne.n	8009e34 <__gethex+0x450>
 8009db4:	f8d8 2000 	ldr.w	r2, [r8]
 8009db8:	3a01      	subs	r2, #1
 8009dba:	42b2      	cmp	r2, r6
 8009dbc:	d10a      	bne.n	8009dd4 <__gethex+0x3f0>
 8009dbe:	1171      	asrs	r1, r6, #5
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dc6:	f006 061f 	and.w	r6, r6, #31
 8009dca:	fa02 f606 	lsl.w	r6, r2, r6
 8009dce:	421e      	tst	r6, r3
 8009dd0:	bf18      	it	ne
 8009dd2:	4617      	movne	r7, r2
 8009dd4:	f047 0720 	orr.w	r7, r7, #32
 8009dd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009dda:	601c      	str	r4, [r3, #0]
 8009ddc:	9b04      	ldr	r3, [sp, #16]
 8009dde:	601d      	str	r5, [r3, #0]
 8009de0:	e695      	b.n	8009b0e <__gethex+0x12a>
 8009de2:	4299      	cmp	r1, r3
 8009de4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009de8:	d8d8      	bhi.n	8009d9c <__gethex+0x3b8>
 8009dea:	68a3      	ldr	r3, [r4, #8]
 8009dec:	459b      	cmp	fp, r3
 8009dee:	db19      	blt.n	8009e24 <__gethex+0x440>
 8009df0:	6861      	ldr	r1, [r4, #4]
 8009df2:	ee18 0a10 	vmov	r0, s16
 8009df6:	3101      	adds	r1, #1
 8009df8:	f000 f91c 	bl	800a034 <_Balloc>
 8009dfc:	4681      	mov	r9, r0
 8009dfe:	b918      	cbnz	r0, 8009e08 <__gethex+0x424>
 8009e00:	4b1a      	ldr	r3, [pc, #104]	; (8009e6c <__gethex+0x488>)
 8009e02:	4602      	mov	r2, r0
 8009e04:	2184      	movs	r1, #132	; 0x84
 8009e06:	e6a8      	b.n	8009b5a <__gethex+0x176>
 8009e08:	6922      	ldr	r2, [r4, #16]
 8009e0a:	3202      	adds	r2, #2
 8009e0c:	f104 010c 	add.w	r1, r4, #12
 8009e10:	0092      	lsls	r2, r2, #2
 8009e12:	300c      	adds	r0, #12
 8009e14:	f000 f900 	bl	800a018 <memcpy>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	ee18 0a10 	vmov	r0, s16
 8009e1e:	f000 f949 	bl	800a0b4 <_Bfree>
 8009e22:	464c      	mov	r4, r9
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e2c:	6122      	str	r2, [r4, #16]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	615a      	str	r2, [r3, #20]
 8009e32:	e7bb      	b.n	8009dac <__gethex+0x3c8>
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	455a      	cmp	r2, fp
 8009e38:	dd0b      	ble.n	8009e52 <__gethex+0x46e>
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f7ff fd69 	bl	8009914 <rshift>
 8009e42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e46:	3501      	adds	r5, #1
 8009e48:	42ab      	cmp	r3, r5
 8009e4a:	f6ff aed0 	blt.w	8009bee <__gethex+0x20a>
 8009e4e:	2701      	movs	r7, #1
 8009e50:	e7c0      	b.n	8009dd4 <__gethex+0x3f0>
 8009e52:	f016 061f 	ands.w	r6, r6, #31
 8009e56:	d0fa      	beq.n	8009e4e <__gethex+0x46a>
 8009e58:	4453      	add	r3, sl
 8009e5a:	f1c6 0620 	rsb	r6, r6, #32
 8009e5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e62:	f000 f9d9 	bl	800a218 <__hi0bits>
 8009e66:	42b0      	cmp	r0, r6
 8009e68:	dbe7      	blt.n	8009e3a <__gethex+0x456>
 8009e6a:	e7f0      	b.n	8009e4e <__gethex+0x46a>
 8009e6c:	0800baf0 	.word	0x0800baf0

08009e70 <L_shift>:
 8009e70:	f1c2 0208 	rsb	r2, r2, #8
 8009e74:	0092      	lsls	r2, r2, #2
 8009e76:	b570      	push	{r4, r5, r6, lr}
 8009e78:	f1c2 0620 	rsb	r6, r2, #32
 8009e7c:	6843      	ldr	r3, [r0, #4]
 8009e7e:	6804      	ldr	r4, [r0, #0]
 8009e80:	fa03 f506 	lsl.w	r5, r3, r6
 8009e84:	432c      	orrs	r4, r5
 8009e86:	40d3      	lsrs	r3, r2
 8009e88:	6004      	str	r4, [r0, #0]
 8009e8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e8e:	4288      	cmp	r0, r1
 8009e90:	d3f4      	bcc.n	8009e7c <L_shift+0xc>
 8009e92:	bd70      	pop	{r4, r5, r6, pc}

08009e94 <__match>:
 8009e94:	b530      	push	{r4, r5, lr}
 8009e96:	6803      	ldr	r3, [r0, #0]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e9e:	b914      	cbnz	r4, 8009ea6 <__match+0x12>
 8009ea0:	6003      	str	r3, [r0, #0]
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	bd30      	pop	{r4, r5, pc}
 8009ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009eae:	2d19      	cmp	r5, #25
 8009eb0:	bf98      	it	ls
 8009eb2:	3220      	addls	r2, #32
 8009eb4:	42a2      	cmp	r2, r4
 8009eb6:	d0f0      	beq.n	8009e9a <__match+0x6>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	e7f3      	b.n	8009ea4 <__match+0x10>

08009ebc <__hexnan>:
 8009ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec0:	680b      	ldr	r3, [r1, #0]
 8009ec2:	115e      	asrs	r6, r3, #5
 8009ec4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ec8:	f013 031f 	ands.w	r3, r3, #31
 8009ecc:	b087      	sub	sp, #28
 8009ece:	bf18      	it	ne
 8009ed0:	3604      	addne	r6, #4
 8009ed2:	2500      	movs	r5, #0
 8009ed4:	1f37      	subs	r7, r6, #4
 8009ed6:	4690      	mov	r8, r2
 8009ed8:	6802      	ldr	r2, [r0, #0]
 8009eda:	9301      	str	r3, [sp, #4]
 8009edc:	4682      	mov	sl, r0
 8009ede:	f846 5c04 	str.w	r5, [r6, #-4]
 8009ee2:	46b9      	mov	r9, r7
 8009ee4:	463c      	mov	r4, r7
 8009ee6:	9502      	str	r5, [sp, #8]
 8009ee8:	46ab      	mov	fp, r5
 8009eea:	7851      	ldrb	r1, [r2, #1]
 8009eec:	1c53      	adds	r3, r2, #1
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	b341      	cbz	r1, 8009f44 <__hexnan+0x88>
 8009ef2:	4608      	mov	r0, r1
 8009ef4:	9205      	str	r2, [sp, #20]
 8009ef6:	9104      	str	r1, [sp, #16]
 8009ef8:	f7ff fd5e 	bl	80099b8 <__hexdig_fun>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d14f      	bne.n	8009fa0 <__hexnan+0xe4>
 8009f00:	9904      	ldr	r1, [sp, #16]
 8009f02:	9a05      	ldr	r2, [sp, #20]
 8009f04:	2920      	cmp	r1, #32
 8009f06:	d818      	bhi.n	8009f3a <__hexnan+0x7e>
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	459b      	cmp	fp, r3
 8009f0c:	dd13      	ble.n	8009f36 <__hexnan+0x7a>
 8009f0e:	454c      	cmp	r4, r9
 8009f10:	d206      	bcs.n	8009f20 <__hexnan+0x64>
 8009f12:	2d07      	cmp	r5, #7
 8009f14:	dc04      	bgt.n	8009f20 <__hexnan+0x64>
 8009f16:	462a      	mov	r2, r5
 8009f18:	4649      	mov	r1, r9
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f7ff ffa8 	bl	8009e70 <L_shift>
 8009f20:	4544      	cmp	r4, r8
 8009f22:	d950      	bls.n	8009fc6 <__hexnan+0x10a>
 8009f24:	2300      	movs	r3, #0
 8009f26:	f1a4 0904 	sub.w	r9, r4, #4
 8009f2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f2e:	f8cd b008 	str.w	fp, [sp, #8]
 8009f32:	464c      	mov	r4, r9
 8009f34:	461d      	mov	r5, r3
 8009f36:	9a03      	ldr	r2, [sp, #12]
 8009f38:	e7d7      	b.n	8009eea <__hexnan+0x2e>
 8009f3a:	2929      	cmp	r1, #41	; 0x29
 8009f3c:	d156      	bne.n	8009fec <__hexnan+0x130>
 8009f3e:	3202      	adds	r2, #2
 8009f40:	f8ca 2000 	str.w	r2, [sl]
 8009f44:	f1bb 0f00 	cmp.w	fp, #0
 8009f48:	d050      	beq.n	8009fec <__hexnan+0x130>
 8009f4a:	454c      	cmp	r4, r9
 8009f4c:	d206      	bcs.n	8009f5c <__hexnan+0xa0>
 8009f4e:	2d07      	cmp	r5, #7
 8009f50:	dc04      	bgt.n	8009f5c <__hexnan+0xa0>
 8009f52:	462a      	mov	r2, r5
 8009f54:	4649      	mov	r1, r9
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7ff ff8a 	bl	8009e70 <L_shift>
 8009f5c:	4544      	cmp	r4, r8
 8009f5e:	d934      	bls.n	8009fca <__hexnan+0x10e>
 8009f60:	f1a8 0204 	sub.w	r2, r8, #4
 8009f64:	4623      	mov	r3, r4
 8009f66:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f6a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f6e:	429f      	cmp	r7, r3
 8009f70:	d2f9      	bcs.n	8009f66 <__hexnan+0xaa>
 8009f72:	1b3b      	subs	r3, r7, r4
 8009f74:	f023 0303 	bic.w	r3, r3, #3
 8009f78:	3304      	adds	r3, #4
 8009f7a:	3401      	adds	r4, #1
 8009f7c:	3e03      	subs	r6, #3
 8009f7e:	42b4      	cmp	r4, r6
 8009f80:	bf88      	it	hi
 8009f82:	2304      	movhi	r3, #4
 8009f84:	4443      	add	r3, r8
 8009f86:	2200      	movs	r2, #0
 8009f88:	f843 2b04 	str.w	r2, [r3], #4
 8009f8c:	429f      	cmp	r7, r3
 8009f8e:	d2fb      	bcs.n	8009f88 <__hexnan+0xcc>
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	b91b      	cbnz	r3, 8009f9c <__hexnan+0xe0>
 8009f94:	4547      	cmp	r7, r8
 8009f96:	d127      	bne.n	8009fe8 <__hexnan+0x12c>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	2005      	movs	r0, #5
 8009f9e:	e026      	b.n	8009fee <__hexnan+0x132>
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	2d08      	cmp	r5, #8
 8009fa4:	f10b 0b01 	add.w	fp, fp, #1
 8009fa8:	dd06      	ble.n	8009fb8 <__hexnan+0xfc>
 8009faa:	4544      	cmp	r4, r8
 8009fac:	d9c3      	bls.n	8009f36 <__hexnan+0x7a>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fb4:	2501      	movs	r5, #1
 8009fb6:	3c04      	subs	r4, #4
 8009fb8:	6822      	ldr	r2, [r4, #0]
 8009fba:	f000 000f 	and.w	r0, r0, #15
 8009fbe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009fc2:	6022      	str	r2, [r4, #0]
 8009fc4:	e7b7      	b.n	8009f36 <__hexnan+0x7a>
 8009fc6:	2508      	movs	r5, #8
 8009fc8:	e7b5      	b.n	8009f36 <__hexnan+0x7a>
 8009fca:	9b01      	ldr	r3, [sp, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0df      	beq.n	8009f90 <__hexnan+0xd4>
 8009fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd4:	f1c3 0320 	rsb	r3, r3, #32
 8009fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fdc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009fe0:	401a      	ands	r2, r3
 8009fe2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009fe6:	e7d3      	b.n	8009f90 <__hexnan+0xd4>
 8009fe8:	3f04      	subs	r7, #4
 8009fea:	e7d1      	b.n	8009f90 <__hexnan+0xd4>
 8009fec:	2004      	movs	r0, #4
 8009fee:	b007      	add	sp, #28
 8009ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ff4 <__ascii_mbtowc>:
 8009ff4:	b082      	sub	sp, #8
 8009ff6:	b901      	cbnz	r1, 8009ffa <__ascii_mbtowc+0x6>
 8009ff8:	a901      	add	r1, sp, #4
 8009ffa:	b142      	cbz	r2, 800a00e <__ascii_mbtowc+0x1a>
 8009ffc:	b14b      	cbz	r3, 800a012 <__ascii_mbtowc+0x1e>
 8009ffe:	7813      	ldrb	r3, [r2, #0]
 800a000:	600b      	str	r3, [r1, #0]
 800a002:	7812      	ldrb	r2, [r2, #0]
 800a004:	1e10      	subs	r0, r2, #0
 800a006:	bf18      	it	ne
 800a008:	2001      	movne	r0, #1
 800a00a:	b002      	add	sp, #8
 800a00c:	4770      	bx	lr
 800a00e:	4610      	mov	r0, r2
 800a010:	e7fb      	b.n	800a00a <__ascii_mbtowc+0x16>
 800a012:	f06f 0001 	mvn.w	r0, #1
 800a016:	e7f8      	b.n	800a00a <__ascii_mbtowc+0x16>

0800a018 <memcpy>:
 800a018:	440a      	add	r2, r1
 800a01a:	4291      	cmp	r1, r2
 800a01c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a020:	d100      	bne.n	800a024 <memcpy+0xc>
 800a022:	4770      	bx	lr
 800a024:	b510      	push	{r4, lr}
 800a026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a02a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a02e:	4291      	cmp	r1, r2
 800a030:	d1f9      	bne.n	800a026 <memcpy+0xe>
 800a032:	bd10      	pop	{r4, pc}

0800a034 <_Balloc>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a038:	4604      	mov	r4, r0
 800a03a:	460d      	mov	r5, r1
 800a03c:	b976      	cbnz	r6, 800a05c <_Balloc+0x28>
 800a03e:	2010      	movs	r0, #16
 800a040:	f000 fdcc 	bl	800abdc <malloc>
 800a044:	4602      	mov	r2, r0
 800a046:	6260      	str	r0, [r4, #36]	; 0x24
 800a048:	b920      	cbnz	r0, 800a054 <_Balloc+0x20>
 800a04a:	4b18      	ldr	r3, [pc, #96]	; (800a0ac <_Balloc+0x78>)
 800a04c:	4818      	ldr	r0, [pc, #96]	; (800a0b0 <_Balloc+0x7c>)
 800a04e:	2166      	movs	r1, #102	; 0x66
 800a050:	f000 fd94 	bl	800ab7c <__assert_func>
 800a054:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a058:	6006      	str	r6, [r0, #0]
 800a05a:	60c6      	str	r6, [r0, #12]
 800a05c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a05e:	68f3      	ldr	r3, [r6, #12]
 800a060:	b183      	cbz	r3, 800a084 <_Balloc+0x50>
 800a062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a06a:	b9b8      	cbnz	r0, 800a09c <_Balloc+0x68>
 800a06c:	2101      	movs	r1, #1
 800a06e:	fa01 f605 	lsl.w	r6, r1, r5
 800a072:	1d72      	adds	r2, r6, #5
 800a074:	0092      	lsls	r2, r2, #2
 800a076:	4620      	mov	r0, r4
 800a078:	f000 fc9a 	bl	800a9b0 <_calloc_r>
 800a07c:	b160      	cbz	r0, 800a098 <_Balloc+0x64>
 800a07e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a082:	e00e      	b.n	800a0a2 <_Balloc+0x6e>
 800a084:	2221      	movs	r2, #33	; 0x21
 800a086:	2104      	movs	r1, #4
 800a088:	4620      	mov	r0, r4
 800a08a:	f000 fc91 	bl	800a9b0 <_calloc_r>
 800a08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a090:	60f0      	str	r0, [r6, #12]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e4      	bne.n	800a062 <_Balloc+0x2e>
 800a098:	2000      	movs	r0, #0
 800a09a:	bd70      	pop	{r4, r5, r6, pc}
 800a09c:	6802      	ldr	r2, [r0, #0]
 800a09e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0a8:	e7f7      	b.n	800a09a <_Balloc+0x66>
 800a0aa:	bf00      	nop
 800a0ac:	0800bb7c 	.word	0x0800bb7c
 800a0b0:	0800bb93 	.word	0x0800bb93

0800a0b4 <_Bfree>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	b976      	cbnz	r6, 800a0dc <_Bfree+0x28>
 800a0be:	2010      	movs	r0, #16
 800a0c0:	f000 fd8c 	bl	800abdc <malloc>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	6268      	str	r0, [r5, #36]	; 0x24
 800a0c8:	b920      	cbnz	r0, 800a0d4 <_Bfree+0x20>
 800a0ca:	4b09      	ldr	r3, [pc, #36]	; (800a0f0 <_Bfree+0x3c>)
 800a0cc:	4809      	ldr	r0, [pc, #36]	; (800a0f4 <_Bfree+0x40>)
 800a0ce:	218a      	movs	r1, #138	; 0x8a
 800a0d0:	f000 fd54 	bl	800ab7c <__assert_func>
 800a0d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0d8:	6006      	str	r6, [r0, #0]
 800a0da:	60c6      	str	r6, [r0, #12]
 800a0dc:	b13c      	cbz	r4, 800a0ee <_Bfree+0x3a>
 800a0de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0e0:	6862      	ldr	r2, [r4, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0e8:	6021      	str	r1, [r4, #0]
 800a0ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	0800bb7c 	.word	0x0800bb7c
 800a0f4:	0800bb93 	.word	0x0800bb93

0800a0f8 <__multadd>:
 800a0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0fc:	690d      	ldr	r5, [r1, #16]
 800a0fe:	4607      	mov	r7, r0
 800a100:	460c      	mov	r4, r1
 800a102:	461e      	mov	r6, r3
 800a104:	f101 0c14 	add.w	ip, r1, #20
 800a108:	2000      	movs	r0, #0
 800a10a:	f8dc 3000 	ldr.w	r3, [ip]
 800a10e:	b299      	uxth	r1, r3
 800a110:	fb02 6101 	mla	r1, r2, r1, r6
 800a114:	0c1e      	lsrs	r6, r3, #16
 800a116:	0c0b      	lsrs	r3, r1, #16
 800a118:	fb02 3306 	mla	r3, r2, r6, r3
 800a11c:	b289      	uxth	r1, r1
 800a11e:	3001      	adds	r0, #1
 800a120:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a124:	4285      	cmp	r5, r0
 800a126:	f84c 1b04 	str.w	r1, [ip], #4
 800a12a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a12e:	dcec      	bgt.n	800a10a <__multadd+0x12>
 800a130:	b30e      	cbz	r6, 800a176 <__multadd+0x7e>
 800a132:	68a3      	ldr	r3, [r4, #8]
 800a134:	42ab      	cmp	r3, r5
 800a136:	dc19      	bgt.n	800a16c <__multadd+0x74>
 800a138:	6861      	ldr	r1, [r4, #4]
 800a13a:	4638      	mov	r0, r7
 800a13c:	3101      	adds	r1, #1
 800a13e:	f7ff ff79 	bl	800a034 <_Balloc>
 800a142:	4680      	mov	r8, r0
 800a144:	b928      	cbnz	r0, 800a152 <__multadd+0x5a>
 800a146:	4602      	mov	r2, r0
 800a148:	4b0c      	ldr	r3, [pc, #48]	; (800a17c <__multadd+0x84>)
 800a14a:	480d      	ldr	r0, [pc, #52]	; (800a180 <__multadd+0x88>)
 800a14c:	21b5      	movs	r1, #181	; 0xb5
 800a14e:	f000 fd15 	bl	800ab7c <__assert_func>
 800a152:	6922      	ldr	r2, [r4, #16]
 800a154:	3202      	adds	r2, #2
 800a156:	f104 010c 	add.w	r1, r4, #12
 800a15a:	0092      	lsls	r2, r2, #2
 800a15c:	300c      	adds	r0, #12
 800a15e:	f7ff ff5b 	bl	800a018 <memcpy>
 800a162:	4621      	mov	r1, r4
 800a164:	4638      	mov	r0, r7
 800a166:	f7ff ffa5 	bl	800a0b4 <_Bfree>
 800a16a:	4644      	mov	r4, r8
 800a16c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a170:	3501      	adds	r5, #1
 800a172:	615e      	str	r6, [r3, #20]
 800a174:	6125      	str	r5, [r4, #16]
 800a176:	4620      	mov	r0, r4
 800a178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a17c:	0800baf0 	.word	0x0800baf0
 800a180:	0800bb93 	.word	0x0800bb93

0800a184 <__s2b>:
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a188:	460c      	mov	r4, r1
 800a18a:	4615      	mov	r5, r2
 800a18c:	461f      	mov	r7, r3
 800a18e:	2209      	movs	r2, #9
 800a190:	3308      	adds	r3, #8
 800a192:	4606      	mov	r6, r0
 800a194:	fb93 f3f2 	sdiv	r3, r3, r2
 800a198:	2100      	movs	r1, #0
 800a19a:	2201      	movs	r2, #1
 800a19c:	429a      	cmp	r2, r3
 800a19e:	db09      	blt.n	800a1b4 <__s2b+0x30>
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7ff ff47 	bl	800a034 <_Balloc>
 800a1a6:	b940      	cbnz	r0, 800a1ba <__s2b+0x36>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	4b19      	ldr	r3, [pc, #100]	; (800a210 <__s2b+0x8c>)
 800a1ac:	4819      	ldr	r0, [pc, #100]	; (800a214 <__s2b+0x90>)
 800a1ae:	21ce      	movs	r1, #206	; 0xce
 800a1b0:	f000 fce4 	bl	800ab7c <__assert_func>
 800a1b4:	0052      	lsls	r2, r2, #1
 800a1b6:	3101      	adds	r1, #1
 800a1b8:	e7f0      	b.n	800a19c <__s2b+0x18>
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	6143      	str	r3, [r0, #20]
 800a1be:	2d09      	cmp	r5, #9
 800a1c0:	f04f 0301 	mov.w	r3, #1
 800a1c4:	6103      	str	r3, [r0, #16]
 800a1c6:	dd16      	ble.n	800a1f6 <__s2b+0x72>
 800a1c8:	f104 0909 	add.w	r9, r4, #9
 800a1cc:	46c8      	mov	r8, r9
 800a1ce:	442c      	add	r4, r5
 800a1d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1d4:	4601      	mov	r1, r0
 800a1d6:	3b30      	subs	r3, #48	; 0x30
 800a1d8:	220a      	movs	r2, #10
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ff8c 	bl	800a0f8 <__multadd>
 800a1e0:	45a0      	cmp	r8, r4
 800a1e2:	d1f5      	bne.n	800a1d0 <__s2b+0x4c>
 800a1e4:	f1a5 0408 	sub.w	r4, r5, #8
 800a1e8:	444c      	add	r4, r9
 800a1ea:	1b2d      	subs	r5, r5, r4
 800a1ec:	1963      	adds	r3, r4, r5
 800a1ee:	42bb      	cmp	r3, r7
 800a1f0:	db04      	blt.n	800a1fc <__s2b+0x78>
 800a1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f6:	340a      	adds	r4, #10
 800a1f8:	2509      	movs	r5, #9
 800a1fa:	e7f6      	b.n	800a1ea <__s2b+0x66>
 800a1fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a200:	4601      	mov	r1, r0
 800a202:	3b30      	subs	r3, #48	; 0x30
 800a204:	220a      	movs	r2, #10
 800a206:	4630      	mov	r0, r6
 800a208:	f7ff ff76 	bl	800a0f8 <__multadd>
 800a20c:	e7ee      	b.n	800a1ec <__s2b+0x68>
 800a20e:	bf00      	nop
 800a210:	0800baf0 	.word	0x0800baf0
 800a214:	0800bb93 	.word	0x0800bb93

0800a218 <__hi0bits>:
 800a218:	0c03      	lsrs	r3, r0, #16
 800a21a:	041b      	lsls	r3, r3, #16
 800a21c:	b9d3      	cbnz	r3, 800a254 <__hi0bits+0x3c>
 800a21e:	0400      	lsls	r0, r0, #16
 800a220:	2310      	movs	r3, #16
 800a222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a226:	bf04      	itt	eq
 800a228:	0200      	lsleq	r0, r0, #8
 800a22a:	3308      	addeq	r3, #8
 800a22c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a230:	bf04      	itt	eq
 800a232:	0100      	lsleq	r0, r0, #4
 800a234:	3304      	addeq	r3, #4
 800a236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a23a:	bf04      	itt	eq
 800a23c:	0080      	lsleq	r0, r0, #2
 800a23e:	3302      	addeq	r3, #2
 800a240:	2800      	cmp	r0, #0
 800a242:	db05      	blt.n	800a250 <__hi0bits+0x38>
 800a244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a248:	f103 0301 	add.w	r3, r3, #1
 800a24c:	bf08      	it	eq
 800a24e:	2320      	moveq	r3, #32
 800a250:	4618      	mov	r0, r3
 800a252:	4770      	bx	lr
 800a254:	2300      	movs	r3, #0
 800a256:	e7e4      	b.n	800a222 <__hi0bits+0xa>

0800a258 <__lo0bits>:
 800a258:	6803      	ldr	r3, [r0, #0]
 800a25a:	f013 0207 	ands.w	r2, r3, #7
 800a25e:	4601      	mov	r1, r0
 800a260:	d00b      	beq.n	800a27a <__lo0bits+0x22>
 800a262:	07da      	lsls	r2, r3, #31
 800a264:	d423      	bmi.n	800a2ae <__lo0bits+0x56>
 800a266:	0798      	lsls	r0, r3, #30
 800a268:	bf49      	itett	mi
 800a26a:	085b      	lsrmi	r3, r3, #1
 800a26c:	089b      	lsrpl	r3, r3, #2
 800a26e:	2001      	movmi	r0, #1
 800a270:	600b      	strmi	r3, [r1, #0]
 800a272:	bf5c      	itt	pl
 800a274:	600b      	strpl	r3, [r1, #0]
 800a276:	2002      	movpl	r0, #2
 800a278:	4770      	bx	lr
 800a27a:	b298      	uxth	r0, r3
 800a27c:	b9a8      	cbnz	r0, 800a2aa <__lo0bits+0x52>
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	2010      	movs	r0, #16
 800a282:	b2da      	uxtb	r2, r3
 800a284:	b90a      	cbnz	r2, 800a28a <__lo0bits+0x32>
 800a286:	3008      	adds	r0, #8
 800a288:	0a1b      	lsrs	r3, r3, #8
 800a28a:	071a      	lsls	r2, r3, #28
 800a28c:	bf04      	itt	eq
 800a28e:	091b      	lsreq	r3, r3, #4
 800a290:	3004      	addeq	r0, #4
 800a292:	079a      	lsls	r2, r3, #30
 800a294:	bf04      	itt	eq
 800a296:	089b      	lsreq	r3, r3, #2
 800a298:	3002      	addeq	r0, #2
 800a29a:	07da      	lsls	r2, r3, #31
 800a29c:	d403      	bmi.n	800a2a6 <__lo0bits+0x4e>
 800a29e:	085b      	lsrs	r3, r3, #1
 800a2a0:	f100 0001 	add.w	r0, r0, #1
 800a2a4:	d005      	beq.n	800a2b2 <__lo0bits+0x5a>
 800a2a6:	600b      	str	r3, [r1, #0]
 800a2a8:	4770      	bx	lr
 800a2aa:	4610      	mov	r0, r2
 800a2ac:	e7e9      	b.n	800a282 <__lo0bits+0x2a>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	4770      	bx	lr
 800a2b2:	2020      	movs	r0, #32
 800a2b4:	4770      	bx	lr
	...

0800a2b8 <__i2b>:
 800a2b8:	b510      	push	{r4, lr}
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	2101      	movs	r1, #1
 800a2be:	f7ff feb9 	bl	800a034 <_Balloc>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <__i2b+0x1a>
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <__i2b+0x24>)
 800a2c8:	4805      	ldr	r0, [pc, #20]	; (800a2e0 <__i2b+0x28>)
 800a2ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2ce:	f000 fc55 	bl	800ab7c <__assert_func>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	6144      	str	r4, [r0, #20]
 800a2d6:	6103      	str	r3, [r0, #16]
 800a2d8:	bd10      	pop	{r4, pc}
 800a2da:	bf00      	nop
 800a2dc:	0800baf0 	.word	0x0800baf0
 800a2e0:	0800bb93 	.word	0x0800bb93

0800a2e4 <__multiply>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4691      	mov	r9, r2
 800a2ea:	690a      	ldr	r2, [r1, #16]
 800a2ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	bfb8      	it	lt
 800a2f4:	460b      	movlt	r3, r1
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	bfbc      	itt	lt
 800a2fa:	464c      	movlt	r4, r9
 800a2fc:	4699      	movlt	r9, r3
 800a2fe:	6927      	ldr	r7, [r4, #16]
 800a300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a304:	68a3      	ldr	r3, [r4, #8]
 800a306:	6861      	ldr	r1, [r4, #4]
 800a308:	eb07 060a 	add.w	r6, r7, sl
 800a30c:	42b3      	cmp	r3, r6
 800a30e:	b085      	sub	sp, #20
 800a310:	bfb8      	it	lt
 800a312:	3101      	addlt	r1, #1
 800a314:	f7ff fe8e 	bl	800a034 <_Balloc>
 800a318:	b930      	cbnz	r0, 800a328 <__multiply+0x44>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b44      	ldr	r3, [pc, #272]	; (800a430 <__multiply+0x14c>)
 800a31e:	4845      	ldr	r0, [pc, #276]	; (800a434 <__multiply+0x150>)
 800a320:	f240 115d 	movw	r1, #349	; 0x15d
 800a324:	f000 fc2a 	bl	800ab7c <__assert_func>
 800a328:	f100 0514 	add.w	r5, r0, #20
 800a32c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a330:	462b      	mov	r3, r5
 800a332:	2200      	movs	r2, #0
 800a334:	4543      	cmp	r3, r8
 800a336:	d321      	bcc.n	800a37c <__multiply+0x98>
 800a338:	f104 0314 	add.w	r3, r4, #20
 800a33c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a340:	f109 0314 	add.w	r3, r9, #20
 800a344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a348:	9202      	str	r2, [sp, #8]
 800a34a:	1b3a      	subs	r2, r7, r4
 800a34c:	3a15      	subs	r2, #21
 800a34e:	f022 0203 	bic.w	r2, r2, #3
 800a352:	3204      	adds	r2, #4
 800a354:	f104 0115 	add.w	r1, r4, #21
 800a358:	428f      	cmp	r7, r1
 800a35a:	bf38      	it	cc
 800a35c:	2204      	movcc	r2, #4
 800a35e:	9201      	str	r2, [sp, #4]
 800a360:	9a02      	ldr	r2, [sp, #8]
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d80c      	bhi.n	800a382 <__multiply+0x9e>
 800a368:	2e00      	cmp	r6, #0
 800a36a:	dd03      	ble.n	800a374 <__multiply+0x90>
 800a36c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a370:	2b00      	cmp	r3, #0
 800a372:	d05a      	beq.n	800a42a <__multiply+0x146>
 800a374:	6106      	str	r6, [r0, #16]
 800a376:	b005      	add	sp, #20
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37c:	f843 2b04 	str.w	r2, [r3], #4
 800a380:	e7d8      	b.n	800a334 <__multiply+0x50>
 800a382:	f8b3 a000 	ldrh.w	sl, [r3]
 800a386:	f1ba 0f00 	cmp.w	sl, #0
 800a38a:	d024      	beq.n	800a3d6 <__multiply+0xf2>
 800a38c:	f104 0e14 	add.w	lr, r4, #20
 800a390:	46a9      	mov	r9, r5
 800a392:	f04f 0c00 	mov.w	ip, #0
 800a396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a39a:	f8d9 1000 	ldr.w	r1, [r9]
 800a39e:	fa1f fb82 	uxth.w	fp, r2
 800a3a2:	b289      	uxth	r1, r1
 800a3a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3ac:	f8d9 2000 	ldr.w	r2, [r9]
 800a3b0:	4461      	add	r1, ip
 800a3b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3be:	b289      	uxth	r1, r1
 800a3c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3c4:	4577      	cmp	r7, lr
 800a3c6:	f849 1b04 	str.w	r1, [r9], #4
 800a3ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ce:	d8e2      	bhi.n	800a396 <__multiply+0xb2>
 800a3d0:	9a01      	ldr	r2, [sp, #4]
 800a3d2:	f845 c002 	str.w	ip, [r5, r2]
 800a3d6:	9a03      	ldr	r2, [sp, #12]
 800a3d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	f1b9 0f00 	cmp.w	r9, #0
 800a3e2:	d020      	beq.n	800a426 <__multiply+0x142>
 800a3e4:	6829      	ldr	r1, [r5, #0]
 800a3e6:	f104 0c14 	add.w	ip, r4, #20
 800a3ea:	46ae      	mov	lr, r5
 800a3ec:	f04f 0a00 	mov.w	sl, #0
 800a3f0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a3f8:	fb09 220b 	mla	r2, r9, fp, r2
 800a3fc:	4492      	add	sl, r2
 800a3fe:	b289      	uxth	r1, r1
 800a400:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a404:	f84e 1b04 	str.w	r1, [lr], #4
 800a408:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a40c:	f8be 1000 	ldrh.w	r1, [lr]
 800a410:	0c12      	lsrs	r2, r2, #16
 800a412:	fb09 1102 	mla	r1, r9, r2, r1
 800a416:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a41a:	4567      	cmp	r7, ip
 800a41c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a420:	d8e6      	bhi.n	800a3f0 <__multiply+0x10c>
 800a422:	9a01      	ldr	r2, [sp, #4]
 800a424:	50a9      	str	r1, [r5, r2]
 800a426:	3504      	adds	r5, #4
 800a428:	e79a      	b.n	800a360 <__multiply+0x7c>
 800a42a:	3e01      	subs	r6, #1
 800a42c:	e79c      	b.n	800a368 <__multiply+0x84>
 800a42e:	bf00      	nop
 800a430:	0800baf0 	.word	0x0800baf0
 800a434:	0800bb93 	.word	0x0800bb93

0800a438 <__pow5mult>:
 800a438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a43c:	4615      	mov	r5, r2
 800a43e:	f012 0203 	ands.w	r2, r2, #3
 800a442:	4606      	mov	r6, r0
 800a444:	460f      	mov	r7, r1
 800a446:	d007      	beq.n	800a458 <__pow5mult+0x20>
 800a448:	4c25      	ldr	r4, [pc, #148]	; (800a4e0 <__pow5mult+0xa8>)
 800a44a:	3a01      	subs	r2, #1
 800a44c:	2300      	movs	r3, #0
 800a44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a452:	f7ff fe51 	bl	800a0f8 <__multadd>
 800a456:	4607      	mov	r7, r0
 800a458:	10ad      	asrs	r5, r5, #2
 800a45a:	d03d      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a45c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a45e:	b97c      	cbnz	r4, 800a480 <__pow5mult+0x48>
 800a460:	2010      	movs	r0, #16
 800a462:	f000 fbbb 	bl	800abdc <malloc>
 800a466:	4602      	mov	r2, r0
 800a468:	6270      	str	r0, [r6, #36]	; 0x24
 800a46a:	b928      	cbnz	r0, 800a478 <__pow5mult+0x40>
 800a46c:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <__pow5mult+0xac>)
 800a46e:	481e      	ldr	r0, [pc, #120]	; (800a4e8 <__pow5mult+0xb0>)
 800a470:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a474:	f000 fb82 	bl	800ab7c <__assert_func>
 800a478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a47c:	6004      	str	r4, [r0, #0]
 800a47e:	60c4      	str	r4, [r0, #12]
 800a480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a488:	b94c      	cbnz	r4, 800a49e <__pow5mult+0x66>
 800a48a:	f240 2171 	movw	r1, #625	; 0x271
 800a48e:	4630      	mov	r0, r6
 800a490:	f7ff ff12 	bl	800a2b8 <__i2b>
 800a494:	2300      	movs	r3, #0
 800a496:	f8c8 0008 	str.w	r0, [r8, #8]
 800a49a:	4604      	mov	r4, r0
 800a49c:	6003      	str	r3, [r0, #0]
 800a49e:	f04f 0900 	mov.w	r9, #0
 800a4a2:	07eb      	lsls	r3, r5, #31
 800a4a4:	d50a      	bpl.n	800a4bc <__pow5mult+0x84>
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7ff ff1a 	bl	800a2e4 <__multiply>
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	4680      	mov	r8, r0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7ff fdfd 	bl	800a0b4 <_Bfree>
 800a4ba:	4647      	mov	r7, r8
 800a4bc:	106d      	asrs	r5, r5, #1
 800a4be:	d00b      	beq.n	800a4d8 <__pow5mult+0xa0>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	b938      	cbnz	r0, 800a4d4 <__pow5mult+0x9c>
 800a4c4:	4622      	mov	r2, r4
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f7ff ff0b 	bl	800a2e4 <__multiply>
 800a4ce:	6020      	str	r0, [r4, #0]
 800a4d0:	f8c0 9000 	str.w	r9, [r0]
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e7e4      	b.n	800a4a2 <__pow5mult+0x6a>
 800a4d8:	4638      	mov	r0, r7
 800a4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800bce0 	.word	0x0800bce0
 800a4e4:	0800bb7c 	.word	0x0800bb7c
 800a4e8:	0800bb93 	.word	0x0800bb93

0800a4ec <__lshift>:
 800a4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	6849      	ldr	r1, [r1, #4]
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4fa:	68a3      	ldr	r3, [r4, #8]
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	4691      	mov	r9, r2
 800a500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a504:	f108 0601 	add.w	r6, r8, #1
 800a508:	42b3      	cmp	r3, r6
 800a50a:	db0b      	blt.n	800a524 <__lshift+0x38>
 800a50c:	4638      	mov	r0, r7
 800a50e:	f7ff fd91 	bl	800a034 <_Balloc>
 800a512:	4605      	mov	r5, r0
 800a514:	b948      	cbnz	r0, 800a52a <__lshift+0x3e>
 800a516:	4602      	mov	r2, r0
 800a518:	4b2a      	ldr	r3, [pc, #168]	; (800a5c4 <__lshift+0xd8>)
 800a51a:	482b      	ldr	r0, [pc, #172]	; (800a5c8 <__lshift+0xdc>)
 800a51c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a520:	f000 fb2c 	bl	800ab7c <__assert_func>
 800a524:	3101      	adds	r1, #1
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	e7ee      	b.n	800a508 <__lshift+0x1c>
 800a52a:	2300      	movs	r3, #0
 800a52c:	f100 0114 	add.w	r1, r0, #20
 800a530:	f100 0210 	add.w	r2, r0, #16
 800a534:	4618      	mov	r0, r3
 800a536:	4553      	cmp	r3, sl
 800a538:	db37      	blt.n	800a5aa <__lshift+0xbe>
 800a53a:	6920      	ldr	r0, [r4, #16]
 800a53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a540:	f104 0314 	add.w	r3, r4, #20
 800a544:	f019 091f 	ands.w	r9, r9, #31
 800a548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a54c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a550:	d02f      	beq.n	800a5b2 <__lshift+0xc6>
 800a552:	f1c9 0e20 	rsb	lr, r9, #32
 800a556:	468a      	mov	sl, r1
 800a558:	f04f 0c00 	mov.w	ip, #0
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	fa02 f209 	lsl.w	r2, r2, r9
 800a562:	ea42 020c 	orr.w	r2, r2, ip
 800a566:	f84a 2b04 	str.w	r2, [sl], #4
 800a56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56e:	4298      	cmp	r0, r3
 800a570:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a574:	d8f2      	bhi.n	800a55c <__lshift+0x70>
 800a576:	1b03      	subs	r3, r0, r4
 800a578:	3b15      	subs	r3, #21
 800a57a:	f023 0303 	bic.w	r3, r3, #3
 800a57e:	3304      	adds	r3, #4
 800a580:	f104 0215 	add.w	r2, r4, #21
 800a584:	4290      	cmp	r0, r2
 800a586:	bf38      	it	cc
 800a588:	2304      	movcc	r3, #4
 800a58a:	f841 c003 	str.w	ip, [r1, r3]
 800a58e:	f1bc 0f00 	cmp.w	ip, #0
 800a592:	d001      	beq.n	800a598 <__lshift+0xac>
 800a594:	f108 0602 	add.w	r6, r8, #2
 800a598:	3e01      	subs	r6, #1
 800a59a:	4638      	mov	r0, r7
 800a59c:	612e      	str	r6, [r5, #16]
 800a59e:	4621      	mov	r1, r4
 800a5a0:	f7ff fd88 	bl	800a0b4 <_Bfree>
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	e7c1      	b.n	800a536 <__lshift+0x4a>
 800a5b2:	3904      	subs	r1, #4
 800a5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5bc:	4298      	cmp	r0, r3
 800a5be:	d8f9      	bhi.n	800a5b4 <__lshift+0xc8>
 800a5c0:	e7ea      	b.n	800a598 <__lshift+0xac>
 800a5c2:	bf00      	nop
 800a5c4:	0800baf0 	.word	0x0800baf0
 800a5c8:	0800bb93 	.word	0x0800bb93

0800a5cc <__mcmp>:
 800a5cc:	b530      	push	{r4, r5, lr}
 800a5ce:	6902      	ldr	r2, [r0, #16]
 800a5d0:	690c      	ldr	r4, [r1, #16]
 800a5d2:	1b12      	subs	r2, r2, r4
 800a5d4:	d10e      	bne.n	800a5f4 <__mcmp+0x28>
 800a5d6:	f100 0314 	add.w	r3, r0, #20
 800a5da:	3114      	adds	r1, #20
 800a5dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5ec:	42a5      	cmp	r5, r4
 800a5ee:	d003      	beq.n	800a5f8 <__mcmp+0x2c>
 800a5f0:	d305      	bcc.n	800a5fe <__mcmp+0x32>
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	bd30      	pop	{r4, r5, pc}
 800a5f8:	4283      	cmp	r3, r0
 800a5fa:	d3f3      	bcc.n	800a5e4 <__mcmp+0x18>
 800a5fc:	e7fa      	b.n	800a5f4 <__mcmp+0x28>
 800a5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a602:	e7f7      	b.n	800a5f4 <__mcmp+0x28>

0800a604 <__mdiff>:
 800a604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	460c      	mov	r4, r1
 800a60a:	4606      	mov	r6, r0
 800a60c:	4611      	mov	r1, r2
 800a60e:	4620      	mov	r0, r4
 800a610:	4690      	mov	r8, r2
 800a612:	f7ff ffdb 	bl	800a5cc <__mcmp>
 800a616:	1e05      	subs	r5, r0, #0
 800a618:	d110      	bne.n	800a63c <__mdiff+0x38>
 800a61a:	4629      	mov	r1, r5
 800a61c:	4630      	mov	r0, r6
 800a61e:	f7ff fd09 	bl	800a034 <_Balloc>
 800a622:	b930      	cbnz	r0, 800a632 <__mdiff+0x2e>
 800a624:	4b3a      	ldr	r3, [pc, #232]	; (800a710 <__mdiff+0x10c>)
 800a626:	4602      	mov	r2, r0
 800a628:	f240 2132 	movw	r1, #562	; 0x232
 800a62c:	4839      	ldr	r0, [pc, #228]	; (800a714 <__mdiff+0x110>)
 800a62e:	f000 faa5 	bl	800ab7c <__assert_func>
 800a632:	2301      	movs	r3, #1
 800a634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63c:	bfa4      	itt	ge
 800a63e:	4643      	movge	r3, r8
 800a640:	46a0      	movge	r8, r4
 800a642:	4630      	mov	r0, r6
 800a644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a648:	bfa6      	itte	ge
 800a64a:	461c      	movge	r4, r3
 800a64c:	2500      	movge	r5, #0
 800a64e:	2501      	movlt	r5, #1
 800a650:	f7ff fcf0 	bl	800a034 <_Balloc>
 800a654:	b920      	cbnz	r0, 800a660 <__mdiff+0x5c>
 800a656:	4b2e      	ldr	r3, [pc, #184]	; (800a710 <__mdiff+0x10c>)
 800a658:	4602      	mov	r2, r0
 800a65a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a65e:	e7e5      	b.n	800a62c <__mdiff+0x28>
 800a660:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a664:	6926      	ldr	r6, [r4, #16]
 800a666:	60c5      	str	r5, [r0, #12]
 800a668:	f104 0914 	add.w	r9, r4, #20
 800a66c:	f108 0514 	add.w	r5, r8, #20
 800a670:	f100 0e14 	add.w	lr, r0, #20
 800a674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a67c:	f108 0210 	add.w	r2, r8, #16
 800a680:	46f2      	mov	sl, lr
 800a682:	2100      	movs	r1, #0
 800a684:	f859 3b04 	ldr.w	r3, [r9], #4
 800a688:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a68c:	fa1f f883 	uxth.w	r8, r3
 800a690:	fa11 f18b 	uxtah	r1, r1, fp
 800a694:	0c1b      	lsrs	r3, r3, #16
 800a696:	eba1 0808 	sub.w	r8, r1, r8
 800a69a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a69e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6a2:	fa1f f888 	uxth.w	r8, r8
 800a6a6:	1419      	asrs	r1, r3, #16
 800a6a8:	454e      	cmp	r6, r9
 800a6aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6ae:	f84a 3b04 	str.w	r3, [sl], #4
 800a6b2:	d8e7      	bhi.n	800a684 <__mdiff+0x80>
 800a6b4:	1b33      	subs	r3, r6, r4
 800a6b6:	3b15      	subs	r3, #21
 800a6b8:	f023 0303 	bic.w	r3, r3, #3
 800a6bc:	3304      	adds	r3, #4
 800a6be:	3415      	adds	r4, #21
 800a6c0:	42a6      	cmp	r6, r4
 800a6c2:	bf38      	it	cc
 800a6c4:	2304      	movcc	r3, #4
 800a6c6:	441d      	add	r5, r3
 800a6c8:	4473      	add	r3, lr
 800a6ca:	469e      	mov	lr, r3
 800a6cc:	462e      	mov	r6, r5
 800a6ce:	4566      	cmp	r6, ip
 800a6d0:	d30e      	bcc.n	800a6f0 <__mdiff+0xec>
 800a6d2:	f10c 0203 	add.w	r2, ip, #3
 800a6d6:	1b52      	subs	r2, r2, r5
 800a6d8:	f022 0203 	bic.w	r2, r2, #3
 800a6dc:	3d03      	subs	r5, #3
 800a6de:	45ac      	cmp	ip, r5
 800a6e0:	bf38      	it	cc
 800a6e2:	2200      	movcc	r2, #0
 800a6e4:	441a      	add	r2, r3
 800a6e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6ea:	b17b      	cbz	r3, 800a70c <__mdiff+0x108>
 800a6ec:	6107      	str	r7, [r0, #16]
 800a6ee:	e7a3      	b.n	800a638 <__mdiff+0x34>
 800a6f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a6f4:	fa11 f288 	uxtah	r2, r1, r8
 800a6f8:	1414      	asrs	r4, r2, #16
 800a6fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a6fe:	b292      	uxth	r2, r2
 800a700:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a704:	f84e 2b04 	str.w	r2, [lr], #4
 800a708:	1421      	asrs	r1, r4, #16
 800a70a:	e7e0      	b.n	800a6ce <__mdiff+0xca>
 800a70c:	3f01      	subs	r7, #1
 800a70e:	e7ea      	b.n	800a6e6 <__mdiff+0xe2>
 800a710:	0800baf0 	.word	0x0800baf0
 800a714:	0800bb93 	.word	0x0800bb93

0800a718 <__ulp>:
 800a718:	b082      	sub	sp, #8
 800a71a:	ed8d 0b00 	vstr	d0, [sp]
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	4912      	ldr	r1, [pc, #72]	; (800a76c <__ulp+0x54>)
 800a722:	4019      	ands	r1, r3
 800a724:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a728:	2900      	cmp	r1, #0
 800a72a:	dd05      	ble.n	800a738 <__ulp+0x20>
 800a72c:	2200      	movs	r2, #0
 800a72e:	460b      	mov	r3, r1
 800a730:	ec43 2b10 	vmov	d0, r2, r3
 800a734:	b002      	add	sp, #8
 800a736:	4770      	bx	lr
 800a738:	4249      	negs	r1, r1
 800a73a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a73e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	da04      	bge.n	800a756 <__ulp+0x3e>
 800a74c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a750:	fa41 f300 	asr.w	r3, r1, r0
 800a754:	e7ec      	b.n	800a730 <__ulp+0x18>
 800a756:	f1a0 0114 	sub.w	r1, r0, #20
 800a75a:	291e      	cmp	r1, #30
 800a75c:	bfda      	itte	le
 800a75e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a762:	fa20 f101 	lsrle.w	r1, r0, r1
 800a766:	2101      	movgt	r1, #1
 800a768:	460a      	mov	r2, r1
 800a76a:	e7e1      	b.n	800a730 <__ulp+0x18>
 800a76c:	7ff00000 	.word	0x7ff00000

0800a770 <__b2d>:
 800a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a772:	6905      	ldr	r5, [r0, #16]
 800a774:	f100 0714 	add.w	r7, r0, #20
 800a778:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a77c:	1f2e      	subs	r6, r5, #4
 800a77e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a782:	4620      	mov	r0, r4
 800a784:	f7ff fd48 	bl	800a218 <__hi0bits>
 800a788:	f1c0 0320 	rsb	r3, r0, #32
 800a78c:	280a      	cmp	r0, #10
 800a78e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a80c <__b2d+0x9c>
 800a792:	600b      	str	r3, [r1, #0]
 800a794:	dc14      	bgt.n	800a7c0 <__b2d+0x50>
 800a796:	f1c0 0e0b 	rsb	lr, r0, #11
 800a79a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a79e:	42b7      	cmp	r7, r6
 800a7a0:	ea41 030c 	orr.w	r3, r1, ip
 800a7a4:	bf34      	ite	cc
 800a7a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7aa:	2100      	movcs	r1, #0
 800a7ac:	3015      	adds	r0, #21
 800a7ae:	fa04 f000 	lsl.w	r0, r4, r0
 800a7b2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a7b6:	ea40 0201 	orr.w	r2, r0, r1
 800a7ba:	ec43 2b10 	vmov	d0, r2, r3
 800a7be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7c0:	42b7      	cmp	r7, r6
 800a7c2:	bf3a      	itte	cc
 800a7c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7cc:	2100      	movcs	r1, #0
 800a7ce:	380b      	subs	r0, #11
 800a7d0:	d017      	beq.n	800a802 <__b2d+0x92>
 800a7d2:	f1c0 0c20 	rsb	ip, r0, #32
 800a7d6:	fa04 f500 	lsl.w	r5, r4, r0
 800a7da:	42be      	cmp	r6, r7
 800a7dc:	fa21 f40c 	lsr.w	r4, r1, ip
 800a7e0:	ea45 0504 	orr.w	r5, r5, r4
 800a7e4:	bf8c      	ite	hi
 800a7e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7ea:	2400      	movls	r4, #0
 800a7ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a7f0:	fa01 f000 	lsl.w	r0, r1, r0
 800a7f4:	fa24 f40c 	lsr.w	r4, r4, ip
 800a7f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7fc:	ea40 0204 	orr.w	r2, r0, r4
 800a800:	e7db      	b.n	800a7ba <__b2d+0x4a>
 800a802:	ea44 030c 	orr.w	r3, r4, ip
 800a806:	460a      	mov	r2, r1
 800a808:	e7d7      	b.n	800a7ba <__b2d+0x4a>
 800a80a:	bf00      	nop
 800a80c:	3ff00000 	.word	0x3ff00000

0800a810 <__d2b>:
 800a810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a814:	4689      	mov	r9, r1
 800a816:	2101      	movs	r1, #1
 800a818:	ec57 6b10 	vmov	r6, r7, d0
 800a81c:	4690      	mov	r8, r2
 800a81e:	f7ff fc09 	bl	800a034 <_Balloc>
 800a822:	4604      	mov	r4, r0
 800a824:	b930      	cbnz	r0, 800a834 <__d2b+0x24>
 800a826:	4602      	mov	r2, r0
 800a828:	4b25      	ldr	r3, [pc, #148]	; (800a8c0 <__d2b+0xb0>)
 800a82a:	4826      	ldr	r0, [pc, #152]	; (800a8c4 <__d2b+0xb4>)
 800a82c:	f240 310a 	movw	r1, #778	; 0x30a
 800a830:	f000 f9a4 	bl	800ab7c <__assert_func>
 800a834:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a838:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a83c:	bb35      	cbnz	r5, 800a88c <__d2b+0x7c>
 800a83e:	2e00      	cmp	r6, #0
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	d028      	beq.n	800a896 <__d2b+0x86>
 800a844:	4668      	mov	r0, sp
 800a846:	9600      	str	r6, [sp, #0]
 800a848:	f7ff fd06 	bl	800a258 <__lo0bits>
 800a84c:	9900      	ldr	r1, [sp, #0]
 800a84e:	b300      	cbz	r0, 800a892 <__d2b+0x82>
 800a850:	9a01      	ldr	r2, [sp, #4]
 800a852:	f1c0 0320 	rsb	r3, r0, #32
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	430b      	orrs	r3, r1
 800a85c:	40c2      	lsrs	r2, r0
 800a85e:	6163      	str	r3, [r4, #20]
 800a860:	9201      	str	r2, [sp, #4]
 800a862:	9b01      	ldr	r3, [sp, #4]
 800a864:	61a3      	str	r3, [r4, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	bf14      	ite	ne
 800a86a:	2202      	movne	r2, #2
 800a86c:	2201      	moveq	r2, #1
 800a86e:	6122      	str	r2, [r4, #16]
 800a870:	b1d5      	cbz	r5, 800a8a8 <__d2b+0x98>
 800a872:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a876:	4405      	add	r5, r0
 800a878:	f8c9 5000 	str.w	r5, [r9]
 800a87c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a880:	f8c8 0000 	str.w	r0, [r8]
 800a884:	4620      	mov	r0, r4
 800a886:	b003      	add	sp, #12
 800a888:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a88c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a890:	e7d5      	b.n	800a83e <__d2b+0x2e>
 800a892:	6161      	str	r1, [r4, #20]
 800a894:	e7e5      	b.n	800a862 <__d2b+0x52>
 800a896:	a801      	add	r0, sp, #4
 800a898:	f7ff fcde 	bl	800a258 <__lo0bits>
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	6163      	str	r3, [r4, #20]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	6122      	str	r2, [r4, #16]
 800a8a4:	3020      	adds	r0, #32
 800a8a6:	e7e3      	b.n	800a870 <__d2b+0x60>
 800a8a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8b0:	f8c9 0000 	str.w	r0, [r9]
 800a8b4:	6918      	ldr	r0, [r3, #16]
 800a8b6:	f7ff fcaf 	bl	800a218 <__hi0bits>
 800a8ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8be:	e7df      	b.n	800a880 <__d2b+0x70>
 800a8c0:	0800baf0 	.word	0x0800baf0
 800a8c4:	0800bb93 	.word	0x0800bb93

0800a8c8 <__ratio>:
 800a8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8cc:	4688      	mov	r8, r1
 800a8ce:	4669      	mov	r1, sp
 800a8d0:	4681      	mov	r9, r0
 800a8d2:	f7ff ff4d 	bl	800a770 <__b2d>
 800a8d6:	a901      	add	r1, sp, #4
 800a8d8:	4640      	mov	r0, r8
 800a8da:	ec55 4b10 	vmov	r4, r5, d0
 800a8de:	ee10 aa10 	vmov	sl, s0
 800a8e2:	f7ff ff45 	bl	800a770 <__b2d>
 800a8e6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8ea:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a8ee:	1a59      	subs	r1, r3, r1
 800a8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8f4:	1ad3      	subs	r3, r2, r3
 800a8f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a8fa:	ec57 6b10 	vmov	r6, r7, d0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfd6      	itet	le
 800a902:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a906:	462a      	movgt	r2, r5
 800a908:	463a      	movle	r2, r7
 800a90a:	46ab      	mov	fp, r5
 800a90c:	bfd6      	itet	le
 800a90e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a912:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a916:	ee00 3a90 	vmovle	s1, r3
 800a91a:	ec4b ab17 	vmov	d7, sl, fp
 800a91e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a922:	b003      	add	sp, #12
 800a924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a928 <__copybits>:
 800a928:	3901      	subs	r1, #1
 800a92a:	b570      	push	{r4, r5, r6, lr}
 800a92c:	1149      	asrs	r1, r1, #5
 800a92e:	6914      	ldr	r4, [r2, #16]
 800a930:	3101      	adds	r1, #1
 800a932:	f102 0314 	add.w	r3, r2, #20
 800a936:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a93a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a93e:	1f05      	subs	r5, r0, #4
 800a940:	42a3      	cmp	r3, r4
 800a942:	d30c      	bcc.n	800a95e <__copybits+0x36>
 800a944:	1aa3      	subs	r3, r4, r2
 800a946:	3b11      	subs	r3, #17
 800a948:	f023 0303 	bic.w	r3, r3, #3
 800a94c:	3211      	adds	r2, #17
 800a94e:	42a2      	cmp	r2, r4
 800a950:	bf88      	it	hi
 800a952:	2300      	movhi	r3, #0
 800a954:	4418      	add	r0, r3
 800a956:	2300      	movs	r3, #0
 800a958:	4288      	cmp	r0, r1
 800a95a:	d305      	bcc.n	800a968 <__copybits+0x40>
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	f853 6b04 	ldr.w	r6, [r3], #4
 800a962:	f845 6f04 	str.w	r6, [r5, #4]!
 800a966:	e7eb      	b.n	800a940 <__copybits+0x18>
 800a968:	f840 3b04 	str.w	r3, [r0], #4
 800a96c:	e7f4      	b.n	800a958 <__copybits+0x30>

0800a96e <__any_on>:
 800a96e:	f100 0214 	add.w	r2, r0, #20
 800a972:	6900      	ldr	r0, [r0, #16]
 800a974:	114b      	asrs	r3, r1, #5
 800a976:	4298      	cmp	r0, r3
 800a978:	b510      	push	{r4, lr}
 800a97a:	db11      	blt.n	800a9a0 <__any_on+0x32>
 800a97c:	dd0a      	ble.n	800a994 <__any_on+0x26>
 800a97e:	f011 011f 	ands.w	r1, r1, #31
 800a982:	d007      	beq.n	800a994 <__any_on+0x26>
 800a984:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a988:	fa24 f001 	lsr.w	r0, r4, r1
 800a98c:	fa00 f101 	lsl.w	r1, r0, r1
 800a990:	428c      	cmp	r4, r1
 800a992:	d10b      	bne.n	800a9ac <__any_on+0x3e>
 800a994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a998:	4293      	cmp	r3, r2
 800a99a:	d803      	bhi.n	800a9a4 <__any_on+0x36>
 800a99c:	2000      	movs	r0, #0
 800a99e:	bd10      	pop	{r4, pc}
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	e7f7      	b.n	800a994 <__any_on+0x26>
 800a9a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9a8:	2900      	cmp	r1, #0
 800a9aa:	d0f5      	beq.n	800a998 <__any_on+0x2a>
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	e7f6      	b.n	800a99e <__any_on+0x30>

0800a9b0 <_calloc_r>:
 800a9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9b2:	fba1 2402 	umull	r2, r4, r1, r2
 800a9b6:	b94c      	cbnz	r4, 800a9cc <_calloc_r+0x1c>
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	9201      	str	r2, [sp, #4]
 800a9bc:	f000 f82e 	bl	800aa1c <_malloc_r>
 800a9c0:	9a01      	ldr	r2, [sp, #4]
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	b930      	cbnz	r0, 800a9d4 <_calloc_r+0x24>
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	b003      	add	sp, #12
 800a9ca:	bd30      	pop	{r4, r5, pc}
 800a9cc:	220c      	movs	r2, #12
 800a9ce:	6002      	str	r2, [r0, #0]
 800a9d0:	2500      	movs	r5, #0
 800a9d2:	e7f8      	b.n	800a9c6 <_calloc_r+0x16>
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7fe f991 	bl	8008cfc <memset>
 800a9da:	e7f4      	b.n	800a9c6 <_calloc_r+0x16>

0800a9dc <sbrk_aligned>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	4e0e      	ldr	r6, [pc, #56]	; (800aa18 <sbrk_aligned+0x3c>)
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	6831      	ldr	r1, [r6, #0]
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	b911      	cbnz	r1, 800a9ee <sbrk_aligned+0x12>
 800a9e8:	f000 f896 	bl	800ab18 <_sbrk_r>
 800a9ec:	6030      	str	r0, [r6, #0]
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	f000 f891 	bl	800ab18 <_sbrk_r>
 800a9f6:	1c43      	adds	r3, r0, #1
 800a9f8:	d00a      	beq.n	800aa10 <sbrk_aligned+0x34>
 800a9fa:	1cc4      	adds	r4, r0, #3
 800a9fc:	f024 0403 	bic.w	r4, r4, #3
 800aa00:	42a0      	cmp	r0, r4
 800aa02:	d007      	beq.n	800aa14 <sbrk_aligned+0x38>
 800aa04:	1a21      	subs	r1, r4, r0
 800aa06:	4628      	mov	r0, r5
 800aa08:	f000 f886 	bl	800ab18 <_sbrk_r>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	d101      	bne.n	800aa14 <sbrk_aligned+0x38>
 800aa10:	f04f 34ff 	mov.w	r4, #4294967295
 800aa14:	4620      	mov	r0, r4
 800aa16:	bd70      	pop	{r4, r5, r6, pc}
 800aa18:	240009a4 	.word	0x240009a4

0800aa1c <_malloc_r>:
 800aa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa20:	1ccd      	adds	r5, r1, #3
 800aa22:	f025 0503 	bic.w	r5, r5, #3
 800aa26:	3508      	adds	r5, #8
 800aa28:	2d0c      	cmp	r5, #12
 800aa2a:	bf38      	it	cc
 800aa2c:	250c      	movcc	r5, #12
 800aa2e:	2d00      	cmp	r5, #0
 800aa30:	4607      	mov	r7, r0
 800aa32:	db01      	blt.n	800aa38 <_malloc_r+0x1c>
 800aa34:	42a9      	cmp	r1, r5
 800aa36:	d905      	bls.n	800aa44 <_malloc_r+0x28>
 800aa38:	230c      	movs	r3, #12
 800aa3a:	603b      	str	r3, [r7, #0]
 800aa3c:	2600      	movs	r6, #0
 800aa3e:	4630      	mov	r0, r6
 800aa40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa44:	4e2e      	ldr	r6, [pc, #184]	; (800ab00 <_malloc_r+0xe4>)
 800aa46:	f000 f8d1 	bl	800abec <__malloc_lock>
 800aa4a:	6833      	ldr	r3, [r6, #0]
 800aa4c:	461c      	mov	r4, r3
 800aa4e:	bb34      	cbnz	r4, 800aa9e <_malloc_r+0x82>
 800aa50:	4629      	mov	r1, r5
 800aa52:	4638      	mov	r0, r7
 800aa54:	f7ff ffc2 	bl	800a9dc <sbrk_aligned>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	d14d      	bne.n	800aafa <_malloc_r+0xde>
 800aa5e:	6834      	ldr	r4, [r6, #0]
 800aa60:	4626      	mov	r6, r4
 800aa62:	2e00      	cmp	r6, #0
 800aa64:	d140      	bne.n	800aae8 <_malloc_r+0xcc>
 800aa66:	6823      	ldr	r3, [r4, #0]
 800aa68:	4631      	mov	r1, r6
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	eb04 0803 	add.w	r8, r4, r3
 800aa70:	f000 f852 	bl	800ab18 <_sbrk_r>
 800aa74:	4580      	cmp	r8, r0
 800aa76:	d13a      	bne.n	800aaee <_malloc_r+0xd2>
 800aa78:	6821      	ldr	r1, [r4, #0]
 800aa7a:	3503      	adds	r5, #3
 800aa7c:	1a6d      	subs	r5, r5, r1
 800aa7e:	f025 0503 	bic.w	r5, r5, #3
 800aa82:	3508      	adds	r5, #8
 800aa84:	2d0c      	cmp	r5, #12
 800aa86:	bf38      	it	cc
 800aa88:	250c      	movcc	r5, #12
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	f7ff ffa5 	bl	800a9dc <sbrk_aligned>
 800aa92:	3001      	adds	r0, #1
 800aa94:	d02b      	beq.n	800aaee <_malloc_r+0xd2>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	442b      	add	r3, r5
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	e00e      	b.n	800aabc <_malloc_r+0xa0>
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	1b52      	subs	r2, r2, r5
 800aaa2:	d41e      	bmi.n	800aae2 <_malloc_r+0xc6>
 800aaa4:	2a0b      	cmp	r2, #11
 800aaa6:	d916      	bls.n	800aad6 <_malloc_r+0xba>
 800aaa8:	1961      	adds	r1, r4, r5
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	6025      	str	r5, [r4, #0]
 800aaae:	bf18      	it	ne
 800aab0:	6059      	strne	r1, [r3, #4]
 800aab2:	6863      	ldr	r3, [r4, #4]
 800aab4:	bf08      	it	eq
 800aab6:	6031      	streq	r1, [r6, #0]
 800aab8:	5162      	str	r2, [r4, r5]
 800aaba:	604b      	str	r3, [r1, #4]
 800aabc:	4638      	mov	r0, r7
 800aabe:	f104 060b 	add.w	r6, r4, #11
 800aac2:	f000 f899 	bl	800abf8 <__malloc_unlock>
 800aac6:	f026 0607 	bic.w	r6, r6, #7
 800aaca:	1d23      	adds	r3, r4, #4
 800aacc:	1af2      	subs	r2, r6, r3
 800aace:	d0b6      	beq.n	800aa3e <_malloc_r+0x22>
 800aad0:	1b9b      	subs	r3, r3, r6
 800aad2:	50a3      	str	r3, [r4, r2]
 800aad4:	e7b3      	b.n	800aa3e <_malloc_r+0x22>
 800aad6:	6862      	ldr	r2, [r4, #4]
 800aad8:	42a3      	cmp	r3, r4
 800aada:	bf0c      	ite	eq
 800aadc:	6032      	streq	r2, [r6, #0]
 800aade:	605a      	strne	r2, [r3, #4]
 800aae0:	e7ec      	b.n	800aabc <_malloc_r+0xa0>
 800aae2:	4623      	mov	r3, r4
 800aae4:	6864      	ldr	r4, [r4, #4]
 800aae6:	e7b2      	b.n	800aa4e <_malloc_r+0x32>
 800aae8:	4634      	mov	r4, r6
 800aaea:	6876      	ldr	r6, [r6, #4]
 800aaec:	e7b9      	b.n	800aa62 <_malloc_r+0x46>
 800aaee:	230c      	movs	r3, #12
 800aaf0:	603b      	str	r3, [r7, #0]
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f000 f880 	bl	800abf8 <__malloc_unlock>
 800aaf8:	e7a1      	b.n	800aa3e <_malloc_r+0x22>
 800aafa:	6025      	str	r5, [r4, #0]
 800aafc:	e7de      	b.n	800aabc <_malloc_r+0xa0>
 800aafe:	bf00      	nop
 800ab00:	240009a0 	.word	0x240009a0
 800ab04:	00000000 	.word	0x00000000

0800ab08 <nan>:
 800ab08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab10 <nan+0x8>
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	00000000 	.word	0x00000000
 800ab14:	7ff80000 	.word	0x7ff80000

0800ab18 <_sbrk_r>:
 800ab18:	b538      	push	{r3, r4, r5, lr}
 800ab1a:	4d06      	ldr	r5, [pc, #24]	; (800ab34 <_sbrk_r+0x1c>)
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	4604      	mov	r4, r0
 800ab20:	4608      	mov	r0, r1
 800ab22:	602b      	str	r3, [r5, #0]
 800ab24:	f7f7 f91c 	bl	8001d60 <_sbrk>
 800ab28:	1c43      	adds	r3, r0, #1
 800ab2a:	d102      	bne.n	800ab32 <_sbrk_r+0x1a>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	b103      	cbz	r3, 800ab32 <_sbrk_r+0x1a>
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	240009a8 	.word	0x240009a8

0800ab38 <strncmp>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	b17a      	cbz	r2, 800ab5c <strncmp+0x24>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	3901      	subs	r1, #1
 800ab40:	1884      	adds	r4, r0, r2
 800ab42:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab4a:	4290      	cmp	r0, r2
 800ab4c:	d101      	bne.n	800ab52 <strncmp+0x1a>
 800ab4e:	42a3      	cmp	r3, r4
 800ab50:	d101      	bne.n	800ab56 <strncmp+0x1e>
 800ab52:	1a80      	subs	r0, r0, r2
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d1f3      	bne.n	800ab42 <strncmp+0xa>
 800ab5a:	e7fa      	b.n	800ab52 <strncmp+0x1a>
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	e7f9      	b.n	800ab54 <strncmp+0x1c>

0800ab60 <__ascii_wctomb>:
 800ab60:	b149      	cbz	r1, 800ab76 <__ascii_wctomb+0x16>
 800ab62:	2aff      	cmp	r2, #255	; 0xff
 800ab64:	bf85      	ittet	hi
 800ab66:	238a      	movhi	r3, #138	; 0x8a
 800ab68:	6003      	strhi	r3, [r0, #0]
 800ab6a:	700a      	strbls	r2, [r1, #0]
 800ab6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab70:	bf98      	it	ls
 800ab72:	2001      	movls	r0, #1
 800ab74:	4770      	bx	lr
 800ab76:	4608      	mov	r0, r1
 800ab78:	4770      	bx	lr
	...

0800ab7c <__assert_func>:
 800ab7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab7e:	4614      	mov	r4, r2
 800ab80:	461a      	mov	r2, r3
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <__assert_func+0x2c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4605      	mov	r5, r0
 800ab88:	68d8      	ldr	r0, [r3, #12]
 800ab8a:	b14c      	cbz	r4, 800aba0 <__assert_func+0x24>
 800ab8c:	4b07      	ldr	r3, [pc, #28]	; (800abac <__assert_func+0x30>)
 800ab8e:	9100      	str	r1, [sp, #0]
 800ab90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab94:	4906      	ldr	r1, [pc, #24]	; (800abb0 <__assert_func+0x34>)
 800ab96:	462b      	mov	r3, r5
 800ab98:	f000 f80e 	bl	800abb8 <fiprintf>
 800ab9c:	f000 fc2c 	bl	800b3f8 <abort>
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <__assert_func+0x38>)
 800aba2:	461c      	mov	r4, r3
 800aba4:	e7f3      	b.n	800ab8e <__assert_func+0x12>
 800aba6:	bf00      	nop
 800aba8:	24000318 	.word	0x24000318
 800abac:	0800bcec 	.word	0x0800bcec
 800abb0:	0800bcf9 	.word	0x0800bcf9
 800abb4:	0800bd27 	.word	0x0800bd27

0800abb8 <fiprintf>:
 800abb8:	b40e      	push	{r1, r2, r3}
 800abba:	b503      	push	{r0, r1, lr}
 800abbc:	4601      	mov	r1, r0
 800abbe:	ab03      	add	r3, sp, #12
 800abc0:	4805      	ldr	r0, [pc, #20]	; (800abd8 <fiprintf+0x20>)
 800abc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc6:	6800      	ldr	r0, [r0, #0]
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	f000 f891 	bl	800acf0 <_vfiprintf_r>
 800abce:	b002      	add	sp, #8
 800abd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abd4:	b003      	add	sp, #12
 800abd6:	4770      	bx	lr
 800abd8:	24000318 	.word	0x24000318

0800abdc <malloc>:
 800abdc:	4b02      	ldr	r3, [pc, #8]	; (800abe8 <malloc+0xc>)
 800abde:	4601      	mov	r1, r0
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	f7ff bf1b 	b.w	800aa1c <_malloc_r>
 800abe6:	bf00      	nop
 800abe8:	24000318 	.word	0x24000318

0800abec <__malloc_lock>:
 800abec:	4801      	ldr	r0, [pc, #4]	; (800abf4 <__malloc_lock+0x8>)
 800abee:	f000 bdc3 	b.w	800b778 <__retarget_lock_acquire_recursive>
 800abf2:	bf00      	nop
 800abf4:	240009ac 	.word	0x240009ac

0800abf8 <__malloc_unlock>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__malloc_unlock+0x8>)
 800abfa:	f000 bdbe 	b.w	800b77a <__retarget_lock_release_recursive>
 800abfe:	bf00      	nop
 800ac00:	240009ac 	.word	0x240009ac

0800ac04 <_free_r>:
 800ac04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac06:	2900      	cmp	r1, #0
 800ac08:	d044      	beq.n	800ac94 <_free_r+0x90>
 800ac0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0e:	9001      	str	r0, [sp, #4]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f1a1 0404 	sub.w	r4, r1, #4
 800ac16:	bfb8      	it	lt
 800ac18:	18e4      	addlt	r4, r4, r3
 800ac1a:	f7ff ffe7 	bl	800abec <__malloc_lock>
 800ac1e:	4a1e      	ldr	r2, [pc, #120]	; (800ac98 <_free_r+0x94>)
 800ac20:	9801      	ldr	r0, [sp, #4]
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	b933      	cbnz	r3, 800ac34 <_free_r+0x30>
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	6014      	str	r4, [r2, #0]
 800ac2a:	b003      	add	sp, #12
 800ac2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac30:	f7ff bfe2 	b.w	800abf8 <__malloc_unlock>
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	d908      	bls.n	800ac4a <_free_r+0x46>
 800ac38:	6825      	ldr	r5, [r4, #0]
 800ac3a:	1961      	adds	r1, r4, r5
 800ac3c:	428b      	cmp	r3, r1
 800ac3e:	bf01      	itttt	eq
 800ac40:	6819      	ldreq	r1, [r3, #0]
 800ac42:	685b      	ldreq	r3, [r3, #4]
 800ac44:	1949      	addeq	r1, r1, r5
 800ac46:	6021      	streq	r1, [r4, #0]
 800ac48:	e7ed      	b.n	800ac26 <_free_r+0x22>
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	b10b      	cbz	r3, 800ac54 <_free_r+0x50>
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	d9fa      	bls.n	800ac4a <_free_r+0x46>
 800ac54:	6811      	ldr	r1, [r2, #0]
 800ac56:	1855      	adds	r5, r2, r1
 800ac58:	42a5      	cmp	r5, r4
 800ac5a:	d10b      	bne.n	800ac74 <_free_r+0x70>
 800ac5c:	6824      	ldr	r4, [r4, #0]
 800ac5e:	4421      	add	r1, r4
 800ac60:	1854      	adds	r4, r2, r1
 800ac62:	42a3      	cmp	r3, r4
 800ac64:	6011      	str	r1, [r2, #0]
 800ac66:	d1e0      	bne.n	800ac2a <_free_r+0x26>
 800ac68:	681c      	ldr	r4, [r3, #0]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	6053      	str	r3, [r2, #4]
 800ac6e:	4421      	add	r1, r4
 800ac70:	6011      	str	r1, [r2, #0]
 800ac72:	e7da      	b.n	800ac2a <_free_r+0x26>
 800ac74:	d902      	bls.n	800ac7c <_free_r+0x78>
 800ac76:	230c      	movs	r3, #12
 800ac78:	6003      	str	r3, [r0, #0]
 800ac7a:	e7d6      	b.n	800ac2a <_free_r+0x26>
 800ac7c:	6825      	ldr	r5, [r4, #0]
 800ac7e:	1961      	adds	r1, r4, r5
 800ac80:	428b      	cmp	r3, r1
 800ac82:	bf04      	itt	eq
 800ac84:	6819      	ldreq	r1, [r3, #0]
 800ac86:	685b      	ldreq	r3, [r3, #4]
 800ac88:	6063      	str	r3, [r4, #4]
 800ac8a:	bf04      	itt	eq
 800ac8c:	1949      	addeq	r1, r1, r5
 800ac8e:	6021      	streq	r1, [r4, #0]
 800ac90:	6054      	str	r4, [r2, #4]
 800ac92:	e7ca      	b.n	800ac2a <_free_r+0x26>
 800ac94:	b003      	add	sp, #12
 800ac96:	bd30      	pop	{r4, r5, pc}
 800ac98:	240009a0 	.word	0x240009a0

0800ac9c <__sfputc_r>:
 800ac9c:	6893      	ldr	r3, [r2, #8]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	b410      	push	{r4}
 800aca4:	6093      	str	r3, [r2, #8]
 800aca6:	da08      	bge.n	800acba <__sfputc_r+0x1e>
 800aca8:	6994      	ldr	r4, [r2, #24]
 800acaa:	42a3      	cmp	r3, r4
 800acac:	db01      	blt.n	800acb2 <__sfputc_r+0x16>
 800acae:	290a      	cmp	r1, #10
 800acb0:	d103      	bne.n	800acba <__sfputc_r+0x1e>
 800acb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acb6:	f000 badf 	b.w	800b278 <__swbuf_r>
 800acba:	6813      	ldr	r3, [r2, #0]
 800acbc:	1c58      	adds	r0, r3, #1
 800acbe:	6010      	str	r0, [r2, #0]
 800acc0:	7019      	strb	r1, [r3, #0]
 800acc2:	4608      	mov	r0, r1
 800acc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <__sfputs_r>:
 800acca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800accc:	4606      	mov	r6, r0
 800acce:	460f      	mov	r7, r1
 800acd0:	4614      	mov	r4, r2
 800acd2:	18d5      	adds	r5, r2, r3
 800acd4:	42ac      	cmp	r4, r5
 800acd6:	d101      	bne.n	800acdc <__sfputs_r+0x12>
 800acd8:	2000      	movs	r0, #0
 800acda:	e007      	b.n	800acec <__sfputs_r+0x22>
 800acdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ace0:	463a      	mov	r2, r7
 800ace2:	4630      	mov	r0, r6
 800ace4:	f7ff ffda 	bl	800ac9c <__sfputc_r>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d1f3      	bne.n	800acd4 <__sfputs_r+0xa>
 800acec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acf0 <_vfiprintf_r>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	460d      	mov	r5, r1
 800acf6:	b09d      	sub	sp, #116	; 0x74
 800acf8:	4614      	mov	r4, r2
 800acfa:	4698      	mov	r8, r3
 800acfc:	4606      	mov	r6, r0
 800acfe:	b118      	cbz	r0, 800ad08 <_vfiprintf_r+0x18>
 800ad00:	6983      	ldr	r3, [r0, #24]
 800ad02:	b90b      	cbnz	r3, 800ad08 <_vfiprintf_r+0x18>
 800ad04:	f000 fc9a 	bl	800b63c <__sinit>
 800ad08:	4b89      	ldr	r3, [pc, #548]	; (800af30 <_vfiprintf_r+0x240>)
 800ad0a:	429d      	cmp	r5, r3
 800ad0c:	d11b      	bne.n	800ad46 <_vfiprintf_r+0x56>
 800ad0e:	6875      	ldr	r5, [r6, #4]
 800ad10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad12:	07d9      	lsls	r1, r3, #31
 800ad14:	d405      	bmi.n	800ad22 <_vfiprintf_r+0x32>
 800ad16:	89ab      	ldrh	r3, [r5, #12]
 800ad18:	059a      	lsls	r2, r3, #22
 800ad1a:	d402      	bmi.n	800ad22 <_vfiprintf_r+0x32>
 800ad1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad1e:	f000 fd2b 	bl	800b778 <__retarget_lock_acquire_recursive>
 800ad22:	89ab      	ldrh	r3, [r5, #12]
 800ad24:	071b      	lsls	r3, r3, #28
 800ad26:	d501      	bpl.n	800ad2c <_vfiprintf_r+0x3c>
 800ad28:	692b      	ldr	r3, [r5, #16]
 800ad2a:	b9eb      	cbnz	r3, 800ad68 <_vfiprintf_r+0x78>
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	4630      	mov	r0, r6
 800ad30:	f000 faf4 	bl	800b31c <__swsetup_r>
 800ad34:	b1c0      	cbz	r0, 800ad68 <_vfiprintf_r+0x78>
 800ad36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad38:	07dc      	lsls	r4, r3, #31
 800ad3a:	d50e      	bpl.n	800ad5a <_vfiprintf_r+0x6a>
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	b01d      	add	sp, #116	; 0x74
 800ad42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad46:	4b7b      	ldr	r3, [pc, #492]	; (800af34 <_vfiprintf_r+0x244>)
 800ad48:	429d      	cmp	r5, r3
 800ad4a:	d101      	bne.n	800ad50 <_vfiprintf_r+0x60>
 800ad4c:	68b5      	ldr	r5, [r6, #8]
 800ad4e:	e7df      	b.n	800ad10 <_vfiprintf_r+0x20>
 800ad50:	4b79      	ldr	r3, [pc, #484]	; (800af38 <_vfiprintf_r+0x248>)
 800ad52:	429d      	cmp	r5, r3
 800ad54:	bf08      	it	eq
 800ad56:	68f5      	ldreq	r5, [r6, #12]
 800ad58:	e7da      	b.n	800ad10 <_vfiprintf_r+0x20>
 800ad5a:	89ab      	ldrh	r3, [r5, #12]
 800ad5c:	0598      	lsls	r0, r3, #22
 800ad5e:	d4ed      	bmi.n	800ad3c <_vfiprintf_r+0x4c>
 800ad60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad62:	f000 fd0a 	bl	800b77a <__retarget_lock_release_recursive>
 800ad66:	e7e9      	b.n	800ad3c <_vfiprintf_r+0x4c>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6c:	2320      	movs	r3, #32
 800ad6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad76:	2330      	movs	r3, #48	; 0x30
 800ad78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af3c <_vfiprintf_r+0x24c>
 800ad7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad80:	f04f 0901 	mov.w	r9, #1
 800ad84:	4623      	mov	r3, r4
 800ad86:	469a      	mov	sl, r3
 800ad88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad8c:	b10a      	cbz	r2, 800ad92 <_vfiprintf_r+0xa2>
 800ad8e:	2a25      	cmp	r2, #37	; 0x25
 800ad90:	d1f9      	bne.n	800ad86 <_vfiprintf_r+0x96>
 800ad92:	ebba 0b04 	subs.w	fp, sl, r4
 800ad96:	d00b      	beq.n	800adb0 <_vfiprintf_r+0xc0>
 800ad98:	465b      	mov	r3, fp
 800ad9a:	4622      	mov	r2, r4
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	4630      	mov	r0, r6
 800ada0:	f7ff ff93 	bl	800acca <__sfputs_r>
 800ada4:	3001      	adds	r0, #1
 800ada6:	f000 80aa 	beq.w	800aefe <_vfiprintf_r+0x20e>
 800adaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adac:	445a      	add	r2, fp
 800adae:	9209      	str	r2, [sp, #36]	; 0x24
 800adb0:	f89a 3000 	ldrb.w	r3, [sl]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80a2 	beq.w	800aefe <_vfiprintf_r+0x20e>
 800adba:	2300      	movs	r3, #0
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295
 800adc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adc4:	f10a 0a01 	add.w	sl, sl, #1
 800adc8:	9304      	str	r3, [sp, #16]
 800adca:	9307      	str	r3, [sp, #28]
 800adcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800add0:	931a      	str	r3, [sp, #104]	; 0x68
 800add2:	4654      	mov	r4, sl
 800add4:	2205      	movs	r2, #5
 800add6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adda:	4858      	ldr	r0, [pc, #352]	; (800af3c <_vfiprintf_r+0x24c>)
 800addc:	f7f5 faa0 	bl	8000320 <memchr>
 800ade0:	9a04      	ldr	r2, [sp, #16]
 800ade2:	b9d8      	cbnz	r0, 800ae1c <_vfiprintf_r+0x12c>
 800ade4:	06d1      	lsls	r1, r2, #27
 800ade6:	bf44      	itt	mi
 800ade8:	2320      	movmi	r3, #32
 800adea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adee:	0713      	lsls	r3, r2, #28
 800adf0:	bf44      	itt	mi
 800adf2:	232b      	movmi	r3, #43	; 0x2b
 800adf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adf8:	f89a 3000 	ldrb.w	r3, [sl]
 800adfc:	2b2a      	cmp	r3, #42	; 0x2a
 800adfe:	d015      	beq.n	800ae2c <_vfiprintf_r+0x13c>
 800ae00:	9a07      	ldr	r2, [sp, #28]
 800ae02:	4654      	mov	r4, sl
 800ae04:	2000      	movs	r0, #0
 800ae06:	f04f 0c0a 	mov.w	ip, #10
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae10:	3b30      	subs	r3, #48	; 0x30
 800ae12:	2b09      	cmp	r3, #9
 800ae14:	d94e      	bls.n	800aeb4 <_vfiprintf_r+0x1c4>
 800ae16:	b1b0      	cbz	r0, 800ae46 <_vfiprintf_r+0x156>
 800ae18:	9207      	str	r2, [sp, #28]
 800ae1a:	e014      	b.n	800ae46 <_vfiprintf_r+0x156>
 800ae1c:	eba0 0308 	sub.w	r3, r0, r8
 800ae20:	fa09 f303 	lsl.w	r3, r9, r3
 800ae24:	4313      	orrs	r3, r2
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	46a2      	mov	sl, r4
 800ae2a:	e7d2      	b.n	800add2 <_vfiprintf_r+0xe2>
 800ae2c:	9b03      	ldr	r3, [sp, #12]
 800ae2e:	1d19      	adds	r1, r3, #4
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	9103      	str	r1, [sp, #12]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bfbb      	ittet	lt
 800ae38:	425b      	neglt	r3, r3
 800ae3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ae3e:	9307      	strge	r3, [sp, #28]
 800ae40:	9307      	strlt	r3, [sp, #28]
 800ae42:	bfb8      	it	lt
 800ae44:	9204      	strlt	r2, [sp, #16]
 800ae46:	7823      	ldrb	r3, [r4, #0]
 800ae48:	2b2e      	cmp	r3, #46	; 0x2e
 800ae4a:	d10c      	bne.n	800ae66 <_vfiprintf_r+0x176>
 800ae4c:	7863      	ldrb	r3, [r4, #1]
 800ae4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae50:	d135      	bne.n	800aebe <_vfiprintf_r+0x1ce>
 800ae52:	9b03      	ldr	r3, [sp, #12]
 800ae54:	1d1a      	adds	r2, r3, #4
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	9203      	str	r2, [sp, #12]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	bfb8      	it	lt
 800ae5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae62:	3402      	adds	r4, #2
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af4c <_vfiprintf_r+0x25c>
 800ae6a:	7821      	ldrb	r1, [r4, #0]
 800ae6c:	2203      	movs	r2, #3
 800ae6e:	4650      	mov	r0, sl
 800ae70:	f7f5 fa56 	bl	8000320 <memchr>
 800ae74:	b140      	cbz	r0, 800ae88 <_vfiprintf_r+0x198>
 800ae76:	2340      	movs	r3, #64	; 0x40
 800ae78:	eba0 000a 	sub.w	r0, r0, sl
 800ae7c:	fa03 f000 	lsl.w	r0, r3, r0
 800ae80:	9b04      	ldr	r3, [sp, #16]
 800ae82:	4303      	orrs	r3, r0
 800ae84:	3401      	adds	r4, #1
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8c:	482c      	ldr	r0, [pc, #176]	; (800af40 <_vfiprintf_r+0x250>)
 800ae8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae92:	2206      	movs	r2, #6
 800ae94:	f7f5 fa44 	bl	8000320 <memchr>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d03f      	beq.n	800af1c <_vfiprintf_r+0x22c>
 800ae9c:	4b29      	ldr	r3, [pc, #164]	; (800af44 <_vfiprintf_r+0x254>)
 800ae9e:	bb1b      	cbnz	r3, 800aee8 <_vfiprintf_r+0x1f8>
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	3307      	adds	r3, #7
 800aea4:	f023 0307 	bic.w	r3, r3, #7
 800aea8:	3308      	adds	r3, #8
 800aeaa:	9303      	str	r3, [sp, #12]
 800aeac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeae:	443b      	add	r3, r7
 800aeb0:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb2:	e767      	b.n	800ad84 <_vfiprintf_r+0x94>
 800aeb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeb8:	460c      	mov	r4, r1
 800aeba:	2001      	movs	r0, #1
 800aebc:	e7a5      	b.n	800ae0a <_vfiprintf_r+0x11a>
 800aebe:	2300      	movs	r3, #0
 800aec0:	3401      	adds	r4, #1
 800aec2:	9305      	str	r3, [sp, #20]
 800aec4:	4619      	mov	r1, r3
 800aec6:	f04f 0c0a 	mov.w	ip, #10
 800aeca:	4620      	mov	r0, r4
 800aecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aed0:	3a30      	subs	r2, #48	; 0x30
 800aed2:	2a09      	cmp	r2, #9
 800aed4:	d903      	bls.n	800aede <_vfiprintf_r+0x1ee>
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0c5      	beq.n	800ae66 <_vfiprintf_r+0x176>
 800aeda:	9105      	str	r1, [sp, #20]
 800aedc:	e7c3      	b.n	800ae66 <_vfiprintf_r+0x176>
 800aede:	fb0c 2101 	mla	r1, ip, r1, r2
 800aee2:	4604      	mov	r4, r0
 800aee4:	2301      	movs	r3, #1
 800aee6:	e7f0      	b.n	800aeca <_vfiprintf_r+0x1da>
 800aee8:	ab03      	add	r3, sp, #12
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	462a      	mov	r2, r5
 800aeee:	4b16      	ldr	r3, [pc, #88]	; (800af48 <_vfiprintf_r+0x258>)
 800aef0:	a904      	add	r1, sp, #16
 800aef2:	4630      	mov	r0, r6
 800aef4:	f3af 8000 	nop.w
 800aef8:	4607      	mov	r7, r0
 800aefa:	1c78      	adds	r0, r7, #1
 800aefc:	d1d6      	bne.n	800aeac <_vfiprintf_r+0x1bc>
 800aefe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af00:	07d9      	lsls	r1, r3, #31
 800af02:	d405      	bmi.n	800af10 <_vfiprintf_r+0x220>
 800af04:	89ab      	ldrh	r3, [r5, #12]
 800af06:	059a      	lsls	r2, r3, #22
 800af08:	d402      	bmi.n	800af10 <_vfiprintf_r+0x220>
 800af0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af0c:	f000 fc35 	bl	800b77a <__retarget_lock_release_recursive>
 800af10:	89ab      	ldrh	r3, [r5, #12]
 800af12:	065b      	lsls	r3, r3, #25
 800af14:	f53f af12 	bmi.w	800ad3c <_vfiprintf_r+0x4c>
 800af18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af1a:	e711      	b.n	800ad40 <_vfiprintf_r+0x50>
 800af1c:	ab03      	add	r3, sp, #12
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	462a      	mov	r2, r5
 800af22:	4b09      	ldr	r3, [pc, #36]	; (800af48 <_vfiprintf_r+0x258>)
 800af24:	a904      	add	r1, sp, #16
 800af26:	4630      	mov	r0, r6
 800af28:	f000 f880 	bl	800b02c <_printf_i>
 800af2c:	e7e4      	b.n	800aef8 <_vfiprintf_r+0x208>
 800af2e:	bf00      	nop
 800af30:	0800be7c 	.word	0x0800be7c
 800af34:	0800be9c 	.word	0x0800be9c
 800af38:	0800be5c 	.word	0x0800be5c
 800af3c:	0800be29 	.word	0x0800be29
 800af40:	0800be33 	.word	0x0800be33
 800af44:	00000000 	.word	0x00000000
 800af48:	0800accb 	.word	0x0800accb
 800af4c:	0800be2f 	.word	0x0800be2f

0800af50 <_printf_common>:
 800af50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af54:	4616      	mov	r6, r2
 800af56:	4699      	mov	r9, r3
 800af58:	688a      	ldr	r2, [r1, #8]
 800af5a:	690b      	ldr	r3, [r1, #16]
 800af5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af60:	4293      	cmp	r3, r2
 800af62:	bfb8      	it	lt
 800af64:	4613      	movlt	r3, r2
 800af66:	6033      	str	r3, [r6, #0]
 800af68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af6c:	4607      	mov	r7, r0
 800af6e:	460c      	mov	r4, r1
 800af70:	b10a      	cbz	r2, 800af76 <_printf_common+0x26>
 800af72:	3301      	adds	r3, #1
 800af74:	6033      	str	r3, [r6, #0]
 800af76:	6823      	ldr	r3, [r4, #0]
 800af78:	0699      	lsls	r1, r3, #26
 800af7a:	bf42      	ittt	mi
 800af7c:	6833      	ldrmi	r3, [r6, #0]
 800af7e:	3302      	addmi	r3, #2
 800af80:	6033      	strmi	r3, [r6, #0]
 800af82:	6825      	ldr	r5, [r4, #0]
 800af84:	f015 0506 	ands.w	r5, r5, #6
 800af88:	d106      	bne.n	800af98 <_printf_common+0x48>
 800af8a:	f104 0a19 	add.w	sl, r4, #25
 800af8e:	68e3      	ldr	r3, [r4, #12]
 800af90:	6832      	ldr	r2, [r6, #0]
 800af92:	1a9b      	subs	r3, r3, r2
 800af94:	42ab      	cmp	r3, r5
 800af96:	dc26      	bgt.n	800afe6 <_printf_common+0x96>
 800af98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af9c:	1e13      	subs	r3, r2, #0
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	bf18      	it	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	0692      	lsls	r2, r2, #26
 800afa6:	d42b      	bmi.n	800b000 <_printf_common+0xb0>
 800afa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afac:	4649      	mov	r1, r9
 800afae:	4638      	mov	r0, r7
 800afb0:	47c0      	blx	r8
 800afb2:	3001      	adds	r0, #1
 800afb4:	d01e      	beq.n	800aff4 <_printf_common+0xa4>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	68e5      	ldr	r5, [r4, #12]
 800afba:	6832      	ldr	r2, [r6, #0]
 800afbc:	f003 0306 	and.w	r3, r3, #6
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	bf08      	it	eq
 800afc4:	1aad      	subeq	r5, r5, r2
 800afc6:	68a3      	ldr	r3, [r4, #8]
 800afc8:	6922      	ldr	r2, [r4, #16]
 800afca:	bf0c      	ite	eq
 800afcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afd0:	2500      	movne	r5, #0
 800afd2:	4293      	cmp	r3, r2
 800afd4:	bfc4      	itt	gt
 800afd6:	1a9b      	subgt	r3, r3, r2
 800afd8:	18ed      	addgt	r5, r5, r3
 800afda:	2600      	movs	r6, #0
 800afdc:	341a      	adds	r4, #26
 800afde:	42b5      	cmp	r5, r6
 800afe0:	d11a      	bne.n	800b018 <_printf_common+0xc8>
 800afe2:	2000      	movs	r0, #0
 800afe4:	e008      	b.n	800aff8 <_printf_common+0xa8>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4652      	mov	r2, sl
 800afea:	4649      	mov	r1, r9
 800afec:	4638      	mov	r0, r7
 800afee:	47c0      	blx	r8
 800aff0:	3001      	adds	r0, #1
 800aff2:	d103      	bne.n	800affc <_printf_common+0xac>
 800aff4:	f04f 30ff 	mov.w	r0, #4294967295
 800aff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800affc:	3501      	adds	r5, #1
 800affe:	e7c6      	b.n	800af8e <_printf_common+0x3e>
 800b000:	18e1      	adds	r1, r4, r3
 800b002:	1c5a      	adds	r2, r3, #1
 800b004:	2030      	movs	r0, #48	; 0x30
 800b006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b00a:	4422      	add	r2, r4
 800b00c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b014:	3302      	adds	r3, #2
 800b016:	e7c7      	b.n	800afa8 <_printf_common+0x58>
 800b018:	2301      	movs	r3, #1
 800b01a:	4622      	mov	r2, r4
 800b01c:	4649      	mov	r1, r9
 800b01e:	4638      	mov	r0, r7
 800b020:	47c0      	blx	r8
 800b022:	3001      	adds	r0, #1
 800b024:	d0e6      	beq.n	800aff4 <_printf_common+0xa4>
 800b026:	3601      	adds	r6, #1
 800b028:	e7d9      	b.n	800afde <_printf_common+0x8e>
	...

0800b02c <_printf_i>:
 800b02c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b030:	7e0f      	ldrb	r7, [r1, #24]
 800b032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b034:	2f78      	cmp	r7, #120	; 0x78
 800b036:	4691      	mov	r9, r2
 800b038:	4680      	mov	r8, r0
 800b03a:	460c      	mov	r4, r1
 800b03c:	469a      	mov	sl, r3
 800b03e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b042:	d807      	bhi.n	800b054 <_printf_i+0x28>
 800b044:	2f62      	cmp	r7, #98	; 0x62
 800b046:	d80a      	bhi.n	800b05e <_printf_i+0x32>
 800b048:	2f00      	cmp	r7, #0
 800b04a:	f000 80d8 	beq.w	800b1fe <_printf_i+0x1d2>
 800b04e:	2f58      	cmp	r7, #88	; 0x58
 800b050:	f000 80a3 	beq.w	800b19a <_printf_i+0x16e>
 800b054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b05c:	e03a      	b.n	800b0d4 <_printf_i+0xa8>
 800b05e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b062:	2b15      	cmp	r3, #21
 800b064:	d8f6      	bhi.n	800b054 <_printf_i+0x28>
 800b066:	a101      	add	r1, pc, #4	; (adr r1, 800b06c <_printf_i+0x40>)
 800b068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b06c:	0800b0c5 	.word	0x0800b0c5
 800b070:	0800b0d9 	.word	0x0800b0d9
 800b074:	0800b055 	.word	0x0800b055
 800b078:	0800b055 	.word	0x0800b055
 800b07c:	0800b055 	.word	0x0800b055
 800b080:	0800b055 	.word	0x0800b055
 800b084:	0800b0d9 	.word	0x0800b0d9
 800b088:	0800b055 	.word	0x0800b055
 800b08c:	0800b055 	.word	0x0800b055
 800b090:	0800b055 	.word	0x0800b055
 800b094:	0800b055 	.word	0x0800b055
 800b098:	0800b1e5 	.word	0x0800b1e5
 800b09c:	0800b109 	.word	0x0800b109
 800b0a0:	0800b1c7 	.word	0x0800b1c7
 800b0a4:	0800b055 	.word	0x0800b055
 800b0a8:	0800b055 	.word	0x0800b055
 800b0ac:	0800b207 	.word	0x0800b207
 800b0b0:	0800b055 	.word	0x0800b055
 800b0b4:	0800b109 	.word	0x0800b109
 800b0b8:	0800b055 	.word	0x0800b055
 800b0bc:	0800b055 	.word	0x0800b055
 800b0c0:	0800b1cf 	.word	0x0800b1cf
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	1d1a      	adds	r2, r3, #4
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	602a      	str	r2, [r5, #0]
 800b0cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e0a3      	b.n	800b220 <_printf_i+0x1f4>
 800b0d8:	6820      	ldr	r0, [r4, #0]
 800b0da:	6829      	ldr	r1, [r5, #0]
 800b0dc:	0606      	lsls	r6, r0, #24
 800b0de:	f101 0304 	add.w	r3, r1, #4
 800b0e2:	d50a      	bpl.n	800b0fa <_printf_i+0xce>
 800b0e4:	680e      	ldr	r6, [r1, #0]
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	da03      	bge.n	800b0f4 <_printf_i+0xc8>
 800b0ec:	232d      	movs	r3, #45	; 0x2d
 800b0ee:	4276      	negs	r6, r6
 800b0f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f4:	485e      	ldr	r0, [pc, #376]	; (800b270 <_printf_i+0x244>)
 800b0f6:	230a      	movs	r3, #10
 800b0f8:	e019      	b.n	800b12e <_printf_i+0x102>
 800b0fa:	680e      	ldr	r6, [r1, #0]
 800b0fc:	602b      	str	r3, [r5, #0]
 800b0fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b102:	bf18      	it	ne
 800b104:	b236      	sxthne	r6, r6
 800b106:	e7ef      	b.n	800b0e8 <_printf_i+0xbc>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	6820      	ldr	r0, [r4, #0]
 800b10c:	1d19      	adds	r1, r3, #4
 800b10e:	6029      	str	r1, [r5, #0]
 800b110:	0601      	lsls	r1, r0, #24
 800b112:	d501      	bpl.n	800b118 <_printf_i+0xec>
 800b114:	681e      	ldr	r6, [r3, #0]
 800b116:	e002      	b.n	800b11e <_printf_i+0xf2>
 800b118:	0646      	lsls	r6, r0, #25
 800b11a:	d5fb      	bpl.n	800b114 <_printf_i+0xe8>
 800b11c:	881e      	ldrh	r6, [r3, #0]
 800b11e:	4854      	ldr	r0, [pc, #336]	; (800b270 <_printf_i+0x244>)
 800b120:	2f6f      	cmp	r7, #111	; 0x6f
 800b122:	bf0c      	ite	eq
 800b124:	2308      	moveq	r3, #8
 800b126:	230a      	movne	r3, #10
 800b128:	2100      	movs	r1, #0
 800b12a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b12e:	6865      	ldr	r5, [r4, #4]
 800b130:	60a5      	str	r5, [r4, #8]
 800b132:	2d00      	cmp	r5, #0
 800b134:	bfa2      	ittt	ge
 800b136:	6821      	ldrge	r1, [r4, #0]
 800b138:	f021 0104 	bicge.w	r1, r1, #4
 800b13c:	6021      	strge	r1, [r4, #0]
 800b13e:	b90e      	cbnz	r6, 800b144 <_printf_i+0x118>
 800b140:	2d00      	cmp	r5, #0
 800b142:	d04d      	beq.n	800b1e0 <_printf_i+0x1b4>
 800b144:	4615      	mov	r5, r2
 800b146:	fbb6 f1f3 	udiv	r1, r6, r3
 800b14a:	fb03 6711 	mls	r7, r3, r1, r6
 800b14e:	5dc7      	ldrb	r7, [r0, r7]
 800b150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b154:	4637      	mov	r7, r6
 800b156:	42bb      	cmp	r3, r7
 800b158:	460e      	mov	r6, r1
 800b15a:	d9f4      	bls.n	800b146 <_printf_i+0x11a>
 800b15c:	2b08      	cmp	r3, #8
 800b15e:	d10b      	bne.n	800b178 <_printf_i+0x14c>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	07de      	lsls	r6, r3, #31
 800b164:	d508      	bpl.n	800b178 <_printf_i+0x14c>
 800b166:	6923      	ldr	r3, [r4, #16]
 800b168:	6861      	ldr	r1, [r4, #4]
 800b16a:	4299      	cmp	r1, r3
 800b16c:	bfde      	ittt	le
 800b16e:	2330      	movle	r3, #48	; 0x30
 800b170:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b174:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b178:	1b52      	subs	r2, r2, r5
 800b17a:	6122      	str	r2, [r4, #16]
 800b17c:	f8cd a000 	str.w	sl, [sp]
 800b180:	464b      	mov	r3, r9
 800b182:	aa03      	add	r2, sp, #12
 800b184:	4621      	mov	r1, r4
 800b186:	4640      	mov	r0, r8
 800b188:	f7ff fee2 	bl	800af50 <_printf_common>
 800b18c:	3001      	adds	r0, #1
 800b18e:	d14c      	bne.n	800b22a <_printf_i+0x1fe>
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	b004      	add	sp, #16
 800b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19a:	4835      	ldr	r0, [pc, #212]	; (800b270 <_printf_i+0x244>)
 800b19c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1a0:	6829      	ldr	r1, [r5, #0]
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1a8:	6029      	str	r1, [r5, #0]
 800b1aa:	061d      	lsls	r5, r3, #24
 800b1ac:	d514      	bpl.n	800b1d8 <_printf_i+0x1ac>
 800b1ae:	07df      	lsls	r7, r3, #31
 800b1b0:	bf44      	itt	mi
 800b1b2:	f043 0320 	orrmi.w	r3, r3, #32
 800b1b6:	6023      	strmi	r3, [r4, #0]
 800b1b8:	b91e      	cbnz	r6, 800b1c2 <_printf_i+0x196>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	f023 0320 	bic.w	r3, r3, #32
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	2310      	movs	r3, #16
 800b1c4:	e7b0      	b.n	800b128 <_printf_i+0xfc>
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	f043 0320 	orr.w	r3, r3, #32
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	2378      	movs	r3, #120	; 0x78
 800b1d0:	4828      	ldr	r0, [pc, #160]	; (800b274 <_printf_i+0x248>)
 800b1d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1d6:	e7e3      	b.n	800b1a0 <_printf_i+0x174>
 800b1d8:	0659      	lsls	r1, r3, #25
 800b1da:	bf48      	it	mi
 800b1dc:	b2b6      	uxthmi	r6, r6
 800b1de:	e7e6      	b.n	800b1ae <_printf_i+0x182>
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	e7bb      	b.n	800b15c <_printf_i+0x130>
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	6826      	ldr	r6, [r4, #0]
 800b1e8:	6961      	ldr	r1, [r4, #20]
 800b1ea:	1d18      	adds	r0, r3, #4
 800b1ec:	6028      	str	r0, [r5, #0]
 800b1ee:	0635      	lsls	r5, r6, #24
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	d501      	bpl.n	800b1f8 <_printf_i+0x1cc>
 800b1f4:	6019      	str	r1, [r3, #0]
 800b1f6:	e002      	b.n	800b1fe <_printf_i+0x1d2>
 800b1f8:	0670      	lsls	r0, r6, #25
 800b1fa:	d5fb      	bpl.n	800b1f4 <_printf_i+0x1c8>
 800b1fc:	8019      	strh	r1, [r3, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	6123      	str	r3, [r4, #16]
 800b202:	4615      	mov	r5, r2
 800b204:	e7ba      	b.n	800b17c <_printf_i+0x150>
 800b206:	682b      	ldr	r3, [r5, #0]
 800b208:	1d1a      	adds	r2, r3, #4
 800b20a:	602a      	str	r2, [r5, #0]
 800b20c:	681d      	ldr	r5, [r3, #0]
 800b20e:	6862      	ldr	r2, [r4, #4]
 800b210:	2100      	movs	r1, #0
 800b212:	4628      	mov	r0, r5
 800b214:	f7f5 f884 	bl	8000320 <memchr>
 800b218:	b108      	cbz	r0, 800b21e <_printf_i+0x1f2>
 800b21a:	1b40      	subs	r0, r0, r5
 800b21c:	6060      	str	r0, [r4, #4]
 800b21e:	6863      	ldr	r3, [r4, #4]
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	2300      	movs	r3, #0
 800b224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b228:	e7a8      	b.n	800b17c <_printf_i+0x150>
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	462a      	mov	r2, r5
 800b22e:	4649      	mov	r1, r9
 800b230:	4640      	mov	r0, r8
 800b232:	47d0      	blx	sl
 800b234:	3001      	adds	r0, #1
 800b236:	d0ab      	beq.n	800b190 <_printf_i+0x164>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	079b      	lsls	r3, r3, #30
 800b23c:	d413      	bmi.n	800b266 <_printf_i+0x23a>
 800b23e:	68e0      	ldr	r0, [r4, #12]
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	4298      	cmp	r0, r3
 800b244:	bfb8      	it	lt
 800b246:	4618      	movlt	r0, r3
 800b248:	e7a4      	b.n	800b194 <_printf_i+0x168>
 800b24a:	2301      	movs	r3, #1
 800b24c:	4632      	mov	r2, r6
 800b24e:	4649      	mov	r1, r9
 800b250:	4640      	mov	r0, r8
 800b252:	47d0      	blx	sl
 800b254:	3001      	adds	r0, #1
 800b256:	d09b      	beq.n	800b190 <_printf_i+0x164>
 800b258:	3501      	adds	r5, #1
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	9903      	ldr	r1, [sp, #12]
 800b25e:	1a5b      	subs	r3, r3, r1
 800b260:	42ab      	cmp	r3, r5
 800b262:	dcf2      	bgt.n	800b24a <_printf_i+0x21e>
 800b264:	e7eb      	b.n	800b23e <_printf_i+0x212>
 800b266:	2500      	movs	r5, #0
 800b268:	f104 0619 	add.w	r6, r4, #25
 800b26c:	e7f5      	b.n	800b25a <_printf_i+0x22e>
 800b26e:	bf00      	nop
 800b270:	0800be3a 	.word	0x0800be3a
 800b274:	0800be4b 	.word	0x0800be4b

0800b278 <__swbuf_r>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	460e      	mov	r6, r1
 800b27c:	4614      	mov	r4, r2
 800b27e:	4605      	mov	r5, r0
 800b280:	b118      	cbz	r0, 800b28a <__swbuf_r+0x12>
 800b282:	6983      	ldr	r3, [r0, #24]
 800b284:	b90b      	cbnz	r3, 800b28a <__swbuf_r+0x12>
 800b286:	f000 f9d9 	bl	800b63c <__sinit>
 800b28a:	4b21      	ldr	r3, [pc, #132]	; (800b310 <__swbuf_r+0x98>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	d12b      	bne.n	800b2e8 <__swbuf_r+0x70>
 800b290:	686c      	ldr	r4, [r5, #4]
 800b292:	69a3      	ldr	r3, [r4, #24]
 800b294:	60a3      	str	r3, [r4, #8]
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	071a      	lsls	r2, r3, #28
 800b29a:	d52f      	bpl.n	800b2fc <__swbuf_r+0x84>
 800b29c:	6923      	ldr	r3, [r4, #16]
 800b29e:	b36b      	cbz	r3, 800b2fc <__swbuf_r+0x84>
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	6820      	ldr	r0, [r4, #0]
 800b2a4:	1ac0      	subs	r0, r0, r3
 800b2a6:	6963      	ldr	r3, [r4, #20]
 800b2a8:	b2f6      	uxtb	r6, r6
 800b2aa:	4283      	cmp	r3, r0
 800b2ac:	4637      	mov	r7, r6
 800b2ae:	dc04      	bgt.n	800b2ba <__swbuf_r+0x42>
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	f000 f92e 	bl	800b514 <_fflush_r>
 800b2b8:	bb30      	cbnz	r0, 800b308 <__swbuf_r+0x90>
 800b2ba:	68a3      	ldr	r3, [r4, #8]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	60a3      	str	r3, [r4, #8]
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	1c5a      	adds	r2, r3, #1
 800b2c4:	6022      	str	r2, [r4, #0]
 800b2c6:	701e      	strb	r6, [r3, #0]
 800b2c8:	6963      	ldr	r3, [r4, #20]
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	4283      	cmp	r3, r0
 800b2ce:	d004      	beq.n	800b2da <__swbuf_r+0x62>
 800b2d0:	89a3      	ldrh	r3, [r4, #12]
 800b2d2:	07db      	lsls	r3, r3, #31
 800b2d4:	d506      	bpl.n	800b2e4 <__swbuf_r+0x6c>
 800b2d6:	2e0a      	cmp	r6, #10
 800b2d8:	d104      	bne.n	800b2e4 <__swbuf_r+0x6c>
 800b2da:	4621      	mov	r1, r4
 800b2dc:	4628      	mov	r0, r5
 800b2de:	f000 f919 	bl	800b514 <_fflush_r>
 800b2e2:	b988      	cbnz	r0, 800b308 <__swbuf_r+0x90>
 800b2e4:	4638      	mov	r0, r7
 800b2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e8:	4b0a      	ldr	r3, [pc, #40]	; (800b314 <__swbuf_r+0x9c>)
 800b2ea:	429c      	cmp	r4, r3
 800b2ec:	d101      	bne.n	800b2f2 <__swbuf_r+0x7a>
 800b2ee:	68ac      	ldr	r4, [r5, #8]
 800b2f0:	e7cf      	b.n	800b292 <__swbuf_r+0x1a>
 800b2f2:	4b09      	ldr	r3, [pc, #36]	; (800b318 <__swbuf_r+0xa0>)
 800b2f4:	429c      	cmp	r4, r3
 800b2f6:	bf08      	it	eq
 800b2f8:	68ec      	ldreq	r4, [r5, #12]
 800b2fa:	e7ca      	b.n	800b292 <__swbuf_r+0x1a>
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4628      	mov	r0, r5
 800b300:	f000 f80c 	bl	800b31c <__swsetup_r>
 800b304:	2800      	cmp	r0, #0
 800b306:	d0cb      	beq.n	800b2a0 <__swbuf_r+0x28>
 800b308:	f04f 37ff 	mov.w	r7, #4294967295
 800b30c:	e7ea      	b.n	800b2e4 <__swbuf_r+0x6c>
 800b30e:	bf00      	nop
 800b310:	0800be7c 	.word	0x0800be7c
 800b314:	0800be9c 	.word	0x0800be9c
 800b318:	0800be5c 	.word	0x0800be5c

0800b31c <__swsetup_r>:
 800b31c:	4b32      	ldr	r3, [pc, #200]	; (800b3e8 <__swsetup_r+0xcc>)
 800b31e:	b570      	push	{r4, r5, r6, lr}
 800b320:	681d      	ldr	r5, [r3, #0]
 800b322:	4606      	mov	r6, r0
 800b324:	460c      	mov	r4, r1
 800b326:	b125      	cbz	r5, 800b332 <__swsetup_r+0x16>
 800b328:	69ab      	ldr	r3, [r5, #24]
 800b32a:	b913      	cbnz	r3, 800b332 <__swsetup_r+0x16>
 800b32c:	4628      	mov	r0, r5
 800b32e:	f000 f985 	bl	800b63c <__sinit>
 800b332:	4b2e      	ldr	r3, [pc, #184]	; (800b3ec <__swsetup_r+0xd0>)
 800b334:	429c      	cmp	r4, r3
 800b336:	d10f      	bne.n	800b358 <__swsetup_r+0x3c>
 800b338:	686c      	ldr	r4, [r5, #4]
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b340:	0719      	lsls	r1, r3, #28
 800b342:	d42c      	bmi.n	800b39e <__swsetup_r+0x82>
 800b344:	06dd      	lsls	r5, r3, #27
 800b346:	d411      	bmi.n	800b36c <__swsetup_r+0x50>
 800b348:	2309      	movs	r3, #9
 800b34a:	6033      	str	r3, [r6, #0]
 800b34c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b350:	81a3      	strh	r3, [r4, #12]
 800b352:	f04f 30ff 	mov.w	r0, #4294967295
 800b356:	e03e      	b.n	800b3d6 <__swsetup_r+0xba>
 800b358:	4b25      	ldr	r3, [pc, #148]	; (800b3f0 <__swsetup_r+0xd4>)
 800b35a:	429c      	cmp	r4, r3
 800b35c:	d101      	bne.n	800b362 <__swsetup_r+0x46>
 800b35e:	68ac      	ldr	r4, [r5, #8]
 800b360:	e7eb      	b.n	800b33a <__swsetup_r+0x1e>
 800b362:	4b24      	ldr	r3, [pc, #144]	; (800b3f4 <__swsetup_r+0xd8>)
 800b364:	429c      	cmp	r4, r3
 800b366:	bf08      	it	eq
 800b368:	68ec      	ldreq	r4, [r5, #12]
 800b36a:	e7e6      	b.n	800b33a <__swsetup_r+0x1e>
 800b36c:	0758      	lsls	r0, r3, #29
 800b36e:	d512      	bpl.n	800b396 <__swsetup_r+0x7a>
 800b370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b372:	b141      	cbz	r1, 800b386 <__swsetup_r+0x6a>
 800b374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b378:	4299      	cmp	r1, r3
 800b37a:	d002      	beq.n	800b382 <__swsetup_r+0x66>
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff fc41 	bl	800ac04 <_free_r>
 800b382:	2300      	movs	r3, #0
 800b384:	6363      	str	r3, [r4, #52]	; 0x34
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b38c:	81a3      	strh	r3, [r4, #12]
 800b38e:	2300      	movs	r3, #0
 800b390:	6063      	str	r3, [r4, #4]
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	f043 0308 	orr.w	r3, r3, #8
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	6923      	ldr	r3, [r4, #16]
 800b3a0:	b94b      	cbnz	r3, 800b3b6 <__swsetup_r+0x9a>
 800b3a2:	89a3      	ldrh	r3, [r4, #12]
 800b3a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ac:	d003      	beq.n	800b3b6 <__swsetup_r+0x9a>
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f000 fa09 	bl	800b7c8 <__smakebuf_r>
 800b3b6:	89a0      	ldrh	r0, [r4, #12]
 800b3b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3bc:	f010 0301 	ands.w	r3, r0, #1
 800b3c0:	d00a      	beq.n	800b3d8 <__swsetup_r+0xbc>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60a3      	str	r3, [r4, #8]
 800b3c6:	6963      	ldr	r3, [r4, #20]
 800b3c8:	425b      	negs	r3, r3
 800b3ca:	61a3      	str	r3, [r4, #24]
 800b3cc:	6923      	ldr	r3, [r4, #16]
 800b3ce:	b943      	cbnz	r3, 800b3e2 <__swsetup_r+0xc6>
 800b3d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3d4:	d1ba      	bne.n	800b34c <__swsetup_r+0x30>
 800b3d6:	bd70      	pop	{r4, r5, r6, pc}
 800b3d8:	0781      	lsls	r1, r0, #30
 800b3da:	bf58      	it	pl
 800b3dc:	6963      	ldrpl	r3, [r4, #20]
 800b3de:	60a3      	str	r3, [r4, #8]
 800b3e0:	e7f4      	b.n	800b3cc <__swsetup_r+0xb0>
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	e7f7      	b.n	800b3d6 <__swsetup_r+0xba>
 800b3e6:	bf00      	nop
 800b3e8:	24000318 	.word	0x24000318
 800b3ec:	0800be7c 	.word	0x0800be7c
 800b3f0:	0800be9c 	.word	0x0800be9c
 800b3f4:	0800be5c 	.word	0x0800be5c

0800b3f8 <abort>:
 800b3f8:	b508      	push	{r3, lr}
 800b3fa:	2006      	movs	r0, #6
 800b3fc:	f000 fa4c 	bl	800b898 <raise>
 800b400:	2001      	movs	r0, #1
 800b402:	f7f6 fc35 	bl	8001c70 <_exit>
	...

0800b408 <__sflush_r>:
 800b408:	898a      	ldrh	r2, [r1, #12]
 800b40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40e:	4605      	mov	r5, r0
 800b410:	0710      	lsls	r0, r2, #28
 800b412:	460c      	mov	r4, r1
 800b414:	d458      	bmi.n	800b4c8 <__sflush_r+0xc0>
 800b416:	684b      	ldr	r3, [r1, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	dc05      	bgt.n	800b428 <__sflush_r+0x20>
 800b41c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b41e:	2b00      	cmp	r3, #0
 800b420:	dc02      	bgt.n	800b428 <__sflush_r+0x20>
 800b422:	2000      	movs	r0, #0
 800b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	d0f9      	beq.n	800b422 <__sflush_r+0x1a>
 800b42e:	2300      	movs	r3, #0
 800b430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b434:	682f      	ldr	r7, [r5, #0]
 800b436:	602b      	str	r3, [r5, #0]
 800b438:	d032      	beq.n	800b4a0 <__sflush_r+0x98>
 800b43a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	075a      	lsls	r2, r3, #29
 800b440:	d505      	bpl.n	800b44e <__sflush_r+0x46>
 800b442:	6863      	ldr	r3, [r4, #4]
 800b444:	1ac0      	subs	r0, r0, r3
 800b446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b448:	b10b      	cbz	r3, 800b44e <__sflush_r+0x46>
 800b44a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b44c:	1ac0      	subs	r0, r0, r3
 800b44e:	2300      	movs	r3, #0
 800b450:	4602      	mov	r2, r0
 800b452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b454:	6a21      	ldr	r1, [r4, #32]
 800b456:	4628      	mov	r0, r5
 800b458:	47b0      	blx	r6
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	d106      	bne.n	800b46e <__sflush_r+0x66>
 800b460:	6829      	ldr	r1, [r5, #0]
 800b462:	291d      	cmp	r1, #29
 800b464:	d82c      	bhi.n	800b4c0 <__sflush_r+0xb8>
 800b466:	4a2a      	ldr	r2, [pc, #168]	; (800b510 <__sflush_r+0x108>)
 800b468:	40ca      	lsrs	r2, r1
 800b46a:	07d6      	lsls	r6, r2, #31
 800b46c:	d528      	bpl.n	800b4c0 <__sflush_r+0xb8>
 800b46e:	2200      	movs	r2, #0
 800b470:	6062      	str	r2, [r4, #4]
 800b472:	04d9      	lsls	r1, r3, #19
 800b474:	6922      	ldr	r2, [r4, #16]
 800b476:	6022      	str	r2, [r4, #0]
 800b478:	d504      	bpl.n	800b484 <__sflush_r+0x7c>
 800b47a:	1c42      	adds	r2, r0, #1
 800b47c:	d101      	bne.n	800b482 <__sflush_r+0x7a>
 800b47e:	682b      	ldr	r3, [r5, #0]
 800b480:	b903      	cbnz	r3, 800b484 <__sflush_r+0x7c>
 800b482:	6560      	str	r0, [r4, #84]	; 0x54
 800b484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b486:	602f      	str	r7, [r5, #0]
 800b488:	2900      	cmp	r1, #0
 800b48a:	d0ca      	beq.n	800b422 <__sflush_r+0x1a>
 800b48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b490:	4299      	cmp	r1, r3
 800b492:	d002      	beq.n	800b49a <__sflush_r+0x92>
 800b494:	4628      	mov	r0, r5
 800b496:	f7ff fbb5 	bl	800ac04 <_free_r>
 800b49a:	2000      	movs	r0, #0
 800b49c:	6360      	str	r0, [r4, #52]	; 0x34
 800b49e:	e7c1      	b.n	800b424 <__sflush_r+0x1c>
 800b4a0:	6a21      	ldr	r1, [r4, #32]
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	47b0      	blx	r6
 800b4a8:	1c41      	adds	r1, r0, #1
 800b4aa:	d1c7      	bne.n	800b43c <__sflush_r+0x34>
 800b4ac:	682b      	ldr	r3, [r5, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0c4      	beq.n	800b43c <__sflush_r+0x34>
 800b4b2:	2b1d      	cmp	r3, #29
 800b4b4:	d001      	beq.n	800b4ba <__sflush_r+0xb2>
 800b4b6:	2b16      	cmp	r3, #22
 800b4b8:	d101      	bne.n	800b4be <__sflush_r+0xb6>
 800b4ba:	602f      	str	r7, [r5, #0]
 800b4bc:	e7b1      	b.n	800b422 <__sflush_r+0x1a>
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c4:	81a3      	strh	r3, [r4, #12]
 800b4c6:	e7ad      	b.n	800b424 <__sflush_r+0x1c>
 800b4c8:	690f      	ldr	r7, [r1, #16]
 800b4ca:	2f00      	cmp	r7, #0
 800b4cc:	d0a9      	beq.n	800b422 <__sflush_r+0x1a>
 800b4ce:	0793      	lsls	r3, r2, #30
 800b4d0:	680e      	ldr	r6, [r1, #0]
 800b4d2:	bf08      	it	eq
 800b4d4:	694b      	ldreq	r3, [r1, #20]
 800b4d6:	600f      	str	r7, [r1, #0]
 800b4d8:	bf18      	it	ne
 800b4da:	2300      	movne	r3, #0
 800b4dc:	eba6 0807 	sub.w	r8, r6, r7
 800b4e0:	608b      	str	r3, [r1, #8]
 800b4e2:	f1b8 0f00 	cmp.w	r8, #0
 800b4e6:	dd9c      	ble.n	800b422 <__sflush_r+0x1a>
 800b4e8:	6a21      	ldr	r1, [r4, #32]
 800b4ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4ec:	4643      	mov	r3, r8
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b0      	blx	r6
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	dc06      	bgt.n	800b506 <__sflush_r+0xfe>
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	f04f 30ff 	mov.w	r0, #4294967295
 800b504:	e78e      	b.n	800b424 <__sflush_r+0x1c>
 800b506:	4407      	add	r7, r0
 800b508:	eba8 0800 	sub.w	r8, r8, r0
 800b50c:	e7e9      	b.n	800b4e2 <__sflush_r+0xda>
 800b50e:	bf00      	nop
 800b510:	20400001 	.word	0x20400001

0800b514 <_fflush_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	690b      	ldr	r3, [r1, #16]
 800b518:	4605      	mov	r5, r0
 800b51a:	460c      	mov	r4, r1
 800b51c:	b913      	cbnz	r3, 800b524 <_fflush_r+0x10>
 800b51e:	2500      	movs	r5, #0
 800b520:	4628      	mov	r0, r5
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	b118      	cbz	r0, 800b52e <_fflush_r+0x1a>
 800b526:	6983      	ldr	r3, [r0, #24]
 800b528:	b90b      	cbnz	r3, 800b52e <_fflush_r+0x1a>
 800b52a:	f000 f887 	bl	800b63c <__sinit>
 800b52e:	4b14      	ldr	r3, [pc, #80]	; (800b580 <_fflush_r+0x6c>)
 800b530:	429c      	cmp	r4, r3
 800b532:	d11b      	bne.n	800b56c <_fflush_r+0x58>
 800b534:	686c      	ldr	r4, [r5, #4]
 800b536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0ef      	beq.n	800b51e <_fflush_r+0xa>
 800b53e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b540:	07d0      	lsls	r0, r2, #31
 800b542:	d404      	bmi.n	800b54e <_fflush_r+0x3a>
 800b544:	0599      	lsls	r1, r3, #22
 800b546:	d402      	bmi.n	800b54e <_fflush_r+0x3a>
 800b548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b54a:	f000 f915 	bl	800b778 <__retarget_lock_acquire_recursive>
 800b54e:	4628      	mov	r0, r5
 800b550:	4621      	mov	r1, r4
 800b552:	f7ff ff59 	bl	800b408 <__sflush_r>
 800b556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b558:	07da      	lsls	r2, r3, #31
 800b55a:	4605      	mov	r5, r0
 800b55c:	d4e0      	bmi.n	800b520 <_fflush_r+0xc>
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	059b      	lsls	r3, r3, #22
 800b562:	d4dd      	bmi.n	800b520 <_fflush_r+0xc>
 800b564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b566:	f000 f908 	bl	800b77a <__retarget_lock_release_recursive>
 800b56a:	e7d9      	b.n	800b520 <_fflush_r+0xc>
 800b56c:	4b05      	ldr	r3, [pc, #20]	; (800b584 <_fflush_r+0x70>)
 800b56e:	429c      	cmp	r4, r3
 800b570:	d101      	bne.n	800b576 <_fflush_r+0x62>
 800b572:	68ac      	ldr	r4, [r5, #8]
 800b574:	e7df      	b.n	800b536 <_fflush_r+0x22>
 800b576:	4b04      	ldr	r3, [pc, #16]	; (800b588 <_fflush_r+0x74>)
 800b578:	429c      	cmp	r4, r3
 800b57a:	bf08      	it	eq
 800b57c:	68ec      	ldreq	r4, [r5, #12]
 800b57e:	e7da      	b.n	800b536 <_fflush_r+0x22>
 800b580:	0800be7c 	.word	0x0800be7c
 800b584:	0800be9c 	.word	0x0800be9c
 800b588:	0800be5c 	.word	0x0800be5c

0800b58c <std>:
 800b58c:	2300      	movs	r3, #0
 800b58e:	b510      	push	{r4, lr}
 800b590:	4604      	mov	r4, r0
 800b592:	e9c0 3300 	strd	r3, r3, [r0]
 800b596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b59a:	6083      	str	r3, [r0, #8]
 800b59c:	8181      	strh	r1, [r0, #12]
 800b59e:	6643      	str	r3, [r0, #100]	; 0x64
 800b5a0:	81c2      	strh	r2, [r0, #14]
 800b5a2:	6183      	str	r3, [r0, #24]
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	2208      	movs	r2, #8
 800b5a8:	305c      	adds	r0, #92	; 0x5c
 800b5aa:	f7fd fba7 	bl	8008cfc <memset>
 800b5ae:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <std+0x38>)
 800b5b0:	6263      	str	r3, [r4, #36]	; 0x24
 800b5b2:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <std+0x3c>)
 800b5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5b6:	4b05      	ldr	r3, [pc, #20]	; (800b5cc <std+0x40>)
 800b5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ba:	4b05      	ldr	r3, [pc, #20]	; (800b5d0 <std+0x44>)
 800b5bc:	6224      	str	r4, [r4, #32]
 800b5be:	6323      	str	r3, [r4, #48]	; 0x30
 800b5c0:	bd10      	pop	{r4, pc}
 800b5c2:	bf00      	nop
 800b5c4:	0800b8d1 	.word	0x0800b8d1
 800b5c8:	0800b8f3 	.word	0x0800b8f3
 800b5cc:	0800b92b 	.word	0x0800b92b
 800b5d0:	0800b94f 	.word	0x0800b94f

0800b5d4 <_cleanup_r>:
 800b5d4:	4901      	ldr	r1, [pc, #4]	; (800b5dc <_cleanup_r+0x8>)
 800b5d6:	f000 b8af 	b.w	800b738 <_fwalk_reent>
 800b5da:	bf00      	nop
 800b5dc:	0800b515 	.word	0x0800b515

0800b5e0 <__sfmoreglue>:
 800b5e0:	b570      	push	{r4, r5, r6, lr}
 800b5e2:	2268      	movs	r2, #104	; 0x68
 800b5e4:	1e4d      	subs	r5, r1, #1
 800b5e6:	4355      	muls	r5, r2
 800b5e8:	460e      	mov	r6, r1
 800b5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5ee:	f7ff fa15 	bl	800aa1c <_malloc_r>
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	b140      	cbz	r0, 800b608 <__sfmoreglue+0x28>
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	e9c0 1600 	strd	r1, r6, [r0]
 800b5fc:	300c      	adds	r0, #12
 800b5fe:	60a0      	str	r0, [r4, #8]
 800b600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b604:	f7fd fb7a 	bl	8008cfc <memset>
 800b608:	4620      	mov	r0, r4
 800b60a:	bd70      	pop	{r4, r5, r6, pc}

0800b60c <__sfp_lock_acquire>:
 800b60c:	4801      	ldr	r0, [pc, #4]	; (800b614 <__sfp_lock_acquire+0x8>)
 800b60e:	f000 b8b3 	b.w	800b778 <__retarget_lock_acquire_recursive>
 800b612:	bf00      	nop
 800b614:	240009ad 	.word	0x240009ad

0800b618 <__sfp_lock_release>:
 800b618:	4801      	ldr	r0, [pc, #4]	; (800b620 <__sfp_lock_release+0x8>)
 800b61a:	f000 b8ae 	b.w	800b77a <__retarget_lock_release_recursive>
 800b61e:	bf00      	nop
 800b620:	240009ad 	.word	0x240009ad

0800b624 <__sinit_lock_acquire>:
 800b624:	4801      	ldr	r0, [pc, #4]	; (800b62c <__sinit_lock_acquire+0x8>)
 800b626:	f000 b8a7 	b.w	800b778 <__retarget_lock_acquire_recursive>
 800b62a:	bf00      	nop
 800b62c:	240009ae 	.word	0x240009ae

0800b630 <__sinit_lock_release>:
 800b630:	4801      	ldr	r0, [pc, #4]	; (800b638 <__sinit_lock_release+0x8>)
 800b632:	f000 b8a2 	b.w	800b77a <__retarget_lock_release_recursive>
 800b636:	bf00      	nop
 800b638:	240009ae 	.word	0x240009ae

0800b63c <__sinit>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	4604      	mov	r4, r0
 800b640:	f7ff fff0 	bl	800b624 <__sinit_lock_acquire>
 800b644:	69a3      	ldr	r3, [r4, #24]
 800b646:	b11b      	cbz	r3, 800b650 <__sinit+0x14>
 800b648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b64c:	f7ff bff0 	b.w	800b630 <__sinit_lock_release>
 800b650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b654:	6523      	str	r3, [r4, #80]	; 0x50
 800b656:	4b13      	ldr	r3, [pc, #76]	; (800b6a4 <__sinit+0x68>)
 800b658:	4a13      	ldr	r2, [pc, #76]	; (800b6a8 <__sinit+0x6c>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b65e:	42a3      	cmp	r3, r4
 800b660:	bf04      	itt	eq
 800b662:	2301      	moveq	r3, #1
 800b664:	61a3      	streq	r3, [r4, #24]
 800b666:	4620      	mov	r0, r4
 800b668:	f000 f820 	bl	800b6ac <__sfp>
 800b66c:	6060      	str	r0, [r4, #4]
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 f81c 	bl	800b6ac <__sfp>
 800b674:	60a0      	str	r0, [r4, #8]
 800b676:	4620      	mov	r0, r4
 800b678:	f000 f818 	bl	800b6ac <__sfp>
 800b67c:	2200      	movs	r2, #0
 800b67e:	60e0      	str	r0, [r4, #12]
 800b680:	2104      	movs	r1, #4
 800b682:	6860      	ldr	r0, [r4, #4]
 800b684:	f7ff ff82 	bl	800b58c <std>
 800b688:	68a0      	ldr	r0, [r4, #8]
 800b68a:	2201      	movs	r2, #1
 800b68c:	2109      	movs	r1, #9
 800b68e:	f7ff ff7d 	bl	800b58c <std>
 800b692:	68e0      	ldr	r0, [r4, #12]
 800b694:	2202      	movs	r2, #2
 800b696:	2112      	movs	r1, #18
 800b698:	f7ff ff78 	bl	800b58c <std>
 800b69c:	2301      	movs	r3, #1
 800b69e:	61a3      	str	r3, [r4, #24]
 800b6a0:	e7d2      	b.n	800b648 <__sinit+0xc>
 800b6a2:	bf00      	nop
 800b6a4:	0800ba8c 	.word	0x0800ba8c
 800b6a8:	0800b5d5 	.word	0x0800b5d5

0800b6ac <__sfp>:
 800b6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ae:	4607      	mov	r7, r0
 800b6b0:	f7ff ffac 	bl	800b60c <__sfp_lock_acquire>
 800b6b4:	4b1e      	ldr	r3, [pc, #120]	; (800b730 <__sfp+0x84>)
 800b6b6:	681e      	ldr	r6, [r3, #0]
 800b6b8:	69b3      	ldr	r3, [r6, #24]
 800b6ba:	b913      	cbnz	r3, 800b6c2 <__sfp+0x16>
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7ff ffbd 	bl	800b63c <__sinit>
 800b6c2:	3648      	adds	r6, #72	; 0x48
 800b6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	d503      	bpl.n	800b6d4 <__sfp+0x28>
 800b6cc:	6833      	ldr	r3, [r6, #0]
 800b6ce:	b30b      	cbz	r3, 800b714 <__sfp+0x68>
 800b6d0:	6836      	ldr	r6, [r6, #0]
 800b6d2:	e7f7      	b.n	800b6c4 <__sfp+0x18>
 800b6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6d8:	b9d5      	cbnz	r5, 800b710 <__sfp+0x64>
 800b6da:	4b16      	ldr	r3, [pc, #88]	; (800b734 <__sfp+0x88>)
 800b6dc:	60e3      	str	r3, [r4, #12]
 800b6de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6e2:	6665      	str	r5, [r4, #100]	; 0x64
 800b6e4:	f000 f847 	bl	800b776 <__retarget_lock_init_recursive>
 800b6e8:	f7ff ff96 	bl	800b618 <__sfp_lock_release>
 800b6ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6f4:	6025      	str	r5, [r4, #0]
 800b6f6:	61a5      	str	r5, [r4, #24]
 800b6f8:	2208      	movs	r2, #8
 800b6fa:	4629      	mov	r1, r5
 800b6fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b700:	f7fd fafc 	bl	8008cfc <memset>
 800b704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b70c:	4620      	mov	r0, r4
 800b70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b710:	3468      	adds	r4, #104	; 0x68
 800b712:	e7d9      	b.n	800b6c8 <__sfp+0x1c>
 800b714:	2104      	movs	r1, #4
 800b716:	4638      	mov	r0, r7
 800b718:	f7ff ff62 	bl	800b5e0 <__sfmoreglue>
 800b71c:	4604      	mov	r4, r0
 800b71e:	6030      	str	r0, [r6, #0]
 800b720:	2800      	cmp	r0, #0
 800b722:	d1d5      	bne.n	800b6d0 <__sfp+0x24>
 800b724:	f7ff ff78 	bl	800b618 <__sfp_lock_release>
 800b728:	230c      	movs	r3, #12
 800b72a:	603b      	str	r3, [r7, #0]
 800b72c:	e7ee      	b.n	800b70c <__sfp+0x60>
 800b72e:	bf00      	nop
 800b730:	0800ba8c 	.word	0x0800ba8c
 800b734:	ffff0001 	.word	0xffff0001

0800b738 <_fwalk_reent>:
 800b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b73c:	4606      	mov	r6, r0
 800b73e:	4688      	mov	r8, r1
 800b740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b744:	2700      	movs	r7, #0
 800b746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b74a:	f1b9 0901 	subs.w	r9, r9, #1
 800b74e:	d505      	bpl.n	800b75c <_fwalk_reent+0x24>
 800b750:	6824      	ldr	r4, [r4, #0]
 800b752:	2c00      	cmp	r4, #0
 800b754:	d1f7      	bne.n	800b746 <_fwalk_reent+0xe>
 800b756:	4638      	mov	r0, r7
 800b758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75c:	89ab      	ldrh	r3, [r5, #12]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d907      	bls.n	800b772 <_fwalk_reent+0x3a>
 800b762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b766:	3301      	adds	r3, #1
 800b768:	d003      	beq.n	800b772 <_fwalk_reent+0x3a>
 800b76a:	4629      	mov	r1, r5
 800b76c:	4630      	mov	r0, r6
 800b76e:	47c0      	blx	r8
 800b770:	4307      	orrs	r7, r0
 800b772:	3568      	adds	r5, #104	; 0x68
 800b774:	e7e9      	b.n	800b74a <_fwalk_reent+0x12>

0800b776 <__retarget_lock_init_recursive>:
 800b776:	4770      	bx	lr

0800b778 <__retarget_lock_acquire_recursive>:
 800b778:	4770      	bx	lr

0800b77a <__retarget_lock_release_recursive>:
 800b77a:	4770      	bx	lr

0800b77c <__swhatbuf_r>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	460e      	mov	r6, r1
 800b780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b784:	2900      	cmp	r1, #0
 800b786:	b096      	sub	sp, #88	; 0x58
 800b788:	4614      	mov	r4, r2
 800b78a:	461d      	mov	r5, r3
 800b78c:	da08      	bge.n	800b7a0 <__swhatbuf_r+0x24>
 800b78e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	602a      	str	r2, [r5, #0]
 800b796:	061a      	lsls	r2, r3, #24
 800b798:	d410      	bmi.n	800b7bc <__swhatbuf_r+0x40>
 800b79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b79e:	e00e      	b.n	800b7be <__swhatbuf_r+0x42>
 800b7a0:	466a      	mov	r2, sp
 800b7a2:	f000 f8fb 	bl	800b99c <_fstat_r>
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	dbf1      	blt.n	800b78e <__swhatbuf_r+0x12>
 800b7aa:	9a01      	ldr	r2, [sp, #4]
 800b7ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7b4:	425a      	negs	r2, r3
 800b7b6:	415a      	adcs	r2, r3
 800b7b8:	602a      	str	r2, [r5, #0]
 800b7ba:	e7ee      	b.n	800b79a <__swhatbuf_r+0x1e>
 800b7bc:	2340      	movs	r3, #64	; 0x40
 800b7be:	2000      	movs	r0, #0
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	b016      	add	sp, #88	; 0x58
 800b7c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7c8 <__smakebuf_r>:
 800b7c8:	898b      	ldrh	r3, [r1, #12]
 800b7ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7cc:	079d      	lsls	r5, r3, #30
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	d507      	bpl.n	800b7e4 <__smakebuf_r+0x1c>
 800b7d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	6123      	str	r3, [r4, #16]
 800b7dc:	2301      	movs	r3, #1
 800b7de:	6163      	str	r3, [r4, #20]
 800b7e0:	b002      	add	sp, #8
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	ab01      	add	r3, sp, #4
 800b7e6:	466a      	mov	r2, sp
 800b7e8:	f7ff ffc8 	bl	800b77c <__swhatbuf_r>
 800b7ec:	9900      	ldr	r1, [sp, #0]
 800b7ee:	4605      	mov	r5, r0
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff f913 	bl	800aa1c <_malloc_r>
 800b7f6:	b948      	cbnz	r0, 800b80c <__smakebuf_r+0x44>
 800b7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fc:	059a      	lsls	r2, r3, #22
 800b7fe:	d4ef      	bmi.n	800b7e0 <__smakebuf_r+0x18>
 800b800:	f023 0303 	bic.w	r3, r3, #3
 800b804:	f043 0302 	orr.w	r3, r3, #2
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	e7e3      	b.n	800b7d4 <__smakebuf_r+0xc>
 800b80c:	4b0d      	ldr	r3, [pc, #52]	; (800b844 <__smakebuf_r+0x7c>)
 800b80e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b810:	89a3      	ldrh	r3, [r4, #12]
 800b812:	6020      	str	r0, [r4, #0]
 800b814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	9b00      	ldr	r3, [sp, #0]
 800b81c:	6163      	str	r3, [r4, #20]
 800b81e:	9b01      	ldr	r3, [sp, #4]
 800b820:	6120      	str	r0, [r4, #16]
 800b822:	b15b      	cbz	r3, 800b83c <__smakebuf_r+0x74>
 800b824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f8c9 	bl	800b9c0 <_isatty_r>
 800b82e:	b128      	cbz	r0, 800b83c <__smakebuf_r+0x74>
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f023 0303 	bic.w	r3, r3, #3
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	89a0      	ldrh	r0, [r4, #12]
 800b83e:	4305      	orrs	r5, r0
 800b840:	81a5      	strh	r5, [r4, #12]
 800b842:	e7cd      	b.n	800b7e0 <__smakebuf_r+0x18>
 800b844:	0800b5d5 	.word	0x0800b5d5

0800b848 <_raise_r>:
 800b848:	291f      	cmp	r1, #31
 800b84a:	b538      	push	{r3, r4, r5, lr}
 800b84c:	4604      	mov	r4, r0
 800b84e:	460d      	mov	r5, r1
 800b850:	d904      	bls.n	800b85c <_raise_r+0x14>
 800b852:	2316      	movs	r3, #22
 800b854:	6003      	str	r3, [r0, #0]
 800b856:	f04f 30ff 	mov.w	r0, #4294967295
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b85e:	b112      	cbz	r2, 800b866 <_raise_r+0x1e>
 800b860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b864:	b94b      	cbnz	r3, 800b87a <_raise_r+0x32>
 800b866:	4620      	mov	r0, r4
 800b868:	f000 f830 	bl	800b8cc <_getpid_r>
 800b86c:	462a      	mov	r2, r5
 800b86e:	4601      	mov	r1, r0
 800b870:	4620      	mov	r0, r4
 800b872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b876:	f000 b817 	b.w	800b8a8 <_kill_r>
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d00a      	beq.n	800b894 <_raise_r+0x4c>
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	d103      	bne.n	800b88a <_raise_r+0x42>
 800b882:	2316      	movs	r3, #22
 800b884:	6003      	str	r3, [r0, #0]
 800b886:	2001      	movs	r0, #1
 800b888:	e7e7      	b.n	800b85a <_raise_r+0x12>
 800b88a:	2400      	movs	r4, #0
 800b88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b890:	4628      	mov	r0, r5
 800b892:	4798      	blx	r3
 800b894:	2000      	movs	r0, #0
 800b896:	e7e0      	b.n	800b85a <_raise_r+0x12>

0800b898 <raise>:
 800b898:	4b02      	ldr	r3, [pc, #8]	; (800b8a4 <raise+0xc>)
 800b89a:	4601      	mov	r1, r0
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	f7ff bfd3 	b.w	800b848 <_raise_r>
 800b8a2:	bf00      	nop
 800b8a4:	24000318 	.word	0x24000318

0800b8a8 <_kill_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	; (800b8c8 <_kill_r+0x20>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	f7f6 f9cb 	bl	8001c50 <_kill>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d102      	bne.n	800b8c4 <_kill_r+0x1c>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	b103      	cbz	r3, 800b8c4 <_kill_r+0x1c>
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	bd38      	pop	{r3, r4, r5, pc}
 800b8c6:	bf00      	nop
 800b8c8:	240009a8 	.word	0x240009a8

0800b8cc <_getpid_r>:
 800b8cc:	f7f6 b9b8 	b.w	8001c40 <_getpid>

0800b8d0 <__sread>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d8:	f000 f894 	bl	800ba04 <_read_r>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	bfab      	itete	ge
 800b8e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b8e4:	181b      	addge	r3, r3, r0
 800b8e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b8ea:	bfac      	ite	ge
 800b8ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b8ee:	81a3      	strhlt	r3, [r4, #12]
 800b8f0:	bd10      	pop	{r4, pc}

0800b8f2 <__swrite>:
 800b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	461f      	mov	r7, r3
 800b8f8:	898b      	ldrh	r3, [r1, #12]
 800b8fa:	05db      	lsls	r3, r3, #23
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	460c      	mov	r4, r1
 800b900:	4616      	mov	r6, r2
 800b902:	d505      	bpl.n	800b910 <__swrite+0x1e>
 800b904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b908:	2302      	movs	r3, #2
 800b90a:	2200      	movs	r2, #0
 800b90c:	f000 f868 	bl	800b9e0 <_lseek_r>
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	4632      	mov	r2, r6
 800b91e:	463b      	mov	r3, r7
 800b920:	4628      	mov	r0, r5
 800b922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b926:	f000 b817 	b.w	800b958 <_write_r>

0800b92a <__sseek>:
 800b92a:	b510      	push	{r4, lr}
 800b92c:	460c      	mov	r4, r1
 800b92e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b932:	f000 f855 	bl	800b9e0 <_lseek_r>
 800b936:	1c43      	adds	r3, r0, #1
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	bf15      	itete	ne
 800b93c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b93e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b946:	81a3      	strheq	r3, [r4, #12]
 800b948:	bf18      	it	ne
 800b94a:	81a3      	strhne	r3, [r4, #12]
 800b94c:	bd10      	pop	{r4, pc}

0800b94e <__sclose>:
 800b94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b952:	f000 b813 	b.w	800b97c <_close_r>
	...

0800b958 <_write_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d07      	ldr	r5, [pc, #28]	; (800b978 <_write_r+0x20>)
 800b95c:	4604      	mov	r4, r0
 800b95e:	4608      	mov	r0, r1
 800b960:	4611      	mov	r1, r2
 800b962:	2200      	movs	r2, #0
 800b964:	602a      	str	r2, [r5, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	f7f6 f9a9 	bl	8001cbe <_write>
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	d102      	bne.n	800b976 <_write_r+0x1e>
 800b970:	682b      	ldr	r3, [r5, #0]
 800b972:	b103      	cbz	r3, 800b976 <_write_r+0x1e>
 800b974:	6023      	str	r3, [r4, #0]
 800b976:	bd38      	pop	{r3, r4, r5, pc}
 800b978:	240009a8 	.word	0x240009a8

0800b97c <_close_r>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	4d06      	ldr	r5, [pc, #24]	; (800b998 <_close_r+0x1c>)
 800b980:	2300      	movs	r3, #0
 800b982:	4604      	mov	r4, r0
 800b984:	4608      	mov	r0, r1
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	f7f6 f9b5 	bl	8001cf6 <_close>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_close_r+0x1a>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_close_r+0x1a>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	240009a8 	.word	0x240009a8

0800b99c <_fstat_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d07      	ldr	r5, [pc, #28]	; (800b9bc <_fstat_r+0x20>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	f7f6 f9b0 	bl	8001d0e <_fstat>
 800b9ae:	1c43      	adds	r3, r0, #1
 800b9b0:	d102      	bne.n	800b9b8 <_fstat_r+0x1c>
 800b9b2:	682b      	ldr	r3, [r5, #0]
 800b9b4:	b103      	cbz	r3, 800b9b8 <_fstat_r+0x1c>
 800b9b6:	6023      	str	r3, [r4, #0]
 800b9b8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ba:	bf00      	nop
 800b9bc:	240009a8 	.word	0x240009a8

0800b9c0 <_isatty_r>:
 800b9c0:	b538      	push	{r3, r4, r5, lr}
 800b9c2:	4d06      	ldr	r5, [pc, #24]	; (800b9dc <_isatty_r+0x1c>)
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	602b      	str	r3, [r5, #0]
 800b9cc:	f7f6 f9af 	bl	8001d2e <_isatty>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_isatty_r+0x1a>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_isatty_r+0x1a>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	240009a8 	.word	0x240009a8

0800b9e0 <_lseek_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d07      	ldr	r5, [pc, #28]	; (800ba00 <_lseek_r+0x20>)
 800b9e4:	4604      	mov	r4, r0
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	602a      	str	r2, [r5, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f7f6 f9a8 	bl	8001d44 <_lseek>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_lseek_r+0x1e>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_lseek_r+0x1e>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	240009a8 	.word	0x240009a8

0800ba04 <_read_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	4d07      	ldr	r5, [pc, #28]	; (800ba24 <_read_r+0x20>)
 800ba08:	4604      	mov	r4, r0
 800ba0a:	4608      	mov	r0, r1
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	2200      	movs	r2, #0
 800ba10:	602a      	str	r2, [r5, #0]
 800ba12:	461a      	mov	r2, r3
 800ba14:	f7f6 f936 	bl	8001c84 <_read>
 800ba18:	1c43      	adds	r3, r0, #1
 800ba1a:	d102      	bne.n	800ba22 <_read_r+0x1e>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	b103      	cbz	r3, 800ba22 <_read_r+0x1e>
 800ba20:	6023      	str	r3, [r4, #0]
 800ba22:	bd38      	pop	{r3, r4, r5, pc}
 800ba24:	240009a8 	.word	0x240009a8

0800ba28 <_init>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	bf00      	nop
 800ba2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2e:	bc08      	pop	{r3}
 800ba30:	469e      	mov	lr, r3
 800ba32:	4770      	bx	lr

0800ba34 <_fini>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	bf00      	nop
 800ba38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba3a:	bc08      	pop	{r3}
 800ba3c:	469e      	mov	lr, r3
 800ba3e:	4770      	bx	lr
