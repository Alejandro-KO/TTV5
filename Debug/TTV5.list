
TTV5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b788  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800ba58  0800ba58  0001ba58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bed4  0800bed4  0001bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bedc  0800bedc  0001bedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bee0  0800bee0  0001bee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000004ec  24000000  0800bee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004c4  240004ec  0800c3d0  000204ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009b0  0800c3d0  000209b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000204ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016b7b  00000000  00000000  0002051a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026ce  00000000  00000000  00037095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011a8  00000000  00000000  00039768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010c0  00000000  00000000  0003a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000337aa  00000000  00000000  0003b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017226  00000000  00000000  0006f17a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014dc46  00000000  00000000  000863a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3fe6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005bb4  00000000  00000000  001d4038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240004ec 	.word	0x240004ec
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ba40 	.word	0x0800ba40

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240004f0 	.word	0x240004f0
 800030c:	0800ba40 	.word	0x0800ba40

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <radianes_a_valor>:
char q2[BUFFER_SIZE] = {'1','2','0'};
char q3[BUFFER_SIZE] = {0};
char q4[BUFFER_SIZE] = {'1','.','5','7','0','7'};
char q5[BUFFER_SIZE] = {'1','.','5','7','0','7'};

uint32_t radianes_a_valor(float radianes) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ajusta los radianes negativos a su equivalente positivo en el rango de 0 a 2PI
    if (radianes < 0) {
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac6:	d50e      	bpl.n	8000ae6 <radianes_a_valor+0x36>
        radianes += (2*M_PI);
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ad0:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000b30 <radianes_a_valor+0x80>
 8000ad4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ad8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000adc:	edc7 7a01 	vstr	s15, [r7, #4]
    	radianes = 0;
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
    }

    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes > M_PI) {
 8000ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aee:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8000b38 <radianes_a_valor+0x88>
 8000af2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afa:	dd01      	ble.n	8000b00 <radianes_a_valor+0x50>
        radianes = M_PI;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <radianes_a_valor+0x98>)
 8000afe:	607b      	str	r3, [r7, #4]
    }

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000b00:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b04:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b08:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000b38 <radianes_a_valor+0x88>
 8000b0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b10:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000b40 <radianes_a_valor+0x90>
 8000b14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b1c:	ee17 3a90 	vmov	r3, s15
 8000b20:	3341      	adds	r3, #65	; 0x41
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	54442d18 	.word	0x54442d18
 8000b34:	401921fb 	.word	0x401921fb
 8000b38:	54442d18 	.word	0x54442d18
 8000b3c:	400921fb 	.word	0x400921fb
 8000b40:	00000000 	.word	0x00000000
 8000b44:	406cc000 	.word	0x406cc000
 8000b48:	40490fdb 	.word	0x40490fdb

08000b4c <milimetros_a_pasos>:

uint32_t milimetros_a_pasos(float milimetros) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calcular el número de pasos necesarios para mover la distancia en milímetros
    float pasos_por_mm = 200.0 / 8.0; // 200 pasos por 8 mm
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <milimetros_a_pasos+0x3c>)
 8000b58:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(fabs(milimetros) * pasos_por_mm);
 8000b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b5e:	eef0 7ae7 	vabs.f32	s15, s15
 8000b62:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b66:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b6e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b76:	ee17 3a90 	vmov	r3, s15
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	41c80000 	.word	0x41c80000

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b598      	push	{r3, r4, r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b90:	f001 f9ca 	bl	8001f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b94:	f000 f89e 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b98:	f000 f9f8 	bl	8000f8c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b9c:	f000 f95e 	bl	8000e5c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ba0:	f000 f9a8 	bl	8000ef4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000ba4:	f000 f8f6 	bl	8000d94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000ba8:	210c      	movs	r1, #12
 8000baa:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <main+0x114>)
 8000bac:	f004 fdaa 	bl	8005704 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	483b      	ldr	r0, [pc, #236]	; (8000ca0 <main+0x114>)
 8000bb4:	f004 fda6 	bl	8005704 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3,&byte,bufersize);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	493a      	ldr	r1, [pc, #232]	; (8000ca4 <main+0x118>)
 8000bbc:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <main+0x11c>)
 8000bbe:	f005 fcf5 	bl	80065ac <HAL_UART_Receive_IT>

  A4988_q1();
 8000bc2:	f000 fbeb 	bl	800139c <A4988_q1>
  A4988_q2();
 8000bc6:	f000 fc07 	bl	80013d8 <A4988_q2>
  A4988_q3();
 8000bca:	f000 fc23 	bl	8001414 <A4988_q3>
  Home();
 8000bce:	f000 fc43 	bl	8001458 <Home>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  q1_float = atof(q1);
 8000bd2:	4836      	ldr	r0, [pc, #216]	; (8000cac <main+0x120>)
 8000bd4:	f008 f870 	bl	8008cb8 <atof>
 8000bd8:	eeb0 7b40 	vmov.f64	d7, d0
 8000bdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <main+0x124>)
 8000be2:	edc3 7a00 	vstr	s15, [r3]
	  q4_float = atof(q4);
 8000be6:	4833      	ldr	r0, [pc, #204]	; (8000cb4 <main+0x128>)
 8000be8:	f008 f866 	bl	8008cb8 <atof>
 8000bec:	eeb0 7b40 	vmov.f64	d7, d0
 8000bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <main+0x12c>)
 8000bf6:	edc3 7a00 	vstr	s15, [r3]
	  q5_float = atof(q5);
 8000bfa:	4830      	ldr	r0, [pc, #192]	; (8000cbc <main+0x130>)
 8000bfc:	f008 f85c 	bl	8008cb8 <atof>
 8000c00:	eeb0 7b40 	vmov.f64	d7, d0
 8000c04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <main+0x134>)
 8000c0a:	edc3 7a00 	vstr	s15, [r3]

	  // Conversión de q2 y q3 a int (truncando los valores decimales)
	  q2_int = (int)atof(q2);
 8000c0e:	482d      	ldr	r0, [pc, #180]	; (8000cc4 <main+0x138>)
 8000c10:	f008 f852 	bl	8008cb8 <atof>
 8000c14:	eeb0 7b40 	vmov.f64	d7, d0
 8000c18:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <main+0x13c>)
 8000c22:	601a      	str	r2, [r3, #0]
	  q3_int = (int)atof(q3);
 8000c24:	4829      	ldr	r0, [pc, #164]	; (8000ccc <main+0x140>)
 8000c26:	f008 f847 	bl	8008cb8 <atof>
 8000c2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c2e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c32:	ee17 2a90 	vmov	r2, s15
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <main+0x144>)
 8000c38:	601a      	str	r2, [r3, #0]

	  mover_motorq1_rad(q1_float);
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <main+0x124>)
 8000c3c:	edd3 7a00 	vldr	s15, [r3]
 8000c40:	eeb0 0a67 	vmov.f32	s0, s15
 8000c44:	f000 fd08 	bl	8001658 <mover_motorq1_rad>
	  mover_motorq2_mm(q2_int);
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <main+0x13c>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	ee07 3a90 	vmov	s15, r3
 8000c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c54:	eeb0 0a67 	vmov.f32	s0, s15
 8000c58:	f000 fd7c 	bl	8001754 <mover_motorq2_mm>
	  mover_motorq3_mm(q3_int);
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <main+0x144>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c68:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6c:	f000 fdde 	bl	800182c <mover_motorq3_mm>
	  TIM2->CCR4 = radianes_a_valor(q4_float); //q4
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <main+0x12c>)
 8000c72:	edd3 7a00 	vldr	s15, [r3]
 8000c76:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c7e:	f7ff ff17 	bl	8000ab0 <radianes_a_valor>
 8000c82:	4603      	mov	r3, r0
 8000c84:	6423      	str	r3, [r4, #64]	; 0x40
	  TIM2->CCR2 = radianes_a_valor(q5_float); //q5
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <main+0x134>)
 8000c88:	edd3 7a00 	vldr	s15, [r3]
 8000c8c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000c90:	eeb0 0a67 	vmov.f32	s0, s15
 8000c94:	f7ff ff0c 	bl	8000ab0 <radianes_a_valor>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	63a3      	str	r3, [r4, #56]	; 0x38
	  q1_float = atof(q1);
 8000c9c:	e799      	b.n	8000bd2 <main+0x46>
 8000c9e:	bf00      	nop
 8000ca0:	24000508 	.word	0x24000508
 8000ca4:	24000674 	.word	0x24000674
 8000ca8:	240005e4 	.word	0x240005e4
 8000cac:	2400077c 	.word	0x2400077c
 8000cb0:	24000984 	.word	0x24000984
 8000cb4:	24000100 	.word	0x24000100
 8000cb8:	24000988 	.word	0x24000988
 8000cbc:	24000200 	.word	0x24000200
 8000cc0:	2400098c 	.word	0x2400098c
 8000cc4:	24000000 	.word	0x24000000
 8000cc8:	24000990 	.word	0x24000990
 8000ccc:	2400087c 	.word	0x2400087c
 8000cd0:	24000994 	.word	0x24000994

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b09c      	sub	sp, #112	; 0x70
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	224c      	movs	r2, #76	; 0x4c
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f008 f816 	bl	8008d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2220      	movs	r2, #32
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f008 f810 	bl	8008d14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f002 fa1d 	bl	8003134 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b24      	ldr	r3, [pc, #144]	; (8000d90 <SystemClock_Config+0xbc>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d06:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <SystemClock_Config+0xbc>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <SystemClock_Config+0xbc>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d1a:	bf00      	nop
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <SystemClock_Config+0xbc>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d28:	d1f8      	bne.n	8000d1c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d32:	2340      	movs	r3, #64	; 0x40
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fa32 	bl	80031a8 <HAL_RCC_OscConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000d4a:	f000 fdf7 	bl	800193c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	233f      	movs	r3, #63	; 0x3f
 8000d50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 8000d56:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d6e:	2340      	movs	r3, #64	; 0x40
 8000d70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fdc4 	bl	8003904 <HAL_RCC_ClockConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d82:	f000 fddb 	bl	800193c <Error_Handler>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3770      	adds	r7, #112	; 0x70
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	58024800 	.word	0x58024800

08000d94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000dc2:	2240      	movs	r2, #64	; 0x40
 8000dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000dce:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000de0:	481d      	ldr	r0, [pc, #116]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000de2:	f004 fc37 	bl	8005654 <HAL_TIM_PWM_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000dec:	f000 fda6 	bl	800193c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4816      	ldr	r0, [pc, #88]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000e00:	f005 fa52 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e0a:	f000 fd97 	bl	800193c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0e:	2360      	movs	r3, #96	; 0x60
 8000e10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2204      	movs	r2, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000e26:	f004 fd89 	bl	800593c <HAL_TIM_PWM_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e30:	f000 fd84 	bl	800193c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	220c      	movs	r2, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000e3c:	f004 fd7e 	bl	800593c <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000e46:	f000 fd79 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM2_Init+0xc4>)
 8000e4c:	f000 fdb6 	bl	80019bc <HAL_TIM_MspPostInit>

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	24000508 	.word	0x24000508

08000e5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e62:	4a23      	ldr	r2, [pc, #140]	; (8000ef0 <MX_USART1_UART_Init+0x94>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea4:	4811      	ldr	r0, [pc, #68]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000ea6:	f005 fa9b 	bl	80063e0 <HAL_UART_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000eb0:	f000 fd44 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	480d      	ldr	r0, [pc, #52]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000eb8:	f007 fe33 	bl	8008b22 <HAL_UARTEx_SetTxFifoThreshold>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec2:	f000 fd3b 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4808      	ldr	r0, [pc, #32]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000eca:	f007 fe68 	bl	8008b9e <HAL_UARTEx_SetRxFifoThreshold>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed4:	f000 fd32 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	; (8000eec <MX_USART1_UART_Init+0x90>)
 8000eda:	f007 fde9 	bl	8008ab0 <HAL_UARTEx_DisableFifoMode>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee4:	f000 fd2a 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	24000554 	.word	0x24000554
 8000ef0:	40011000 	.word	0x40011000

08000ef4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <MX_USART3_UART_Init+0x94>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f3c:	4811      	ldr	r0, [pc, #68]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f3e:	f005 fa4f 	bl	80063e0 <HAL_UART_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f48:	f000 fcf8 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f50:	f007 fde7 	bl	8008b22 <HAL_UARTEx_SetTxFifoThreshold>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f5a:	f000 fcef 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4808      	ldr	r0, [pc, #32]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f62:	f007 fe1c 	bl	8008b9e <HAL_UARTEx_SetRxFifoThreshold>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f6c:	f000 fce6 	bl	800193c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_USART3_UART_Init+0x90>)
 8000f72:	f007 fd9d 	bl	8008ab0 <HAL_UARTEx_DisableFifoMode>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f7c:	f000 fcde 	bl	800193c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	240005e4 	.word	0x240005e4
 8000f88:	40004800 	.word	0x40004800

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	; 0x30
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4b71      	ldr	r3, [pc, #452]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	4a6f      	ldr	r2, [pc, #444]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb2:	4b6d      	ldr	r3, [pc, #436]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc0:	4b69      	ldr	r3, [pc, #420]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	4a68      	ldr	r2, [pc, #416]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd0:	4b65      	ldr	r3, [pc, #404]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a60      	ldr	r2, [pc, #384]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b5e      	ldr	r3, [pc, #376]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffc:	4b5a      	ldr	r3, [pc, #360]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a59      	ldr	r2, [pc, #356]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b56      	ldr	r3, [pc, #344]	; (8001168 <MX_GPIO_Init+0x1dc>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b53      	ldr	r3, [pc, #332]	; (8001168 <MX_GPIO_Init+0x1dc>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <MX_GPIO_Init+0x1dc>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001038:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <MX_GPIO_Init+0x1dc>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <MX_GPIO_Init+0x1dc>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <MX_GPIO_Init+0x1dc>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f640 2188 	movw	r1, #2696	; 0xa88
 800105c:	4843      	ldr	r0, [pc, #268]	; (800116c <MX_GPIO_Init+0x1e0>)
 800105e:	f002 f835 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 8001062:	2200      	movs	r2, #0
 8001064:	f64a 0155 	movw	r1, #43093	; 0xa855
 8001068:	4841      	ldr	r0, [pc, #260]	; (8001170 <MX_GPIO_Init+0x1e4>)
 800106a:	f002 f82f 	bl	80030cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8001074:	483f      	ldr	r0, [pc, #252]	; (8001174 <MX_GPIO_Init+0x1e8>)
 8001076:	f002 f829 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8001080:	483d      	ldr	r0, [pc, #244]	; (8001178 <MX_GPIO_Init+0x1ec>)
 8001082:	f002 f823 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2102      	movs	r1, #2
 800108a:	483c      	ldr	r0, [pc, #240]	; (800117c <MX_GPIO_Init+0x1f0>)
 800108c:	f002 f81e 	bl	80030cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC3 PC7 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8001090:	f640 2388 	movw	r3, #2696	; 0xa88
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	4830      	ldr	r0, [pc, #192]	; (800116c <MX_GPIO_Init+0x1e0>)
 80010aa:	f001 fe67 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80010ae:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	482d      	ldr	r0, [pc, #180]	; (800117c <MX_GPIO_Init+0x1f0>)
 80010c6:	f001 fe59 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD13 PD15 PD0
                           PD2 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 80010ca:	f64a 0355 	movw	r3, #43093	; 0xa855
 80010ce:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010dc:	f107 031c 	add.w	r3, r7, #28
 80010e0:	4619      	mov	r1, r3
 80010e2:	4823      	ldr	r0, [pc, #140]	; (8001170 <MX_GPIO_Init+0x1e4>)
 80010e4:	f001 fe4a 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 80010e8:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_GPIO_Init+0x1e8>)
 8001102:	f001 fe3b 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8001106:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <MX_GPIO_Init+0x1ec>)
 8001120:	f001 fe2c 	bl	8002d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	4810      	ldr	r0, [pc, #64]	; (800117c <MX_GPIO_Init+0x1f0>)
 800113c:	f001 fe1e 	bl	8002d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2100      	movs	r1, #0
 8001144:	2017      	movs	r0, #23
 8001146:	f001 f880 	bl	800224a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800114a:	2017      	movs	r0, #23
 800114c:	f001 f897 	bl	800227e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2028      	movs	r0, #40	; 0x28
 8001156:	f001 f878 	bl	800224a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115a:	2028      	movs	r0, #40	; 0x28
 800115c:	f001 f88f 	bl	800227e <HAL_NVIC_EnableIRQ>

}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	58024400 	.word	0x58024400
 800116c:	58020800 	.word	0x58020800
 8001170:	58020c00 	.word	0x58020c00
 8001174:	58020000 	.word	0x58020000
 8001178:	58020400 	.word	0x58020400
 800117c:	58021000 	.word	0x58021000

08001180 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	2b80      	cmp	r3, #128	; 0x80
 800118e:	d102      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x16>
    	FC_Home_q2 = 0;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_GPIO_EXTI_Callback+0x7c>)
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_9) {
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119c:	d102      	bne.n	80011a4 <HAL_GPIO_EXTI_Callback+0x24>
    	FC_Home_q3 = 0;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_GPIO_EXTI_Callback+0x80>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_11) {
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011aa:	d10f      	bne.n	80011cc <HAL_GPIO_EXTI_Callback+0x4c>
    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2102      	movs	r1, #2
 80011b0:	4814      	ldr	r0, [pc, #80]	; (8001204 <HAL_GPIO_EXTI_Callback+0x84>)
 80011b2:	f001 ff8b 	bl	80030cc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2110      	movs	r1, #16
 80011ba:	4813      	ldr	r0, [pc, #76]	; (8001208 <HAL_GPIO_EXTI_Callback+0x88>)
 80011bc:	f001 ff86 	bl	80030cc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <HAL_GPIO_EXTI_Callback+0x8c>)
 80011c8:	f001 ff80 	bl	80030cc <HAL_GPIO_WritePin>
    }
    if (GPIO_Pin == GPIO_PIN_13) {
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d2:	d10f      	bne.n	80011f4 <HAL_GPIO_EXTI_Callback+0x74>
    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	480a      	ldr	r0, [pc, #40]	; (8001204 <HAL_GPIO_EXTI_Callback+0x84>)
 80011da:	f001 ff77 	bl	80030cc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_GPIO_EXTI_Callback+0x88>)
 80011e4:	f001 ff72 	bl	80030cc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011ee:	4807      	ldr	r0, [pc, #28]	; (800120c <HAL_GPIO_EXTI_Callback+0x8c>)
 80011f0:	f001 ff6c 	bl	80030cc <HAL_GPIO_WritePin>
    }
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	24000300 	.word	0x24000300
 8001200:	24000301 	.word	0x24000301
 8001204:	58021000 	.word	0x58021000
 8001208:	58020c00 	.word	0x58020c00
 800120c:	58020000 	.word	0x58020000

08001210 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_UART_RxCpltCallback+0x6c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d128      	bne.n	8001274 <HAL_UART_RxCpltCallback+0x64>
    {
        // Almacenar el byte recibido en el buffer si no es '>'
        if (byte != 62) // 62 es el código ASCII para '>'
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_UART_RxCpltCallback+0x70>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b3e      	cmp	r3, #62	; 0x3e
 8001228:	d016      	beq.n	8001258 <HAL_UART_RxCpltCallback+0x48>
        {
            if (bufferIndex < BUFFER_SIZE)
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_UART_RxCpltCallback+0x74>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	2bff      	cmp	r3, #255	; 0xff
 8001230:	d80b      	bhi.n	800124a <HAL_UART_RxCpltCallback+0x3a>
            {
                buffer[bufferIndex++] = byte;
 8001232:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_UART_RxCpltCallback+0x74>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	b291      	uxth	r1, r2
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_UART_RxCpltCallback+0x74>)
 800123c:	8011      	strh	r1, [r2, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_UART_RxCpltCallback+0x70>)
 8001242:	7819      	ldrb	r1, [r3, #0]
 8001244:	4b10      	ldr	r3, [pc, #64]	; (8001288 <HAL_UART_RxCpltCallback+0x78>)
 8001246:	5499      	strb	r1, [r3, r2]
 8001248:	e00f      	b.n	800126a <HAL_UART_RxCpltCallback+0x5a>
            }
            else
            {
                // Manejar el caso de desbordamiento del buffer
                bufferOverflowFlag = 1; // Establecer la bandera de desbordamiento
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_UART_RxCpltCallback+0x7c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
                bufferIndex = 0; // Opcional: restablecer el índice del buffer
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_UART_RxCpltCallback+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	801a      	strh	r2, [r3, #0]
 8001256:	e008      	b.n	800126a <HAL_UART_RxCpltCallback+0x5a>
        {
            // Aquí puedes manejar el caso cuando se recibe '>'
            // Por ejemplo, procesar el buffer y restablecer bufferIndex
        	 //HAL_UART_Transmit(&huart1, prueba_1, sizeof(prueba_1) - 1, 100);
        	 //HAL_UART_Transmit(&huart1, buffer,bufferIndex, 100);// Envía la cadena a través de UART
            processBuffer(buffer, bufferIndex);
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_UART_RxCpltCallback+0x74>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	480a      	ldr	r0, [pc, #40]	; (8001288 <HAL_UART_RxCpltCallback+0x78>)
 8001260:	f000 f818 	bl	8001294 <processBuffer>
            bufferIndex = 0;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_UART_RxCpltCallback+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart3, &byte, 1);
 800126a:	2201      	movs	r2, #1
 800126c:	4904      	ldr	r1, [pc, #16]	; (8001280 <HAL_UART_RxCpltCallback+0x70>)
 800126e:	4808      	ldr	r0, [pc, #32]	; (8001290 <HAL_UART_RxCpltCallback+0x80>)
 8001270:	f005 f99c 	bl	80065ac <HAL_UART_Receive_IT>


        // Vuelve a habilitar la recepción por interrupción

    }
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40004800 	.word	0x40004800
 8001280:	24000674 	.word	0x24000674
 8001284:	24000778 	.word	0x24000778
 8001288:	24000678 	.word	0x24000678
 800128c:	2400077a 	.word	0x2400077a
 8001290:	240005e4 	.word	0x240005e4

08001294 <processBuffer>:

void processBuffer(uint8_t *buffer, uint16_t length){
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	807b      	strh	r3, [r7, #2]
	{
	    if (bufferOverflowFlag)
 80012a0:	4b36      	ldr	r3, [pc, #216]	; (800137c <processBuffer+0xe8>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d009      	beq.n	80012bc <processBuffer+0x28>
	    {
	        // Manejar el desbordamiento del buffer
	        // Por ejemplo, enviar un mensaje de error o realizar acciones correctivas
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Buffer overflow\n", 16, 100);
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	2210      	movs	r2, #16
 80012ac:	4934      	ldr	r1, [pc, #208]	; (8001380 <processBuffer+0xec>)
 80012ae:	4835      	ldr	r0, [pc, #212]	; (8001384 <processBuffer+0xf0>)
 80012b0:	f005 f8e6 	bl	8006480 <HAL_UART_Transmit>
	        bufferOverflowFlag = 0; // Restablecer la bandera de desbordamiento
 80012b4:	4b31      	ldr	r3, [pc, #196]	; (800137c <processBuffer+0xe8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
	        return;
 80012ba:	e05c      	b.n	8001376 <processBuffer+0xe2>
	//    char q3[BUFFER_SIZE] = {0};
	//    char q4[BUFFER_SIZE] = {0};


	    // Punteros para la división de la cadena
	    char *ptr = (char *)buffer;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	617b      	str	r3, [r7, #20]
	    char *start = ptr;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
	    char *end = strchr(start, 'a');
 80012c4:	2161      	movs	r1, #97	; 0x61
 80012c6:	6938      	ldr	r0, [r7, #16]
 80012c8:	f007 fd2c 	bl	8008d24 <strchr>
 80012cc:	60f8      	str	r0, [r7, #12]

	    if (end != NULL)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d046      	beq.n	8001362 <processBuffer+0xce>
	    {
	        strncpy(q1, start, end - start);
 80012d4:	68fa      	ldr	r2, [r7, #12]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	6939      	ldr	r1, [r7, #16]
 80012de:	482a      	ldr	r0, [pc, #168]	; (8001388 <processBuffer+0xf4>)
 80012e0:	f007 fd35 	bl	8008d4e <strncpy>
	        start = end + 1;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
	        end = strchr(start, 'b');
 80012ea:	2162      	movs	r1, #98	; 0x62
 80012ec:	6938      	ldr	r0, [r7, #16]
 80012ee:	f007 fd19 	bl	8008d24 <strchr>
 80012f2:	60f8      	str	r0, [r7, #12]

	        if (end != NULL)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d033      	beq.n	8001362 <processBuffer+0xce>
	        {
	            strncpy(q2, start, end - start);
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	461a      	mov	r2, r3
 8001302:	6939      	ldr	r1, [r7, #16]
 8001304:	4821      	ldr	r0, [pc, #132]	; (800138c <processBuffer+0xf8>)
 8001306:	f007 fd22 	bl	8008d4e <strncpy>
	            start = end + 1;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3301      	adds	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
	            end = strchr(start, 'c');
 8001310:	2163      	movs	r1, #99	; 0x63
 8001312:	6938      	ldr	r0, [r7, #16]
 8001314:	f007 fd06 	bl	8008d24 <strchr>
 8001318:	60f8      	str	r0, [r7, #12]

	            if (end != NULL)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d020      	beq.n	8001362 <processBuffer+0xce>
	            {
	                strncpy(q3, start, end - start);
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	461a      	mov	r2, r3
 8001328:	6939      	ldr	r1, [r7, #16]
 800132a:	4819      	ldr	r0, [pc, #100]	; (8001390 <processBuffer+0xfc>)
 800132c:	f007 fd0f 	bl	8008d4e <strncpy>
	                start = end + 1;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
	                strcpy(q4, start);
 8001336:	6939      	ldr	r1, [r7, #16]
 8001338:	4816      	ldr	r0, [pc, #88]	; (8001394 <processBuffer+0x100>)
 800133a:	f007 fd00 	bl	8008d3e <strcpy>

	                if (end != NULL){
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00e      	beq.n	8001362 <processBuffer+0xce>
	                    strncpy(q4, start, end - start);
 8001344:	68fa      	ldr	r2, [r7, #12]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	461a      	mov	r2, r3
 800134c:	6939      	ldr	r1, [r7, #16]
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <processBuffer+0x100>)
 8001350:	f007 fcfd 	bl	8008d4e <strncpy>
	                    start = end + 1;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
	                    strcpy(q5, start);
 800135a:	6939      	ldr	r1, [r7, #16]
 800135c:	480e      	ldr	r0, [pc, #56]	; (8001398 <processBuffer+0x104>)
 800135e:	f007 fcee 	bl	8008d3e <strcpy>
	            }
	        }
	    }

	    // Enviar cada parte a través de UART para verificar
	    HAL_UART_Transmit(&huart3, (uint8_t *)q1, strlen(q1), 100); // 0 puntos desfazados
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <processBuffer+0xf4>)
 8001364:	f7fe ffd4 	bl	8000310 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	4906      	ldr	r1, [pc, #24]	; (8001388 <processBuffer+0xf4>)
 8001370:	4804      	ldr	r0, [pc, #16]	; (8001384 <processBuffer+0xf0>)
 8001372:	f005 f885 	bl	8006480 <HAL_UART_Transmit>
	    //HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100); // 5 puntos desfazados
	    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); // 2 puntos malos
	    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100); // Enviar q4 si hay datos
	    //HAL_UART_Transmit(&huart1, (uint8_t *)q5, strlen(q5), 100); // Enviar q5 si hay datos
	}
}
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2400077a 	.word	0x2400077a
 8001380:	0800ba58 	.word	0x0800ba58
 8001384:	240005e4 	.word	0x240005e4
 8001388:	2400077c 	.word	0x2400077c
 800138c:	24000000 	.word	0x24000000
 8001390:	2400087c 	.word	0x2400087c
 8001394:	24000100 	.word	0x24000100
 8001398:	24000200 	.word	0x24000200

0800139c <A4988_q1>:

void A4988_q1(){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <A4988_q1+0x34>)
 80013a6:	f001 fe91 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS0_PIN_q1, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b0:	4808      	ldr	r0, [pc, #32]	; (80013d4 <A4988_q1+0x38>)
 80013b2:	f001 fe8b 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS1_PIN_q1, GPIO_PIN_RESET);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2180      	movs	r1, #128	; 0x80
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <A4988_q1+0x38>)
 80013bc:	f001 fe86 	bl	80030cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS2_PIN_q1, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2120      	movs	r1, #32
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <A4988_q1+0x38>)
 80013c6:	f001 fe81 	bl	80030cc <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	58021000 	.word	0x58021000
 80013d4:	58020400 	.word	0x58020400

080013d8 <A4988_q2>:

void A4988_q2(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2110      	movs	r1, #16
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <A4988_q2+0x34>)
 80013e2:	f001 fe73 	bl	80030cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS0_PIN_q2, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2104      	movs	r1, #4
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <A4988_q2+0x34>)
 80013ec:	f001 fe6e 	bl	80030cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS1_PIN_q2, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2101      	movs	r1, #1
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <A4988_q2+0x34>)
 80013f6:	f001 fe69 	bl	80030cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS2_PIN_q2, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <A4988_q2+0x38>)
 8001402:	f001 fe63 	bl	80030cc <HAL_GPIO_WritePin>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	58020c00 	.word	0x58020c00
 8001410:	58020800 	.word	0x58020800

08001414 <A4988_q3>:

void A4988_q3(){
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <A4988_q3+0x38>)
 8001420:	f001 fe54 	bl	80030cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS0_PIN_q3, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800142a:	4809      	ldr	r0, [pc, #36]	; (8001450 <A4988_q3+0x3c>)
 800142c:	f001 fe4e 	bl	80030cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS1_PIN_q3, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <A4988_q3+0x3c>)
 8001436:	f001 fe49 	bl	80030cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS2_PIN_q3, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <A4988_q3+0x40>)
 8001442:	f001 fe43 	bl	80030cc <HAL_GPIO_WritePin>
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	58020000 	.word	0x58020000
 8001450:	58020800 	.word	0x58020800
 8001454:	58020c00 	.word	0x58020c00

08001458 <Home>:

void Home (void){
 8001458:	b598      	push	{r3, r4, r7, lr}
 800145a:	af00      	add	r7, sp, #0
	Home_q2();
 800145c:	f000 f816 	bl	800148c <Home_q2>
	Home_q3();
 8001460:	f000 f88a 	bl	8001578 <Home_q3>
	TIM2->CCR2 = radianes_a_valor(M_PI/2); //q5
 8001464:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001468:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001488 <Home+0x30>
 800146c:	f7ff fb20 	bl	8000ab0 <radianes_a_valor>
 8001470:	4603      	mov	r3, r0
 8001472:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CCR4 = radianes_a_valor(M_PI/2); //q4
 8001474:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001478:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8001488 <Home+0x30>
 800147c:	f7ff fb18 	bl	8000ab0 <radianes_a_valor>
 8001480:	4603      	mov	r3, r0
 8001482:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001484:	bf00      	nop
 8001486:	bd98      	pop	{r3, r4, r7, pc}
 8001488:	3fc90fdb 	.word	0x3fc90fdb

0800148c <Home_q2>:

void Home_q2(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
	while(FC_Home_q2){
 8001492:	e02f      	b.n	80014f4 <Home_q2+0x68>
		HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET);  //Retroceso
 8001494:	2200      	movs	r2, #0
 8001496:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800149a:	4833      	ldr	r0, [pc, #204]	; (8001568 <Home_q2+0xdc>)
 800149c:	f001 fe16 	bl	80030cc <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e014      	b.n	80014d0 <Home_q2+0x44>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ac:	482e      	ldr	r0, [pc, #184]	; (8001568 <Home_q2+0xdc>)
 80014ae:	f001 fe0d 	bl	80030cc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fdca 	bl	800204c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014be:	482a      	ldr	r0, [pc, #168]	; (8001568 <Home_q2+0xdc>)
 80014c0:	f001 fe04 	bl	80030cc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 fdc1 	bl	800204c <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a26      	ldr	r2, [pc, #152]	; (800156c <Home_q2+0xe0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	dc04      	bgt.n	80014e2 <Home_q2+0x56>
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <Home_q2+0xe4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1e1      	bne.n	80014a6 <Home_q2+0x1a>
		}
		if (!FC_Home_q2) break;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <Home_q2+0xe4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <Home_q2+0x74>
		HAL_Delay(500);
 80014ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f0:	f000 fdac 	bl	800204c <HAL_Delay>
	while(FC_Home_q2){
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <Home_q2+0xe4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1ca      	bne.n	8001494 <Home_q2+0x8>
 80014fe:	e000      	b.n	8001502 <Home_q2+0x76>
		if (!FC_Home_q2) break;
 8001500:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 8001502:	2201      	movs	r2, #1
 8001504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <Home_q2+0xdc>)
 800150a:	f001 fddf 	bl	80030cc <HAL_GPIO_WritePin>
	for (int i = 0; i < 2500; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	e019      	b.n	8001548 <Home_q2+0xbc>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800151a:	4813      	ldr	r0, [pc, #76]	; (8001568 <Home_q2+0xdc>)
 800151c:	f001 fdd6 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 8001520:	2000      	movs	r0, #0
 8001522:	f000 fd93 	bl	800204c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800152c:	480e      	ldr	r0, [pc, #56]	; (8001568 <Home_q2+0xdc>)
 800152e:	f001 fdcd 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 8001532:	2000      	movs	r0, #0
 8001534:	f000 fd8a 	bl	800204c <HAL_Delay>
		paso_actual_q2--;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <Home_q2+0xe8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3b01      	subs	r3, #1
 800153e:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <Home_q2+0xe8>)
 8001540:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 2500; i++) {
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800154e:	4293      	cmp	r3, r2
 8001550:	dde0      	ble.n	8001514 <Home_q2+0x88>
	}
	HAL_Delay(500);
 8001552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001556:	f000 fd79 	bl	800204c <HAL_Delay>
	FC_Home_q2 = 1;
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <Home_q2+0xe4>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	58020000 	.word	0x58020000
 800156c:	0001869f 	.word	0x0001869f
 8001570:	24000300 	.word	0x24000300
 8001574:	24000304 	.word	0x24000304

08001578 <Home_q3>:

void Home_q3(void){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
	while(FC_Home_q3){
 800157e:	e02f      	b.n	80015e0 <Home_q3+0x68>
		HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001586:	4830      	ldr	r0, [pc, #192]	; (8001648 <Home_q3+0xd0>)
 8001588:	f001 fda0 	bl	80030cc <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	e014      	b.n	80015bc <Home_q3+0x44>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001598:	482b      	ldr	r0, [pc, #172]	; (8001648 <Home_q3+0xd0>)
 800159a:	f001 fd97 	bl	80030cc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 fd54 	bl	800204c <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015aa:	4827      	ldr	r0, [pc, #156]	; (8001648 <Home_q3+0xd0>)
 80015ac:	f001 fd8e 	bl	80030cc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 fd4b 	bl	800204c <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3301      	adds	r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <Home_q3+0xd4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	dc04      	bgt.n	80015ce <Home_q3+0x56>
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <Home_q3+0xd8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e1      	bne.n	8001592 <Home_q3+0x1a>
		}
		if (!FC_Home_q3) break;
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <Home_q3+0xd8>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <Home_q3+0x74>
		HAL_Delay(500);
 80015d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015dc:	f000 fd36 	bl	800204c <HAL_Delay>
	while(FC_Home_q3){
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <Home_q3+0xd8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1ca      	bne.n	8001580 <Home_q3+0x8>
 80015ea:	e000      	b.n	80015ee <Home_q3+0x76>
		if (!FC_Home_q3) break;
 80015ec:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f4:	4814      	ldr	r0, [pc, #80]	; (8001648 <Home_q3+0xd0>)
 80015f6:	f001 fd69 	bl	80030cc <HAL_GPIO_WritePin>
	for (int i = 0; i < 80; i++) {
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	e014      	b.n	800162a <Home_q3+0xb2>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001606:	4810      	ldr	r0, [pc, #64]	; (8001648 <Home_q3+0xd0>)
 8001608:	f001 fd60 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800160c:	2000      	movs	r0, #0
 800160e:	f000 fd1d 	bl	800204c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <Home_q3+0xd0>)
 800161a:	f001 fd57 	bl	80030cc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 fd14 	bl	800204c <HAL_Delay>
	for (int i = 0; i < 80; i++) {
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b4f      	cmp	r3, #79	; 0x4f
 800162e:	dde7      	ble.n	8001600 <Home_q3+0x88>
	}
	HAL_Delay(500);
 8001630:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001634:	f000 fd0a 	bl	800204c <HAL_Delay>
	FC_Home_q3 = 1;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <Home_q3+0xd8>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	58020c00 	.word	0x58020c00
 800164c:	0001869f 	.word	0x0001869f
 8001650:	24000301 	.word	0x24000301
 8001654:	00000000 	.word	0x00000000

08001658 <mover_motorq1_rad>:

void mover_motorq1_rad(float radianes){
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	ed87 0a01 	vstr	s0, [r7, #4]

    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 8001662:	edd7 7a01 	vldr	s15, [r7, #4]
 8001666:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800166a:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001738 <mover_motorq1_rad+0xe0>
 800166e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001672:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8001740 <mover_motorq1_rad+0xe8>
 8001676:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800167e:	ee17 3a90 	vmov	r3, s15
 8001682:	617b      	str	r3, [r7, #20]
    int nuevo_paso = pasos;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
    int diferencia_pasos = nuevo_paso - paso_actual_q1;
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <mover_motorq1_rad+0xf0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd1f      	ble.n	80016d8 <mover_motorq1_rad+0x80>
        // Movimiento hacia adelante
    	HAL_GPIO_WritePin(GPIOD, DIR_q1, GPIO_PIN_RESET); //Antihorario
 8001698:	2200      	movs	r2, #0
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	482b      	ldr	r0, [pc, #172]	; (800174c <mover_motorq1_rad+0xf4>)
 800169e:	f001 fd15 	bl	80030cc <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e012      	b.n	80016ce <mover_motorq1_rad+0x76>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_SET);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2108      	movs	r1, #8
 80016ac:	4828      	ldr	r0, [pc, #160]	; (8001750 <mover_motorq1_rad+0xf8>)
 80016ae:	f001 fd0d 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80016b2:	2000      	movs	r0, #0
 80016b4:	f000 fcca 	bl	800204c <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2108      	movs	r1, #8
 80016bc:	4824      	ldr	r0, [pc, #144]	; (8001750 <mover_motorq1_rad+0xf8>)
 80016be:	f001 fd05 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 fcc2 	bl	800204c <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	3301      	adds	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbe8      	blt.n	80016a8 <mover_motorq1_rad+0x50>
 80016d6:	e024      	b.n	8001722 <mover_motorq1_rad+0xca>
    	}
    }

    else if (diferencia_pasos < 0) {
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	da21      	bge.n	8001722 <mover_motorq1_rad+0xca>
        // Movimiento hacia atrás
    	HAL_GPIO_WritePin(GPIOD, DIR_q1, GPIO_PIN_SET); //Horario
 80016de:	2201      	movs	r2, #1
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	481a      	ldr	r0, [pc, #104]	; (800174c <mover_motorq1_rad+0xf4>)
 80016e4:	f001 fcf2 	bl	80030cc <HAL_GPIO_WritePin>
    	diferencia_pasos = -diferencia_pasos;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	425b      	negs	r3, r3
 80016ec:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < diferencia_pasos ; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
 80016f2:	e012      	b.n	800171a <mover_motorq1_rad+0xc2>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2108      	movs	r1, #8
 80016f8:	4815      	ldr	r0, [pc, #84]	; (8001750 <mover_motorq1_rad+0xf8>)
 80016fa:	f001 fce7 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80016fe:	2000      	movs	r0, #0
 8001700:	f000 fca4 	bl	800204c <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2108      	movs	r1, #8
 8001708:	4811      	ldr	r0, [pc, #68]	; (8001750 <mover_motorq1_rad+0xf8>)
 800170a:	f001 fcdf 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 fc9c 	bl	800204c <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos ; i++) {
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	3301      	adds	r3, #1
 8001718:	61bb      	str	r3, [r7, #24]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	429a      	cmp	r2, r3
 8001720:	dbe8      	blt.n	80016f4 <mover_motorq1_rad+0x9c>
    	}
    }

    paso_actual_q1 = nuevo_paso;
 8001722:	4a09      	ldr	r2, [pc, #36]	; (8001748 <mover_motorq1_rad+0xf0>)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 8001728:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800172c:	f000 fc8e 	bl	800204c <HAL_Delay>
}
 8001730:	bf00      	nop
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	54442d18 	.word	0x54442d18
 800173c:	401921fb 	.word	0x401921fb
 8001740:	00000000 	.word	0x00000000
 8001744:	40790000 	.word	0x40790000
 8001748:	2400097c 	.word	0x2400097c
 800174c:	58020c00 	.word	0x58020c00
 8001750:	58020400 	.word	0x58020400

08001754 <mover_motorq2_mm>:

void mover_motorq2_mm(float milimetros){
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	ed87 0a01 	vstr	s0, [r7, #4]

    if (milimetros < 0) {
 800175e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176a:	d503      	bpl.n	8001774 <mover_motorq2_mm+0x20>
        milimetros = 0;
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	e00a      	b.n	800178a <mover_motorq2_mm+0x36>
    }
    else if (milimetros > 210) {
 8001774:	edd7 7a01 	vldr	s15, [r7, #4]
 8001778:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800181c <mover_motorq2_mm+0xc8>
 800177c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	dd01      	ble.n	800178a <mover_motorq2_mm+0x36>
        milimetros = 210;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <mover_motorq2_mm+0xcc>)
 8001788:	607b      	str	r3, [r7, #4]
    }

    uint32_t pasos = milimetros_a_pasos(milimetros);
 800178a:	ed97 0a01 	vldr	s0, [r7, #4]
 800178e:	f7ff f9dd 	bl	8000b4c <milimetros_a_pasos>
 8001792:	60f8      	str	r0, [r7, #12]
    int diferencia_pasos = pasos - paso_actual_q2;
 8001794:	4b23      	ldr	r3, [pc, #140]	; (8001824 <mover_motorq2_mm+0xd0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	617b      	str	r3, [r7, #20]

    if (diferencia_pasos != 0) {
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d031      	beq.n	800180a <mover_motorq2_mm+0xb6>
        if (diferencia_pasos > 0) {
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dd06      	ble.n	80017ba <mover_motorq2_mm+0x66>
        	 HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET); //Retroceso
 80017ac:	2200      	movs	r2, #0
 80017ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b2:	481d      	ldr	r0, [pc, #116]	; (8001828 <mover_motorq2_mm+0xd4>)
 80017b4:	f001 fc8a 	bl	80030cc <HAL_GPIO_WritePin>
 80017b8:	e008      	b.n	80017cc <mover_motorq2_mm+0x78>
        }
        else {
        	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <mover_motorq2_mm+0xd4>)
 80017c2:	f001 fc83 	bl	80030cc <HAL_GPIO_WritePin>
            diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	425b      	negs	r3, r3
 80017ca:	617b      	str	r3, [r7, #20]
        }

        for (int i = 0; i < diferencia_pasos; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	e014      	b.n	80017fc <mover_motorq2_mm+0xa8>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d8:	4813      	ldr	r0, [pc, #76]	; (8001828 <mover_motorq2_mm+0xd4>)
 80017da:	f001 fc77 	bl	80030cc <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 fc34 	bl	800204c <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ea:	480f      	ldr	r0, [pc, #60]	; (8001828 <mover_motorq2_mm+0xd4>)
 80017ec:	f001 fc6e 	bl	80030cc <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 fc2b 	bl	800204c <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	3301      	adds	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	429a      	cmp	r2, r3
 8001802:	dbe6      	blt.n	80017d2 <mover_motorq2_mm+0x7e>
        }

        paso_actual_q2 = pasos;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <mover_motorq2_mm+0xd0>)
 8001808:	6013      	str	r3, [r2, #0]
    }

    HAL_Delay(500);
 800180a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800180e:	f000 fc1d 	bl	800204c <HAL_Delay>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	43520000 	.word	0x43520000
 8001820:	43520000 	.word	0x43520000
 8001824:	24000304 	.word	0x24000304
 8001828:	58020000 	.word	0x58020000

0800182c <mover_motorq3_mm>:

void mover_motorq3_mm(float milimetros){
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	ed87 0a01 	vstr	s0, [r7, #4]

	if (milimetros < 0) {
 8001836:	edd7 7a01 	vldr	s15, [r7, #4]
 800183a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001842:	d503      	bpl.n	800184c <mover_motorq3_mm+0x20>
		milimetros = 0;
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e00a      	b.n	8001862 <mover_motorq3_mm+0x36>
	}
	else if (milimetros > 215) {
 800184c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001850:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800192c <mover_motorq3_mm+0x100>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	dd01      	ble.n	8001862 <mover_motorq3_mm+0x36>
		milimetros = 215;
 800185e:	4b34      	ldr	r3, [pc, #208]	; (8001930 <mover_motorq3_mm+0x104>)
 8001860:	607b      	str	r3, [r7, #4]
	}

    uint32_t pasos = milimetros_a_pasos(milimetros);
 8001862:	ed97 0a01 	vldr	s0, [r7, #4]
 8001866:	f7ff f971 	bl	8000b4c <milimetros_a_pasos>
 800186a:	6178      	str	r0, [r7, #20]
    int nuevo_paso = pasos;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
    int diferencia_pasos = nuevo_paso - paso_actual_q3;
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <mover_motorq3_mm+0x108>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	dd22      	ble.n	80018c6 <mover_motorq3_mm+0x9a>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001886:	482c      	ldr	r0, [pc, #176]	; (8001938 <mover_motorq3_mm+0x10c>)
 8001888:	f001 fc20 	bl	80030cc <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 800188c:	2300      	movs	r3, #0
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	e014      	b.n	80018bc <mover_motorq3_mm+0x90>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001898:	4827      	ldr	r0, [pc, #156]	; (8001938 <mover_motorq3_mm+0x10c>)
 800189a:	f001 fc17 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 fbd4 	bl	800204c <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018aa:	4823      	ldr	r0, [pc, #140]	; (8001938 <mover_motorq3_mm+0x10c>)
 80018ac:	f001 fc0e 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 fbcb 	bl	800204c <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3301      	adds	r3, #1
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dbe6      	blt.n	8001892 <mover_motorq3_mm+0x66>
 80018c4:	e027      	b.n	8001916 <mover_motorq3_mm+0xea>
    	}
    }

    else if (diferencia_pasos < 0) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da24      	bge.n	8001916 <mover_motorq3_mm+0xea>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d2:	4819      	ldr	r0, [pc, #100]	; (8001938 <mover_motorq3_mm+0x10c>)
 80018d4:	f001 fbfa 	bl	80030cc <HAL_GPIO_WritePin>
    	diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	425b      	negs	r3, r3
 80018dc:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < diferencia_pasos; i++) {
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	e014      	b.n	800190e <mover_motorq3_mm+0xe2>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	4813      	ldr	r0, [pc, #76]	; (8001938 <mover_motorq3_mm+0x10c>)
 80018ec:	f001 fbee 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 fbab 	bl	800204c <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fc:	480e      	ldr	r0, [pc, #56]	; (8001938 <mover_motorq3_mm+0x10c>)
 80018fe:	f001 fbe5 	bl	80030cc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8001902:	2000      	movs	r0, #0
 8001904:	f000 fba2 	bl	800204c <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	3301      	adds	r3, #1
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbe6      	blt.n	80018e4 <mover_motorq3_mm+0xb8>
    	}
    }

    paso_actual_q3 = nuevo_paso;
 8001916:	4a07      	ldr	r2, [pc, #28]	; (8001934 <mover_motorq3_mm+0x108>)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 800191c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001920:	f000 fb94 	bl	800204c <HAL_Delay>
}
 8001924:	bf00      	nop
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	43570000 	.word	0x43570000
 8001930:	43570000 	.word	0x43570000
 8001934:	24000980 	.word	0x24000980
 8001938:	58020c00 	.word	0x58020c00

0800193c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001944:	e7fe      	b.n	8001944 <Error_Handler+0x8>
	...

08001948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <HAL_MspInit+0x30>)
 8001950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001954:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_MspInit+0x30>)
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_MspInit+0x30>)
 8001960:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	58024400 	.word	0x58024400

0800197c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_TIM_PWM_MspInit+0x3c>)
 80019a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	58024400 	.word	0x58024400

080019bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019dc:	d11e      	bne.n	8001a1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e4:	4a0f      	ldr	r2, [pc, #60]	; (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <HAL_TIM_MspPostInit+0x68>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80019fc:	230a      	movs	r3, #10
 80019fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	4619      	mov	r1, r3
 8001a16:	4804      	ldr	r0, [pc, #16]	; (8001a28 <HAL_TIM_MspPostInit+0x6c>)
 8001a18:	f001 f9b0 	bl	8002d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	58024400 	.word	0x58024400
 8001a28:	58020000 	.word	0x58020000

08001a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0b8      	sub	sp, #224	; 0xe0
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	22b4      	movs	r2, #180	; 0xb4
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f007 f961 	bl	8008d14 <memset>
  if(huart->Instance==USART1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a51      	ldr	r2, [pc, #324]	; (8001b9c <HAL_UART_MspInit+0x170>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d14b      	bne.n	8001af4 <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a66:	f107 0318 	add.w	r3, r7, #24
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fad6 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a76:	f7ff ff61 	bl	800193c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a80:	4a47      	ldr	r2, [pc, #284]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a8a:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a98:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9e:	4a40      	ldr	r2, [pc, #256]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa8:	4b3d      	ldr	r3, [pc, #244]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ab6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ada:	4619      	mov	r1, r3
 8001adc:	4831      	ldr	r0, [pc, #196]	; (8001ba4 <HAL_UART_MspInit+0x178>)
 8001ade:	f001 f94d 	bl	8002d7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2025      	movs	r0, #37	; 0x25
 8001ae8:	f000 fbaf 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aec:	2025      	movs	r0, #37	; 0x25
 8001aee:	f000 fbc6 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001af2:	e04f      	b.n	8001b94 <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_UART_MspInit+0x17c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d14a      	bne.n	8001b94 <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b08:	f107 0318 	add.w	r3, r7, #24
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 fa85 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001b18:	f7ff ff10 	bl	800193c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1c:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001b1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b2c:	4b1c      	ldr	r3, [pc, #112]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b40:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001b42:	f043 0302 	orr.w	r3, r3, #2
 8001b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_UART_MspInit+0x174>)
 8001b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b72:	2307      	movs	r3, #7
 8001b74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4809      	ldr	r0, [pc, #36]	; (8001ba4 <HAL_UART_MspInit+0x178>)
 8001b80:	f001 f8fc 	bl	8002d7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2027      	movs	r0, #39	; 0x27
 8001b8a:	f000 fb5e 	bl	800224a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b8e:	2027      	movs	r0, #39	; 0x27
 8001b90:	f000 fb75 	bl	800227e <HAL_NVIC_EnableIRQ>
}
 8001b94:	bf00      	nop
 8001b96:	37e0      	adds	r7, #224	; 0xe0
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	58020400 	.word	0x58020400
 8001ba8:	40004800 	.word	0x40004800

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf8:	f000 fa08 	bl	800200c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001c04:	2080      	movs	r0, #128	; 0x80
 8001c06:	f001 fa7a 	bl	80030fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c0e:	f001 fa76 	bl	80030fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <USART1_IRQHandler+0x10>)
 8001c1e:	f004 fd1b 	bl	8006658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	24000554 	.word	0x24000554

08001c2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART3_IRQHandler+0x10>)
 8001c32:	f004 fd11 	bl	8006658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	240005e4 	.word	0x240005e4

08001c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001c44:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001c48:	f001 fa59 	bl	80030fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c50:	f001 fa55 	bl	80030fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_kill>:

int _kill(int pid, int sig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c72:	f007 f825 	bl	8008cc0 <__errno>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2216      	movs	r2, #22
 8001c7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_exit>:

void _exit (int status)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffe7 	bl	8001c68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c9a:	e7fe      	b.n	8001c9a <_exit+0x12>

08001c9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e00a      	b.n	8001cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cae:	f3af 8000 	nop.w
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf0      	blt.n	8001cae <_read+0x12>
	}

return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e009      	b.n	8001cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbf1      	blt.n	8001ce8 <_write+0x12>
	}
	return len;
 8001d04:	687b      	ldr	r3, [r7, #4]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_close>:

int _close(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
	return -1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d36:	605a      	str	r2, [r3, #4]
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_isatty>:

int _isatty(int file)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f006 ff8a 	bl	8008cc0 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	24050000 	.word	0x24050000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	24000998 	.word	0x24000998
 8001de0:	240009b0 	.word	0x240009b0

08001de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <SystemInit+0xd0>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <SystemInit+0xd0>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <SystemInit+0xd4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d807      	bhi.n	8001e14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <SystemInit+0xd4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 030f 	bic.w	r3, r3, #15
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <SystemInit+0xd4>)
 8001e0e:	f043 0307 	orr.w	r3, r3, #7
 8001e12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <SystemInit+0xd8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <SystemInit+0xd8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <SystemInit+0xd8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <SystemInit+0xd8>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4924      	ldr	r1, [pc, #144]	; (8001ebc <SystemInit+0xd8>)
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <SystemInit+0xdc>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <SystemInit+0xd4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <SystemInit+0xd4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 030f 	bic.w	r3, r3, #15
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <SystemInit+0xd4>)
 8001e48:	f043 0307 	orr.w	r3, r3, #7
 8001e4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <SystemInit+0xd8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <SystemInit+0xd8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <SystemInit+0xd8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <SystemInit+0xd8>)
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <SystemInit+0xe0>)
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <SystemInit+0xd8>)
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <SystemInit+0xe4>)
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <SystemInit+0xd8>)
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <SystemInit+0xe8>)
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <SystemInit+0xd8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <SystemInit+0xd8>)
 8001e7a:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <SystemInit+0xe8>)
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <SystemInit+0xd8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <SystemInit+0xd8>)
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <SystemInit+0xe8>)
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <SystemInit+0xd8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <SystemInit+0xd8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <SystemInit+0xd8>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <SystemInit+0xd8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <SystemInit+0xec>)
 8001ea4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ea8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00
 8001eb8:	52002000 	.word	0x52002000
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ec4:	02020200 	.word	0x02020200
 8001ec8:	01ff0000 	.word	0x01ff0000
 8001ecc:	01010280 	.word	0x01010280
 8001ed0:	52004000 	.word	0x52004000

08001ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ed8:	f7ff ff84 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f006 fee3 	bl	8008ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f06:	f7fe fe41 	bl	8000b8c <main>
  bx  lr
 8001f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f0c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f14:	240004ec 	.word	0x240004ec
  ldr r2, =_sidata
 8001f18:	0800bee4 	.word	0x0800bee4
  ldr r2, =_sbss
 8001f1c:	240004ec 	.word	0x240004ec
  ldr r4, =_ebss
 8001f20:	240009b0 	.word	0x240009b0

08001f24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC3_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f000 f980 	bl	8002234 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f34:	f001 fe9c 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_Init+0x68>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	4913      	ldr	r1, [pc, #76]	; (8001f94 <HAL_Init+0x6c>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_Init+0x68>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_Init+0x6c>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_Init+0x70>)
 8001f6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_Init+0x74>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f72:	200f      	movs	r0, #15
 8001f74:	f000 f814 	bl	8001fa0 <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e002      	b.n	8001f88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f82:	f7ff fce1 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	58024400 	.word	0x58024400
 8001f94:	0800ba6c 	.word	0x0800ba6c
 8001f98:	2400030c 	.word	0x2400030c
 8001f9c:	24000308 	.word	0x24000308

08001fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_InitTick+0x60>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e021      	b.n	8001ff8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_InitTick+0x64>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_InitTick+0x60>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f965 	bl	800229a <HAL_SYSTICK_Config>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00e      	b.n	8001ff8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d80a      	bhi.n	8001ff6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	f000 f92f 	bl	800224a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_InitTick+0x68>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	24000314 	.word	0x24000314
 8002004:	24000308 	.word	0x24000308
 8002008:	24000310 	.word	0x24000310

0800200c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_IncTick+0x20>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x24>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4413      	add	r3, r2
 800201c:	4a04      	ldr	r2, [pc, #16]	; (8002030 <HAL_IncTick+0x24>)
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	24000314 	.word	0x24000314
 8002030:	2400099c 	.word	0x2400099c

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <HAL_GetTick+0x14>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2400099c 	.word	0x2400099c

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff ffee 	bl	8002034 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffde 	bl	8002034 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	24000314 	.word	0x24000314

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <__NVIC_SetPriorityGrouping+0x40>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <__NVIC_SetPriorityGrouping+0x40>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	05fa0000 	.word	0x05fa0000

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4907      	ldr	r1, [pc, #28]	; (8002130 <__NVIC_EnableIRQ+0x38>)
 8002112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000e100 	.word	0xe000e100

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002144:	2b00      	cmp	r3, #0
 8002146:	db0a      	blt.n	800215e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	490c      	ldr	r1, [pc, #48]	; (8002180 <__NVIC_SetPriority+0x4c>)
 800214e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002152:	0112      	lsls	r2, r2, #4
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	440b      	add	r3, r1
 8002158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800215c:	e00a      	b.n	8002174 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4908      	ldr	r1, [pc, #32]	; (8002184 <__NVIC_SetPriority+0x50>)
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3b04      	subs	r3, #4
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	440b      	add	r3, r1
 8002172:	761a      	strb	r2, [r3, #24]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	e000e100 	.word	0xe000e100
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f1c3 0307 	rsb	r3, r3, #7
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	bf28      	it	cs
 80021a6:	2304      	movcs	r3, #4
 80021a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3304      	adds	r3, #4
 80021ae:	2b06      	cmp	r3, #6
 80021b0:	d902      	bls.n	80021b8 <NVIC_EncodePriority+0x30>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3b03      	subs	r3, #3
 80021b6:	e000      	b.n	80021ba <NVIC_EncodePriority+0x32>
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	401a      	ands	r2, r3
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	fa01 f303 	lsl.w	r3, r1, r3
 80021da:	43d9      	mvns	r1, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e0:	4313      	orrs	r3, r2
         );
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3724      	adds	r7, #36	; 0x24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002200:	d301      	bcc.n	8002206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002202:	2301      	movs	r3, #1
 8002204:	e00f      	b.n	8002226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002206:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <SysTick_Config+0x40>)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220e:	210f      	movs	r1, #15
 8002210:	f04f 30ff 	mov.w	r0, #4294967295
 8002214:	f7ff ff8e 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <SysTick_Config+0x40>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <SysTick_Config+0x40>)
 8002220:	2207      	movs	r2, #7
 8002222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	e000e010 	.word	0xe000e010

08002234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff29 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b086      	sub	sp, #24
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff40 	bl	80020dc <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff90 	bl	8002188 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5f 	bl	8002134 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff33 	bl	80020f8 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa4 	bl	80021f0 <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff feba 	bl	8002034 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e2dc      	b.n	8002886 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d008      	beq.n	80022ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e2cd      	b.n	8002886 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a76      	ldr	r2, [pc, #472]	; (80024c8 <HAL_DMA_Abort+0x214>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d04a      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a74      	ldr	r2, [pc, #464]	; (80024cc <HAL_DMA_Abort+0x218>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d045      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a73      	ldr	r2, [pc, #460]	; (80024d0 <HAL_DMA_Abort+0x21c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d040      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <HAL_DMA_Abort+0x220>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d03b      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a70      	ldr	r2, [pc, #448]	; (80024d8 <HAL_DMA_Abort+0x224>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d036      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a6e      	ldr	r2, [pc, #440]	; (80024dc <HAL_DMA_Abort+0x228>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d031      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a6d      	ldr	r2, [pc, #436]	; (80024e0 <HAL_DMA_Abort+0x22c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d02c      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a6b      	ldr	r2, [pc, #428]	; (80024e4 <HAL_DMA_Abort+0x230>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d027      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6a      	ldr	r2, [pc, #424]	; (80024e8 <HAL_DMA_Abort+0x234>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d022      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a68      	ldr	r2, [pc, #416]	; (80024ec <HAL_DMA_Abort+0x238>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d01d      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a67      	ldr	r2, [pc, #412]	; (80024f0 <HAL_DMA_Abort+0x23c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d018      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a65      	ldr	r2, [pc, #404]	; (80024f4 <HAL_DMA_Abort+0x240>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a64      	ldr	r2, [pc, #400]	; (80024f8 <HAL_DMA_Abort+0x244>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00e      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a62      	ldr	r2, [pc, #392]	; (80024fc <HAL_DMA_Abort+0x248>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d009      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a61      	ldr	r2, [pc, #388]	; (8002500 <HAL_DMA_Abort+0x24c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d004      	beq.n	800238a <HAL_DMA_Abort+0xd6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a5f      	ldr	r2, [pc, #380]	; (8002504 <HAL_DMA_Abort+0x250>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_DMA_Abort+0xda>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <HAL_DMA_Abort+0xdc>
 800238e:	2300      	movs	r3, #0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 021e 	bic.w	r2, r2, #30
 80023a2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e00a      	b.n	80023d2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 020e 	bic.w	r2, r2, #14
 80023ca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a3c      	ldr	r2, [pc, #240]	; (80024c8 <HAL_DMA_Abort+0x214>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d072      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a3a      	ldr	r2, [pc, #232]	; (80024cc <HAL_DMA_Abort+0x218>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d06d      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a39      	ldr	r2, [pc, #228]	; (80024d0 <HAL_DMA_Abort+0x21c>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d068      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a37      	ldr	r2, [pc, #220]	; (80024d4 <HAL_DMA_Abort+0x220>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d063      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <HAL_DMA_Abort+0x224>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d05e      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a34      	ldr	r2, [pc, #208]	; (80024dc <HAL_DMA_Abort+0x228>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d059      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a33      	ldr	r2, [pc, #204]	; (80024e0 <HAL_DMA_Abort+0x22c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d054      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <HAL_DMA_Abort+0x230>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d04f      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <HAL_DMA_Abort+0x234>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d04a      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a2e      	ldr	r2, [pc, #184]	; (80024ec <HAL_DMA_Abort+0x238>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d045      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a2d      	ldr	r2, [pc, #180]	; (80024f0 <HAL_DMA_Abort+0x23c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d040      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <HAL_DMA_Abort+0x240>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d03b      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2a      	ldr	r2, [pc, #168]	; (80024f8 <HAL_DMA_Abort+0x244>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d036      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a28      	ldr	r2, [pc, #160]	; (80024fc <HAL_DMA_Abort+0x248>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d031      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a27      	ldr	r2, [pc, #156]	; (8002500 <HAL_DMA_Abort+0x24c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d02c      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a25      	ldr	r2, [pc, #148]	; (8002504 <HAL_DMA_Abort+0x250>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d027      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a24      	ldr	r2, [pc, #144]	; (8002508 <HAL_DMA_Abort+0x254>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_DMA_Abort+0x258>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01d      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a21      	ldr	r2, [pc, #132]	; (8002510 <HAL_DMA_Abort+0x25c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d018      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a1f      	ldr	r2, [pc, #124]	; (8002514 <HAL_DMA_Abort+0x260>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <HAL_DMA_Abort+0x264>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1c      	ldr	r2, [pc, #112]	; (800251c <HAL_DMA_Abort+0x268>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d009      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_DMA_Abort+0x26c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d004      	beq.n	80024c2 <HAL_DMA_Abort+0x20e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a19      	ldr	r2, [pc, #100]	; (8002524 <HAL_DMA_Abort+0x270>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d132      	bne.n	8002528 <HAL_DMA_Abort+0x274>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e031      	b.n	800252a <HAL_DMA_Abort+0x276>
 80024c6:	bf00      	nop
 80024c8:	40020010 	.word	0x40020010
 80024cc:	40020028 	.word	0x40020028
 80024d0:	40020040 	.word	0x40020040
 80024d4:	40020058 	.word	0x40020058
 80024d8:	40020070 	.word	0x40020070
 80024dc:	40020088 	.word	0x40020088
 80024e0:	400200a0 	.word	0x400200a0
 80024e4:	400200b8 	.word	0x400200b8
 80024e8:	40020410 	.word	0x40020410
 80024ec:	40020428 	.word	0x40020428
 80024f0:	40020440 	.word	0x40020440
 80024f4:	40020458 	.word	0x40020458
 80024f8:	40020470 	.word	0x40020470
 80024fc:	40020488 	.word	0x40020488
 8002500:	400204a0 	.word	0x400204a0
 8002504:	400204b8 	.word	0x400204b8
 8002508:	58025408 	.word	0x58025408
 800250c:	5802541c 	.word	0x5802541c
 8002510:	58025430 	.word	0x58025430
 8002514:	58025444 	.word	0x58025444
 8002518:	58025458 	.word	0x58025458
 800251c:	5802546c 	.word	0x5802546c
 8002520:	58025480 	.word	0x58025480
 8002524:	58025494 	.word	0x58025494
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800253c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6d      	ldr	r2, [pc, #436]	; (80026f8 <HAL_DMA_Abort+0x444>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d04a      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6b      	ldr	r2, [pc, #428]	; (80026fc <HAL_DMA_Abort+0x448>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d045      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6a      	ldr	r2, [pc, #424]	; (8002700 <HAL_DMA_Abort+0x44c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d040      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a68      	ldr	r2, [pc, #416]	; (8002704 <HAL_DMA_Abort+0x450>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d03b      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a67      	ldr	r2, [pc, #412]	; (8002708 <HAL_DMA_Abort+0x454>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d036      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a65      	ldr	r2, [pc, #404]	; (800270c <HAL_DMA_Abort+0x458>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d031      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a64      	ldr	r2, [pc, #400]	; (8002710 <HAL_DMA_Abort+0x45c>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d02c      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a62      	ldr	r2, [pc, #392]	; (8002714 <HAL_DMA_Abort+0x460>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d027      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a61      	ldr	r2, [pc, #388]	; (8002718 <HAL_DMA_Abort+0x464>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d022      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5f      	ldr	r2, [pc, #380]	; (800271c <HAL_DMA_Abort+0x468>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d01d      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5e      	ldr	r2, [pc, #376]	; (8002720 <HAL_DMA_Abort+0x46c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d018      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5c      	ldr	r2, [pc, #368]	; (8002724 <HAL_DMA_Abort+0x470>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a5b      	ldr	r2, [pc, #364]	; (8002728 <HAL_DMA_Abort+0x474>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00e      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a59      	ldr	r2, [pc, #356]	; (800272c <HAL_DMA_Abort+0x478>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a58      	ldr	r2, [pc, #352]	; (8002730 <HAL_DMA_Abort+0x47c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_DMA_Abort+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_DMA_Abort+0x480>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d108      	bne.n	80025f0 <HAL_DMA_Abort+0x33c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e007      	b.n	8002600 <HAL_DMA_Abort+0x34c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002600:	e013      	b.n	800262a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002602:	f7ff fd17 	bl	8002034 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b05      	cmp	r3, #5
 800260e:	d90c      	bls.n	800262a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2203      	movs	r2, #3
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e12d      	b.n	8002886 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e5      	bne.n	8002602 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2f      	ldr	r2, [pc, #188]	; (80026f8 <HAL_DMA_Abort+0x444>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d04a      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2d      	ldr	r2, [pc, #180]	; (80026fc <HAL_DMA_Abort+0x448>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d045      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2c      	ldr	r2, [pc, #176]	; (8002700 <HAL_DMA_Abort+0x44c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d040      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2a      	ldr	r2, [pc, #168]	; (8002704 <HAL_DMA_Abort+0x450>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d03b      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a29      	ldr	r2, [pc, #164]	; (8002708 <HAL_DMA_Abort+0x454>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d036      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_DMA_Abort+0x458>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d031      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_DMA_Abort+0x45c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d02c      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a24      	ldr	r2, [pc, #144]	; (8002714 <HAL_DMA_Abort+0x460>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d027      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a23      	ldr	r2, [pc, #140]	; (8002718 <HAL_DMA_Abort+0x464>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d022      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a21      	ldr	r2, [pc, #132]	; (800271c <HAL_DMA_Abort+0x468>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01d      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_DMA_Abort+0x46c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d018      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1e      	ldr	r2, [pc, #120]	; (8002724 <HAL_DMA_Abort+0x470>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d013      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_DMA_Abort+0x474>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00e      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_DMA_Abort+0x478>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d009      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <HAL_DMA_Abort+0x47c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d004      	beq.n	80026d6 <HAL_DMA_Abort+0x422>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a18      	ldr	r2, [pc, #96]	; (8002734 <HAL_DMA_Abort+0x480>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_DMA_Abort+0x426>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_DMA_Abort+0x428>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02b      	beq.n	8002738 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	223f      	movs	r2, #63	; 0x3f
 80026f0:	409a      	lsls	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	e02a      	b.n	800274e <HAL_DMA_Abort+0x49a>
 80026f8:	40020010 	.word	0x40020010
 80026fc:	40020028 	.word	0x40020028
 8002700:	40020040 	.word	0x40020040
 8002704:	40020058 	.word	0x40020058
 8002708:	40020070 	.word	0x40020070
 800270c:	40020088 	.word	0x40020088
 8002710:	400200a0 	.word	0x400200a0
 8002714:	400200b8 	.word	0x400200b8
 8002718:	40020410 	.word	0x40020410
 800271c:	40020428 	.word	0x40020428
 8002720:	40020440 	.word	0x40020440
 8002724:	40020458 	.word	0x40020458
 8002728:	40020470 	.word	0x40020470
 800272c:	40020488 	.word	0x40020488
 8002730:	400204a0 	.word	0x400204a0
 8002734:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	2201      	movs	r2, #1
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a4f      	ldr	r2, [pc, #316]	; (8002890 <HAL_DMA_Abort+0x5dc>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d072      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <HAL_DMA_Abort+0x5e0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d06d      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <HAL_DMA_Abort+0x5e4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d068      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a4a      	ldr	r2, [pc, #296]	; (800289c <HAL_DMA_Abort+0x5e8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d063      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a49      	ldr	r2, [pc, #292]	; (80028a0 <HAL_DMA_Abort+0x5ec>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d05e      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a47      	ldr	r2, [pc, #284]	; (80028a4 <HAL_DMA_Abort+0x5f0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d059      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a46      	ldr	r2, [pc, #280]	; (80028a8 <HAL_DMA_Abort+0x5f4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d054      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a44      	ldr	r2, [pc, #272]	; (80028ac <HAL_DMA_Abort+0x5f8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d04f      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <HAL_DMA_Abort+0x5fc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d04a      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a41      	ldr	r2, [pc, #260]	; (80028b4 <HAL_DMA_Abort+0x600>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d045      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a40      	ldr	r2, [pc, #256]	; (80028b8 <HAL_DMA_Abort+0x604>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d040      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3e      	ldr	r2, [pc, #248]	; (80028bc <HAL_DMA_Abort+0x608>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d03b      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a3d      	ldr	r2, [pc, #244]	; (80028c0 <HAL_DMA_Abort+0x60c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d036      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <HAL_DMA_Abort+0x610>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d031      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a3a      	ldr	r2, [pc, #232]	; (80028c8 <HAL_DMA_Abort+0x614>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d02c      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a38      	ldr	r2, [pc, #224]	; (80028cc <HAL_DMA_Abort+0x618>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d027      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <HAL_DMA_Abort+0x61c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d022      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a35      	ldr	r2, [pc, #212]	; (80028d4 <HAL_DMA_Abort+0x620>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01d      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_DMA_Abort+0x624>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d018      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a32      	ldr	r2, [pc, #200]	; (80028dc <HAL_DMA_Abort+0x628>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a31      	ldr	r2, [pc, #196]	; (80028e0 <HAL_DMA_Abort+0x62c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00e      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <HAL_DMA_Abort+0x630>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d009      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <HAL_DMA_Abort+0x634>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_DMA_Abort+0x58a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2c      	ldr	r2, [pc, #176]	; (80028ec <HAL_DMA_Abort+0x638>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_DMA_Abort+0x58e>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_DMA_Abort+0x590>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002850:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00c      	beq.n	8002874 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002868:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002872:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40020010 	.word	0x40020010
 8002894:	40020028 	.word	0x40020028
 8002898:	40020040 	.word	0x40020040
 800289c:	40020058 	.word	0x40020058
 80028a0:	40020070 	.word	0x40020070
 80028a4:	40020088 	.word	0x40020088
 80028a8:	400200a0 	.word	0x400200a0
 80028ac:	400200b8 	.word	0x400200b8
 80028b0:	40020410 	.word	0x40020410
 80028b4:	40020428 	.word	0x40020428
 80028b8:	40020440 	.word	0x40020440
 80028bc:	40020458 	.word	0x40020458
 80028c0:	40020470 	.word	0x40020470
 80028c4:	40020488 	.word	0x40020488
 80028c8:	400204a0 	.word	0x400204a0
 80028cc:	400204b8 	.word	0x400204b8
 80028d0:	58025408 	.word	0x58025408
 80028d4:	5802541c 	.word	0x5802541c
 80028d8:	58025430 	.word	0x58025430
 80028dc:	58025444 	.word	0x58025444
 80028e0:	58025458 	.word	0x58025458
 80028e4:	5802546c 	.word	0x5802546c
 80028e8:	58025480 	.word	0x58025480
 80028ec:	58025494 	.word	0x58025494

080028f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e237      	b.n	8002d72 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d004      	beq.n	8002918 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e22c      	b.n	8002d72 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_DMA_Abort_IT+0x1a0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d04a      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a5b      	ldr	r2, [pc, #364]	; (8002a94 <HAL_DMA_Abort_IT+0x1a4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d045      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a59      	ldr	r2, [pc, #356]	; (8002a98 <HAL_DMA_Abort_IT+0x1a8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d040      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a58      	ldr	r2, [pc, #352]	; (8002a9c <HAL_DMA_Abort_IT+0x1ac>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d03b      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <HAL_DMA_Abort_IT+0x1b0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d036      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a55      	ldr	r2, [pc, #340]	; (8002aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d031      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a53      	ldr	r2, [pc, #332]	; (8002aa8 <HAL_DMA_Abort_IT+0x1b8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d02c      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a52      	ldr	r2, [pc, #328]	; (8002aac <HAL_DMA_Abort_IT+0x1bc>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d027      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a50      	ldr	r2, [pc, #320]	; (8002ab0 <HAL_DMA_Abort_IT+0x1c0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d022      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4f      	ldr	r2, [pc, #316]	; (8002ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d01d      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a4d      	ldr	r2, [pc, #308]	; (8002ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d018      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a4c      	ldr	r2, [pc, #304]	; (8002abc <HAL_DMA_Abort_IT+0x1cc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00e      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a49      	ldr	r2, [pc, #292]	; (8002ac4 <HAL_DMA_Abort_IT+0x1d4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a47      	ldr	r2, [pc, #284]	; (8002ac8 <HAL_DMA_Abort_IT+0x1d8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_DMA_Abort_IT+0xc8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a46      	ldr	r2, [pc, #280]	; (8002acc <HAL_DMA_Abort_IT+0x1dc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <HAL_DMA_Abort_IT+0xcc>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_DMA_Abort_IT+0xce>
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 8086 	beq.w	8002ad0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2204      	movs	r2, #4
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <HAL_DMA_Abort_IT+0x1a0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d04a      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2e      	ldr	r2, [pc, #184]	; (8002a94 <HAL_DMA_Abort_IT+0x1a4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d045      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2c      	ldr	r2, [pc, #176]	; (8002a98 <HAL_DMA_Abort_IT+0x1a8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d040      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2b      	ldr	r2, [pc, #172]	; (8002a9c <HAL_DMA_Abort_IT+0x1ac>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d03b      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <HAL_DMA_Abort_IT+0x1b0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d036      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_DMA_Abort_IT+0x1b4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d031      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a26      	ldr	r2, [pc, #152]	; (8002aa8 <HAL_DMA_Abort_IT+0x1b8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d02c      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <HAL_DMA_Abort_IT+0x1bc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d027      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <HAL_DMA_Abort_IT+0x1c0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d022      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <HAL_DMA_Abort_IT+0x1c4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d01d      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <HAL_DMA_Abort_IT+0x1c8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d018      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HAL_DMA_Abort_IT+0x1cc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d013      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_DMA_Abort_IT+0x1d0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00e      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_DMA_Abort_IT+0x1d4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d009      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HAL_DMA_Abort_IT+0x1d8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d004      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x17c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_DMA_Abort_IT+0x1dc>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d108      	bne.n	8002a7e <HAL_DMA_Abort_IT+0x18e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e178      	b.n	8002d70 <HAL_DMA_Abort_IT+0x480>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e16f      	b.n	8002d70 <HAL_DMA_Abort_IT+0x480>
 8002a90:	40020010 	.word	0x40020010
 8002a94:	40020028 	.word	0x40020028
 8002a98:	40020040 	.word	0x40020040
 8002a9c:	40020058 	.word	0x40020058
 8002aa0:	40020070 	.word	0x40020070
 8002aa4:	40020088 	.word	0x40020088
 8002aa8:	400200a0 	.word	0x400200a0
 8002aac:	400200b8 	.word	0x400200b8
 8002ab0:	40020410 	.word	0x40020410
 8002ab4:	40020428 	.word	0x40020428
 8002ab8:	40020440 	.word	0x40020440
 8002abc:	40020458 	.word	0x40020458
 8002ac0:	40020470 	.word	0x40020470
 8002ac4:	40020488 	.word	0x40020488
 8002ac8:	400204a0 	.word	0x400204a0
 8002acc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020e 	bic.w	r2, r2, #14
 8002ade:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6c      	ldr	r2, [pc, #432]	; (8002c98 <HAL_DMA_Abort_IT+0x3a8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d04a      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6b      	ldr	r2, [pc, #428]	; (8002c9c <HAL_DMA_Abort_IT+0x3ac>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d045      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a69      	ldr	r2, [pc, #420]	; (8002ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d040      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d03b      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a66      	ldr	r2, [pc, #408]	; (8002ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d036      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a65      	ldr	r2, [pc, #404]	; (8002cac <HAL_DMA_Abort_IT+0x3bc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d031      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a63      	ldr	r2, [pc, #396]	; (8002cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d02c      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a62      	ldr	r2, [pc, #392]	; (8002cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d027      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a60      	ldr	r2, [pc, #384]	; (8002cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d022      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a5f      	ldr	r2, [pc, #380]	; (8002cbc <HAL_DMA_Abort_IT+0x3cc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d01d      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a5c      	ldr	r2, [pc, #368]	; (8002cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5a      	ldr	r2, [pc, #360]	; (8002cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a59      	ldr	r2, [pc, #356]	; (8002ccc <HAL_DMA_Abort_IT+0x3dc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x290>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d108      	bne.n	8002b92 <HAL_DMA_Abort_IT+0x2a2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0201 	bic.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e007      	b.n	8002ba2 <HAL_DMA_Abort_IT+0x2b2>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3c      	ldr	r2, [pc, #240]	; (8002c98 <HAL_DMA_Abort_IT+0x3a8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d072      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3a      	ldr	r2, [pc, #232]	; (8002c9c <HAL_DMA_Abort_IT+0x3ac>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d06d      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a39      	ldr	r2, [pc, #228]	; (8002ca0 <HAL_DMA_Abort_IT+0x3b0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d068      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <HAL_DMA_Abort_IT+0x3b4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d063      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_DMA_Abort_IT+0x3b8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d05e      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a34      	ldr	r2, [pc, #208]	; (8002cac <HAL_DMA_Abort_IT+0x3bc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d059      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_DMA_Abort_IT+0x3c0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d054      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <HAL_DMA_Abort_IT+0x3c4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d04f      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_DMA_Abort_IT+0x3c8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d04a      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_DMA_Abort_IT+0x3cc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d045      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2d      	ldr	r2, [pc, #180]	; (8002cc0 <HAL_DMA_Abort_IT+0x3d0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d040      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <HAL_DMA_Abort_IT+0x3d4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d03b      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_DMA_Abort_IT+0x3d8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d036      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_DMA_Abort_IT+0x3dc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_DMA_Abort_IT+0x3e0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d02c      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <HAL_DMA_Abort_IT+0x3e4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a24      	ldr	r2, [pc, #144]	; (8002cd8 <HAL_DMA_Abort_IT+0x3e8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d022      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_DMA_Abort_IT+0x3ec>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01d      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <HAL_DMA_Abort_IT+0x3f0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_DMA_Abort_IT+0x3f4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_DMA_Abort_IT+0x3f8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	; (8002cec <HAL_DMA_Abort_IT+0x3fc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_DMA_Abort_IT+0x400>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_DMA_Abort_IT+0x3a2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_DMA_Abort_IT+0x404>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d132      	bne.n	8002cf8 <HAL_DMA_Abort_IT+0x408>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e031      	b.n	8002cfa <HAL_DMA_Abort_IT+0x40a>
 8002c96:	bf00      	nop
 8002c98:	40020010 	.word	0x40020010
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	40020040 	.word	0x40020040
 8002ca4:	40020058 	.word	0x40020058
 8002ca8:	40020070 	.word	0x40020070
 8002cac:	40020088 	.word	0x40020088
 8002cb0:	400200a0 	.word	0x400200a0
 8002cb4:	400200b8 	.word	0x400200b8
 8002cb8:	40020410 	.word	0x40020410
 8002cbc:	40020428 	.word	0x40020428
 8002cc0:	40020440 	.word	0x40020440
 8002cc4:	40020458 	.word	0x40020458
 8002cc8:	40020470 	.word	0x40020470
 8002ccc:	40020488 	.word	0x40020488
 8002cd0:	400204a0 	.word	0x400204a0
 8002cd4:	400204b8 	.word	0x400204b8
 8002cd8:	58025408 	.word	0x58025408
 8002cdc:	5802541c 	.word	0x5802541c
 8002ce0:	58025430 	.word	0x58025430
 8002ce4:	58025444 	.word	0x58025444
 8002ce8:	58025458 	.word	0x58025458
 8002cec:	5802546c 	.word	0x5802546c
 8002cf0:	58025480 	.word	0x58025480
 8002cf4:	58025494 	.word	0x58025494
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d028      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002d2c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00c      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d44:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002d4e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop

08002d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d8a:	4b86      	ldr	r3, [pc, #536]	; (8002fa4 <HAL_GPIO_Init+0x228>)
 8002d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d8e:	e18c      	b.n	80030aa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2101      	movs	r1, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 817e 	beq.w	80030a4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d005      	beq.n	8002dc0 <HAL_GPIO_Init+0x44>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d130      	bne.n	8002e22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002df6:	2201      	movs	r2, #1
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	f003 0201 	and.w	r2, r3, #1
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d017      	beq.n	8002e5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d123      	bne.n	8002eb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	08da      	lsrs	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3208      	adds	r2, #8
 8002e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	220f      	movs	r2, #15
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	08da      	lsrs	r2, r3, #3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3208      	adds	r2, #8
 8002eac:	69b9      	ldr	r1, [r7, #24]
 8002eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0203 	and.w	r2, r3, #3
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80d8 	beq.w	80030a4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_GPIO_Init+0x22c>)
 8002ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002efa:	4a2b      	ldr	r2, [pc, #172]	; (8002fa8 <HAL_GPIO_Init+0x22c>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f04:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <HAL_GPIO_Init+0x22c>)
 8002f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f12:	4a26      	ldr	r2, [pc, #152]	; (8002fac <HAL_GPIO_Init+0x230>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_GPIO_Init+0x234>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d04a      	beq.n	8002fd4 <HAL_GPIO_Init+0x258>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	; (8002fb4 <HAL_GPIO_Init+0x238>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02b      	beq.n	8002f9e <HAL_GPIO_Init+0x222>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1b      	ldr	r2, [pc, #108]	; (8002fb8 <HAL_GPIO_Init+0x23c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d025      	beq.n	8002f9a <HAL_GPIO_Init+0x21e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <HAL_GPIO_Init+0x240>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01f      	beq.n	8002f96 <HAL_GPIO_Init+0x21a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_GPIO_Init+0x244>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d019      	beq.n	8002f92 <HAL_GPIO_Init+0x216>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_GPIO_Init+0x248>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <HAL_GPIO_Init+0x212>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_GPIO_Init+0x24c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00d      	beq.n	8002f8a <HAL_GPIO_Init+0x20e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a16      	ldr	r2, [pc, #88]	; (8002fcc <HAL_GPIO_Init+0x250>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d007      	beq.n	8002f86 <HAL_GPIO_Init+0x20a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a15      	ldr	r2, [pc, #84]	; (8002fd0 <HAL_GPIO_Init+0x254>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d101      	bne.n	8002f82 <HAL_GPIO_Init+0x206>
 8002f7e:	2309      	movs	r3, #9
 8002f80:	e029      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f82:	230a      	movs	r3, #10
 8002f84:	e027      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e025      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e023      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e021      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e01f      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e01d      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e01b      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e019      	b.n	8002fd6 <HAL_GPIO_Init+0x25a>
 8002fa2:	bf00      	nop
 8002fa4:	58000080 	.word	0x58000080
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	58000400 	.word	0x58000400
 8002fb0:	58020000 	.word	0x58020000
 8002fb4:	58020400 	.word	0x58020400
 8002fb8:	58020800 	.word	0x58020800
 8002fbc:	58020c00 	.word	0x58020c00
 8002fc0:	58021000 	.word	0x58021000
 8002fc4:	58021400 	.word	0x58021400
 8002fc8:	58021800 	.word	0x58021800
 8002fcc:	58021c00 	.word	0x58021c00
 8002fd0:	58022400 	.word	0x58022400
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	f002 0203 	and.w	r2, r2, #3
 8002fdc:	0092      	lsls	r2, r2, #2
 8002fde:	4093      	lsls	r3, r2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe6:	4938      	ldr	r1, [pc, #224]	; (80030c8 <HAL_GPIO_Init+0x34c>)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	3302      	adds	r3, #2
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3301      	adds	r3, #1
 80030a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f47f ae6b 	bne.w	8002d90 <HAL_GPIO_Init+0x14>
  }
}
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
 80030be:	3724      	adds	r7, #36	; 0x24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	58000400 	.word	0x58000400

080030cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	807b      	strh	r3, [r7, #2]
 80030d8:	4613      	mov	r3, r2
 80030da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030dc:	787b      	ldrb	r3, [r7, #1]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	887a      	ldrh	r2, [r7, #2]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80030e8:	e003      	b.n	80030f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030ea:	887b      	ldrh	r3, [r7, #2]
 80030ec:	041a      	lsls	r2, r3, #16
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe f82b 	bl	8001180 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_PWREx_ConfigSupply+0x70>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b04      	cmp	r3, #4
 8003146:	d00a      	beq.n	800315e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_PWREx_ConfigSupply+0x70>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	429a      	cmp	r2, r3
 8003154:	d001      	beq.n	800315a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e01f      	b.n	800319a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e01d      	b.n	800319a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_PWREx_ConfigSupply+0x70>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	490f      	ldr	r1, [pc, #60]	; (80031a4 <HAL_PWREx_ConfigSupply+0x70>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4313      	orrs	r3, r2
 800316c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800316e:	f7fe ff61 	bl	8002034 <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003174:	e009      	b.n	800318a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003176:	f7fe ff5d 	bl	8002034 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003184:	d901      	bls.n	800318a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e007      	b.n	800319a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_PWREx_ConfigSupply+0x70>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003196:	d1ee      	bne.n	8003176 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	58024800 	.word	0x58024800

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	; 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e39d      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8087 	beq.w	80032d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c8:	4b88      	ldr	r3, [pc, #544]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031d2:	4b86      	ldr	r3, [pc, #536]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d007      	beq.n	80031ee <HAL_RCC_OscConfig+0x46>
 80031de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e0:	2b18      	cmp	r3, #24
 80031e2:	d110      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d10b      	bne.n	8003206 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d06c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x12c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d168      	bne.n	80032d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e377      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x76>
 8003210:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a75      	ldr	r2, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	e02e      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b71      	ldr	r3, [pc, #452]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a70      	ldr	r2, [pc, #448]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800322c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b6e      	ldr	r3, [pc, #440]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6d      	ldr	r2, [pc, #436]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0xbc>
 800324a:	4b68      	ldr	r3, [pc, #416]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a67      	ldr	r2, [pc, #412]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b65      	ldr	r3, [pc, #404]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a64      	ldr	r2, [pc, #400]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xd4>
 8003264:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a60      	ldr	r2, [pc, #384]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5d      	ldr	r2, [pc, #372]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe fed6 	bl	8002034 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7fe fed2 	bl	8002034 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e32b      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329e:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xe4>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fec2 	bl	8002034 <HAL_GetTick>
 80032b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe febe 	bl	8002034 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e317      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032c6:	4b49      	ldr	r3, [pc, #292]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x10c>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 808c 	beq.w	80033fc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e4:	4b41      	ldr	r3, [pc, #260]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032ee:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_RCC_OscConfig+0x162>
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	2b18      	cmp	r3, #24
 80032fe:	d137      	bne.n	8003370 <HAL_RCC_OscConfig+0x1c8>
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d132      	bne.n	8003370 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800330a:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x17a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e2e9      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003322:	4b32      	ldr	r3, [pc, #200]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 0219 	bic.w	r2, r3, #25
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	492f      	ldr	r1, [pc, #188]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003334:	f7fe fe7e 	bl	8002034 <HAL_GetTick>
 8003338:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333c:	f7fe fe7a 	bl	8002034 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e2d3      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334e:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0f0      	beq.n	800333c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	061b      	lsls	r3, r3, #24
 8003368:	4920      	ldr	r1, [pc, #128]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800336e:	e045      	b.n	80033fc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d026      	beq.n	80033c6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003378:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f023 0219 	bic.w	r2, r3, #25
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4919      	ldr	r1, [pc, #100]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe fe53 	bl	8002034 <HAL_GetTick>
 800338e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003392:	f7fe fe4f 	bl	8002034 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e2a8      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	061b      	lsls	r3, r3, #24
 80033be:	490b      	ldr	r1, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	604b      	str	r3, [r1, #4]
 80033c4:	e01a      	b.n	80033fc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a08      	ldr	r2, [pc, #32]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 80033cc:	f023 0301 	bic.w	r3, r3, #1
 80033d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7fe fe2f 	bl	8002034 <HAL_GetTick>
 80033d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033da:	f7fe fe2b 	bl	8002034 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d903      	bls.n	80033f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e284      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
 80033ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033f0:	4b96      	ldr	r3, [pc, #600]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ee      	bne.n	80033da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0310 	and.w	r3, r3, #16
 8003404:	2b00      	cmp	r3, #0
 8003406:	d06a      	beq.n	80034de <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003408:	4b90      	ldr	r3, [pc, #576]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003410:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003412:	4b8e      	ldr	r3, [pc, #568]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d007      	beq.n	800342e <HAL_RCC_OscConfig+0x286>
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b18      	cmp	r3, #24
 8003422:	d11b      	bne.n	800345c <HAL_RCC_OscConfig+0x2b4>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800342e:	4b87      	ldr	r3, [pc, #540]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x29e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e257      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003446:	4b81      	ldr	r3, [pc, #516]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	497d      	ldr	r1, [pc, #500]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003456:	4313      	orrs	r3, r2
 8003458:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800345a:	e040      	b.n	80034de <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d023      	beq.n	80034ac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003464:	4b79      	ldr	r3, [pc, #484]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a78      	ldr	r2, [pc, #480]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800346a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fde0 	bl	8002034 <HAL_GetTick>
 8003474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003478:	f7fe fddc 	bl	8002034 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e235      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800348a:	4b70      	ldr	r3, [pc, #448]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003496:	4b6d      	ldr	r3, [pc, #436]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	4969      	ldr	r1, [pc, #420]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60cb      	str	r3, [r1, #12]
 80034aa:	e018      	b.n	80034de <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034ac:	4b67      	ldr	r3, [pc, #412]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a66      	ldr	r2, [pc, #408]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80034b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fdbc 	bl	8002034 <HAL_GetTick>
 80034bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80034c0:	f7fe fdb8 	bl	8002034 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e211      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034d2:	4b5e      	ldr	r3, [pc, #376]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1f0      	bne.n	80034c0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d036      	beq.n	8003558 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d019      	beq.n	8003526 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	4a55      	ldr	r2, [pc, #340]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe fd99 	bl	8002034 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003506:	f7fe fd95 	bl	8002034 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1ee      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003518:	4b4c      	ldr	r3, [pc, #304]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x35e>
 8003524:	e018      	b.n	8003558 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003526:	4b49      	ldr	r3, [pc, #292]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fe fd7f 	bl	8002034 <HAL_GetTick>
 8003536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353a:	f7fe fd7b 	bl	8002034 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1d4      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800354c:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800354e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d036      	beq.n	80035d2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d019      	beq.n	80035a0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800356c:	4b37      	ldr	r3, [pc, #220]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a36      	ldr	r2, [pc, #216]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003576:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003578:	f7fe fd5c 	bl	8002034 <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003580:	f7fe fd58 	bl	8002034 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1b1      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x3d8>
 800359e:	e018      	b.n	80035d2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a29      	ldr	r2, [pc, #164]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80035a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035ac:	f7fe fd42 	bl	8002034 <HAL_GetTick>
 80035b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80035b4:	f7fe fd3e 	bl	8002034 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e197      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8086 	beq.w	80036ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035e0:	4b1b      	ldr	r3, [pc, #108]	; (8003650 <HAL_RCC_OscConfig+0x4a8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1a      	ldr	r2, [pc, #104]	; (8003650 <HAL_RCC_OscConfig+0x4a8>)
 80035e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fd22 	bl	8002034 <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035f4:	f7fe fd1e 	bl	8002034 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e177      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003606:	4b12      	ldr	r3, [pc, #72]	; (8003650 <HAL_RCC_OscConfig+0x4a8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d106      	bne.n	8003628 <HAL_RCC_OscConfig+0x480>
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a0b      	ldr	r2, [pc, #44]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	e032      	b.n	800368e <HAL_RCC_OscConfig+0x4e6>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d111      	bne.n	8003654 <HAL_RCC_OscConfig+0x4ac>
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a05      	ldr	r2, [pc, #20]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003636:	f023 0301 	bic.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	4b03      	ldr	r3, [pc, #12]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a02      	ldr	r2, [pc, #8]	; (800364c <HAL_RCC_OscConfig+0x4a4>)
 8003642:	f023 0304 	bic.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	e021      	b.n	800368e <HAL_RCC_OscConfig+0x4e6>
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400
 8003650:	58024800 	.word	0x58024800
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d10c      	bne.n	8003676 <HAL_RCC_OscConfig+0x4ce>
 800365c:	4b83      	ldr	r3, [pc, #524]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a82      	ldr	r2, [pc, #520]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003662:	f043 0304 	orr.w	r3, r3, #4
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	4b80      	ldr	r3, [pc, #512]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a7f      	ldr	r2, [pc, #508]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
 8003674:	e00b      	b.n	800368e <HAL_RCC_OscConfig+0x4e6>
 8003676:	4b7d      	ldr	r3, [pc, #500]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a7c      	ldr	r2, [pc, #496]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	4b7a      	ldr	r3, [pc, #488]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a79      	ldr	r2, [pc, #484]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003696:	f7fe fccd 	bl	8002034 <HAL_GetTick>
 800369a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800369c:	e00a      	b.n	80036b4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369e:	f7fe fcc9 	bl	8002034 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e120      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0ee      	beq.n	800369e <HAL_RCC_OscConfig+0x4f6>
 80036c0:	e014      	b.n	80036ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c2:	f7fe fcb7 	bl	8002034 <HAL_GetTick>
 80036c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fcb3 	bl	8002034 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e10a      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036e0:	4b62      	ldr	r3, [pc, #392]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ee      	bne.n	80036ca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80ff 	beq.w	80038f4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036fe:	2b18      	cmp	r3, #24
 8003700:	f000 80ba 	beq.w	8003878 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2b02      	cmp	r3, #2
 800370a:	f040 8095 	bne.w	8003838 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b57      	ldr	r3, [pc, #348]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a56      	ldr	r2, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003714:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371a:	f7fe fc8b 	bl	8002034 <HAL_GetTick>
 800371e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003722:	f7fe fc87 	bl	8002034 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0e0      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003734:	4b4d      	ldr	r3, [pc, #308]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003740:	4b4a      	ldr	r3, [pc, #296]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003744:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_RCC_OscConfig+0x6c8>)
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	430a      	orrs	r2, r1
 8003754:	4945      	ldr	r1, [pc, #276]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	628b      	str	r3, [r1, #40]	; 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	3b01      	subs	r3, #1
 8003760:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	3b01      	subs	r3, #1
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	b29b      	uxth	r3, r3
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	3b01      	subs	r3, #1
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	3b01      	subs	r3, #1
 8003784:	061b      	lsls	r3, r3, #24
 8003786:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800378a:	4938      	ldr	r1, [pc, #224]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003790:	4b36      	ldr	r3, [pc, #216]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a35      	ldr	r2, [pc, #212]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003796:	f023 0301 	bic.w	r3, r3, #1
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800379c:	4b33      	ldr	r3, [pc, #204]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800379e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a0:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCC_OscConfig+0x6cc>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037a8:	00d2      	lsls	r2, r2, #3
 80037aa:	4930      	ldr	r1, [pc, #192]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	f023 020c 	bic.w	r2, r3, #12
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	492b      	ldr	r1, [pc, #172]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f023 0202 	bic.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	4927      	ldr	r1, [pc, #156]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4a24      	ldr	r2, [pc, #144]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e0:	4b22      	ldr	r3, [pc, #136]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a21      	ldr	r2, [pc, #132]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037ec:	4b1f      	ldr	r3, [pc, #124]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800380a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fc10 	bl	8002034 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003818:	f7fe fc0c 	bl	8002034 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e065      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x670>
 8003836:	e05d      	b.n	80038f4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003838:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0b      	ldr	r2, [pc, #44]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 800383e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe fbf6 	bl	8002034 <HAL_GetTick>
 8003848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7fe fbf2 	bl	8002034 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e04b      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_RCC_OscConfig+0x6c4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x6a4>
 800386a:	e043      	b.n	80038f4 <HAL_RCC_OscConfig+0x74c>
 800386c:	58024400 	.word	0x58024400
 8003870:	fffffc0c 	.word	0xfffffc0c
 8003874:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003878:	4b21      	ldr	r3, [pc, #132]	; (8003900 <HAL_RCC_OscConfig+0x758>)
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_RCC_OscConfig+0x758>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b01      	cmp	r3, #1
 800388a:	d031      	beq.n	80038f0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f003 0203 	and.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d12a      	bne.n	80038f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d122      	bne.n	80038f0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11a      	bne.n	80038f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	0a5b      	lsrs	r3, r3, #9
 80038be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d111      	bne.n	80038f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	0c1b      	lsrs	r3, r3, #16
 80038d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d108      	bne.n	80038f0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3730      	adds	r7, #48	; 0x30
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400

08003904 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e19c      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b8a      	ldr	r3, [pc, #552]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d910      	bls.n	8003948 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 020f 	bic.w	r2, r3, #15
 800392e:	4985      	ldr	r1, [pc, #532]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b83      	ldr	r3, [pc, #524]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d001      	beq.n	8003948 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e184      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4b7b      	ldr	r3, [pc, #492]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003960:	429a      	cmp	r2, r3
 8003962:	d908      	bls.n	8003976 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003964:	4b78      	ldr	r3, [pc, #480]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4975      	ldr	r1, [pc, #468]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003972:	4313      	orrs	r3, r2
 8003974:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d010      	beq.n	80039a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	4b70      	ldr	r3, [pc, #448]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800398e:	429a      	cmp	r2, r3
 8003990:	d908      	bls.n	80039a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003992:	4b6d      	ldr	r3, [pc, #436]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	496a      	ldr	r1, [pc, #424]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d010      	beq.n	80039d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	4b64      	ldr	r3, [pc, #400]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039bc:	429a      	cmp	r2, r3
 80039be:	d908      	bls.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039c0:	4b61      	ldr	r3, [pc, #388]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	495e      	ldr	r1, [pc, #376]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0320 	and.w	r3, r3, #32
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d010      	beq.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d908      	bls.n	8003a00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039ee:	4b56      	ldr	r3, [pc, #344]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4953      	ldr	r1, [pc, #332]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d908      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1c:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f023 020f 	bic.w	r2, r3, #15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	4947      	ldr	r1, [pc, #284]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d055      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a3a:	4b43      	ldr	r3, [pc, #268]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4940      	ldr	r1, [pc, #256]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a54:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d121      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0f6      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a6c:	4b36      	ldr	r3, [pc, #216]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d115      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0ea      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a84:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0de      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0d6      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f023 0207 	bic.w	r2, r3, #7
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4925      	ldr	r1, [pc, #148]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fe fabd 	bl	8002034 <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abe:	f7fe fab9 	bl	8002034 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0be      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad4:	4b1c      	ldr	r3, [pc, #112]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d1eb      	bne.n	8003abe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d010      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d208      	bcs.n	8003b14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f023 020f 	bic.w	r2, r3, #15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	490e      	ldr	r1, [pc, #56]	; (8003b48 <HAL_RCC_ClockConfig+0x244>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d214      	bcs.n	8003b4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 020f 	bic.w	r2, r3, #15
 8003b2a:	4906      	ldr	r1, [pc, #24]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <HAL_RCC_ClockConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e086      	b.n	8003c52 <HAL_RCC_ClockConfig+0x34e>
 8003b44:	52002000 	.word	0x52002000
 8003b48:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d010      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d208      	bcs.n	8003b7a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b68:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	4939      	ldr	r1, [pc, #228]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d010      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d208      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b96:	4b31      	ldr	r3, [pc, #196]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	492e      	ldr	r1, [pc, #184]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	4b28      	ldr	r3, [pc, #160]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d208      	bcs.n	8003bd6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003bc4:	4b25      	ldr	r3, [pc, #148]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	4922      	ldr	r1, [pc, #136]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d010      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d208      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4917      	ldr	r1, [pc, #92]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c04:	f000 f834 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	4912      	ldr	r1, [pc, #72]	; (8003c60 <HAL_RCC_ClockConfig+0x35c>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCC_ClockConfig+0x358>)
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <HAL_RCC_ClockConfig+0x35c>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	fa22 f303 	lsr.w	r3, r2, r3
 8003c38:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <HAL_RCC_ClockConfig+0x360>)
 8003c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c3c:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <HAL_RCC_ClockConfig+0x364>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <HAL_RCC_ClockConfig+0x368>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe f9aa 	bl	8001fa0 <HAL_InitTick>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	58024400 	.word	0x58024400
 8003c60:	0800ba6c 	.word	0x0800ba6c
 8003c64:	2400030c 	.word	0x2400030c
 8003c68:	24000308 	.word	0x24000308
 8003c6c:	24000310 	.word	0x24000310

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	; 0x24
 8003c74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c76:	4bb3      	ldr	r3, [pc, #716]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c7e:	2b18      	cmp	r3, #24
 8003c80:	f200 8155 	bhi.w	8003f2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003c84:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003cf1 	.word	0x08003cf1
 8003c90:	08003f2f 	.word	0x08003f2f
 8003c94:	08003f2f 	.word	0x08003f2f
 8003c98:	08003f2f 	.word	0x08003f2f
 8003c9c:	08003f2f 	.word	0x08003f2f
 8003ca0:	08003f2f 	.word	0x08003f2f
 8003ca4:	08003f2f 	.word	0x08003f2f
 8003ca8:	08003f2f 	.word	0x08003f2f
 8003cac:	08003d17 	.word	0x08003d17
 8003cb0:	08003f2f 	.word	0x08003f2f
 8003cb4:	08003f2f 	.word	0x08003f2f
 8003cb8:	08003f2f 	.word	0x08003f2f
 8003cbc:	08003f2f 	.word	0x08003f2f
 8003cc0:	08003f2f 	.word	0x08003f2f
 8003cc4:	08003f2f 	.word	0x08003f2f
 8003cc8:	08003f2f 	.word	0x08003f2f
 8003ccc:	08003d1d 	.word	0x08003d1d
 8003cd0:	08003f2f 	.word	0x08003f2f
 8003cd4:	08003f2f 	.word	0x08003f2f
 8003cd8:	08003f2f 	.word	0x08003f2f
 8003cdc:	08003f2f 	.word	0x08003f2f
 8003ce0:	08003f2f 	.word	0x08003f2f
 8003ce4:	08003f2f 	.word	0x08003f2f
 8003ce8:	08003f2f 	.word	0x08003f2f
 8003cec:	08003d23 	.word	0x08003d23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cf0:	4b94      	ldr	r3, [pc, #592]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0320 	and.w	r3, r3, #32
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cfc:	4b91      	ldr	r3, [pc, #580]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	4a90      	ldr	r2, [pc, #576]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003d0e:	e111      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d10:	4b8d      	ldr	r3, [pc, #564]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d12:	61bb      	str	r3, [r7, #24]
    break;
 8003d14:	e10e      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003d16:	4b8d      	ldr	r3, [pc, #564]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d18:	61bb      	str	r3, [r7, #24]
    break;
 8003d1a:	e10b      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003d1c:	4b8c      	ldr	r3, [pc, #560]	; (8003f50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d1e:	61bb      	str	r3, [r7, #24]
    break;
 8003d20:	e108      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d22:	4b88      	ldr	r3, [pc, #544]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003d2c:	4b85      	ldr	r3, [pc, #532]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d38:	4b82      	ldr	r3, [pc, #520]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003d42:	4b80      	ldr	r3, [pc, #512]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d46:	08db      	lsrs	r3, r3, #3
 8003d48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80e1 	beq.w	8003f28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	f000 8083 	beq.w	8003e74 <HAL_RCC_GetSysClockFreq+0x204>
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	f200 80a1 	bhi.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x248>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_RCC_GetSysClockFreq+0x114>
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d056      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003d82:	e099      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d84:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02d      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d90:	4b6c      	ldr	r3, [pc, #432]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	4a6b      	ldr	r2, [pc, #428]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	ee07 3a90 	vmov	s15, r3
 8003da8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc2:	ee07 3a90 	vmov	s15, r3
 8003dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003dea:	e087      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003df6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003f58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e12:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e2e:	e065      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b40      	ldr	r3, [pc, #256]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e72:	e043      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003f60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b2f      	ldr	r3, [pc, #188]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb6:	e021      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ede:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003f54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003efa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	0a5b      	lsrs	r3, r3, #9
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	3301      	adds	r3, #1
 8003f08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f20:	ee17 3a90 	vmov	r3, s15
 8003f24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003f26:	e005      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61bb      	str	r3, [r7, #24]
    break;
 8003f2c:	e002      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f30:	61bb      	str	r3, [r7, #24]
    break;
 8003f32:	bf00      	nop
  }

  return sysclockfreq;
 8003f34:	69bb      	ldr	r3, [r7, #24]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3724      	adds	r7, #36	; 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
 8003f48:	03d09000 	.word	0x03d09000
 8003f4c:	003d0900 	.word	0x003d0900
 8003f50:	017d7840 	.word	0x017d7840
 8003f54:	46000000 	.word	0x46000000
 8003f58:	4c742400 	.word	0x4c742400
 8003f5c:	4a742400 	.word	0x4a742400
 8003f60:	4bbebc20 	.word	0x4bbebc20

08003f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003f6a:	f7ff fe81 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	0a1b      	lsrs	r3, r3, #8
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490f      	ldr	r1, [pc, #60]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003f92:	5cd3      	ldrb	r3, [r2, r3]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003fa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fa2:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	0800ba6c 	.word	0x0800ba6c
 8003fbc:	2400030c 	.word	0x2400030c
 8003fc0:	24000308 	.word	0x24000308

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003fc8:	f7ff ffcc 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4904      	ldr	r1, [pc, #16]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	0800ba6c 	.word	0x0800ba6c

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ff4:	f7ff ffb6 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	58024400 	.word	0x58024400
 8004018:	0800ba6c 	.word	0x0800ba6c

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004024:	2300      	movs	r3, #0
 8004026:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004028:	2300      	movs	r3, #0
 800402a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d03f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004040:	d02a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004042:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004046:	d824      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800404c:	d018      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800404e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004052:	d81e      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405c:	d007      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800405e:	e018      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004060:	4ba4      	ldr	r3, [pc, #656]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4aa3      	ldr	r2, [pc, #652]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800406c:	e015      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f989 	bl	800538c <RCCEx_PLL2_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800407e:	e00c      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3324      	adds	r3, #36	; 0x24
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fa32 	bl	80054f0 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	75fb      	strb	r3, [r7, #23]
      break;
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409a:	7dfb      	ldrb	r3, [r7, #23]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80040a0:	4b94      	ldr	r3, [pc, #592]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80040a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	4991      	ldr	r1, [pc, #580]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	650b      	str	r3, [r1, #80]	; 0x50
 80040b2:	e001      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d03d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d826      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040e9 	.word	0x080040e9
 80040d8:	080040f7 	.word	0x080040f7
 80040dc:	08004109 	.word	0x08004109
 80040e0:	08004121 	.word	0x08004121
 80040e4:	08004121 	.word	0x08004121
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e8:	4b82      	ldr	r3, [pc, #520]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a81      	ldr	r2, [pc, #516]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040f4:	e015      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 f945 	bl	800538c <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004106:	e00c      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f001 f9ee 	bl	80054f0 <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004118:	e003      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d109      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004128:	4b72      	ldr	r3, [pc, #456]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	f023 0207 	bic.w	r2, r3, #7
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	496f      	ldr	r1, [pc, #444]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004136:	4313      	orrs	r3, r2
 8004138:	650b      	str	r3, [r1, #80]	; 0x50
 800413a:	e001      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004148:	2b00      	cmp	r3, #0
 800414a:	d051      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004152:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004156:	d036      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004158:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800415c:	d830      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800415e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004162:	d032      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004164:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004168:	d82a      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800416a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800416e:	d02e      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004170:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004174:	d824      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800417a:	d018      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 800417c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004180:	d81e      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418a:	d007      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800418c:	e018      	b.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418e:	4b59      	ldr	r3, [pc, #356]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	4a58      	ldr	r2, [pc, #352]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004198:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800419a:	e019      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f8f2 	bl	800538c <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80041ac:	e010      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	; 0x24
 80041b2:	2100      	movs	r1, #0
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 f99b 	bl	80054f0 <RCCEx_PLL3_Config>
 80041ba:	4603      	mov	r3, r0
 80041bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041be:	e007      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	75fb      	strb	r3, [r7, #23]
      break;
 80041c4:	e004      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80041d6:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041e4:	4943      	ldr	r1, [pc, #268]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ea:	e001      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	7dfb      	ldrb	r3, [r7, #23]
 80041ee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d051      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004202:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004206:	d036      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004208:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800420c:	d830      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800420e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004212:	d032      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004218:	d82a      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800421a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800421e:	d02e      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004224:	d824      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800422a:	d018      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800422c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004230:	d81e      	bhi.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004236:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423a:	d007      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800423c:	e018      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800424a:	e019      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3304      	adds	r3, #4
 8004250:	2100      	movs	r1, #0
 8004252:	4618      	mov	r0, r3
 8004254:	f001 f89a 	bl	800538c <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800425c:	e010      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3324      	adds	r3, #36	; 0x24
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f001 f943 	bl	80054f0 <RCCEx_PLL3_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800426e:	e007      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	75fb      	strb	r3, [r7, #23]
      break;
 8004274:	e004      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800427e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004280:	7dfb      	ldrb	r3, [r7, #23]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10a      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004286:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004294:	4917      	ldr	r1, [pc, #92]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	658b      	str	r3, [r1, #88]	; 0x58
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d035      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b0:	2b30      	cmp	r3, #48	; 0x30
 80042b2:	d01c      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d817      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d00c      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d813      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d019      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80042c4:	2b10      	cmp	r3, #16
 80042c6:	d10f      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c8:	4b0a      	ldr	r3, [pc, #40]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042d4:	e011      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	2102      	movs	r1, #2
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 f855 	bl	800538c <RCCEx_PLL2_Config>
 80042e2:	4603      	mov	r3, r0
 80042e4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80042e6:	e008      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	75fb      	strb	r3, [r7, #23]
      break;
 80042ec:	e005      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 80042ee:	bf00      	nop
 80042f0:	e003      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
      break;
 80042f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004300:	4ba3      	ldr	r3, [pc, #652]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004304:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	49a0      	ldr	r1, [pc, #640]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800430e:	4313      	orrs	r3, r2
 8004310:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004312:	e001      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d047      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432c:	d030      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800432e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004332:	d82a      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004338:	d02c      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800433a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800433e:	d824      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004344:	d018      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434a:	d81e      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004354:	d007      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004356:	e018      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004358:	4b8d      	ldr	r3, [pc, #564]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a8c      	ldr	r2, [pc, #560]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004364:	e017      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3304      	adds	r3, #4
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f001 f80d 	bl	800538c <RCCEx_PLL2_Config>
 8004372:	4603      	mov	r3, r0
 8004374:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004376:	e00e      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3324      	adds	r3, #36	; 0x24
 800437c:	2100      	movs	r1, #0
 800437e:	4618      	mov	r0, r3
 8004380:	f001 f8b6 	bl	80054f0 <RCCEx_PLL3_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004388:	e005      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
      break;
 800438e:	e002      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004390:	bf00      	nop
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8004394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800439c:	4b7c      	ldr	r3, [pc, #496]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800439e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	4979      	ldr	r1, [pc, #484]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	650b      	str	r3, [r1, #80]	; 0x50
 80043ae:	e001      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	7dfb      	ldrb	r3, [r7, #23]
 80043b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d049      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043c8:	d02e      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80043ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ce:	d828      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043d4:	d02a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80043d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043da:	d822      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043e0:	d026      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80043e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043e6:	d81c      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ec:	d010      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80043ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f2:	d816      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01d      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d111      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f000 ffc1 	bl	800538c <RCCEx_PLL2_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800440e:	e012      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3324      	adds	r3, #36	; 0x24
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f001 f86a 	bl	80054f0 <RCCEx_PLL3_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004420:	e009      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	e006      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004428:	bf00      	nop
 800442a:	e004      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800442c:	bf00      	nop
 800442e:	e002      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004430:	bf00      	nop
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004434:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004436:	7dfb      	ldrb	r3, [r7, #23]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d109      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800443c:	4b54      	ldr	r3, [pc, #336]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004448:	4951      	ldr	r1, [pc, #324]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800444a:	4313      	orrs	r3, r2
 800444c:	650b      	str	r3, [r1, #80]	; 0x50
 800444e:	e001      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d04b      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800446a:	d02e      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800446c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004470:	d828      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d02a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800447c:	d822      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800447e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004482:	d026      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8004484:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004488:	d81c      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800448a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800448e:	d010      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8004490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004494:	d816      	bhi.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01d      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800449a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449e:	d111      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2101      	movs	r1, #1
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 ff70 	bl	800538c <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80044b0:	e012      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3324      	adds	r3, #36	; 0x24
 80044b6:	2101      	movs	r1, #1
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f819 	bl	80054f0 <RCCEx_PLL3_Config>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80044c2:	e009      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	75fb      	strb	r3, [r7, #23]
      break;
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044ca:	bf00      	nop
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80044d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80044de:	4b2c      	ldr	r3, [pc, #176]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044ec:	4928      	ldr	r1, [pc, #160]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	658b      	str	r3, [r1, #88]	; 0x58
 80044f2:	e001      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02f      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800450c:	d00e      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800450e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004512:	d814      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004518:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800451c:	d10f      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451e:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800452a:	e00c      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	2101      	movs	r1, #1
 8004532:	4618      	mov	r0, r3
 8004534:	f000 ff2a 	bl	800538c <RCCEx_PLL2_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800453c:	e003      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
      break;
 8004542:	e000      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8004544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004558:	490d      	ldr	r1, [pc, #52]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800455a:	4313      	orrs	r3, r2
 800455c:	650b      	str	r3, [r1, #80]	; 0x50
 800455e:	e001      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d034      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004574:	2b03      	cmp	r3, #3
 8004576:	d81d      	bhi.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045bb 	.word	0x080045bb
 8004584:	08004595 	.word	0x08004595
 8004588:	080045a3 	.word	0x080045a3
 800458c:	080045bb 	.word	0x080045bb
 8004590:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004594:	4bb1      	ldr	r3, [pc, #708]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	4ab0      	ldr	r2, [pc, #704]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800459a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80045a0:	e00c      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2102      	movs	r1, #2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 feef 	bl	800538c <RCCEx_PLL2_Config>
 80045ae:	4603      	mov	r3, r0
 80045b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80045b2:	e003      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	75fb      	strb	r3, [r7, #23]
      break;
 80045b8:	e000      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80045ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045bc:	7dfb      	ldrb	r3, [r7, #23]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80045c2:	4ba6      	ldr	r3, [pc, #664]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80045c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c6:	f023 0203 	bic.w	r2, r3, #3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ce:	49a3      	ldr	r1, [pc, #652]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80045d4:	e001      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f000 8086 	beq.w	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e8:	4b9d      	ldr	r3, [pc, #628]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a9c      	ldr	r2, [pc, #624]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80045ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045f4:	f7fd fd1e 	bl	8002034 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045fa:	e009      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fc:	f7fd fd1a 	bl	8002034 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d902      	bls.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	75fb      	strb	r3, [r7, #23]
        break;
 800460e:	e005      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004610:	4b93      	ldr	r3, [pc, #588]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ef      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d166      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004622:	4b8e      	ldr	r3, [pc, #568]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800462c:	4053      	eors	r3, r2
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	2b00      	cmp	r3, #0
 8004634:	d013      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004636:	4b89      	ldr	r3, [pc, #548]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800463e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004640:	4b86      	ldr	r3, [pc, #536]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a85      	ldr	r2, [pc, #532]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800464c:	4b83      	ldr	r3, [pc, #524]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a82      	ldr	r2, [pc, #520]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004658:	4a80      	ldr	r2, [pc, #512]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004668:	d115      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fd fce3 	bl	8002034 <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004670:	e00b      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004672:	f7fd fcdf 	bl	8002034 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004680:	4293      	cmp	r3, r2
 8004682:	d902      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	75fb      	strb	r3, [r7, #23]
            break;
 8004688:	e005      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800468a:	4b74      	ldr	r3, [pc, #464]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ed      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d126      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046aa:	d10d      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80046ac:	4b6b      	ldr	r3, [pc, #428]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046ba:	0919      	lsrs	r1, r3, #4
 80046bc:	4b69      	ldr	r3, [pc, #420]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046be:	400b      	ands	r3, r1
 80046c0:	4966      	ldr	r1, [pc, #408]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	610b      	str	r3, [r1, #16]
 80046c6:	e005      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 80046c8:	4b64      	ldr	r3, [pc, #400]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	4a63      	ldr	r2, [pc, #396]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046d2:	6113      	str	r3, [r2, #16]
 80046d4:	4b61      	ldr	r3, [pc, #388]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e2:	495e      	ldr	r1, [pc, #376]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	670b      	str	r3, [r1, #112]	; 0x70
 80046e8:	e004      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	75bb      	strb	r3, [r7, #22]
 80046ee:	e001      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d07e      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004704:	2b28      	cmp	r3, #40	; 0x28
 8004706:	d867      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	080047df 	.word	0x080047df
 8004714:	080047d9 	.word	0x080047d9
 8004718:	080047d9 	.word	0x080047d9
 800471c:	080047d9 	.word	0x080047d9
 8004720:	080047d9 	.word	0x080047d9
 8004724:	080047d9 	.word	0x080047d9
 8004728:	080047d9 	.word	0x080047d9
 800472c:	080047d9 	.word	0x080047d9
 8004730:	080047b5 	.word	0x080047b5
 8004734:	080047d9 	.word	0x080047d9
 8004738:	080047d9 	.word	0x080047d9
 800473c:	080047d9 	.word	0x080047d9
 8004740:	080047d9 	.word	0x080047d9
 8004744:	080047d9 	.word	0x080047d9
 8004748:	080047d9 	.word	0x080047d9
 800474c:	080047d9 	.word	0x080047d9
 8004750:	080047c7 	.word	0x080047c7
 8004754:	080047d9 	.word	0x080047d9
 8004758:	080047d9 	.word	0x080047d9
 800475c:	080047d9 	.word	0x080047d9
 8004760:	080047d9 	.word	0x080047d9
 8004764:	080047d9 	.word	0x080047d9
 8004768:	080047d9 	.word	0x080047d9
 800476c:	080047d9 	.word	0x080047d9
 8004770:	080047df 	.word	0x080047df
 8004774:	080047d9 	.word	0x080047d9
 8004778:	080047d9 	.word	0x080047d9
 800477c:	080047d9 	.word	0x080047d9
 8004780:	080047d9 	.word	0x080047d9
 8004784:	080047d9 	.word	0x080047d9
 8004788:	080047d9 	.word	0x080047d9
 800478c:	080047d9 	.word	0x080047d9
 8004790:	080047df 	.word	0x080047df
 8004794:	080047d9 	.word	0x080047d9
 8004798:	080047d9 	.word	0x080047d9
 800479c:	080047d9 	.word	0x080047d9
 80047a0:	080047d9 	.word	0x080047d9
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080047d9 	.word	0x080047d9
 80047ac:	080047d9 	.word	0x080047d9
 80047b0:	080047df 	.word	0x080047df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	2101      	movs	r1, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fde6 	bl	800538c <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047c4:	e00c      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3324      	adds	r3, #36	; 0x24
 80047ca:	2101      	movs	r1, #1
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fe8f 	bl	80054f0 <RCCEx_PLL3_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80047d6:	e003      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	75fb      	strb	r3, [r7, #23]
      break;
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80047de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e0:	7dfb      	ldrb	r3, [r7, #23]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047e6:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f2:	491a      	ldr	r1, [pc, #104]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	654b      	str	r3, [r1, #84]	; 0x54
 80047f8:	e001      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d03e      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	2b05      	cmp	r3, #5
 8004810:	d820      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	08004869 	.word	0x08004869
 800481c:	08004831 	.word	0x08004831
 8004820:	08004843 	.word	0x08004843
 8004824:	08004869 	.word	0x08004869
 8004828:	08004869 	.word	0x08004869
 800482c:	08004869 	.word	0x08004869
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2101      	movs	r1, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fda8 	bl	800538c <RCCEx_PLL2_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004840:	e013      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3324      	adds	r3, #36	; 0x24
 8004846:	2101      	movs	r1, #1
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fe51 	bl	80054f0 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004852:	e00a      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	e007      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800485a:	bf00      	nop
 800485c:	58024400 	.word	0x58024400
 8004860:	58024800 	.word	0x58024800
 8004864:	00ffffcf 	.word	0x00ffffcf
      break;
 8004868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004870:	4b9f      	ldr	r3, [pc, #636]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f023 0207 	bic.w	r2, r3, #7
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487c:	499c      	ldr	r1, [pc, #624]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800487e:	4313      	orrs	r3, r2
 8004880:	654b      	str	r3, [r1, #84]	; 0x54
 8004882:	e001      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d039      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800489a:	2b05      	cmp	r3, #5
 800489c:	d820      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800489e:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048e7 	.word	0x080048e7
 80048a8:	080048bd 	.word	0x080048bd
 80048ac:	080048cf 	.word	0x080048cf
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048e7 	.word	0x080048e7
 80048b8:	080048e7 	.word	0x080048e7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fd62 	bl	800538c <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048cc:	e00c      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3324      	adds	r3, #36	; 0x24
 80048d2:	2101      	movs	r1, #1
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fe0b 	bl	80054f0 <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80048de:	e003      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 80048e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ee:	4b80      	ldr	r3, [pc, #512]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f2:	f023 0207 	bic.w	r2, r3, #7
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fc:	497c      	ldr	r1, [pc, #496]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	658b      	str	r3, [r1, #88]	; 0x58
 8004902:	e001      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0320 	and.w	r3, r3, #32
 8004910:	2b00      	cmp	r3, #0
 8004912:	d04b      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800491e:	d02e      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004924:	d828      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492a:	d02a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004930:	d822      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004936:	d026      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004938:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800493c:	d81c      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800493e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004942:	d010      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004948:	d816      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d01d      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800494e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004952:	d111      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fd16 	bl	800538c <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004964:	e012      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3324      	adds	r3, #36	; 0x24
 800496a:	2102      	movs	r1, #2
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fdbf 	bl	80054f0 <RCCEx_PLL3_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004976:	e009      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	75fb      	strb	r3, [r7, #23]
      break;
 800497c:	e006      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800497e:	bf00      	nop
 8004980:	e004      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004982:	bf00      	nop
 8004984:	e002      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800498a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800498c:	7dfb      	ldrb	r3, [r7, #23]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004992:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	4953      	ldr	r1, [pc, #332]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	654b      	str	r3, [r1, #84]	; 0x54
 80049a6:	e001      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d04b      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049c2:	d02e      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80049c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049c8:	d828      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d02a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d822      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049da:	d026      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80049dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049e0:	d81c      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e6:	d010      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 80049e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ec:	d816      	bhi.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01d      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80049f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f6:	d111      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	2100      	movs	r1, #0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fcc4 	bl	800538c <RCCEx_PLL2_Config>
 8004a04:	4603      	mov	r3, r0
 8004a06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a08:	e012      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3324      	adds	r3, #36	; 0x24
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fd6d 	bl	80054f0 <RCCEx_PLL3_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004a1a:	e009      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a22:	bf00      	nop
 8004a24:	e004      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a36:	4b2e      	ldr	r3, [pc, #184]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a44:	492a      	ldr	r1, [pc, #168]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	658b      	str	r3, [r1, #88]	; 0x58
 8004a4a:	e001      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d04d      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a66:	d02e      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004a68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a6c:	d828      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a72:	d02a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a78:	d822      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a7e:	d026      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004a80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a84:	d81c      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a8a:	d010      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a90:	d816      	bhi.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d01d      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a9a:	d111      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fc72 	bl	800538c <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004aac:	e012      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3324      	adds	r3, #36	; 0x24
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f000 fd1b 	bl	80054f0 <RCCEx_PLL3_Config>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004abe:	e009      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ac4:	e006      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004ac6:	bf00      	nop
 8004ac8:	e004      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10c      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae8:	4901      	ldr	r1, [pc, #4]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	658b      	str	r3, [r1, #88]	; 0x58
 8004aee:	e003      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d018      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0c:	d10a      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3324      	adds	r3, #36	; 0x24
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fceb 	bl	80054f0 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004b24:	4b8a      	ldr	r3, [pc, #552]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b30:	4987      	ldr	r1, [pc, #540]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4c:	d10a      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3324      	adds	r3, #36	; 0x24
 8004b52:	2102      	movs	r1, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fccb 	bl	80054f0 <RCCEx_PLL3_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b64:	4b7a      	ldr	r3, [pc, #488]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	4977      	ldr	r1, [pc, #476]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d034      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b8e:	d01d      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b94:	d817      	bhi.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9e:	d009      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ba0:	e011      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fbef 	bl	800538c <RCCEx_PLL2_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004bb2:	e00c      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3324      	adds	r3, #36	; 0x24
 8004bb8:	2102      	movs	r1, #2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fc98 	bl	80054f0 <RCCEx_PLL3_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004bc4:	e003      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bca:	e000      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bd4:	4b5e      	ldr	r3, [pc, #376]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004be2:	495b      	ldr	r1, [pc, #364]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	658b      	str	r3, [r1, #88]	; 0x58
 8004be8:	e001      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d033      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c04:	d01c      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004c06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c0a:	d816      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c10:	d003      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c16:	d007      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004c18:	e00f      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c1a:	4b4d      	ldr	r3, [pc, #308]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a4c      	ldr	r2, [pc, #304]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c26:	e00c      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fc5e 	bl	80054f0 <RCCEx_PLL3_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004c38:	e003      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3e:	e000      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c48:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c56:	493e      	ldr	r1, [pc, #248]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	654b      	str	r3, [r1, #84]	; 0x54
 8004c5c:	e001      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
 8004c60:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d029      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7a:	d007      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004c7c:	e00f      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7e:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c82:	4a33      	ldr	r2, [pc, #204]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c8a:	e00b      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	2102      	movs	r1, #2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fb7a 	bl	800538c <RCCEx_PLL2_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004c9c:	e002      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004caa:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	4926      	ldr	r1, [pc, #152]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cbc:	e001      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3324      	adds	r3, #36	; 0x24
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fc0b 	bl	80054f0 <RCCEx_PLL3_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d033      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cf8:	d017      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfe:	d811      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d04:	d013      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8004d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0a:	d80b      	bhi.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d010      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8004d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d14:	d106      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d16:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004d22:	e007      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
      break;
 8004d28:	e004      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e002      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e000      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004d32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d3a:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d46:	4902      	ldr	r1, [pc, #8]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	654b      	str	r3, [r1, #84]	; 0x54
 8004d4c:	e004      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004d4e:	bf00      	nop
 8004d50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
 8004d56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d64:	4b29      	ldr	r3, [pc, #164]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d70:	4926      	ldr	r1, [pc, #152]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d82:	4b22      	ldr	r3, [pc, #136]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d8e:	491f      	ldr	r1, [pc, #124]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004da6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004daa:	6113      	str	r3, [r2, #16]
 8004dac:	4b17      	ldr	r3, [pc, #92]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004db6:	4915      	ldr	r1, [pc, #84]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	da08      	bge.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	490e      	ldr	r1, [pc, #56]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d009      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004de2:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df0:	4906      	ldr	r1, [pc, #24]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004df6:	7dbb      	ldrb	r3, [r7, #22]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	e000      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400

08004e10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e14:	f7ff f8a6 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4904      	ldr	r1, [pc, #16]	; (8004e38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	58024400 	.word	0x58024400
 8004e38:	0800ba6c 	.word	0x0800ba6c

08004e3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b089      	sub	sp, #36	; 0x24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e44:	4ba1      	ldr	r3, [pc, #644]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004e4e:	4b9f      	ldr	r3, [pc, #636]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	0b1b      	lsrs	r3, r3, #12
 8004e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e58:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e5a:	4b9c      	ldr	r3, [pc, #624]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004e66:	4b99      	ldr	r3, [pc, #612]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	08db      	lsrs	r3, r3, #3
 8004e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8111 	beq.w	80050ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	f000 8083 	beq.w	8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	f200 80a1 	bhi.w	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d056      	beq.n	8004f54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ea6:	e099      	b.n	8004fdc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ea8:	4b88      	ldr	r3, [pc, #544]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0320 	and.w	r3, r3, #32
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d02d      	beq.n	8004f10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004eb4:	4b85      	ldr	r3, [pc, #532]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	4a84      	ldr	r2, [pc, #528]	; (80050d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	ee07 3a90 	vmov	s15, r3
 8004ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b7b      	ldr	r3, [pc, #492]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f0e:	e087      	b.n	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f36:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f52:	e065      	b.n	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f66:	4b59      	ldr	r3, [pc, #356]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f96:	e043      	b.n	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b48      	ldr	r3, [pc, #288]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fda:	e021      	b.n	8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b37      	ldr	r3, [pc, #220]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800501e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005020:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	0a5b      	lsrs	r3, r3, #9
 8005026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005036:	ee37 7a87 	vadd.f32	s14, s15, s14
 800503a:	edd7 6a07 	vldr	s13, [r7, #28]
 800503e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005046:	ee17 2a90 	vmov	r2, s15
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800504e:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	0c1b      	lsrs	r3, r3, #16
 8005054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005058:	ee07 3a90 	vmov	s15, r3
 800505c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005060:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005064:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005068:	edd7 6a07 	vldr	s13, [r7, #28]
 800506c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005074:	ee17 2a90 	vmov	r2, s15
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800507c:	4b13      	ldr	r3, [pc, #76]	; (80050cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	0e1b      	lsrs	r3, r3, #24
 8005082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005092:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005096:	edd7 6a07 	vldr	s13, [r7, #28]
 800509a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800509e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050a2:	ee17 2a90 	vmov	r2, s15
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050aa:	e008      	b.n	80050be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	609a      	str	r2, [r3, #8]
}
 80050be:	bf00      	nop
 80050c0:	3724      	adds	r7, #36	; 0x24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	58024400 	.word	0x58024400
 80050d0:	03d09000 	.word	0x03d09000
 80050d4:	46000000 	.word	0x46000000
 80050d8:	4c742400 	.word	0x4c742400
 80050dc:	4a742400 	.word	0x4a742400
 80050e0:	4bbebc20 	.word	0x4bbebc20

080050e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	; 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050ec:	4ba1      	ldr	r3, [pc, #644]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80050f6:	4b9f      	ldr	r3, [pc, #636]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	0d1b      	lsrs	r3, r3, #20
 80050fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005100:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005102:	4b9c      	ldr	r3, [pc, #624]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800510e:	4b99      	ldr	r3, [pc, #612]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	08db      	lsrs	r3, r3, #3
 8005114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005126:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8111 	beq.w	8005354 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b02      	cmp	r3, #2
 8005136:	f000 8083 	beq.w	8005240 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b02      	cmp	r3, #2
 800513e:	f200 80a1 	bhi.w	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d056      	beq.n	80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800514e:	e099      	b.n	8005284 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005150:	4b88      	ldr	r3, [pc, #544]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d02d      	beq.n	80051b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800515c:	4b85      	ldr	r3, [pc, #532]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	08db      	lsrs	r3, r3, #3
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	4a84      	ldr	r2, [pc, #528]	; (8005378 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	ee07 3a90 	vmov	s15, r3
 8005174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005186:	4b7b      	ldr	r3, [pc, #492]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005196:	ed97 6a03 	vldr	s12, [r7, #12]
 800519a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800537c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800519e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80051b6:	e087      	b.n	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005380 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80051c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ca:	4b6a      	ldr	r3, [pc, #424]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051da:	ed97 6a03 	vldr	s12, [r7, #12]
 80051de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800537c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051fa:	e065      	b.n	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800520a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520e:	4b59      	ldr	r3, [pc, #356]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005222:	eddf 5a56 	vldr	s11, [pc, #344]	; 800537c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800523e:	e043      	b.n	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005388 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800524e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005252:	4b48      	ldr	r3, [pc, #288]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005262:	ed97 6a03 	vldr	s12, [r7, #12]
 8005266:	eddf 5a45 	vldr	s11, [pc, #276]	; 800537c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800526a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800527a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005282:	e021      	b.n	80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	4b37      	ldr	r3, [pc, #220]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80052aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800537c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80052c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	0a5b      	lsrs	r3, r3, #9
 80052ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ee:	ee17 2a90 	vmov	r2, s15
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80052f6:	4b1f      	ldr	r3, [pc, #124]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005300:	ee07 3a90 	vmov	s15, r3
 8005304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005308:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800530c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005310:	edd7 6a07 	vldr	s13, [r7, #28]
 8005314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800531c:	ee17 2a90 	vmov	r2, s15
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005324:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	0e1b      	lsrs	r3, r3, #24
 800532a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800533a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800533e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800534a:	ee17 2a90 	vmov	r2, s15
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005352:	e008      	b.n	8005366 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	609a      	str	r2, [r3, #8]
}
 8005366:	bf00      	nop
 8005368:	3724      	adds	r7, #36	; 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	58024400 	.word	0x58024400
 8005378:	03d09000 	.word	0x03d09000
 800537c:	46000000 	.word	0x46000000
 8005380:	4c742400 	.word	0x4c742400
 8005384:	4a742400 	.word	0x4a742400
 8005388:	4bbebc20 	.word	0x4bbebc20

0800538c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800539a:	4b53      	ldr	r3, [pc, #332]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d101      	bne.n	80053aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e099      	b.n	80054de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80053aa:	4b4f      	ldr	r3, [pc, #316]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a4e      	ldr	r2, [pc, #312]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80053b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b6:	f7fc fe3d 	bl	8002034 <HAL_GetTick>
 80053ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053bc:	e008      	b.n	80053d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053be:	f7fc fe39 	bl	8002034 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e086      	b.n	80054de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053d0:	4b45      	ldr	r3, [pc, #276]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80053dc:	4b42      	ldr	r3, [pc, #264]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	493f      	ldr	r1, [pc, #252]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	628b      	str	r3, [r1, #40]	; 0x28
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	3b01      	subs	r3, #1
 8005400:	025b      	lsls	r3, r3, #9
 8005402:	b29b      	uxth	r3, r3
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	3b01      	subs	r3, #1
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	3b01      	subs	r3, #1
 800541a:	061b      	lsls	r3, r3, #24
 800541c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005420:	4931      	ldr	r1, [pc, #196]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005422:	4313      	orrs	r3, r2
 8005424:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005426:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	492d      	ldr	r1, [pc, #180]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005434:	4313      	orrs	r3, r2
 8005436:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	f023 0220 	bic.w	r2, r3, #32
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	4928      	ldr	r1, [pc, #160]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005450:	f023 0310 	bic.w	r3, r3, #16
 8005454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <RCCEx_PLL2_Config+0x160>)
 800545c:	4013      	ands	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	69d2      	ldr	r2, [r2, #28]
 8005462:	00d2      	lsls	r2, r2, #3
 8005464:	4920      	ldr	r1, [pc, #128]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005466:	4313      	orrs	r3, r2
 8005468:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800546a:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a1e      	ldr	r2, [pc, #120]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005470:	f043 0310 	orr.w	r3, r3, #16
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800547c:	4b1a      	ldr	r3, [pc, #104]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005488:	e00f      	b.n	80054aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d106      	bne.n	800549e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005490:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005494:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 8005496:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800549a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800549c:	e005      	b.n	80054aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80054a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80054aa:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a0e      	ldr	r2, [pc, #56]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80054b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b6:	f7fc fdbd 	bl	8002034 <HAL_GetTick>
 80054ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054bc:	e008      	b.n	80054d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80054be:	f7fc fdb9 	bl	8002034 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e006      	b.n	80054de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <RCCEx_PLL2_Config+0x15c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	58024400 	.word	0x58024400
 80054ec:	ffff0007 	.word	0xffff0007

080054f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80054fe:	4b53      	ldr	r3, [pc, #332]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b03      	cmp	r3, #3
 8005508:	d101      	bne.n	800550e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e099      	b.n	8005642 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800550e:	4b4f      	ldr	r3, [pc, #316]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a4e      	ldr	r2, [pc, #312]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800551a:	f7fc fd8b 	bl	8002034 <HAL_GetTick>
 800551e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005520:	e008      	b.n	8005534 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005522:	f7fc fd87 	bl	8002034 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e086      	b.n	8005642 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005534:	4b45      	ldr	r3, [pc, #276]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005540:	4b42      	ldr	r3, [pc, #264]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	051b      	lsls	r3, r3, #20
 800554e:	493f      	ldr	r1, [pc, #252]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	628b      	str	r3, [r1, #40]	; 0x28
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	3b01      	subs	r3, #1
 800555a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	3b01      	subs	r3, #1
 8005564:	025b      	lsls	r3, r3, #9
 8005566:	b29b      	uxth	r3, r3
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	3b01      	subs	r3, #1
 8005570:	041b      	lsls	r3, r3, #16
 8005572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	3b01      	subs	r3, #1
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005584:	4931      	ldr	r1, [pc, #196]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005586:	4313      	orrs	r3, r2
 8005588:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800558a:	4b30      	ldr	r3, [pc, #192]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	492d      	ldr	r1, [pc, #180]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005598:	4313      	orrs	r3, r2
 800559a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	4928      	ldr	r1, [pc, #160]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80055ae:	4b27      	ldr	r3, [pc, #156]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	4a26      	ldr	r2, [pc, #152]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80055ba:	4b24      	ldr	r3, [pc, #144]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055be:	4b24      	ldr	r3, [pc, #144]	; (8005650 <RCCEx_PLL3_Config+0x160>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	69d2      	ldr	r2, [r2, #28]
 80055c6:	00d2      	lsls	r2, r2, #3
 80055c8:	4920      	ldr	r1, [pc, #128]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	4a1e      	ldr	r2, [pc, #120]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80055ec:	e00f      	b.n	800560e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d106      	bne.n	8005602 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80055f4:	4b15      	ldr	r3, [pc, #84]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	4a14      	ldr	r2, [pc, #80]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 80055fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005600:	e005      	b.n	800560e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	4a11      	ldr	r2, [pc, #68]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005608:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800560c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a0e      	ldr	r2, [pc, #56]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561a:	f7fc fd0b 	bl	8002034 <HAL_GetTick>
 800561e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005620:	e008      	b.n	8005634 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005622:	f7fc fd07 	bl	8002034 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e006      	b.n	8005642 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005634:	4b05      	ldr	r3, [pc, #20]	; (800564c <RCCEx_PLL3_Config+0x15c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f0      	beq.n	8005622 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	58024400 	.word	0x58024400
 8005650:	ffff0007 	.word	0xffff0007

08005654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e049      	b.n	80056fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d106      	bne.n	8005680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc f97e 	bl	800197c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3304      	adds	r3, #4
 8005690:	4619      	mov	r1, r3
 8005692:	4610      	mov	r0, r2
 8005694:	f000 fa66 	bl	8005b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_TIM_PWM_Start+0x24>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b01      	cmp	r3, #1
 800571e:	bf14      	ite	ne
 8005720:	2301      	movne	r3, #1
 8005722:	2300      	moveq	r3, #0
 8005724:	b2db      	uxtb	r3, r3
 8005726:	e03c      	b.n	80057a2 <HAL_TIM_PWM_Start+0x9e>
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b04      	cmp	r3, #4
 800572c:	d109      	bne.n	8005742 <HAL_TIM_PWM_Start+0x3e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	bf14      	ite	ne
 800573a:	2301      	movne	r3, #1
 800573c:	2300      	moveq	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	e02f      	b.n	80057a2 <HAL_TIM_PWM_Start+0x9e>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b08      	cmp	r3, #8
 8005746:	d109      	bne.n	800575c <HAL_TIM_PWM_Start+0x58>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e022      	b.n	80057a2 <HAL_TIM_PWM_Start+0x9e>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b0c      	cmp	r3, #12
 8005760:	d109      	bne.n	8005776 <HAL_TIM_PWM_Start+0x72>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	e015      	b.n	80057a2 <HAL_TIM_PWM_Start+0x9e>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b10      	cmp	r3, #16
 800577a:	d109      	bne.n	8005790 <HAL_TIM_PWM_Start+0x8c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e008      	b.n	80057a2 <HAL_TIM_PWM_Start+0x9e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	bf14      	ite	ne
 800579c:	2301      	movne	r3, #1
 800579e:	2300      	moveq	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e0ab      	b.n	8005902 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_PWM_Start+0xb6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b8:	e023      	b.n	8005802 <HAL_TIM_PWM_Start+0xfe>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d104      	bne.n	80057ca <HAL_TIM_PWM_Start+0xc6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c8:	e01b      	b.n	8005802 <HAL_TIM_PWM_Start+0xfe>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d104      	bne.n	80057da <HAL_TIM_PWM_Start+0xd6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	e013      	b.n	8005802 <HAL_TIM_PWM_Start+0xfe>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d104      	bne.n	80057ea <HAL_TIM_PWM_Start+0xe6>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e8:	e00b      	b.n	8005802 <HAL_TIM_PWM_Start+0xfe>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b10      	cmp	r3, #16
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_PWM_Start+0xf6>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f8:	e003      	b.n	8005802 <HAL_TIM_PWM_Start+0xfe>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2201      	movs	r2, #1
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fd26 	bl	800625c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3d      	ldr	r2, [pc, #244]	; (800590c <HAL_TIM_PWM_Start+0x208>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <HAL_TIM_PWM_Start+0x13e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <HAL_TIM_PWM_Start+0x20c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00e      	beq.n	8005842 <HAL_TIM_PWM_Start+0x13e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a3a      	ldr	r2, [pc, #232]	; (8005914 <HAL_TIM_PWM_Start+0x210>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_TIM_PWM_Start+0x13e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a39      	ldr	r2, [pc, #228]	; (8005918 <HAL_TIM_PWM_Start+0x214>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d004      	beq.n	8005842 <HAL_TIM_PWM_Start+0x13e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a37      	ldr	r2, [pc, #220]	; (800591c <HAL_TIM_PWM_Start+0x218>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_TIM_PWM_Start+0x142>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_TIM_PWM_Start+0x144>
 8005846:	2300      	movs	r3, #0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800585a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a2a      	ldr	r2, [pc, #168]	; (800590c <HAL_TIM_PWM_Start+0x208>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d02c      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d027      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <HAL_TIM_PWM_Start+0x21c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d022      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a29      	ldr	r2, [pc, #164]	; (8005924 <HAL_TIM_PWM_Start+0x220>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d01d      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a27      	ldr	r2, [pc, #156]	; (8005928 <HAL_TIM_PWM_Start+0x224>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d018      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <HAL_TIM_PWM_Start+0x20c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a23      	ldr	r2, [pc, #140]	; (800592c <HAL_TIM_PWM_Start+0x228>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00e      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_TIM_PWM_Start+0x210>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d009      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <HAL_TIM_PWM_Start+0x22c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d004      	beq.n	80058c0 <HAL_TIM_PWM_Start+0x1bc>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_TIM_PWM_Start+0x230>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d115      	bne.n	80058ec <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689a      	ldr	r2, [r3, #8]
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <HAL_TIM_PWM_Start+0x234>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d015      	beq.n	80058fe <HAL_TIM_PWM_Start+0x1fa>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d8:	d011      	beq.n	80058fe <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	e008      	b.n	80058fe <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	e000      	b.n	8005900 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40001800 	.word	0x40001800
 8005930:	4000e000 	.word	0x4000e000
 8005934:	4000e400 	.word	0x4000e400
 8005938:	00010007 	.word	0x00010007

0800593c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005956:	2302      	movs	r3, #2
 8005958:	e0ff      	b.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b14      	cmp	r3, #20
 8005966:	f200 80f0 	bhi.w	8005b4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800596a:	a201      	add	r2, pc, #4	; (adr r2, 8005970 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005970:	080059c5 	.word	0x080059c5
 8005974:	08005b4b 	.word	0x08005b4b
 8005978:	08005b4b 	.word	0x08005b4b
 800597c:	08005b4b 	.word	0x08005b4b
 8005980:	08005a05 	.word	0x08005a05
 8005984:	08005b4b 	.word	0x08005b4b
 8005988:	08005b4b 	.word	0x08005b4b
 800598c:	08005b4b 	.word	0x08005b4b
 8005990:	08005a47 	.word	0x08005a47
 8005994:	08005b4b 	.word	0x08005b4b
 8005998:	08005b4b 	.word	0x08005b4b
 800599c:	08005b4b 	.word	0x08005b4b
 80059a0:	08005a87 	.word	0x08005a87
 80059a4:	08005b4b 	.word	0x08005b4b
 80059a8:	08005b4b 	.word	0x08005b4b
 80059ac:	08005b4b 	.word	0x08005b4b
 80059b0:	08005ac9 	.word	0x08005ac9
 80059b4:	08005b4b 	.word	0x08005b4b
 80059b8:	08005b4b 	.word	0x08005b4b
 80059bc:	08005b4b 	.word	0x08005b4b
 80059c0:	08005b09 	.word	0x08005b09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f970 	bl	8005cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0208 	orr.w	r2, r2, #8
 80059de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0204 	bic.w	r2, r2, #4
 80059ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6999      	ldr	r1, [r3, #24]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	619a      	str	r2, [r3, #24]
      break;
 8005a02:	e0a5      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f9e0 	bl	8005dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6999      	ldr	r1, [r3, #24]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	619a      	str	r2, [r3, #24]
      break;
 8005a44:	e084      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fa49 	bl	8005ee4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f042 0208 	orr.w	r2, r2, #8
 8005a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0204 	bic.w	r2, r2, #4
 8005a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69d9      	ldr	r1, [r3, #28]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691a      	ldr	r2, [r3, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	61da      	str	r2, [r3, #28]
      break;
 8005a84:	e064      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fab1 	bl	8005ff4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69d9      	ldr	r1, [r3, #28]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	021a      	lsls	r2, r3, #8
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	61da      	str	r2, [r3, #28]
      break;
 8005ac6:	e043      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fafa 	bl	80060c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0208 	orr.w	r2, r2, #8
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0204 	bic.w	r2, r2, #4
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b06:	e023      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fb3e 	bl	8006190 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	021a      	lsls	r2, r3, #8
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b48:	e002      	b.n	8005b50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop

08005b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a44      	ldr	r2, [pc, #272]	; (8005c88 <TIM_Base_SetConfig+0x124>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b82:	d00f      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <TIM_Base_SetConfig+0x128>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a40      	ldr	r2, [pc, #256]	; (8005c90 <TIM_Base_SetConfig+0x12c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3f      	ldr	r2, [pc, #252]	; (8005c94 <TIM_Base_SetConfig+0x130>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a3e      	ldr	r2, [pc, #248]	; (8005c98 <TIM_Base_SetConfig+0x134>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d108      	bne.n	8005bb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a33      	ldr	r2, [pc, #204]	; (8005c88 <TIM_Base_SetConfig+0x124>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d027      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d023      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a30      	ldr	r2, [pc, #192]	; (8005c8c <TIM_Base_SetConfig+0x128>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01f      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2f      	ldr	r2, [pc, #188]	; (8005c90 <TIM_Base_SetConfig+0x12c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01b      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a2e      	ldr	r2, [pc, #184]	; (8005c94 <TIM_Base_SetConfig+0x130>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d017      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2d      	ldr	r2, [pc, #180]	; (8005c98 <TIM_Base_SetConfig+0x134>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a2c      	ldr	r2, [pc, #176]	; (8005c9c <TIM_Base_SetConfig+0x138>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <TIM_Base_SetConfig+0x13c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <TIM_Base_SetConfig+0x140>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <TIM_Base_SetConfig+0x144>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0xaa>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a28      	ldr	r2, [pc, #160]	; (8005cac <TIM_Base_SetConfig+0x148>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a10      	ldr	r2, [pc, #64]	; (8005c88 <TIM_Base_SetConfig+0x124>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00f      	beq.n	8005c6c <TIM_Base_SetConfig+0x108>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a12      	ldr	r2, [pc, #72]	; (8005c98 <TIM_Base_SetConfig+0x134>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_Base_SetConfig+0x108>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a11      	ldr	r2, [pc, #68]	; (8005c9c <TIM_Base_SetConfig+0x138>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d007      	beq.n	8005c6c <TIM_Base_SetConfig+0x108>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <TIM_Base_SetConfig+0x13c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0x108>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a0f      	ldr	r2, [pc, #60]	; (8005ca4 <TIM_Base_SetConfig+0x140>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40000400 	.word	0x40000400
 8005c90:	40000800 	.word	0x40000800
 8005c94:	40000c00 	.word	0x40000c00
 8005c98:	40010400 	.word	0x40010400
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40014400 	.word	0x40014400
 8005ca4:	40014800 	.word	0x40014800
 8005ca8:	4000e000 	.word	0x4000e000
 8005cac:	4000e400 	.word	0x4000e400

08005cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <TIM_OC1_SetConfig+0x108>)
 8005cdc:	4013      	ands	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 0302 	bic.w	r3, r3, #2
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2d      	ldr	r2, [pc, #180]	; (8005dbc <TIM_OC1_SetConfig+0x10c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00f      	beq.n	8005d2c <TIM_OC1_SetConfig+0x7c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2c      	ldr	r2, [pc, #176]	; (8005dc0 <TIM_OC1_SetConfig+0x110>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00b      	beq.n	8005d2c <TIM_OC1_SetConfig+0x7c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a2b      	ldr	r2, [pc, #172]	; (8005dc4 <TIM_OC1_SetConfig+0x114>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_OC1_SetConfig+0x7c>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a2a      	ldr	r2, [pc, #168]	; (8005dc8 <TIM_OC1_SetConfig+0x118>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC1_SetConfig+0x7c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <TIM_OC1_SetConfig+0x11c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10c      	bne.n	8005d46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0308 	bic.w	r3, r3, #8
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1c      	ldr	r2, [pc, #112]	; (8005dbc <TIM_OC1_SetConfig+0x10c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_OC1_SetConfig+0xbe>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <TIM_OC1_SetConfig+0x110>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_OC1_SetConfig+0xbe>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a1a      	ldr	r2, [pc, #104]	; (8005dc4 <TIM_OC1_SetConfig+0x114>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_OC1_SetConfig+0xbe>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a19      	ldr	r2, [pc, #100]	; (8005dc8 <TIM_OC1_SetConfig+0x118>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_OC1_SetConfig+0xbe>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a18      	ldr	r2, [pc, #96]	; (8005dcc <TIM_OC1_SetConfig+0x11c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d111      	bne.n	8005d92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	fffeff8f 	.word	0xfffeff8f
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40014400 	.word	0x40014400
 8005dcc:	40014800 	.word	0x40014800

08005dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f023 0210 	bic.w	r2, r3, #16
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4b34      	ldr	r3, [pc, #208]	; (8005ecc <TIM_OC2_SetConfig+0xfc>)
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f023 0320 	bic.w	r3, r3, #32
 8005e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a29      	ldr	r2, [pc, #164]	; (8005ed0 <TIM_OC2_SetConfig+0x100>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC2_SetConfig+0x68>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a28      	ldr	r2, [pc, #160]	; (8005ed4 <TIM_OC2_SetConfig+0x104>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10d      	bne.n	8005e54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1e      	ldr	r2, [pc, #120]	; (8005ed0 <TIM_OC2_SetConfig+0x100>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00f      	beq.n	8005e7c <TIM_OC2_SetConfig+0xac>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <TIM_OC2_SetConfig+0x104>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <TIM_OC2_SetConfig+0xac>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <TIM_OC2_SetConfig+0x108>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_OC2_SetConfig+0xac>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1b      	ldr	r2, [pc, #108]	; (8005edc <TIM_OC2_SetConfig+0x10c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC2_SetConfig+0xac>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <TIM_OC2_SetConfig+0x110>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d113      	bne.n	8005ea4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	feff8fff 	.word	0xfeff8fff
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40010400 	.word	0x40010400
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800

08005ee4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <TIM_OC3_SetConfig+0xf8>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a28      	ldr	r2, [pc, #160]	; (8005fe0 <TIM_OC3_SetConfig+0xfc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_OC3_SetConfig+0x66>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a27      	ldr	r2, [pc, #156]	; (8005fe4 <TIM_OC3_SetConfig+0x100>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10d      	bne.n	8005f66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <TIM_OC3_SetConfig+0xfc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_OC3_SetConfig+0xaa>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1c      	ldr	r2, [pc, #112]	; (8005fe4 <TIM_OC3_SetConfig+0x100>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_OC3_SetConfig+0xaa>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <TIM_OC3_SetConfig+0x104>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_OC3_SetConfig+0xaa>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <TIM_OC3_SetConfig+0x108>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC3_SetConfig+0xaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <TIM_OC3_SetConfig+0x10c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d113      	bne.n	8005fb6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	fffeff8f 	.word	0xfffeff8f
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40010400 	.word	0x40010400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40014400 	.word	0x40014400
 8005ff0:	40014800 	.word	0x40014800

08005ff4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <TIM_OC4_SetConfig+0xbc>)
 8006020:	4013      	ands	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800603e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	031b      	lsls	r3, r3, #12
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <TIM_OC4_SetConfig+0xc0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00f      	beq.n	8006074 <TIM_OC4_SetConfig+0x80>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a18      	ldr	r2, [pc, #96]	; (80060b8 <TIM_OC4_SetConfig+0xc4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_OC4_SetConfig+0x80>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a17      	ldr	r2, [pc, #92]	; (80060bc <TIM_OC4_SetConfig+0xc8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_OC4_SetConfig+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <TIM_OC4_SetConfig+0xcc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC4_SetConfig+0x80>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <TIM_OC4_SetConfig+0xd0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d109      	bne.n	8006088 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800607a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	019b      	lsls	r3, r3, #6
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	feff8fff 	.word	0xfeff8fff
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40010400 	.word	0x40010400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	40014400 	.word	0x40014400
 80060c4:	40014800 	.word	0x40014800

080060c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4b21      	ldr	r3, [pc, #132]	; (8006178 <TIM_OC5_SetConfig+0xb0>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006108:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a18      	ldr	r2, [pc, #96]	; (800617c <TIM_OC5_SetConfig+0xb4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00f      	beq.n	800613e <TIM_OC5_SetConfig+0x76>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a17      	ldr	r2, [pc, #92]	; (8006180 <TIM_OC5_SetConfig+0xb8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_OC5_SetConfig+0x76>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a16      	ldr	r2, [pc, #88]	; (8006184 <TIM_OC5_SetConfig+0xbc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_OC5_SetConfig+0x76>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <TIM_OC5_SetConfig+0xc0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_OC5_SetConfig+0x76>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <TIM_OC5_SetConfig+0xc4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d109      	bne.n	8006152 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006144:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	fffeff8f 	.word	0xfffeff8f
 800617c:	40010000 	.word	0x40010000
 8006180:	40010400 	.word	0x40010400
 8006184:	40014000 	.word	0x40014000
 8006188:	40014400 	.word	0x40014400
 800618c:	40014800 	.word	0x40014800

08006190 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4b22      	ldr	r3, [pc, #136]	; (8006244 <TIM_OC6_SetConfig+0xb4>)
 80061bc:	4013      	ands	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	051b      	lsls	r3, r3, #20
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a19      	ldr	r2, [pc, #100]	; (8006248 <TIM_OC6_SetConfig+0xb8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00f      	beq.n	8006208 <TIM_OC6_SetConfig+0x78>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a18      	ldr	r2, [pc, #96]	; (800624c <TIM_OC6_SetConfig+0xbc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00b      	beq.n	8006208 <TIM_OC6_SetConfig+0x78>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a17      	ldr	r2, [pc, #92]	; (8006250 <TIM_OC6_SetConfig+0xc0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_OC6_SetConfig+0x78>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a16      	ldr	r2, [pc, #88]	; (8006254 <TIM_OC6_SetConfig+0xc4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC6_SetConfig+0x78>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a15      	ldr	r2, [pc, #84]	; (8006258 <TIM_OC6_SetConfig+0xc8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d109      	bne.n	800621c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	feff8fff 	.word	0xfeff8fff
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400
 8006250:	40014000 	.word	0x40014000
 8006254:	40014400 	.word	0x40014400
 8006258:	40014800 	.word	0x40014800

0800625c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	2201      	movs	r2, #1
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1a      	ldr	r2, [r3, #32]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	43db      	mvns	r3, r3
 800627e:	401a      	ands	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	431a      	orrs	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062bc:	2302      	movs	r3, #2
 80062be:	e077      	b.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a35      	ldr	r2, [pc, #212]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a34      	ldr	r2, [pc, #208]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d108      	bne.n	8006306 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a25      	ldr	r2, [pc, #148]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d02c      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006332:	d027      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d022      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a21      	ldr	r2, [pc, #132]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d01d      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d018      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00e      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d009      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d004      	beq.n	8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d10c      	bne.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800638a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	4313      	orrs	r3, r2
 8006394:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40001800 	.word	0x40001800
 80063d4:	40014000 	.word	0x40014000
 80063d8:	4000e000 	.word	0x4000e000
 80063dc:	4000e400 	.word	0x4000e400

080063e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e042      	b.n	8006478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d106      	bne.n	800640a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7fb fb11 	bl	8001a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2224      	movs	r2, #36	; 0x24
 800640e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0201 	bic.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fcd6 	bl	8006dd4 <UART_SetConfig>
 8006428:	4603      	mov	r3, r0
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e022      	b.n	8006478 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f001 fb36 	bl	8007aac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800644e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800645e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fbbd 	bl	8007bf0 <UART_CheckIdleState>
 8006476:	4603      	mov	r3, r0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	; 0x28
 8006484:	af02      	add	r7, sp, #8
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	4613      	mov	r3, r2
 800648e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006496:	2b20      	cmp	r3, #32
 8006498:	f040 8083 	bne.w	80065a2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <HAL_UART_Transmit+0x28>
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e07b      	b.n	80065a4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_UART_Transmit+0x3a>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e074      	b.n	80065a4 <HAL_UART_Transmit+0x124>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2221      	movs	r2, #33	; 0x21
 80064ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064d2:	f7fb fdaf 	bl	8002034 <HAL_GetTick>
 80064d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064f0:	d108      	bne.n	8006504 <HAL_UART_Transmit+0x84>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d104      	bne.n	8006504 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	e003      	b.n	800650c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006508:	2300      	movs	r3, #0
 800650a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006514:	e02c      	b.n	8006570 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	9300      	str	r3, [sp, #0]
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2200      	movs	r2, #0
 800651e:	2180      	movs	r1, #128	; 0x80
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f001 fbb0 	bl	8007c86 <UART_WaitOnFlagUntilTimeout>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e039      	b.n	80065a4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10b      	bne.n	800654e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006544:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	3302      	adds	r3, #2
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	e007      	b.n	800655e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	781a      	ldrb	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	3301      	adds	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006564:	b29b      	uxth	r3, r3
 8006566:	3b01      	subs	r3, #1
 8006568:	b29a      	uxth	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1cc      	bne.n	8006516 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2200      	movs	r2, #0
 8006584:	2140      	movs	r1, #64	; 0x40
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f001 fb7d 	bl	8007c86 <UART_WaitOnFlagUntilTimeout>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e006      	b.n	80065a4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	e000      	b.n	80065a4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80065a2:	2302      	movs	r3, #2
  }
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3720      	adds	r7, #32
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	; 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	d142      	bne.n	800664a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <HAL_UART_Receive_IT+0x24>
 80065ca:	88fb      	ldrh	r3, [r7, #6]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e03b      	b.n	800664c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d101      	bne.n	80065e2 <HAL_UART_Receive_IT+0x36>
 80065de:	2302      	movs	r3, #2
 80065e0:	e034      	b.n	800664c <HAL_UART_Receive_IT+0xa0>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a17      	ldr	r2, [pc, #92]	; (8006654 <HAL_UART_Receive_IT+0xa8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d01f      	beq.n	800663a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d018      	beq.n	800663a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	613b      	str	r3, [r7, #16]
   return(result);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	623b      	str	r3, [r7, #32]
 8006628:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	69f9      	ldr	r1, [r7, #28]
 800662c:	6a3a      	ldr	r2, [r7, #32]
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	61bb      	str	r3, [r7, #24]
   return(result);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e6      	bne.n	8006608 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	461a      	mov	r2, r3
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f001 fbe9 	bl	8007e18 <UART_Start_Receive_IT>
 8006646:	4603      	mov	r3, r0
 8006648:	e000      	b.n	800664c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800664a:	2302      	movs	r3, #2
  }
}
 800664c:	4618      	mov	r0, r3
 800664e:	3728      	adds	r7, #40	; 0x28
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	58000c00 	.word	0x58000c00

08006658 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b0ba      	sub	sp, #232	; 0xe8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800667e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006682:	f640 030f 	movw	r3, #2063	; 0x80f
 8006686:	4013      	ands	r3, r2
 8006688:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800668c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d11b      	bne.n	80066cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a4:	f003 0320 	and.w	r3, r3, #32
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d009      	beq.n	80066cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 835a 	beq.w	8006d76 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
      }
      return;
 80066ca:	e354      	b.n	8006d76 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80066cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 811f 	beq.w	8006914 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80066da:	4b8b      	ldr	r3, [pc, #556]	; (8006908 <HAL_UART_IRQHandler+0x2b0>)
 80066dc:	4013      	ands	r3, r2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80066e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80066e6:	4b89      	ldr	r3, [pc, #548]	; (800690c <HAL_UART_IRQHandler+0x2b4>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 8112 	beq.w	8006914 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d011      	beq.n	8006720 <HAL_UART_IRQHandler+0xc8>
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2201      	movs	r2, #1
 800670e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006716:	f043 0201 	orr.w	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006724:	f003 0302 	and.w	r3, r3, #2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d011      	beq.n	8006750 <HAL_UART_IRQHandler+0xf8>
 800672c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00b      	beq.n	8006750 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2202      	movs	r2, #2
 800673e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006746:	f043 0204 	orr.w	r2, r3, #4
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b00      	cmp	r3, #0
 800675a:	d011      	beq.n	8006780 <HAL_UART_IRQHandler+0x128>
 800675c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00b      	beq.n	8006780 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2204      	movs	r2, #4
 800676e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006776:	f043 0202 	orr.w	r2, r3, #2
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d017      	beq.n	80067bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006798:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800679c:	4b5a      	ldr	r3, [pc, #360]	; (8006908 <HAL_UART_IRQHandler+0x2b0>)
 800679e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2208      	movs	r2, #8
 80067aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b2:	f043 0208 	orr.w	r2, r3, #8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d012      	beq.n	80067ee <HAL_UART_IRQHandler+0x196>
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00c      	beq.n	80067ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067e4:	f043 0220 	orr.w	r2, r3, #32
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 82c0 	beq.w	8006d7a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d013      	beq.n	800682e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006834:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006842:	2b40      	cmp	r3, #64	; 0x40
 8006844:	d005      	beq.n	8006852 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800684e:	2b00      	cmp	r3, #0
 8006850:	d04f      	beq.n	80068f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fc0a 	bl	800806c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d141      	bne.n	80068ea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	3308      	adds	r3, #8
 800686c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800687c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3308      	adds	r3, #8
 800688e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006892:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006896:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800689e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1d9      	bne.n	8006866 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d013      	beq.n	80068e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068be:	4a14      	ldr	r2, [pc, #80]	; (8006910 <HAL_UART_IRQHandler+0x2b8>)
 80068c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fc f812 	bl	80028f0 <HAL_DMA_Abort_IT>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d017      	beq.n	8006902 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80068dc:	4610      	mov	r0, r2
 80068de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e0:	e00f      	b.n	8006902 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa60 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	e00b      	b.n	8006902 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fa5c 	bl	8006da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f0:	e007      	b.n	8006902 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa58 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006900:	e23b      	b.n	8006d7a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006902:	bf00      	nop
    return;
 8006904:	e239      	b.n	8006d7a <HAL_UART_IRQHandler+0x722>
 8006906:	bf00      	nop
 8006908:	10000001 	.word	0x10000001
 800690c:	04000120 	.word	0x04000120
 8006910:	08008139 	.word	0x08008139

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006918:	2b01      	cmp	r3, #1
 800691a:	f040 81ce 	bne.w	8006cba <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 81c7 	beq.w	8006cba <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b00      	cmp	r3, #0
 8006936:	f000 81c0 	beq.w	8006cba <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2210      	movs	r2, #16
 8006940:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	f040 813b 	bne.w	8006bc8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a8b      	ldr	r2, [pc, #556]	; (8006b88 <HAL_UART_IRQHandler+0x530>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d059      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a89      	ldr	r2, [pc, #548]	; (8006b8c <HAL_UART_IRQHandler+0x534>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d053      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a87      	ldr	r2, [pc, #540]	; (8006b90 <HAL_UART_IRQHandler+0x538>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d04d      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a85      	ldr	r2, [pc, #532]	; (8006b94 <HAL_UART_IRQHandler+0x53c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d047      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a83      	ldr	r2, [pc, #524]	; (8006b98 <HAL_UART_IRQHandler+0x540>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d041      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a81      	ldr	r2, [pc, #516]	; (8006b9c <HAL_UART_IRQHandler+0x544>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d03b      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a7f      	ldr	r2, [pc, #508]	; (8006ba0 <HAL_UART_IRQHandler+0x548>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d035      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a7d      	ldr	r2, [pc, #500]	; (8006ba4 <HAL_UART_IRQHandler+0x54c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d02f      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a7b      	ldr	r2, [pc, #492]	; (8006ba8 <HAL_UART_IRQHandler+0x550>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d029      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a79      	ldr	r2, [pc, #484]	; (8006bac <HAL_UART_IRQHandler+0x554>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d023      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a77      	ldr	r2, [pc, #476]	; (8006bb0 <HAL_UART_IRQHandler+0x558>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d01d      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a75      	ldr	r2, [pc, #468]	; (8006bb4 <HAL_UART_IRQHandler+0x55c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d017      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a73      	ldr	r2, [pc, #460]	; (8006bb8 <HAL_UART_IRQHandler+0x560>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d011      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a71      	ldr	r2, [pc, #452]	; (8006bbc <HAL_UART_IRQHandler+0x564>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00b      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a6f      	ldr	r2, [pc, #444]	; (8006bc0 <HAL_UART_IRQHandler+0x568>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d005      	beq.n	8006a12 <HAL_UART_IRQHandler+0x3ba>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a6d      	ldr	r2, [pc, #436]	; (8006bc4 <HAL_UART_IRQHandler+0x56c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d105      	bne.n	8006a1e <HAL_UART_IRQHandler+0x3c6>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	e004      	b.n	8006a28 <HAL_UART_IRQHandler+0x3d0>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 81a4 	beq.w	8006d7e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a40:	429a      	cmp	r2, r3
 8006a42:	f080 819c 	bcs.w	8006d7e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a5a:	f000 8086 	beq.w	8006b6a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a6a:	e853 3f00 	ldrex	r3, [r3]
 8006a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a8c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1da      	bne.n	8006a5e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3308      	adds	r3, #8
 8006aae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aba:	f023 0301 	bic.w	r3, r3, #1
 8006abe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006acc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ad4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e1      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b08:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b0e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e3      	bne.n	8006ae4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b3a:	f023 0310 	bic.w	r3, r3, #16
 8006b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b54:	e841 2300 	strex	r3, r2, [r1]
 8006b58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1e4      	bne.n	8006b2a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fb fba5 	bl	80022b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f91c 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b84:	e0fb      	b.n	8006d7e <HAL_UART_IRQHandler+0x726>
 8006b86:	bf00      	nop
 8006b88:	40020010 	.word	0x40020010
 8006b8c:	40020028 	.word	0x40020028
 8006b90:	40020040 	.word	0x40020040
 8006b94:	40020058 	.word	0x40020058
 8006b98:	40020070 	.word	0x40020070
 8006b9c:	40020088 	.word	0x40020088
 8006ba0:	400200a0 	.word	0x400200a0
 8006ba4:	400200b8 	.word	0x400200b8
 8006ba8:	40020410 	.word	0x40020410
 8006bac:	40020428 	.word	0x40020428
 8006bb0:	40020440 	.word	0x40020440
 8006bb4:	40020458 	.word	0x40020458
 8006bb8:	40020470 	.word	0x40020470
 8006bbc:	40020488 	.word	0x40020488
 8006bc0:	400204a0 	.word	0x400204a0
 8006bc4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80cc 	beq.w	8006d82 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8006bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 80c7 	beq.w	8006d82 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c16:	647b      	str	r3, [r7, #68]	; 0x44
 8006c18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e4      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	623b      	str	r3, [r7, #32]
   return(result);
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	4b54      	ldr	r3, [pc, #336]	; (8006d90 <HAL_UART_IRQHandler+0x738>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e3      	bne.n	8006c2a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0310 	bic.w	r3, r3, #16
 8006c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	69b9      	ldr	r1, [r7, #24]
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e4      	bne.n	8006c76 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f882 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cb8:	e063      	b.n	8006d82 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x68c>
 8006cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d008      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 fec9 	bl	8008a74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ce2:	e051      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d014      	beq.n	8006d1a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d105      	bne.n	8006d08 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d008      	beq.n	8006d1a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d03a      	beq.n	8006d86 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4798      	blx	r3
    }
    return;
 8006d18:	e035      	b.n	8006d86 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d009      	beq.n	8006d3a <HAL_UART_IRQHandler+0x6e2>
 8006d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fa16 	bl	8008164 <UART_EndTransmit_IT>
    return;
 8006d38:	e026      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <HAL_UART_IRQHandler+0x702>
 8006d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fea2 	bl	8008a9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d58:	e016      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d010      	beq.n	8006d88 <HAL_UART_IRQHandler+0x730>
 8006d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da0c      	bge.n	8006d88 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f001 fe8a 	bl	8008a88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d74:	e008      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
      return;
 8006d76:	bf00      	nop
 8006d78:	e006      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
    return;
 8006d7a:	bf00      	nop
 8006d7c:	e004      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
      return;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
      return;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <HAL_UART_IRQHandler+0x730>
    return;
 8006d86:	bf00      	nop
  }
}
 8006d88:	37e8      	adds	r7, #232	; 0xe8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	effffffe 	.word	0xeffffffe

08006d94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd8:	b092      	sub	sp, #72	; 0x48
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	431a      	orrs	r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4bbe      	ldr	r3, [pc, #760]	; (80070fc <UART_SetConfig+0x328>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4ab3      	ldr	r2, [pc, #716]	; (8007100 <UART_SetConfig+0x32c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d004      	beq.n	8006e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	4baf      	ldr	r3, [pc, #700]	; (8007104 <UART_SetConfig+0x330>)
 8006e48:	4013      	ands	r3, r2
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e50:	430b      	orrs	r3, r1
 8006e52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	f023 010f 	bic.w	r1, r3, #15
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4aa6      	ldr	r2, [pc, #664]	; (8007108 <UART_SetConfig+0x334>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d177      	bne.n	8006f64 <UART_SetConfig+0x190>
 8006e74:	4ba5      	ldr	r3, [pc, #660]	; (800710c <UART_SetConfig+0x338>)
 8006e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e7c:	2b28      	cmp	r3, #40	; 0x28
 8006e7e:	d86d      	bhi.n	8006f5c <UART_SetConfig+0x188>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0xb4>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006f2d 	.word	0x08006f2d
 8006e8c:	08006f5d 	.word	0x08006f5d
 8006e90:	08006f5d 	.word	0x08006f5d
 8006e94:	08006f5d 	.word	0x08006f5d
 8006e98:	08006f5d 	.word	0x08006f5d
 8006e9c:	08006f5d 	.word	0x08006f5d
 8006ea0:	08006f5d 	.word	0x08006f5d
 8006ea4:	08006f5d 	.word	0x08006f5d
 8006ea8:	08006f35 	.word	0x08006f35
 8006eac:	08006f5d 	.word	0x08006f5d
 8006eb0:	08006f5d 	.word	0x08006f5d
 8006eb4:	08006f5d 	.word	0x08006f5d
 8006eb8:	08006f5d 	.word	0x08006f5d
 8006ebc:	08006f5d 	.word	0x08006f5d
 8006ec0:	08006f5d 	.word	0x08006f5d
 8006ec4:	08006f5d 	.word	0x08006f5d
 8006ec8:	08006f3d 	.word	0x08006f3d
 8006ecc:	08006f5d 	.word	0x08006f5d
 8006ed0:	08006f5d 	.word	0x08006f5d
 8006ed4:	08006f5d 	.word	0x08006f5d
 8006ed8:	08006f5d 	.word	0x08006f5d
 8006edc:	08006f5d 	.word	0x08006f5d
 8006ee0:	08006f5d 	.word	0x08006f5d
 8006ee4:	08006f5d 	.word	0x08006f5d
 8006ee8:	08006f45 	.word	0x08006f45
 8006eec:	08006f5d 	.word	0x08006f5d
 8006ef0:	08006f5d 	.word	0x08006f5d
 8006ef4:	08006f5d 	.word	0x08006f5d
 8006ef8:	08006f5d 	.word	0x08006f5d
 8006efc:	08006f5d 	.word	0x08006f5d
 8006f00:	08006f5d 	.word	0x08006f5d
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f4d 	.word	0x08006f4d
 8006f0c:	08006f5d 	.word	0x08006f5d
 8006f10:	08006f5d 	.word	0x08006f5d
 8006f14:	08006f5d 	.word	0x08006f5d
 8006f18:	08006f5d 	.word	0x08006f5d
 8006f1c:	08006f5d 	.word	0x08006f5d
 8006f20:	08006f5d 	.word	0x08006f5d
 8006f24:	08006f5d 	.word	0x08006f5d
 8006f28:	08006f55 	.word	0x08006f55
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f32:	e326      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006f34:	2304      	movs	r3, #4
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e322      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006f3c:	2308      	movs	r3, #8
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e31e      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006f44:	2310      	movs	r3, #16
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e31a      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e316      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e312      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006f5c:	2380      	movs	r3, #128	; 0x80
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e30e      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a69      	ldr	r2, [pc, #420]	; (8007110 <UART_SetConfig+0x33c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d130      	bne.n	8006fd0 <UART_SetConfig+0x1fc>
 8006f6e:	4b67      	ldr	r3, [pc, #412]	; (800710c <UART_SetConfig+0x338>)
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	2b05      	cmp	r3, #5
 8006f78:	d826      	bhi.n	8006fc8 <UART_SetConfig+0x1f4>
 8006f7a:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <UART_SetConfig+0x1ac>)
 8006f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f80:	08006f99 	.word	0x08006f99
 8006f84:	08006fa1 	.word	0x08006fa1
 8006f88:	08006fa9 	.word	0x08006fa9
 8006f8c:	08006fb1 	.word	0x08006fb1
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f9e:	e2f0      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e2ec      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e2e8      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e2e4      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e2e0      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006fc0:	2340      	movs	r3, #64	; 0x40
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e2dc      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e2d8      	b.n	8007582 <UART_SetConfig+0x7ae>
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a4f      	ldr	r2, [pc, #316]	; (8007114 <UART_SetConfig+0x340>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d130      	bne.n	800703c <UART_SetConfig+0x268>
 8006fda:	4b4c      	ldr	r3, [pc, #304]	; (800710c <UART_SetConfig+0x338>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b05      	cmp	r3, #5
 8006fe4:	d826      	bhi.n	8007034 <UART_SetConfig+0x260>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <UART_SetConfig+0x218>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08007005 	.word	0x08007005
 8006ff0:	0800700d 	.word	0x0800700d
 8006ff4:	08007015 	.word	0x08007015
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	2300      	movs	r3, #0
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800700a:	e2ba      	b.n	8007582 <UART_SetConfig+0x7ae>
 800700c:	2304      	movs	r3, #4
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e2b6      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007014:	2308      	movs	r3, #8
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e2b2      	b.n	8007582 <UART_SetConfig+0x7ae>
 800701c:	2310      	movs	r3, #16
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e2ae      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007024:	2320      	movs	r3, #32
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e2aa      	b.n	8007582 <UART_SetConfig+0x7ae>
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e2a6      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e2a2      	b.n	8007582 <UART_SetConfig+0x7ae>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a35      	ldr	r2, [pc, #212]	; (8007118 <UART_SetConfig+0x344>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d130      	bne.n	80070a8 <UART_SetConfig+0x2d4>
 8007046:	4b31      	ldr	r3, [pc, #196]	; (800710c <UART_SetConfig+0x338>)
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	f003 0307 	and.w	r3, r3, #7
 800704e:	2b05      	cmp	r3, #5
 8007050:	d826      	bhi.n	80070a0 <UART_SetConfig+0x2cc>
 8007052:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x284>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007071 	.word	0x08007071
 800705c:	08007079 	.word	0x08007079
 8007060:	08007081 	.word	0x08007081
 8007064:	08007089 	.word	0x08007089
 8007068:	08007091 	.word	0x08007091
 800706c:	08007099 	.word	0x08007099
 8007070:	2300      	movs	r3, #0
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007076:	e284      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007078:	2304      	movs	r3, #4
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707e:	e280      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007080:	2308      	movs	r3, #8
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007086:	e27c      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007088:	2310      	movs	r3, #16
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e278      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007090:	2320      	movs	r3, #32
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e274      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e270      	b.n	8007582 <UART_SetConfig+0x7ae>
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e26c      	b.n	8007582 <UART_SetConfig+0x7ae>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1b      	ldr	r2, [pc, #108]	; (800711c <UART_SetConfig+0x348>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d142      	bne.n	8007138 <UART_SetConfig+0x364>
 80070b2:	4b16      	ldr	r3, [pc, #88]	; (800710c <UART_SetConfig+0x338>)
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2b05      	cmp	r3, #5
 80070bc:	d838      	bhi.n	8007130 <UART_SetConfig+0x35c>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <UART_SetConfig+0x2f0>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070dd 	.word	0x080070dd
 80070c8:	080070e5 	.word	0x080070e5
 80070cc:	080070ed 	.word	0x080070ed
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	08007121 	.word	0x08007121
 80070d8:	08007129 	.word	0x08007129
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e2:	e24e      	b.n	8007582 <UART_SetConfig+0x7ae>
 80070e4:	2304      	movs	r3, #4
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ea:	e24a      	b.n	8007582 <UART_SetConfig+0x7ae>
 80070ec:	2308      	movs	r3, #8
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f2:	e246      	b.n	8007582 <UART_SetConfig+0x7ae>
 80070f4:	2310      	movs	r3, #16
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fa:	e242      	b.n	8007582 <UART_SetConfig+0x7ae>
 80070fc:	cfff69f3 	.word	0xcfff69f3
 8007100:	58000c00 	.word	0x58000c00
 8007104:	11fff4ff 	.word	0x11fff4ff
 8007108:	40011000 	.word	0x40011000
 800710c:	58024400 	.word	0x58024400
 8007110:	40004400 	.word	0x40004400
 8007114:	40004800 	.word	0x40004800
 8007118:	40004c00 	.word	0x40004c00
 800711c:	40005000 	.word	0x40005000
 8007120:	2320      	movs	r3, #32
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007126:	e22c      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007128:	2340      	movs	r3, #64	; 0x40
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712e:	e228      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007130:	2380      	movs	r3, #128	; 0x80
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007136:	e224      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4ab1      	ldr	r2, [pc, #708]	; (8007404 <UART_SetConfig+0x630>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d176      	bne.n	8007230 <UART_SetConfig+0x45c>
 8007142:	4bb1      	ldr	r3, [pc, #708]	; (8007408 <UART_SetConfig+0x634>)
 8007144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007146:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800714a:	2b28      	cmp	r3, #40	; 0x28
 800714c:	d86c      	bhi.n	8007228 <UART_SetConfig+0x454>
 800714e:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x380>)
 8007150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007154:	080071f9 	.word	0x080071f9
 8007158:	08007229 	.word	0x08007229
 800715c:	08007229 	.word	0x08007229
 8007160:	08007229 	.word	0x08007229
 8007164:	08007229 	.word	0x08007229
 8007168:	08007229 	.word	0x08007229
 800716c:	08007229 	.word	0x08007229
 8007170:	08007229 	.word	0x08007229
 8007174:	08007201 	.word	0x08007201
 8007178:	08007229 	.word	0x08007229
 800717c:	08007229 	.word	0x08007229
 8007180:	08007229 	.word	0x08007229
 8007184:	08007229 	.word	0x08007229
 8007188:	08007229 	.word	0x08007229
 800718c:	08007229 	.word	0x08007229
 8007190:	08007229 	.word	0x08007229
 8007194:	08007209 	.word	0x08007209
 8007198:	08007229 	.word	0x08007229
 800719c:	08007229 	.word	0x08007229
 80071a0:	08007229 	.word	0x08007229
 80071a4:	08007229 	.word	0x08007229
 80071a8:	08007229 	.word	0x08007229
 80071ac:	08007229 	.word	0x08007229
 80071b0:	08007229 	.word	0x08007229
 80071b4:	08007211 	.word	0x08007211
 80071b8:	08007229 	.word	0x08007229
 80071bc:	08007229 	.word	0x08007229
 80071c0:	08007229 	.word	0x08007229
 80071c4:	08007229 	.word	0x08007229
 80071c8:	08007229 	.word	0x08007229
 80071cc:	08007229 	.word	0x08007229
 80071d0:	08007229 	.word	0x08007229
 80071d4:	08007219 	.word	0x08007219
 80071d8:	08007229 	.word	0x08007229
 80071dc:	08007229 	.word	0x08007229
 80071e0:	08007229 	.word	0x08007229
 80071e4:	08007229 	.word	0x08007229
 80071e8:	08007229 	.word	0x08007229
 80071ec:	08007229 	.word	0x08007229
 80071f0:	08007229 	.word	0x08007229
 80071f4:	08007221 	.word	0x08007221
 80071f8:	2301      	movs	r3, #1
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071fe:	e1c0      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007200:	2304      	movs	r3, #4
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007206:	e1bc      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007208:	2308      	movs	r3, #8
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800720e:	e1b8      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007210:	2310      	movs	r3, #16
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007216:	e1b4      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007218:	2320      	movs	r3, #32
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800721e:	e1b0      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007226:	e1ac      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007228:	2380      	movs	r3, #128	; 0x80
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e1a8      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a75      	ldr	r2, [pc, #468]	; (800740c <UART_SetConfig+0x638>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d130      	bne.n	800729c <UART_SetConfig+0x4c8>
 800723a:	4b73      	ldr	r3, [pc, #460]	; (8007408 <UART_SetConfig+0x634>)
 800723c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	2b05      	cmp	r3, #5
 8007244:	d826      	bhi.n	8007294 <UART_SetConfig+0x4c0>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <UART_SetConfig+0x478>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	08007265 	.word	0x08007265
 8007250:	0800726d 	.word	0x0800726d
 8007254:	08007275 	.word	0x08007275
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007285 	.word	0x08007285
 8007260:	0800728d 	.word	0x0800728d
 8007264:	2300      	movs	r3, #0
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800726a:	e18a      	b.n	8007582 <UART_SetConfig+0x7ae>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007272:	e186      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800727a:	e182      	b.n	8007582 <UART_SetConfig+0x7ae>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007282:	e17e      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007284:	2320      	movs	r3, #32
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800728a:	e17a      	b.n	8007582 <UART_SetConfig+0x7ae>
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007292:	e176      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e172      	b.n	8007582 <UART_SetConfig+0x7ae>
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a5b      	ldr	r2, [pc, #364]	; (8007410 <UART_SetConfig+0x63c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d130      	bne.n	8007308 <UART_SetConfig+0x534>
 80072a6:	4b58      	ldr	r3, [pc, #352]	; (8007408 <UART_SetConfig+0x634>)
 80072a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d826      	bhi.n	8007300 <UART_SetConfig+0x52c>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <UART_SetConfig+0x4e4>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072d1 	.word	0x080072d1
 80072bc:	080072d9 	.word	0x080072d9
 80072c0:	080072e1 	.word	0x080072e1
 80072c4:	080072e9 	.word	0x080072e9
 80072c8:	080072f1 	.word	0x080072f1
 80072cc:	080072f9 	.word	0x080072f9
 80072d0:	2300      	movs	r3, #0
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072d6:	e154      	b.n	8007582 <UART_SetConfig+0x7ae>
 80072d8:	2304      	movs	r3, #4
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072de:	e150      	b.n	8007582 <UART_SetConfig+0x7ae>
 80072e0:	2308      	movs	r3, #8
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072e6:	e14c      	b.n	8007582 <UART_SetConfig+0x7ae>
 80072e8:	2310      	movs	r3, #16
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ee:	e148      	b.n	8007582 <UART_SetConfig+0x7ae>
 80072f0:	2320      	movs	r3, #32
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072f6:	e144      	b.n	8007582 <UART_SetConfig+0x7ae>
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072fe:	e140      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e13c      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a41      	ldr	r2, [pc, #260]	; (8007414 <UART_SetConfig+0x640>)
 800730e:	4293      	cmp	r3, r2
 8007310:	f040 8082 	bne.w	8007418 <UART_SetConfig+0x644>
 8007314:	4b3c      	ldr	r3, [pc, #240]	; (8007408 <UART_SetConfig+0x634>)
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800731c:	2b28      	cmp	r3, #40	; 0x28
 800731e:	d86d      	bhi.n	80073fc <UART_SetConfig+0x628>
 8007320:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <UART_SetConfig+0x554>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	080073cd 	.word	0x080073cd
 800732c:	080073fd 	.word	0x080073fd
 8007330:	080073fd 	.word	0x080073fd
 8007334:	080073fd 	.word	0x080073fd
 8007338:	080073fd 	.word	0x080073fd
 800733c:	080073fd 	.word	0x080073fd
 8007340:	080073fd 	.word	0x080073fd
 8007344:	080073fd 	.word	0x080073fd
 8007348:	080073d5 	.word	0x080073d5
 800734c:	080073fd 	.word	0x080073fd
 8007350:	080073fd 	.word	0x080073fd
 8007354:	080073fd 	.word	0x080073fd
 8007358:	080073fd 	.word	0x080073fd
 800735c:	080073fd 	.word	0x080073fd
 8007360:	080073fd 	.word	0x080073fd
 8007364:	080073fd 	.word	0x080073fd
 8007368:	080073dd 	.word	0x080073dd
 800736c:	080073fd 	.word	0x080073fd
 8007370:	080073fd 	.word	0x080073fd
 8007374:	080073fd 	.word	0x080073fd
 8007378:	080073fd 	.word	0x080073fd
 800737c:	080073fd 	.word	0x080073fd
 8007380:	080073fd 	.word	0x080073fd
 8007384:	080073fd 	.word	0x080073fd
 8007388:	080073e5 	.word	0x080073e5
 800738c:	080073fd 	.word	0x080073fd
 8007390:	080073fd 	.word	0x080073fd
 8007394:	080073fd 	.word	0x080073fd
 8007398:	080073fd 	.word	0x080073fd
 800739c:	080073fd 	.word	0x080073fd
 80073a0:	080073fd 	.word	0x080073fd
 80073a4:	080073fd 	.word	0x080073fd
 80073a8:	080073ed 	.word	0x080073ed
 80073ac:	080073fd 	.word	0x080073fd
 80073b0:	080073fd 	.word	0x080073fd
 80073b4:	080073fd 	.word	0x080073fd
 80073b8:	080073fd 	.word	0x080073fd
 80073bc:	080073fd 	.word	0x080073fd
 80073c0:	080073fd 	.word	0x080073fd
 80073c4:	080073fd 	.word	0x080073fd
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073d2:	e0d6      	b.n	8007582 <UART_SetConfig+0x7ae>
 80073d4:	2304      	movs	r3, #4
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073da:	e0d2      	b.n	8007582 <UART_SetConfig+0x7ae>
 80073dc:	2308      	movs	r3, #8
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073e2:	e0ce      	b.n	8007582 <UART_SetConfig+0x7ae>
 80073e4:	2310      	movs	r3, #16
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073ea:	e0ca      	b.n	8007582 <UART_SetConfig+0x7ae>
 80073ec:	2320      	movs	r3, #32
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073f2:	e0c6      	b.n	8007582 <UART_SetConfig+0x7ae>
 80073f4:	2340      	movs	r3, #64	; 0x40
 80073f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80073fa:	e0c2      	b.n	8007582 <UART_SetConfig+0x7ae>
 80073fc:	2380      	movs	r3, #128	; 0x80
 80073fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007402:	e0be      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007404:	40011400 	.word	0x40011400
 8007408:	58024400 	.word	0x58024400
 800740c:	40007800 	.word	0x40007800
 8007410:	40007c00 	.word	0x40007c00
 8007414:	40011800 	.word	0x40011800
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4aad      	ldr	r2, [pc, #692]	; (80076d4 <UART_SetConfig+0x900>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d176      	bne.n	8007510 <UART_SetConfig+0x73c>
 8007422:	4bad      	ldr	r3, [pc, #692]	; (80076d8 <UART_SetConfig+0x904>)
 8007424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800742a:	2b28      	cmp	r3, #40	; 0x28
 800742c:	d86c      	bhi.n	8007508 <UART_SetConfig+0x734>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <UART_SetConfig+0x660>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	080074d9 	.word	0x080074d9
 8007438:	08007509 	.word	0x08007509
 800743c:	08007509 	.word	0x08007509
 8007440:	08007509 	.word	0x08007509
 8007444:	08007509 	.word	0x08007509
 8007448:	08007509 	.word	0x08007509
 800744c:	08007509 	.word	0x08007509
 8007450:	08007509 	.word	0x08007509
 8007454:	080074e1 	.word	0x080074e1
 8007458:	08007509 	.word	0x08007509
 800745c:	08007509 	.word	0x08007509
 8007460:	08007509 	.word	0x08007509
 8007464:	08007509 	.word	0x08007509
 8007468:	08007509 	.word	0x08007509
 800746c:	08007509 	.word	0x08007509
 8007470:	08007509 	.word	0x08007509
 8007474:	080074e9 	.word	0x080074e9
 8007478:	08007509 	.word	0x08007509
 800747c:	08007509 	.word	0x08007509
 8007480:	08007509 	.word	0x08007509
 8007484:	08007509 	.word	0x08007509
 8007488:	08007509 	.word	0x08007509
 800748c:	08007509 	.word	0x08007509
 8007490:	08007509 	.word	0x08007509
 8007494:	080074f1 	.word	0x080074f1
 8007498:	08007509 	.word	0x08007509
 800749c:	08007509 	.word	0x08007509
 80074a0:	08007509 	.word	0x08007509
 80074a4:	08007509 	.word	0x08007509
 80074a8:	08007509 	.word	0x08007509
 80074ac:	08007509 	.word	0x08007509
 80074b0:	08007509 	.word	0x08007509
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	08007509 	.word	0x08007509
 80074bc:	08007509 	.word	0x08007509
 80074c0:	08007509 	.word	0x08007509
 80074c4:	08007509 	.word	0x08007509
 80074c8:	08007509 	.word	0x08007509
 80074cc:	08007509 	.word	0x08007509
 80074d0:	08007509 	.word	0x08007509
 80074d4:	08007501 	.word	0x08007501
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074de:	e050      	b.n	8007582 <UART_SetConfig+0x7ae>
 80074e0:	2304      	movs	r3, #4
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e6:	e04c      	b.n	8007582 <UART_SetConfig+0x7ae>
 80074e8:	2308      	movs	r3, #8
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ee:	e048      	b.n	8007582 <UART_SetConfig+0x7ae>
 80074f0:	2310      	movs	r3, #16
 80074f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f6:	e044      	b.n	8007582 <UART_SetConfig+0x7ae>
 80074f8:	2320      	movs	r3, #32
 80074fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fe:	e040      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007500:	2340      	movs	r3, #64	; 0x40
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007506:	e03c      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007508:	2380      	movs	r3, #128	; 0x80
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750e:	e038      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a71      	ldr	r2, [pc, #452]	; (80076dc <UART_SetConfig+0x908>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d130      	bne.n	800757c <UART_SetConfig+0x7a8>
 800751a:	4b6f      	ldr	r3, [pc, #444]	; (80076d8 <UART_SetConfig+0x904>)
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	2b05      	cmp	r3, #5
 8007524:	d826      	bhi.n	8007574 <UART_SetConfig+0x7a0>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <UART_SetConfig+0x758>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007545 	.word	0x08007545
 8007530:	0800754d 	.word	0x0800754d
 8007534:	08007555 	.word	0x08007555
 8007538:	0800755d 	.word	0x0800755d
 800753c:	08007565 	.word	0x08007565
 8007540:	0800756d 	.word	0x0800756d
 8007544:	2302      	movs	r3, #2
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754a:	e01a      	b.n	8007582 <UART_SetConfig+0x7ae>
 800754c:	2304      	movs	r3, #4
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007552:	e016      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007554:	2308      	movs	r3, #8
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755a:	e012      	b.n	8007582 <UART_SetConfig+0x7ae>
 800755c:	2310      	movs	r3, #16
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007562:	e00e      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007564:	2320      	movs	r3, #32
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756a:	e00a      	b.n	8007582 <UART_SetConfig+0x7ae>
 800756c:	2340      	movs	r3, #64	; 0x40
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007572:	e006      	b.n	8007582 <UART_SetConfig+0x7ae>
 8007574:	2380      	movs	r3, #128	; 0x80
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800757a:	e002      	b.n	8007582 <UART_SetConfig+0x7ae>
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a55      	ldr	r2, [pc, #340]	; (80076dc <UART_SetConfig+0x908>)
 8007588:	4293      	cmp	r3, r2
 800758a:	f040 80f8 	bne.w	800777e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800758e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007592:	2b20      	cmp	r3, #32
 8007594:	dc46      	bgt.n	8007624 <UART_SetConfig+0x850>
 8007596:	2b02      	cmp	r3, #2
 8007598:	db75      	blt.n	8007686 <UART_SetConfig+0x8b2>
 800759a:	3b02      	subs	r3, #2
 800759c:	2b1e      	cmp	r3, #30
 800759e:	d872      	bhi.n	8007686 <UART_SetConfig+0x8b2>
 80075a0:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <UART_SetConfig+0x7d4>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	0800762b 	.word	0x0800762b
 80075ac:	08007687 	.word	0x08007687
 80075b0:	08007633 	.word	0x08007633
 80075b4:	08007687 	.word	0x08007687
 80075b8:	08007687 	.word	0x08007687
 80075bc:	08007687 	.word	0x08007687
 80075c0:	08007643 	.word	0x08007643
 80075c4:	08007687 	.word	0x08007687
 80075c8:	08007687 	.word	0x08007687
 80075cc:	08007687 	.word	0x08007687
 80075d0:	08007687 	.word	0x08007687
 80075d4:	08007687 	.word	0x08007687
 80075d8:	08007687 	.word	0x08007687
 80075dc:	08007687 	.word	0x08007687
 80075e0:	08007653 	.word	0x08007653
 80075e4:	08007687 	.word	0x08007687
 80075e8:	08007687 	.word	0x08007687
 80075ec:	08007687 	.word	0x08007687
 80075f0:	08007687 	.word	0x08007687
 80075f4:	08007687 	.word	0x08007687
 80075f8:	08007687 	.word	0x08007687
 80075fc:	08007687 	.word	0x08007687
 8007600:	08007687 	.word	0x08007687
 8007604:	08007687 	.word	0x08007687
 8007608:	08007687 	.word	0x08007687
 800760c:	08007687 	.word	0x08007687
 8007610:	08007687 	.word	0x08007687
 8007614:	08007687 	.word	0x08007687
 8007618:	08007687 	.word	0x08007687
 800761c:	08007687 	.word	0x08007687
 8007620:	08007679 	.word	0x08007679
 8007624:	2b40      	cmp	r3, #64	; 0x40
 8007626:	d02a      	beq.n	800767e <UART_SetConfig+0x8aa>
 8007628:	e02d      	b.n	8007686 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800762a:	f7fd fbf1 	bl	8004e10 <HAL_RCCEx_GetD3PCLK1Freq>
 800762e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007630:	e02f      	b.n	8007692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007636:	4618      	mov	r0, r3
 8007638:	f7fd fc00 	bl	8004e3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007640:	e027      	b.n	8007692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007642:	f107 0318 	add.w	r3, r7, #24
 8007646:	4618      	mov	r0, r3
 8007648:	f7fd fd4c 	bl	80050e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007650:	e01f      	b.n	8007692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007652:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <UART_SetConfig+0x904>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d009      	beq.n	8007672 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800765e:	4b1e      	ldr	r3, [pc, #120]	; (80076d8 <UART_SetConfig+0x904>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	08db      	lsrs	r3, r3, #3
 8007664:	f003 0303 	and.w	r3, r3, #3
 8007668:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <UART_SetConfig+0x90c>)
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007670:	e00f      	b.n	8007692 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007672:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <UART_SetConfig+0x90c>)
 8007674:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007676:	e00c      	b.n	8007692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007678:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <UART_SetConfig+0x910>)
 800767a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800767c:	e009      	b.n	8007692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007684:	e005      	b.n	8007692 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007690:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 81ee 	beq.w	8007a76 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	4a12      	ldr	r2, [pc, #72]	; (80076e8 <UART_SetConfig+0x914>)
 80076a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ac:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4413      	add	r3, r2
 80076b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d305      	bcc.n	80076ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d910      	bls.n	80076ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076d0:	e1d1      	b.n	8007a76 <UART_SetConfig+0xca2>
 80076d2:	bf00      	nop
 80076d4:	40011c00 	.word	0x40011c00
 80076d8:	58024400 	.word	0x58024400
 80076dc:	58000c00 	.word	0x58000c00
 80076e0:	03d09000 	.word	0x03d09000
 80076e4:	003d0900 	.word	0x003d0900
 80076e8:	0800ba7c 	.word	0x0800ba7c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ee:	2200      	movs	r2, #0
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	60fa      	str	r2, [r7, #12]
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	4ac0      	ldr	r2, [pc, #768]	; (80079fc <UART_SetConfig+0xc28>)
 80076fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2200      	movs	r2, #0
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	607a      	str	r2, [r7, #4]
 8007706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800770a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800770e:	f7f9 f813 	bl	8000738 <__aeabi_uldivmod>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4610      	mov	r0, r2
 8007718:	4619      	mov	r1, r3
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	020b      	lsls	r3, r1, #8
 8007724:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007728:	0202      	lsls	r2, r0, #8
 800772a:	6979      	ldr	r1, [r7, #20]
 800772c:	6849      	ldr	r1, [r1, #4]
 800772e:	0849      	lsrs	r1, r1, #1
 8007730:	2000      	movs	r0, #0
 8007732:	460c      	mov	r4, r1
 8007734:	4605      	mov	r5, r0
 8007736:	eb12 0804 	adds.w	r8, r2, r4
 800773a:	eb43 0905 	adc.w	r9, r3, r5
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	469a      	mov	sl, r3
 8007746:	4693      	mov	fp, r2
 8007748:	4652      	mov	r2, sl
 800774a:	465b      	mov	r3, fp
 800774c:	4640      	mov	r0, r8
 800774e:	4649      	mov	r1, r9
 8007750:	f7f8 fff2 	bl	8000738 <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4613      	mov	r3, r2
 800775a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007762:	d308      	bcc.n	8007776 <UART_SetConfig+0x9a2>
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776a:	d204      	bcs.n	8007776 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007772:	60da      	str	r2, [r3, #12]
 8007774:	e17f      	b.n	8007a76 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800777c:	e17b      	b.n	8007a76 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007786:	f040 80bd 	bne.w	8007904 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800778a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800778e:	2b20      	cmp	r3, #32
 8007790:	dc48      	bgt.n	8007824 <UART_SetConfig+0xa50>
 8007792:	2b00      	cmp	r3, #0
 8007794:	db7b      	blt.n	800788e <UART_SetConfig+0xaba>
 8007796:	2b20      	cmp	r3, #32
 8007798:	d879      	bhi.n	800788e <UART_SetConfig+0xaba>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <UART_SetConfig+0x9cc>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	0800782b 	.word	0x0800782b
 80077a4:	08007833 	.word	0x08007833
 80077a8:	0800788f 	.word	0x0800788f
 80077ac:	0800788f 	.word	0x0800788f
 80077b0:	0800783b 	.word	0x0800783b
 80077b4:	0800788f 	.word	0x0800788f
 80077b8:	0800788f 	.word	0x0800788f
 80077bc:	0800788f 	.word	0x0800788f
 80077c0:	0800784b 	.word	0x0800784b
 80077c4:	0800788f 	.word	0x0800788f
 80077c8:	0800788f 	.word	0x0800788f
 80077cc:	0800788f 	.word	0x0800788f
 80077d0:	0800788f 	.word	0x0800788f
 80077d4:	0800788f 	.word	0x0800788f
 80077d8:	0800788f 	.word	0x0800788f
 80077dc:	0800788f 	.word	0x0800788f
 80077e0:	0800785b 	.word	0x0800785b
 80077e4:	0800788f 	.word	0x0800788f
 80077e8:	0800788f 	.word	0x0800788f
 80077ec:	0800788f 	.word	0x0800788f
 80077f0:	0800788f 	.word	0x0800788f
 80077f4:	0800788f 	.word	0x0800788f
 80077f8:	0800788f 	.word	0x0800788f
 80077fc:	0800788f 	.word	0x0800788f
 8007800:	0800788f 	.word	0x0800788f
 8007804:	0800788f 	.word	0x0800788f
 8007808:	0800788f 	.word	0x0800788f
 800780c:	0800788f 	.word	0x0800788f
 8007810:	0800788f 	.word	0x0800788f
 8007814:	0800788f 	.word	0x0800788f
 8007818:	0800788f 	.word	0x0800788f
 800781c:	0800788f 	.word	0x0800788f
 8007820:	08007881 	.word	0x08007881
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	d02e      	beq.n	8007886 <UART_SetConfig+0xab2>
 8007828:	e031      	b.n	800788e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800782a:	f7fc fbcb 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 800782e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007830:	e033      	b.n	800789a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007832:	f7fc fbdd 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8007836:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007838:	e02f      	b.n	800789a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800783a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800783e:	4618      	mov	r0, r3
 8007840:	f7fd fafc 	bl	8004e3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007848:	e027      	b.n	800789a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800784a:	f107 0318 	add.w	r3, r7, #24
 800784e:	4618      	mov	r0, r3
 8007850:	f7fd fc48 	bl	80050e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007858:	e01f      	b.n	800789a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800785a:	4b69      	ldr	r3, [pc, #420]	; (8007a00 <UART_SetConfig+0xc2c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d009      	beq.n	800787a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007866:	4b66      	ldr	r3, [pc, #408]	; (8007a00 <UART_SetConfig+0xc2c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	08db      	lsrs	r3, r3, #3
 800786c:	f003 0303 	and.w	r3, r3, #3
 8007870:	4a64      	ldr	r2, [pc, #400]	; (8007a04 <UART_SetConfig+0xc30>)
 8007872:	fa22 f303 	lsr.w	r3, r2, r3
 8007876:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007878:	e00f      	b.n	800789a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800787a:	4b62      	ldr	r3, [pc, #392]	; (8007a04 <UART_SetConfig+0xc30>)
 800787c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800787e:	e00c      	b.n	800789a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007880:	4b61      	ldr	r3, [pc, #388]	; (8007a08 <UART_SetConfig+0xc34>)
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007884:	e009      	b.n	800789a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800788c:	e005      	b.n	800789a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800789a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 80ea 	beq.w	8007a76 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	4a55      	ldr	r2, [pc, #340]	; (80079fc <UART_SetConfig+0xc28>)
 80078a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ac:	461a      	mov	r2, r3
 80078ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b4:	005a      	lsls	r2, r3, #1
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	085b      	lsrs	r3, r3, #1
 80078bc:	441a      	add	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	2b0f      	cmp	r3, #15
 80078cc:	d916      	bls.n	80078fc <UART_SetConfig+0xb28>
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078d4:	d212      	bcs.n	80078fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f023 030f 	bic.w	r3, r3, #15
 80078de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80078ee:	4313      	orrs	r3, r2
 80078f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80078f8:	60da      	str	r2, [r3, #12]
 80078fa:	e0bc      	b.n	8007a76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007902:	e0b8      	b.n	8007a76 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007904:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007908:	2b20      	cmp	r3, #32
 800790a:	dc4b      	bgt.n	80079a4 <UART_SetConfig+0xbd0>
 800790c:	2b00      	cmp	r3, #0
 800790e:	f2c0 8087 	blt.w	8007a20 <UART_SetConfig+0xc4c>
 8007912:	2b20      	cmp	r3, #32
 8007914:	f200 8084 	bhi.w	8007a20 <UART_SetConfig+0xc4c>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <UART_SetConfig+0xb4c>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	080079ab 	.word	0x080079ab
 8007924:	080079b3 	.word	0x080079b3
 8007928:	08007a21 	.word	0x08007a21
 800792c:	08007a21 	.word	0x08007a21
 8007930:	080079bb 	.word	0x080079bb
 8007934:	08007a21 	.word	0x08007a21
 8007938:	08007a21 	.word	0x08007a21
 800793c:	08007a21 	.word	0x08007a21
 8007940:	080079cb 	.word	0x080079cb
 8007944:	08007a21 	.word	0x08007a21
 8007948:	08007a21 	.word	0x08007a21
 800794c:	08007a21 	.word	0x08007a21
 8007950:	08007a21 	.word	0x08007a21
 8007954:	08007a21 	.word	0x08007a21
 8007958:	08007a21 	.word	0x08007a21
 800795c:	08007a21 	.word	0x08007a21
 8007960:	080079db 	.word	0x080079db
 8007964:	08007a21 	.word	0x08007a21
 8007968:	08007a21 	.word	0x08007a21
 800796c:	08007a21 	.word	0x08007a21
 8007970:	08007a21 	.word	0x08007a21
 8007974:	08007a21 	.word	0x08007a21
 8007978:	08007a21 	.word	0x08007a21
 800797c:	08007a21 	.word	0x08007a21
 8007980:	08007a21 	.word	0x08007a21
 8007984:	08007a21 	.word	0x08007a21
 8007988:	08007a21 	.word	0x08007a21
 800798c:	08007a21 	.word	0x08007a21
 8007990:	08007a21 	.word	0x08007a21
 8007994:	08007a21 	.word	0x08007a21
 8007998:	08007a21 	.word	0x08007a21
 800799c:	08007a21 	.word	0x08007a21
 80079a0:	08007a13 	.word	0x08007a13
 80079a4:	2b40      	cmp	r3, #64	; 0x40
 80079a6:	d037      	beq.n	8007a18 <UART_SetConfig+0xc44>
 80079a8:	e03a      	b.n	8007a20 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079aa:	f7fc fb0b 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 80079ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079b0:	e03c      	b.n	8007a2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b2:	f7fc fb1d 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 80079b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80079b8:	e038      	b.n	8007a2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fa3c 	bl	8004e3c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c8:	e030      	b.n	8007a2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ca:	f107 0318 	add.w	r3, r7, #24
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fd fb88 	bl	80050e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079d8:	e028      	b.n	8007a2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <UART_SetConfig+0xc2c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0320 	and.w	r3, r3, #32
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d012      	beq.n	8007a0c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079e6:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <UART_SetConfig+0xc2c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	08db      	lsrs	r3, r3, #3
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	4a04      	ldr	r2, [pc, #16]	; (8007a04 <UART_SetConfig+0xc30>)
 80079f2:	fa22 f303 	lsr.w	r3, r2, r3
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079f8:	e018      	b.n	8007a2c <UART_SetConfig+0xc58>
 80079fa:	bf00      	nop
 80079fc:	0800ba7c 	.word	0x0800ba7c
 8007a00:	58024400 	.word	0x58024400
 8007a04:	03d09000 	.word	0x03d09000
 8007a08:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007a0c:	4b24      	ldr	r3, [pc, #144]	; (8007aa0 <UART_SetConfig+0xccc>)
 8007a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a10:	e00c      	b.n	8007a2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <UART_SetConfig+0xcd0>)
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a16:	e009      	b.n	8007a2c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a1e:	e005      	b.n	8007a2c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007a2a:	bf00      	nop
    }

    if (pclk != 0U)
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d021      	beq.n	8007a76 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	4a1c      	ldr	r2, [pc, #112]	; (8007aa8 <UART_SetConfig+0xcd4>)
 8007a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a40:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	441a      	add	r2, r3
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a54:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	2b0f      	cmp	r3, #15
 8007a5a:	d909      	bls.n	8007a70 <UART_SetConfig+0xc9c>
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a62:	d205      	bcs.n	8007a70 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60da      	str	r2, [r3, #12]
 8007a6e:	e002      	b.n	8007a76 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a92:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3748      	adds	r7, #72	; 0x48
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aa0:	03d09000 	.word	0x03d09000
 8007aa4:	003d0900 	.word	0x003d0900
 8007aa8:	0800ba7c 	.word	0x0800ba7c

08007aac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b40:	f003 0310 	and.w	r3, r3, #16
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01a      	beq.n	8007bc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007baa:	d10a      	bne.n	8007bc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00a      	beq.n	8007be4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	605a      	str	r2, [r3, #4]
  }
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c00:	f7fa fa18 	bl	8002034 <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d10e      	bne.n	8007c32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f82f 	bl	8007c86 <UART_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e025      	b.n	8007c7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d10e      	bne.n	8007c5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f819 	bl	8007c86 <UART_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e00f      	b.n	8007c7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b09c      	sub	sp, #112	; 0x70
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	603b      	str	r3, [r7, #0]
 8007c92:	4613      	mov	r3, r2
 8007c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c96:	e0a9      	b.n	8007dec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	f000 80a5 	beq.w	8007dec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca2:	f7fa f9c7 	bl	8002034 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d140      	bne.n	8007d3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	663b      	str	r3, [r7, #96]	; 0x60
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e069      	b.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0304 	and.w	r3, r3, #4
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d051      	beq.n	8007dec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d56:	d149      	bne.n	8007dec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
 8007d82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e6      	bne.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	613b      	str	r3, [r7, #16]
   return(result);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f023 0301 	bic.w	r3, r3, #1
 8007daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007db4:	623a      	str	r2, [r7, #32]
 8007db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	69f9      	ldr	r1, [r7, #28]
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e010      	b.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69da      	ldr	r2, [r3, #28]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4013      	ands	r3, r2
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	bf0c      	ite	eq
 8007dfc:	2301      	moveq	r3, #1
 8007dfe:	2300      	movne	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	f43f af46 	beq.w	8007c98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3770      	adds	r7, #112	; 0x70
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b0a3      	sub	sp, #140	; 0x8c
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4a:	d10e      	bne.n	8007e6a <UART_Start_Receive_IT+0x52>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d105      	bne.n	8007e60 <UART_Start_Receive_IT+0x48>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e5e:	e02d      	b.n	8007ebc <UART_Start_Receive_IT+0xa4>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	22ff      	movs	r2, #255	; 0xff
 8007e64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e68:	e028      	b.n	8007ebc <UART_Start_Receive_IT+0xa4>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d10d      	bne.n	8007e8e <UART_Start_Receive_IT+0x76>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <UART_Start_Receive_IT+0x6c>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	22ff      	movs	r2, #255	; 0xff
 8007e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e82:	e01b      	b.n	8007ebc <UART_Start_Receive_IT+0xa4>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	227f      	movs	r2, #127	; 0x7f
 8007e88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e8c:	e016      	b.n	8007ebc <UART_Start_Receive_IT+0xa4>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e96:	d10d      	bne.n	8007eb4 <UART_Start_Receive_IT+0x9c>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d104      	bne.n	8007eaa <UART_Start_Receive_IT+0x92>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	227f      	movs	r2, #127	; 0x7f
 8007ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ea8:	e008      	b.n	8007ebc <UART_Start_Receive_IT+0xa4>
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	223f      	movs	r2, #63	; 0x3f
 8007eae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007eb2:	e003      	b.n	8007ebc <UART_Start_Receive_IT+0xa4>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2222      	movs	r2, #34	; 0x22
 8007ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ed6:	e853 3f00 	ldrex	r3, [r3]
 8007eda:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ef0:	673a      	str	r2, [r7, #112]	; 0x70
 8007ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ef6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e3      	bne.n	8007ecc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f0c:	d153      	bne.n	8007fb6 <UART_Start_Receive_IT+0x19e>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d34d      	bcc.n	8007fb6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f22:	d107      	bne.n	8007f34 <UART_Start_Receive_IT+0x11c>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a4b      	ldr	r2, [pc, #300]	; (800805c <UART_Start_Receive_IT+0x244>)
 8007f30:	671a      	str	r2, [r3, #112]	; 0x70
 8007f32:	e002      	b.n	8007f3a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4a4a      	ldr	r2, [pc, #296]	; (8008060 <UART_Start_Receive_IT+0x248>)
 8007f38:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d01a      	beq.n	8007f80 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f6e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e4      	bne.n	8007f4a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3308      	adds	r3, #8
 8007f9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fa0:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fa2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fa8:	e841 2300 	strex	r3, r2, [r1]
 8007fac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e5      	bne.n	8007f80 <UART_Start_Receive_IT+0x168>
 8007fb4:	e04a      	b.n	800804c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fbe:	d107      	bne.n	8007fd0 <UART_Start_Receive_IT+0x1b8>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4a26      	ldr	r2, [pc, #152]	; (8008064 <UART_Start_Receive_IT+0x24c>)
 8007fcc:	671a      	str	r2, [r3, #112]	; 0x70
 8007fce:	e002      	b.n	8007fd6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a25      	ldr	r2, [pc, #148]	; (8008068 <UART_Start_Receive_IT+0x250>)
 8007fd4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d019      	beq.n	800801a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007ffa:	677b      	str	r3, [r7, #116]	; 0x74
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
 8008006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800800a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e6      	bne.n	8007fe6 <UART_Start_Receive_IT+0x1ce>
 8008018:	e018      	b.n	800804c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	e853 3f00 	ldrex	r3, [r3]
 8008026:	613b      	str	r3, [r7, #16]
   return(result);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f043 0320 	orr.w	r3, r3, #32
 800802e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008038:	623b      	str	r3, [r7, #32]
 800803a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	69f9      	ldr	r1, [r7, #28]
 800803e:	6a3a      	ldr	r2, [r7, #32]
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	61bb      	str	r3, [r7, #24]
   return(result);
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e6      	bne.n	800801a <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	378c      	adds	r7, #140	; 0x8c
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	08008775 	.word	0x08008775
 8008060:	0800847d 	.word	0x0800847d
 8008064:	0800831b 	.word	0x0800831b
 8008068:	080081bb 	.word	0x080081bb

0800806c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b095      	sub	sp, #84	; 0x54
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807c:	e853 3f00 	ldrex	r3, [r3]
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008092:	643b      	str	r3, [r7, #64]	; 0x40
 8008094:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008096:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800809a:	e841 2300 	strex	r3, r2, [r1]
 800809e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e6      	bne.n	8008074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	3308      	adds	r3, #8
 80080ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	e853 3f00 	ldrex	r3, [r3]
 80080b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b6:	69fa      	ldr	r2, [r7, #28]
 80080b8:	4b1e      	ldr	r3, [pc, #120]	; (8008134 <UART_EndRxTransfer+0xc8>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e5      	bne.n	80080a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d118      	bne.n	8008114 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f023 0310 	bic.w	r3, r3, #16
 80080f6:	647b      	str	r3, [r7, #68]	; 0x44
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	6979      	ldr	r1, [r7, #20]
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	e841 2300 	strex	r3, r2, [r1]
 800810c:	613b      	str	r3, [r7, #16]
   return(result);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e6      	bne.n	80080e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2220      	movs	r2, #32
 8008118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008128:	bf00      	nop
 800812a:	3754      	adds	r7, #84	; 0x54
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	effffffe 	.word	0xeffffffe

08008138 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f7fe fe26 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800815c:	bf00      	nop
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	60bb      	str	r3, [r7, #8]
   return(result);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008180:	61fb      	str	r3, [r7, #28]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	61bb      	str	r3, [r7, #24]
 800818c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6979      	ldr	r1, [r7, #20]
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	613b      	str	r3, [r7, #16]
   return(result);
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e6      	bne.n	800816c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7fe fdf1 	bl	8006d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081b2:	bf00      	nop
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b096      	sub	sp, #88	; 0x58
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d2:	2b22      	cmp	r3, #34	; 0x22
 80081d4:	f040 8095 	bne.w	8008302 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081e6:	b2d9      	uxtb	r1, r3
 80081e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f2:	400a      	ands	r2, r1
 80081f4:	b2d2      	uxtb	r2, r2
 80081f6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b01      	subs	r3, #1
 800820c:	b29a      	uxth	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800821a:	b29b      	uxth	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d178      	bne.n	8008312 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800822e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008234:	653b      	str	r3, [r7, #80]	; 0x50
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800823e:	647b      	str	r3, [r7, #68]	; 0x44
 8008240:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800824c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	623b      	str	r3, [r7, #32]
   return(result);
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	64fb      	str	r3, [r7, #76]	; 0x4c
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008272:	633a      	str	r2, [r7, #48]	; 0x30
 8008274:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d12e      	bne.n	80082fa <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0310 	bic.w	r3, r3, #16
 80082b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	69b9      	ldr	r1, [r7, #24]
 80082c6:	69fa      	ldr	r2, [r7, #28]
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	617b      	str	r3, [r7, #20]
   return(result);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e6      	bne.n	80082a2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d103      	bne.n	80082ea <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2210      	movs	r2, #16
 80082e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fe fd62 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082f8:	e00b      	b.n	8008312 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7f8 ff88 	bl	8001210 <HAL_UART_RxCpltCallback>
}
 8008300:	e007      	b.n	8008312 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	699a      	ldr	r2, [r3, #24]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0208 	orr.w	r2, r2, #8
 8008310:	619a      	str	r2, [r3, #24]
}
 8008312:	bf00      	nop
 8008314:	3758      	adds	r7, #88	; 0x58
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b096      	sub	sp, #88	; 0x58
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008328:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008332:	2b22      	cmp	r3, #34	; 0x22
 8008334:	f040 8095 	bne.w	8008462 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008346:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008348:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800834c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008350:	4013      	ands	r3, r2
 8008352:	b29a      	uxth	r2, r3
 8008354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008356:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835c:	1c9a      	adds	r2, r3, #2
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008368:	b29b      	uxth	r3, r3
 800836a:	3b01      	subs	r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d178      	bne.n	8008472 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839e:	643b      	str	r3, [r7, #64]	; 0x40
 80083a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e6      	bne.n	8008380 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	f023 0301 	bic.w	r3, r3, #1
 80083c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3308      	adds	r3, #8
 80083d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e5      	bne.n	80083b2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d12e      	bne.n	800845a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	e853 3f00 	ldrex	r3, [r3]
 800840e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f023 0310 	bic.w	r3, r3, #16
 8008416:	647b      	str	r3, [r7, #68]	; 0x44
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008420:	61bb      	str	r3, [r7, #24]
 8008422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008424:	6979      	ldr	r1, [r7, #20]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	e841 2300 	strex	r3, r2, [r1]
 800842c:	613b      	str	r3, [r7, #16]
   return(result);
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1e6      	bne.n	8008402 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f003 0310 	and.w	r3, r3, #16
 800843e:	2b10      	cmp	r3, #16
 8008440:	d103      	bne.n	800844a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2210      	movs	r2, #16
 8008448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7fe fcb2 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008458:	e00b      	b.n	8008472 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7f8 fed8 	bl	8001210 <HAL_UART_RxCpltCallback>
}
 8008460:	e007      	b.n	8008472 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699a      	ldr	r2, [r3, #24]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0208 	orr.w	r2, r2, #8
 8008470:	619a      	str	r2, [r3, #24]
}
 8008472:	bf00      	nop
 8008474:	3758      	adds	r7, #88	; 0x58
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b0a6      	sub	sp, #152	; 0x98
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800848a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	2b22      	cmp	r3, #34	; 0x22
 80084b4:	f040 814d 	bne.w	8008752 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084be:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084c2:	e0f4      	b.n	80086ae <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084ce:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80084d2:	b2d9      	uxtb	r1, r3
 80084d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084de:	400a      	ands	r2, r1
 80084e0:	b2d2      	uxtb	r2, r2
 80084e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800850a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	2b00      	cmp	r3, #0
 8008514:	d053      	beq.n	80085be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008516:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d011      	beq.n	8008546 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00b      	beq.n	8008546 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2201      	movs	r2, #1
 8008534:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800853c:	f043 0201 	orr.w	r2, r3, #1
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d011      	beq.n	8008576 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2202      	movs	r2, #2
 8008564:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800856c:	f043 0204 	orr.w	r2, r3, #4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d011      	beq.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00b      	beq.n	80085a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2204      	movs	r2, #4
 8008594:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800859c:	f043 0202 	orr.w	r2, r3, #2
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7fe fbf9 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d171      	bne.n	80086ae <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80085d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ee:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80085f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80085fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e4      	bne.n	80085ca <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008610:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008612:	4b56      	ldr	r3, [pc, #344]	; (800876c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8008614:	4013      	ands	r3, r2
 8008616:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	3308      	adds	r3, #8
 800861e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008620:	657a      	str	r2, [r7, #84]	; 0x54
 8008622:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008626:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800862e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e5      	bne.n	8008600 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2220      	movs	r2, #32
 8008638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008646:	2b01      	cmp	r3, #1
 8008648:	d12e      	bne.n	80086a8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800865e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008660:	f023 0310 	bic.w	r3, r3, #16
 8008664:	67bb      	str	r3, [r7, #120]	; 0x78
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800866e:	643b      	str	r3, [r7, #64]	; 0x40
 8008670:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008674:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e6      	bne.n	8008650 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b10      	cmp	r3, #16
 800868e:	d103      	bne.n	8008698 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2210      	movs	r2, #16
 8008696:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7fe fb8b 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
 80086a6:	e002      	b.n	80086ae <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7f8 fdb1 	bl	8001210 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d006      	beq.n	80086c4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80086b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f47f af00 	bne.w	80084c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d045      	beq.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d23e      	bcs.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086fa:	673b      	str	r3, [r7, #112]	; 0x70
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800870a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e5      	bne.n	80086e4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800871c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	60bb      	str	r3, [r7, #8]
   return(result);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f043 0320 	orr.w	r3, r3, #32
 8008732:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	613b      	str	r3, [r7, #16]
   return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008750:	e007      	b.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0208 	orr.w	r2, r2, #8
 8008760:	619a      	str	r2, [r3, #24]
}
 8008762:	bf00      	nop
 8008764:	3798      	adds	r7, #152	; 0x98
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	effffffe 	.word	0xeffffffe
 8008770:	080081bb 	.word	0x080081bb

08008774 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b0a8      	sub	sp, #160	; 0xa0
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008782:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69db      	ldr	r3, [r3, #28]
 800878c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087aa:	2b22      	cmp	r3, #34	; 0x22
 80087ac:	f040 8151 	bne.w	8008a52 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087b6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087ba:	e0f8      	b.n	80089ae <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80087ce:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80087d2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80087d6:	4013      	ands	r3, r2
 80087d8:	b29a      	uxth	r2, r3
 80087da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e4:	1c9a      	adds	r2, r3, #2
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008806:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	2b00      	cmp	r3, #0
 8008810:	d053      	beq.n	80088ba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	2b00      	cmp	r3, #0
 800881c:	d011      	beq.n	8008842 <UART_RxISR_16BIT_FIFOEN+0xce>
 800881e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00b      	beq.n	8008842 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2201      	movs	r2, #1
 8008830:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008838:	f043 0201 	orr.w	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008846:	f003 0302 	and.w	r3, r3, #2
 800884a:	2b00      	cmp	r3, #0
 800884c:	d011      	beq.n	8008872 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800884e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2202      	movs	r2, #2
 8008860:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008868:	f043 0204 	orr.w	r2, r3, #4
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008872:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008876:	f003 0304 	and.w	r3, r3, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	d011      	beq.n	80088a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800887e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2204      	movs	r2, #4
 8008890:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008898:	f043 0202 	orr.w	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d006      	beq.n	80088ba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7fe fa7b 	bl	8006da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d173      	bne.n	80089ae <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ce:	e853 3f00 	ldrex	r3, [r3]
 80088d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088ea:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e4      	bne.n	80088c6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3308      	adds	r3, #8
 8008902:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008906:	e853 3f00 	ldrex	r3, [r3]
 800890a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800890c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800890e:	4b57      	ldr	r3, [pc, #348]	; (8008a6c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8008910:	4013      	ands	r3, r2
 8008912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008920:	65ba      	str	r2, [r7, #88]	; 0x58
 8008922:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800892e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e3      	bne.n	80088fc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008946:	2b01      	cmp	r3, #1
 8008948:	d12e      	bne.n	80089a8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	f023 0310 	bic.w	r3, r3, #16
 8008964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800896e:	647b      	str	r3, [r7, #68]	; 0x44
 8008970:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800897c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b10      	cmp	r3, #16
 800898e:	d103      	bne.n	8008998 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2210      	movs	r2, #16
 8008996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7fe fa0b 	bl	8006dbc <HAL_UARTEx_RxEventCallback>
 80089a6:	e002      	b.n	80089ae <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7f8 fc31 	bl	8001210 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80089b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f47f aefc 	bne.w	80087bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80089ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d045      	beq.n	8008a62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089dc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d23e      	bcs.n	8008a62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	623b      	str	r3, [r7, #32]
   return(result);
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089fa:	677b      	str	r3, [r7, #116]	; 0x74
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3308      	adds	r3, #8
 8008a02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a04:	633a      	str	r2, [r7, #48]	; 0x30
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e5      	bne.n	80089e4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a15      	ldr	r2, [pc, #84]	; (8008a70 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008a1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f043 0320 	orr.w	r3, r3, #32
 8008a32:	673b      	str	r3, [r7, #112]	; 0x70
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a3c:	61fb      	str	r3, [r7, #28]
 8008a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	69b9      	ldr	r1, [r7, #24]
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	617b      	str	r3, [r7, #20]
   return(result);
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e6      	bne.n	8008a1e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a50:	e007      	b.n	8008a62 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	699a      	ldr	r2, [r3, #24]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0208 	orr.w	r2, r2, #8
 8008a60:	619a      	str	r2, [r3, #24]
}
 8008a62:	bf00      	nop
 8008a64:	37a0      	adds	r7, #160	; 0xa0
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	effffffe 	.word	0xeffffffe
 8008a70:	0800831b 	.word	0x0800831b

08008a74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e027      	b.n	8008b16 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2224      	movs	r2, #36	; 0x24
 8008ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008af4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b36:	2302      	movs	r3, #2
 8008b38:	e02d      	b.n	8008b96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2224      	movs	r2, #36	; 0x24
 8008b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f022 0201 	bic.w	r2, r2, #1
 8008b60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f850 	bl	8008c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d101      	bne.n	8008bb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bb2:	2302      	movs	r3, #2
 8008bb4:	e02d      	b.n	8008c12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2224      	movs	r2, #36	; 0x24
 8008bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0201 	bic.w	r2, r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f812 	bl	8008c1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d108      	bne.n	8008c3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c3c:	e031      	b.n	8008ca2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c3e:	2310      	movs	r3, #16
 8008c40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c42:	2310      	movs	r3, #16
 8008c44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	0e5b      	lsrs	r3, r3, #25
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	f003 0307 	and.w	r3, r3, #7
 8008c54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	0f5b      	lsrs	r3, r3, #29
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	7b3a      	ldrb	r2, [r7, #12]
 8008c6a:	4911      	ldr	r1, [pc, #68]	; (8008cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8008c6c:	5c8a      	ldrb	r2, [r1, r2]
 8008c6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c72:	7b3a      	ldrb	r2, [r7, #12]
 8008c74:	490f      	ldr	r1, [pc, #60]	; (8008cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8008c76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c78:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c7c:	b29a      	uxth	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	7b7a      	ldrb	r2, [r7, #13]
 8008c88:	4909      	ldr	r1, [pc, #36]	; (8008cb0 <UARTEx_SetNbDataToProcess+0x94>)
 8008c8a:	5c8a      	ldrb	r2, [r1, r2]
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c90:	7b7a      	ldrb	r2, [r7, #13]
 8008c92:	4908      	ldr	r1, [pc, #32]	; (8008cb4 <UARTEx_SetNbDataToProcess+0x98>)
 8008c94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c96:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	0800ba94 	.word	0x0800ba94
 8008cb4:	0800ba9c 	.word	0x0800ba9c

08008cb8 <atof>:
 8008cb8:	2100      	movs	r1, #0
 8008cba:	f000 be2b 	b.w	8009914 <strtod>
	...

08008cc0 <__errno>:
 8008cc0:	4b01      	ldr	r3, [pc, #4]	; (8008cc8 <__errno+0x8>)
 8008cc2:	6818      	ldr	r0, [r3, #0]
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	24000318 	.word	0x24000318

08008ccc <__libc_init_array>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	4d0d      	ldr	r5, [pc, #52]	; (8008d04 <__libc_init_array+0x38>)
 8008cd0:	4c0d      	ldr	r4, [pc, #52]	; (8008d08 <__libc_init_array+0x3c>)
 8008cd2:	1b64      	subs	r4, r4, r5
 8008cd4:	10a4      	asrs	r4, r4, #2
 8008cd6:	2600      	movs	r6, #0
 8008cd8:	42a6      	cmp	r6, r4
 8008cda:	d109      	bne.n	8008cf0 <__libc_init_array+0x24>
 8008cdc:	4d0b      	ldr	r5, [pc, #44]	; (8008d0c <__libc_init_array+0x40>)
 8008cde:	4c0c      	ldr	r4, [pc, #48]	; (8008d10 <__libc_init_array+0x44>)
 8008ce0:	f002 feae 	bl	800ba40 <_init>
 8008ce4:	1b64      	subs	r4, r4, r5
 8008ce6:	10a4      	asrs	r4, r4, #2
 8008ce8:	2600      	movs	r6, #0
 8008cea:	42a6      	cmp	r6, r4
 8008cec:	d105      	bne.n	8008cfa <__libc_init_array+0x2e>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cf4:	4798      	blx	r3
 8008cf6:	3601      	adds	r6, #1
 8008cf8:	e7ee      	b.n	8008cd8 <__libc_init_array+0xc>
 8008cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cfe:	4798      	blx	r3
 8008d00:	3601      	adds	r6, #1
 8008d02:	e7f2      	b.n	8008cea <__libc_init_array+0x1e>
 8008d04:	0800bedc 	.word	0x0800bedc
 8008d08:	0800bedc 	.word	0x0800bedc
 8008d0c:	0800bedc 	.word	0x0800bedc
 8008d10:	0800bee0 	.word	0x0800bee0

08008d14 <memset>:
 8008d14:	4402      	add	r2, r0
 8008d16:	4603      	mov	r3, r0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <strchr>:
 8008d24:	b2c9      	uxtb	r1, r1
 8008d26:	4603      	mov	r3, r0
 8008d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d2c:	b11a      	cbz	r2, 8008d36 <strchr+0x12>
 8008d2e:	428a      	cmp	r2, r1
 8008d30:	d1f9      	bne.n	8008d26 <strchr+0x2>
 8008d32:	4618      	mov	r0, r3
 8008d34:	4770      	bx	lr
 8008d36:	2900      	cmp	r1, #0
 8008d38:	bf18      	it	ne
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	e7f9      	b.n	8008d32 <strchr+0xe>

08008d3e <strcpy>:
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d44:	f803 2b01 	strb.w	r2, [r3], #1
 8008d48:	2a00      	cmp	r2, #0
 8008d4a:	d1f9      	bne.n	8008d40 <strcpy+0x2>
 8008d4c:	4770      	bx	lr

08008d4e <strncpy>:
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	3901      	subs	r1, #1
 8008d52:	4603      	mov	r3, r0
 8008d54:	b132      	cbz	r2, 8008d64 <strncpy+0x16>
 8008d56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008d5a:	f803 4b01 	strb.w	r4, [r3], #1
 8008d5e:	3a01      	subs	r2, #1
 8008d60:	2c00      	cmp	r4, #0
 8008d62:	d1f7      	bne.n	8008d54 <strncpy+0x6>
 8008d64:	441a      	add	r2, r3
 8008d66:	2100      	movs	r1, #0
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d100      	bne.n	8008d6e <strncpy+0x20>
 8008d6c:	bd10      	pop	{r4, pc}
 8008d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d72:	e7f9      	b.n	8008d68 <strncpy+0x1a>

08008d74 <sulp>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	4604      	mov	r4, r0
 8008d78:	460d      	mov	r5, r1
 8008d7a:	4616      	mov	r6, r2
 8008d7c:	ec45 4b10 	vmov	d0, r4, r5
 8008d80:	f001 fcd6 	bl	800a730 <__ulp>
 8008d84:	b17e      	cbz	r6, 8008da6 <sulp+0x32>
 8008d86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	dd09      	ble.n	8008da6 <sulp+0x32>
 8008d92:	051b      	lsls	r3, r3, #20
 8008d94:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008d98:	2000      	movs	r0, #0
 8008d9a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008d9e:	ec41 0b17 	vmov	d7, r0, r1
 8008da2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008da6:	bd70      	pop	{r4, r5, r6, pc}

08008da8 <_strtod_l>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	ed2d 8b0e 	vpush	{d8-d14}
 8008db0:	b097      	sub	sp, #92	; 0x5c
 8008db2:	461f      	mov	r7, r3
 8008db4:	2300      	movs	r3, #0
 8008db6:	9312      	str	r3, [sp, #72]	; 0x48
 8008db8:	4ba1      	ldr	r3, [pc, #644]	; (8009040 <_strtod_l+0x298>)
 8008dba:	920d      	str	r2, [sp, #52]	; 0x34
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	468b      	mov	fp, r1
 8008dc6:	f7f7 faa3 	bl	8000310 <strlen>
 8008dca:	f04f 0800 	mov.w	r8, #0
 8008dce:	4605      	mov	r5, r0
 8008dd0:	f04f 0900 	mov.w	r9, #0
 8008dd4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008dd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dda:	7813      	ldrb	r3, [r2, #0]
 8008ddc:	2b2b      	cmp	r3, #43	; 0x2b
 8008dde:	d04d      	beq.n	8008e7c <_strtod_l+0xd4>
 8008de0:	d83a      	bhi.n	8008e58 <_strtod_l+0xb0>
 8008de2:	2b0d      	cmp	r3, #13
 8008de4:	d833      	bhi.n	8008e4e <_strtod_l+0xa6>
 8008de6:	2b08      	cmp	r3, #8
 8008de8:	d833      	bhi.n	8008e52 <_strtod_l+0xaa>
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d03d      	beq.n	8008e6a <_strtod_l+0xc2>
 8008dee:	2300      	movs	r3, #0
 8008df0:	9308      	str	r3, [sp, #32]
 8008df2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008df4:	7833      	ldrb	r3, [r6, #0]
 8008df6:	2b30      	cmp	r3, #48	; 0x30
 8008df8:	f040 80b0 	bne.w	8008f5c <_strtod_l+0x1b4>
 8008dfc:	7873      	ldrb	r3, [r6, #1]
 8008dfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e02:	2b58      	cmp	r3, #88	; 0x58
 8008e04:	d167      	bne.n	8008ed6 <_strtod_l+0x12e>
 8008e06:	9b08      	ldr	r3, [sp, #32]
 8008e08:	9301      	str	r3, [sp, #4]
 8008e0a:	ab12      	add	r3, sp, #72	; 0x48
 8008e0c:	9702      	str	r7, [sp, #8]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	4a8c      	ldr	r2, [pc, #560]	; (8009044 <_strtod_l+0x29c>)
 8008e12:	ab13      	add	r3, sp, #76	; 0x4c
 8008e14:	a911      	add	r1, sp, #68	; 0x44
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fdf0 	bl	80099fc <__gethex>
 8008e1c:	f010 0507 	ands.w	r5, r0, #7
 8008e20:	4607      	mov	r7, r0
 8008e22:	d005      	beq.n	8008e30 <_strtod_l+0x88>
 8008e24:	2d06      	cmp	r5, #6
 8008e26:	d12b      	bne.n	8008e80 <_strtod_l+0xd8>
 8008e28:	3601      	adds	r6, #1
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9611      	str	r6, [sp, #68]	; 0x44
 8008e2e:	9308      	str	r3, [sp, #32]
 8008e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f040 854e 	bne.w	80098d4 <_strtod_l+0xb2c>
 8008e38:	9b08      	ldr	r3, [sp, #32]
 8008e3a:	b1e3      	cbz	r3, 8008e76 <_strtod_l+0xce>
 8008e3c:	ec49 8b17 	vmov	d7, r8, r9
 8008e40:	eeb1 0b47 	vneg.f64	d0, d7
 8008e44:	b017      	add	sp, #92	; 0x5c
 8008e46:	ecbd 8b0e 	vpop	{d8-d14}
 8008e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d1cd      	bne.n	8008dee <_strtod_l+0x46>
 8008e52:	3201      	adds	r2, #1
 8008e54:	9211      	str	r2, [sp, #68]	; 0x44
 8008e56:	e7bf      	b.n	8008dd8 <_strtod_l+0x30>
 8008e58:	2b2d      	cmp	r3, #45	; 0x2d
 8008e5a:	d1c8      	bne.n	8008dee <_strtod_l+0x46>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	9308      	str	r3, [sp, #32]
 8008e60:	1c53      	adds	r3, r2, #1
 8008e62:	9311      	str	r3, [sp, #68]	; 0x44
 8008e64:	7853      	ldrb	r3, [r2, #1]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1c3      	bne.n	8008df2 <_strtod_l+0x4a>
 8008e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e6c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f040 852d 	bne.w	80098d0 <_strtod_l+0xb28>
 8008e76:	ec49 8b10 	vmov	d0, r8, r9
 8008e7a:	e7e3      	b.n	8008e44 <_strtod_l+0x9c>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	e7ee      	b.n	8008e5e <_strtod_l+0xb6>
 8008e80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e82:	b13a      	cbz	r2, 8008e94 <_strtod_l+0xec>
 8008e84:	2135      	movs	r1, #53	; 0x35
 8008e86:	a814      	add	r0, sp, #80	; 0x50
 8008e88:	f001 fd5a 	bl	800a940 <__copybits>
 8008e8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f001 f91c 	bl	800a0cc <_Bfree>
 8008e94:	3d01      	subs	r5, #1
 8008e96:	2d04      	cmp	r5, #4
 8008e98:	d806      	bhi.n	8008ea8 <_strtod_l+0x100>
 8008e9a:	e8df f005 	tbb	[pc, r5]
 8008e9e:	030a      	.short	0x030a
 8008ea0:	1714      	.short	0x1714
 8008ea2:	0a          	.byte	0x0a
 8008ea3:	00          	.byte	0x00
 8008ea4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008ea8:	073f      	lsls	r7, r7, #28
 8008eaa:	d5c1      	bpl.n	8008e30 <_strtod_l+0x88>
 8008eac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008eb0:	e7be      	b.n	8008e30 <_strtod_l+0x88>
 8008eb2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008eb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008eb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ebc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ec0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008ec4:	e7f0      	b.n	8008ea8 <_strtod_l+0x100>
 8008ec6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8009048 <_strtod_l+0x2a0>
 8008eca:	e7ed      	b.n	8008ea8 <_strtod_l+0x100>
 8008ecc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ed0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ed4:	e7e8      	b.n	8008ea8 <_strtod_l+0x100>
 8008ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	9211      	str	r2, [sp, #68]	; 0x44
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	2b30      	cmp	r3, #48	; 0x30
 8008ee0:	d0f9      	beq.n	8008ed6 <_strtod_l+0x12e>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0a4      	beq.n	8008e30 <_strtod_l+0x88>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f04f 0a00 	mov.w	sl, #0
 8008eec:	9304      	str	r3, [sp, #16]
 8008eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008ef6:	f8cd a018 	str.w	sl, [sp, #24]
 8008efa:	220a      	movs	r2, #10
 8008efc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008efe:	7807      	ldrb	r7, [r0, #0]
 8008f00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008f04:	b2d9      	uxtb	r1, r3
 8008f06:	2909      	cmp	r1, #9
 8008f08:	d92a      	bls.n	8008f60 <_strtod_l+0x1b8>
 8008f0a:	9907      	ldr	r1, [sp, #28]
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	f001 fe1f 	bl	800ab50 <strncmp>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d033      	beq.n	8008f7e <_strtod_l+0x1d6>
 8008f16:	2000      	movs	r0, #0
 8008f18:	9b06      	ldr	r3, [sp, #24]
 8008f1a:	463a      	mov	r2, r7
 8008f1c:	4601      	mov	r1, r0
 8008f1e:	4607      	mov	r7, r0
 8008f20:	2a65      	cmp	r2, #101	; 0x65
 8008f22:	d001      	beq.n	8008f28 <_strtod_l+0x180>
 8008f24:	2a45      	cmp	r2, #69	; 0x45
 8008f26:	d117      	bne.n	8008f58 <_strtod_l+0x1b0>
 8008f28:	b91b      	cbnz	r3, 8008f32 <_strtod_l+0x18a>
 8008f2a:	9b04      	ldr	r3, [sp, #16]
 8008f2c:	4303      	orrs	r3, r0
 8008f2e:	d09c      	beq.n	8008e6a <_strtod_l+0xc2>
 8008f30:	2300      	movs	r3, #0
 8008f32:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008f36:	f10b 0201 	add.w	r2, fp, #1
 8008f3a:	9211      	str	r2, [sp, #68]	; 0x44
 8008f3c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008f40:	2a2b      	cmp	r2, #43	; 0x2b
 8008f42:	d071      	beq.n	8009028 <_strtod_l+0x280>
 8008f44:	2a2d      	cmp	r2, #45	; 0x2d
 8008f46:	d077      	beq.n	8009038 <_strtod_l+0x290>
 8008f48:	f04f 0e00 	mov.w	lr, #0
 8008f4c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008f50:	2d09      	cmp	r5, #9
 8008f52:	d97f      	bls.n	8009054 <_strtod_l+0x2ac>
 8008f54:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008f58:	2500      	movs	r5, #0
 8008f5a:	e09b      	b.n	8009094 <_strtod_l+0x2ec>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e7c3      	b.n	8008ee8 <_strtod_l+0x140>
 8008f60:	9906      	ldr	r1, [sp, #24]
 8008f62:	2908      	cmp	r1, #8
 8008f64:	bfdd      	ittte	le
 8008f66:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008f68:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f6c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008f6e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008f72:	9b06      	ldr	r3, [sp, #24]
 8008f74:	3001      	adds	r0, #1
 8008f76:	3301      	adds	r3, #1
 8008f78:	9306      	str	r3, [sp, #24]
 8008f7a:	9011      	str	r0, [sp, #68]	; 0x44
 8008f7c:	e7be      	b.n	8008efc <_strtod_l+0x154>
 8008f7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f80:	195a      	adds	r2, r3, r5
 8008f82:	9211      	str	r2, [sp, #68]	; 0x44
 8008f84:	5d5a      	ldrb	r2, [r3, r5]
 8008f86:	9b06      	ldr	r3, [sp, #24]
 8008f88:	b3a3      	cbz	r3, 8008ff4 <_strtod_l+0x24c>
 8008f8a:	4607      	mov	r7, r0
 8008f8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f90:	2909      	cmp	r1, #9
 8008f92:	d912      	bls.n	8008fba <_strtod_l+0x212>
 8008f94:	2101      	movs	r1, #1
 8008f96:	e7c3      	b.n	8008f20 <_strtod_l+0x178>
 8008f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	9211      	str	r2, [sp, #68]	; 0x44
 8008f9e:	785a      	ldrb	r2, [r3, #1]
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	2a30      	cmp	r2, #48	; 0x30
 8008fa4:	d0f8      	beq.n	8008f98 <_strtod_l+0x1f0>
 8008fa6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008faa:	2b08      	cmp	r3, #8
 8008fac:	f200 8497 	bhi.w	80098de <_strtod_l+0xb36>
 8008fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8008fb4:	4607      	mov	r7, r0
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	4603      	mov	r3, r0
 8008fba:	3a30      	subs	r2, #48	; 0x30
 8008fbc:	f100 0101 	add.w	r1, r0, #1
 8008fc0:	d012      	beq.n	8008fe8 <_strtod_l+0x240>
 8008fc2:	440f      	add	r7, r1
 8008fc4:	eb00 0c03 	add.w	ip, r0, r3
 8008fc8:	4619      	mov	r1, r3
 8008fca:	250a      	movs	r5, #10
 8008fcc:	4561      	cmp	r1, ip
 8008fce:	d113      	bne.n	8008ff8 <_strtod_l+0x250>
 8008fd0:	1819      	adds	r1, r3, r0
 8008fd2:	2908      	cmp	r1, #8
 8008fd4:	f103 0301 	add.w	r3, r3, #1
 8008fd8:	4403      	add	r3, r0
 8008fda:	dc1c      	bgt.n	8009016 <_strtod_l+0x26e>
 8008fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fde:	210a      	movs	r1, #10
 8008fe0:	fb01 2200 	mla	r2, r1, r0, r2
 8008fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008fea:	1c50      	adds	r0, r2, #1
 8008fec:	9011      	str	r0, [sp, #68]	; 0x44
 8008fee:	7852      	ldrb	r2, [r2, #1]
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	e7cb      	b.n	8008f8c <_strtod_l+0x1e4>
 8008ff4:	9806      	ldr	r0, [sp, #24]
 8008ff6:	e7d4      	b.n	8008fa2 <_strtod_l+0x1fa>
 8008ff8:	2908      	cmp	r1, #8
 8008ffa:	dc04      	bgt.n	8009006 <_strtod_l+0x25e>
 8008ffc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008ffe:	436e      	muls	r6, r5
 8009000:	9609      	str	r6, [sp, #36]	; 0x24
 8009002:	3101      	adds	r1, #1
 8009004:	e7e2      	b.n	8008fcc <_strtod_l+0x224>
 8009006:	f101 0e01 	add.w	lr, r1, #1
 800900a:	f1be 0f10 	cmp.w	lr, #16
 800900e:	bfd8      	it	le
 8009010:	fb05 fa0a 	mulle.w	sl, r5, sl
 8009014:	e7f5      	b.n	8009002 <_strtod_l+0x25a>
 8009016:	2b10      	cmp	r3, #16
 8009018:	bfdc      	itt	le
 800901a:	210a      	movle	r1, #10
 800901c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8009020:	e7e1      	b.n	8008fe6 <_strtod_l+0x23e>
 8009022:	2700      	movs	r7, #0
 8009024:	2101      	movs	r1, #1
 8009026:	e780      	b.n	8008f2a <_strtod_l+0x182>
 8009028:	f04f 0e00 	mov.w	lr, #0
 800902c:	f10b 0202 	add.w	r2, fp, #2
 8009030:	9211      	str	r2, [sp, #68]	; 0x44
 8009032:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8009036:	e789      	b.n	8008f4c <_strtod_l+0x1a4>
 8009038:	f04f 0e01 	mov.w	lr, #1
 800903c:	e7f6      	b.n	800902c <_strtod_l+0x284>
 800903e:	bf00      	nop
 8009040:	0800bb80 	.word	0x0800bb80
 8009044:	0800bab4 	.word	0x0800bab4
 8009048:	7ff00000 	.word	0x7ff00000
 800904c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800904e:	1c55      	adds	r5, r2, #1
 8009050:	9511      	str	r5, [sp, #68]	; 0x44
 8009052:	7852      	ldrb	r2, [r2, #1]
 8009054:	2a30      	cmp	r2, #48	; 0x30
 8009056:	d0f9      	beq.n	800904c <_strtod_l+0x2a4>
 8009058:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800905c:	2d08      	cmp	r5, #8
 800905e:	f63f af7b 	bhi.w	8008f58 <_strtod_l+0x1b0>
 8009062:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009066:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009068:	9207      	str	r2, [sp, #28]
 800906a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800906c:	1c55      	adds	r5, r2, #1
 800906e:	9511      	str	r5, [sp, #68]	; 0x44
 8009070:	7852      	ldrb	r2, [r2, #1]
 8009072:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009076:	2e09      	cmp	r6, #9
 8009078:	d937      	bls.n	80090ea <_strtod_l+0x342>
 800907a:	9e07      	ldr	r6, [sp, #28]
 800907c:	1bad      	subs	r5, r5, r6
 800907e:	2d08      	cmp	r5, #8
 8009080:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009084:	dc02      	bgt.n	800908c <_strtod_l+0x2e4>
 8009086:	4565      	cmp	r5, ip
 8009088:	bfa8      	it	ge
 800908a:	4665      	movge	r5, ip
 800908c:	f1be 0f00 	cmp.w	lr, #0
 8009090:	d000      	beq.n	8009094 <_strtod_l+0x2ec>
 8009092:	426d      	negs	r5, r5
 8009094:	2b00      	cmp	r3, #0
 8009096:	d14d      	bne.n	8009134 <_strtod_l+0x38c>
 8009098:	9b04      	ldr	r3, [sp, #16]
 800909a:	4303      	orrs	r3, r0
 800909c:	f47f aec8 	bne.w	8008e30 <_strtod_l+0x88>
 80090a0:	2900      	cmp	r1, #0
 80090a2:	f47f aee2 	bne.w	8008e6a <_strtod_l+0xc2>
 80090a6:	2a69      	cmp	r2, #105	; 0x69
 80090a8:	d027      	beq.n	80090fa <_strtod_l+0x352>
 80090aa:	dc24      	bgt.n	80090f6 <_strtod_l+0x34e>
 80090ac:	2a49      	cmp	r2, #73	; 0x49
 80090ae:	d024      	beq.n	80090fa <_strtod_l+0x352>
 80090b0:	2a4e      	cmp	r2, #78	; 0x4e
 80090b2:	f47f aeda 	bne.w	8008e6a <_strtod_l+0xc2>
 80090b6:	4996      	ldr	r1, [pc, #600]	; (8009310 <_strtod_l+0x568>)
 80090b8:	a811      	add	r0, sp, #68	; 0x44
 80090ba:	f000 fef7 	bl	8009eac <__match>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f43f aed3 	beq.w	8008e6a <_strtod_l+0xc2>
 80090c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b28      	cmp	r3, #40	; 0x28
 80090ca:	d12d      	bne.n	8009128 <_strtod_l+0x380>
 80090cc:	4991      	ldr	r1, [pc, #580]	; (8009314 <_strtod_l+0x56c>)
 80090ce:	aa14      	add	r2, sp, #80	; 0x50
 80090d0:	a811      	add	r0, sp, #68	; 0x44
 80090d2:	f000 feff 	bl	8009ed4 <__hexnan>
 80090d6:	2805      	cmp	r0, #5
 80090d8:	d126      	bne.n	8009128 <_strtod_l+0x380>
 80090da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090dc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80090e0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80090e4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80090e8:	e6a2      	b.n	8008e30 <_strtod_l+0x88>
 80090ea:	250a      	movs	r5, #10
 80090ec:	fb05 250c 	mla	r5, r5, ip, r2
 80090f0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80090f4:	e7b9      	b.n	800906a <_strtod_l+0x2c2>
 80090f6:	2a6e      	cmp	r2, #110	; 0x6e
 80090f8:	e7db      	b.n	80090b2 <_strtod_l+0x30a>
 80090fa:	4987      	ldr	r1, [pc, #540]	; (8009318 <_strtod_l+0x570>)
 80090fc:	a811      	add	r0, sp, #68	; 0x44
 80090fe:	f000 fed5 	bl	8009eac <__match>
 8009102:	2800      	cmp	r0, #0
 8009104:	f43f aeb1 	beq.w	8008e6a <_strtod_l+0xc2>
 8009108:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800910a:	4984      	ldr	r1, [pc, #528]	; (800931c <_strtod_l+0x574>)
 800910c:	3b01      	subs	r3, #1
 800910e:	a811      	add	r0, sp, #68	; 0x44
 8009110:	9311      	str	r3, [sp, #68]	; 0x44
 8009112:	f000 fecb 	bl	8009eac <__match>
 8009116:	b910      	cbnz	r0, 800911e <_strtod_l+0x376>
 8009118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800911a:	3301      	adds	r3, #1
 800911c:	9311      	str	r3, [sp, #68]	; 0x44
 800911e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009330 <_strtod_l+0x588>
 8009122:	f04f 0800 	mov.w	r8, #0
 8009126:	e683      	b.n	8008e30 <_strtod_l+0x88>
 8009128:	487d      	ldr	r0, [pc, #500]	; (8009320 <_strtod_l+0x578>)
 800912a:	f001 fcf9 	bl	800ab20 <nan>
 800912e:	ec59 8b10 	vmov	r8, r9, d0
 8009132:	e67d      	b.n	8008e30 <_strtod_l+0x88>
 8009134:	1bea      	subs	r2, r5, r7
 8009136:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800913a:	9207      	str	r2, [sp, #28]
 800913c:	9a06      	ldr	r2, [sp, #24]
 800913e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009142:	2a00      	cmp	r2, #0
 8009144:	bf08      	it	eq
 8009146:	461a      	moveq	r2, r3
 8009148:	2b10      	cmp	r3, #16
 800914a:	9206      	str	r2, [sp, #24]
 800914c:	461a      	mov	r2, r3
 800914e:	bfa8      	it	ge
 8009150:	2210      	movge	r2, #16
 8009152:	2b09      	cmp	r3, #9
 8009154:	ec59 8b17 	vmov	r8, r9, d7
 8009158:	dd0c      	ble.n	8009174 <_strtod_l+0x3cc>
 800915a:	4972      	ldr	r1, [pc, #456]	; (8009324 <_strtod_l+0x57c>)
 800915c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009160:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8009164:	ee06 aa90 	vmov	s13, sl
 8009168:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800916c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009170:	ec59 8b16 	vmov	r8, r9, d6
 8009174:	2b0f      	cmp	r3, #15
 8009176:	dc36      	bgt.n	80091e6 <_strtod_l+0x43e>
 8009178:	9907      	ldr	r1, [sp, #28]
 800917a:	2900      	cmp	r1, #0
 800917c:	f43f ae58 	beq.w	8008e30 <_strtod_l+0x88>
 8009180:	dd23      	ble.n	80091ca <_strtod_l+0x422>
 8009182:	2916      	cmp	r1, #22
 8009184:	dc0b      	bgt.n	800919e <_strtod_l+0x3f6>
 8009186:	4b67      	ldr	r3, [pc, #412]	; (8009324 <_strtod_l+0x57c>)
 8009188:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800918c:	ed93 7b00 	vldr	d7, [r3]
 8009190:	ec49 8b16 	vmov	d6, r8, r9
 8009194:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009198:	ec59 8b17 	vmov	r8, r9, d7
 800919c:	e648      	b.n	8008e30 <_strtod_l+0x88>
 800919e:	9807      	ldr	r0, [sp, #28]
 80091a0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80091a4:	4281      	cmp	r1, r0
 80091a6:	db1e      	blt.n	80091e6 <_strtod_l+0x43e>
 80091a8:	4a5e      	ldr	r2, [pc, #376]	; (8009324 <_strtod_l+0x57c>)
 80091aa:	f1c3 030f 	rsb	r3, r3, #15
 80091ae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80091b2:	ed91 7b00 	vldr	d7, [r1]
 80091b6:	ec49 8b16 	vmov	d6, r8, r9
 80091ba:	1ac3      	subs	r3, r0, r3
 80091bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80091c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091c4:	ed92 6b00 	vldr	d6, [r2]
 80091c8:	e7e4      	b.n	8009194 <_strtod_l+0x3ec>
 80091ca:	9907      	ldr	r1, [sp, #28]
 80091cc:	3116      	adds	r1, #22
 80091ce:	db0a      	blt.n	80091e6 <_strtod_l+0x43e>
 80091d0:	4b54      	ldr	r3, [pc, #336]	; (8009324 <_strtod_l+0x57c>)
 80091d2:	1b7d      	subs	r5, r7, r5
 80091d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80091d8:	ed95 7b00 	vldr	d7, [r5]
 80091dc:	ec49 8b16 	vmov	d6, r8, r9
 80091e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80091e4:	e7d8      	b.n	8009198 <_strtod_l+0x3f0>
 80091e6:	9907      	ldr	r1, [sp, #28]
 80091e8:	1a9a      	subs	r2, r3, r2
 80091ea:	440a      	add	r2, r1
 80091ec:	2a00      	cmp	r2, #0
 80091ee:	dd6f      	ble.n	80092d0 <_strtod_l+0x528>
 80091f0:	f012 000f 	ands.w	r0, r2, #15
 80091f4:	d00a      	beq.n	800920c <_strtod_l+0x464>
 80091f6:	494b      	ldr	r1, [pc, #300]	; (8009324 <_strtod_l+0x57c>)
 80091f8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80091fc:	ed91 7b00 	vldr	d7, [r1]
 8009200:	ec49 8b16 	vmov	d6, r8, r9
 8009204:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009208:	ec59 8b17 	vmov	r8, r9, d7
 800920c:	f032 020f 	bics.w	r2, r2, #15
 8009210:	d04f      	beq.n	80092b2 <_strtod_l+0x50a>
 8009212:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8009216:	dd22      	ble.n	800925e <_strtod_l+0x4b6>
 8009218:	2500      	movs	r5, #0
 800921a:	462e      	mov	r6, r5
 800921c:	9506      	str	r5, [sp, #24]
 800921e:	462f      	mov	r7, r5
 8009220:	2322      	movs	r3, #34	; 0x22
 8009222:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009330 <_strtod_l+0x588>
 8009226:	6023      	str	r3, [r4, #0]
 8009228:	f04f 0800 	mov.w	r8, #0
 800922c:	9b06      	ldr	r3, [sp, #24]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f43f adfe 	beq.w	8008e30 <_strtod_l+0x88>
 8009234:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009236:	4620      	mov	r0, r4
 8009238:	f000 ff48 	bl	800a0cc <_Bfree>
 800923c:	4639      	mov	r1, r7
 800923e:	4620      	mov	r0, r4
 8009240:	f000 ff44 	bl	800a0cc <_Bfree>
 8009244:	4631      	mov	r1, r6
 8009246:	4620      	mov	r0, r4
 8009248:	f000 ff40 	bl	800a0cc <_Bfree>
 800924c:	9906      	ldr	r1, [sp, #24]
 800924e:	4620      	mov	r0, r4
 8009250:	f000 ff3c 	bl	800a0cc <_Bfree>
 8009254:	4629      	mov	r1, r5
 8009256:	4620      	mov	r0, r4
 8009258:	f000 ff38 	bl	800a0cc <_Bfree>
 800925c:	e5e8      	b.n	8008e30 <_strtod_l+0x88>
 800925e:	2000      	movs	r0, #0
 8009260:	ec49 8b17 	vmov	d7, r8, r9
 8009264:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009328 <_strtod_l+0x580>
 8009268:	1112      	asrs	r2, r2, #4
 800926a:	4601      	mov	r1, r0
 800926c:	2a01      	cmp	r2, #1
 800926e:	dc23      	bgt.n	80092b8 <_strtod_l+0x510>
 8009270:	b108      	cbz	r0, 8009276 <_strtod_l+0x4ce>
 8009272:	ec59 8b17 	vmov	r8, r9, d7
 8009276:	4a2c      	ldr	r2, [pc, #176]	; (8009328 <_strtod_l+0x580>)
 8009278:	482c      	ldr	r0, [pc, #176]	; (800932c <_strtod_l+0x584>)
 800927a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800927e:	ed92 7b00 	vldr	d7, [r2]
 8009282:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009286:	ec49 8b16 	vmov	d6, r8, r9
 800928a:	4a29      	ldr	r2, [pc, #164]	; (8009330 <_strtod_l+0x588>)
 800928c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009290:	ee17 1a90 	vmov	r1, s15
 8009294:	400a      	ands	r2, r1
 8009296:	4282      	cmp	r2, r0
 8009298:	ec59 8b17 	vmov	r8, r9, d7
 800929c:	d8bc      	bhi.n	8009218 <_strtod_l+0x470>
 800929e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80092a2:	4282      	cmp	r2, r0
 80092a4:	bf86      	itte	hi
 80092a6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009334 <_strtod_l+0x58c>
 80092aa:	f04f 38ff 	movhi.w	r8, #4294967295
 80092ae:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80092b2:	2200      	movs	r2, #0
 80092b4:	9204      	str	r2, [sp, #16]
 80092b6:	e078      	b.n	80093aa <_strtod_l+0x602>
 80092b8:	07d6      	lsls	r6, r2, #31
 80092ba:	d504      	bpl.n	80092c6 <_strtod_l+0x51e>
 80092bc:	ed9c 6b00 	vldr	d6, [ip]
 80092c0:	2001      	movs	r0, #1
 80092c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80092c6:	3101      	adds	r1, #1
 80092c8:	1052      	asrs	r2, r2, #1
 80092ca:	f10c 0c08 	add.w	ip, ip, #8
 80092ce:	e7cd      	b.n	800926c <_strtod_l+0x4c4>
 80092d0:	d0ef      	beq.n	80092b2 <_strtod_l+0x50a>
 80092d2:	4252      	negs	r2, r2
 80092d4:	f012 000f 	ands.w	r0, r2, #15
 80092d8:	d00a      	beq.n	80092f0 <_strtod_l+0x548>
 80092da:	4912      	ldr	r1, [pc, #72]	; (8009324 <_strtod_l+0x57c>)
 80092dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80092e0:	ed91 7b00 	vldr	d7, [r1]
 80092e4:	ec49 8b16 	vmov	d6, r8, r9
 80092e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80092ec:	ec59 8b17 	vmov	r8, r9, d7
 80092f0:	1112      	asrs	r2, r2, #4
 80092f2:	d0de      	beq.n	80092b2 <_strtod_l+0x50a>
 80092f4:	2a1f      	cmp	r2, #31
 80092f6:	dd1f      	ble.n	8009338 <_strtod_l+0x590>
 80092f8:	2500      	movs	r5, #0
 80092fa:	462e      	mov	r6, r5
 80092fc:	9506      	str	r5, [sp, #24]
 80092fe:	462f      	mov	r7, r5
 8009300:	2322      	movs	r3, #34	; 0x22
 8009302:	f04f 0800 	mov.w	r8, #0
 8009306:	f04f 0900 	mov.w	r9, #0
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	e78e      	b.n	800922c <_strtod_l+0x484>
 800930e:	bf00      	nop
 8009310:	0800bab1 	.word	0x0800bab1
 8009314:	0800bac8 	.word	0x0800bac8
 8009318:	0800baa8 	.word	0x0800baa8
 800931c:	0800baab 	.word	0x0800baab
 8009320:	0800bd3f 	.word	0x0800bd3f
 8009324:	0800bc30 	.word	0x0800bc30
 8009328:	0800bc08 	.word	0x0800bc08
 800932c:	7ca00000 	.word	0x7ca00000
 8009330:	7ff00000 	.word	0x7ff00000
 8009334:	7fefffff 	.word	0x7fefffff
 8009338:	f012 0110 	ands.w	r1, r2, #16
 800933c:	bf18      	it	ne
 800933e:	216a      	movne	r1, #106	; 0x6a
 8009340:	9104      	str	r1, [sp, #16]
 8009342:	ec49 8b17 	vmov	d7, r8, r9
 8009346:	49be      	ldr	r1, [pc, #760]	; (8009640 <_strtod_l+0x898>)
 8009348:	2000      	movs	r0, #0
 800934a:	07d6      	lsls	r6, r2, #31
 800934c:	d504      	bpl.n	8009358 <_strtod_l+0x5b0>
 800934e:	ed91 6b00 	vldr	d6, [r1]
 8009352:	2001      	movs	r0, #1
 8009354:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009358:	1052      	asrs	r2, r2, #1
 800935a:	f101 0108 	add.w	r1, r1, #8
 800935e:	d1f4      	bne.n	800934a <_strtod_l+0x5a2>
 8009360:	b108      	cbz	r0, 8009366 <_strtod_l+0x5be>
 8009362:	ec59 8b17 	vmov	r8, r9, d7
 8009366:	9a04      	ldr	r2, [sp, #16]
 8009368:	b1c2      	cbz	r2, 800939c <_strtod_l+0x5f4>
 800936a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800936e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009372:	2a00      	cmp	r2, #0
 8009374:	4648      	mov	r0, r9
 8009376:	dd11      	ble.n	800939c <_strtod_l+0x5f4>
 8009378:	2a1f      	cmp	r2, #31
 800937a:	f340 812e 	ble.w	80095da <_strtod_l+0x832>
 800937e:	2a34      	cmp	r2, #52	; 0x34
 8009380:	bfde      	ittt	le
 8009382:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009386:	f04f 32ff 	movle.w	r2, #4294967295
 800938a:	fa02 f101 	lslle.w	r1, r2, r1
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	bfcc      	ite	gt
 8009394:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009398:	ea01 0900 	andle.w	r9, r1, r0
 800939c:	ec49 8b17 	vmov	d7, r8, r9
 80093a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a8:	d0a6      	beq.n	80092f8 <_strtod_l+0x550>
 80093aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093ac:	9200      	str	r2, [sp, #0]
 80093ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093b0:	9a06      	ldr	r2, [sp, #24]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 fef2 	bl	800a19c <__s2b>
 80093b8:	9006      	str	r0, [sp, #24]
 80093ba:	2800      	cmp	r0, #0
 80093bc:	f43f af2c 	beq.w	8009218 <_strtod_l+0x470>
 80093c0:	9b07      	ldr	r3, [sp, #28]
 80093c2:	1b7d      	subs	r5, r7, r5
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	bfb4      	ite	lt
 80093c8:	462b      	movlt	r3, r5
 80093ca:	2300      	movge	r3, #0
 80093cc:	9309      	str	r3, [sp, #36]	; 0x24
 80093ce:	9b07      	ldr	r3, [sp, #28]
 80093d0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009620 <_strtod_l+0x878>
 80093d4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009628 <_strtod_l+0x880>
 80093d8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009630 <_strtod_l+0x888>
 80093dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093e0:	2500      	movs	r5, #0
 80093e2:	930c      	str	r3, [sp, #48]	; 0x30
 80093e4:	462e      	mov	r6, r5
 80093e6:	9b06      	ldr	r3, [sp, #24]
 80093e8:	4620      	mov	r0, r4
 80093ea:	6859      	ldr	r1, [r3, #4]
 80093ec:	f000 fe2e 	bl	800a04c <_Balloc>
 80093f0:	4607      	mov	r7, r0
 80093f2:	2800      	cmp	r0, #0
 80093f4:	f43f af14 	beq.w	8009220 <_strtod_l+0x478>
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	691a      	ldr	r2, [r3, #16]
 80093fc:	3202      	adds	r2, #2
 80093fe:	f103 010c 	add.w	r1, r3, #12
 8009402:	0092      	lsls	r2, r2, #2
 8009404:	300c      	adds	r0, #12
 8009406:	f000 fe13 	bl	800a030 <memcpy>
 800940a:	ec49 8b10 	vmov	d0, r8, r9
 800940e:	aa14      	add	r2, sp, #80	; 0x50
 8009410:	a913      	add	r1, sp, #76	; 0x4c
 8009412:	4620      	mov	r0, r4
 8009414:	f001 fa08 	bl	800a828 <__d2b>
 8009418:	ec49 8b18 	vmov	d8, r8, r9
 800941c:	9012      	str	r0, [sp, #72]	; 0x48
 800941e:	2800      	cmp	r0, #0
 8009420:	f43f aefe 	beq.w	8009220 <_strtod_l+0x478>
 8009424:	2101      	movs	r1, #1
 8009426:	4620      	mov	r0, r4
 8009428:	f000 ff52 	bl	800a2d0 <__i2b>
 800942c:	4606      	mov	r6, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	f43f aef6 	beq.w	8009220 <_strtod_l+0x478>
 8009434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009436:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009438:	2b00      	cmp	r3, #0
 800943a:	bfab      	itete	ge
 800943c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800943e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009440:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009444:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009448:	bfac      	ite	ge
 800944a:	eb03 0b02 	addge.w	fp, r3, r2
 800944e:	eba2 0a03 	sublt.w	sl, r2, r3
 8009452:	9a04      	ldr	r2, [sp, #16]
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	440b      	add	r3, r1
 8009458:	4a7a      	ldr	r2, [pc, #488]	; (8009644 <_strtod_l+0x89c>)
 800945a:	3b01      	subs	r3, #1
 800945c:	4293      	cmp	r3, r2
 800945e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009462:	f280 80cd 	bge.w	8009600 <_strtod_l+0x858>
 8009466:	1ad2      	subs	r2, r2, r3
 8009468:	2a1f      	cmp	r2, #31
 800946a:	eba1 0102 	sub.w	r1, r1, r2
 800946e:	f04f 0001 	mov.w	r0, #1
 8009472:	f300 80b9 	bgt.w	80095e8 <_strtod_l+0x840>
 8009476:	fa00 f302 	lsl.w	r3, r0, r2
 800947a:	930b      	str	r3, [sp, #44]	; 0x2c
 800947c:	2300      	movs	r3, #0
 800947e:	930a      	str	r3, [sp, #40]	; 0x28
 8009480:	eb0b 0301 	add.w	r3, fp, r1
 8009484:	9a04      	ldr	r2, [sp, #16]
 8009486:	459b      	cmp	fp, r3
 8009488:	448a      	add	sl, r1
 800948a:	4492      	add	sl, r2
 800948c:	465a      	mov	r2, fp
 800948e:	bfa8      	it	ge
 8009490:	461a      	movge	r2, r3
 8009492:	4552      	cmp	r2, sl
 8009494:	bfa8      	it	ge
 8009496:	4652      	movge	r2, sl
 8009498:	2a00      	cmp	r2, #0
 800949a:	bfc2      	ittt	gt
 800949c:	1a9b      	subgt	r3, r3, r2
 800949e:	ebaa 0a02 	subgt.w	sl, sl, r2
 80094a2:	ebab 0b02 	subgt.w	fp, fp, r2
 80094a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094a8:	2a00      	cmp	r2, #0
 80094aa:	dd18      	ble.n	80094de <_strtod_l+0x736>
 80094ac:	4631      	mov	r1, r6
 80094ae:	4620      	mov	r0, r4
 80094b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094b2:	f000 ffcd 	bl	800a450 <__pow5mult>
 80094b6:	4606      	mov	r6, r0
 80094b8:	2800      	cmp	r0, #0
 80094ba:	f43f aeb1 	beq.w	8009220 <_strtod_l+0x478>
 80094be:	4601      	mov	r1, r0
 80094c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 ff1a 	bl	800a2fc <__multiply>
 80094c8:	900e      	str	r0, [sp, #56]	; 0x38
 80094ca:	2800      	cmp	r0, #0
 80094cc:	f43f aea8 	beq.w	8009220 <_strtod_l+0x478>
 80094d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fdfa 	bl	800a0cc <_Bfree>
 80094d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094dc:	9212      	str	r2, [sp, #72]	; 0x48
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f300 8093 	bgt.w	800960a <_strtod_l+0x862>
 80094e4:	9b07      	ldr	r3, [sp, #28]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dd08      	ble.n	80094fc <_strtod_l+0x754>
 80094ea:	4639      	mov	r1, r7
 80094ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094ee:	4620      	mov	r0, r4
 80094f0:	f000 ffae 	bl	800a450 <__pow5mult>
 80094f4:	4607      	mov	r7, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f43f ae92 	beq.w	8009220 <_strtod_l+0x478>
 80094fc:	f1ba 0f00 	cmp.w	sl, #0
 8009500:	dd08      	ble.n	8009514 <_strtod_l+0x76c>
 8009502:	4639      	mov	r1, r7
 8009504:	4652      	mov	r2, sl
 8009506:	4620      	mov	r0, r4
 8009508:	f000 fffc 	bl	800a504 <__lshift>
 800950c:	4607      	mov	r7, r0
 800950e:	2800      	cmp	r0, #0
 8009510:	f43f ae86 	beq.w	8009220 <_strtod_l+0x478>
 8009514:	f1bb 0f00 	cmp.w	fp, #0
 8009518:	dd08      	ble.n	800952c <_strtod_l+0x784>
 800951a:	4631      	mov	r1, r6
 800951c:	465a      	mov	r2, fp
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fff0 	bl	800a504 <__lshift>
 8009524:	4606      	mov	r6, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	f43f ae7a 	beq.w	8009220 <_strtod_l+0x478>
 800952c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800952e:	463a      	mov	r2, r7
 8009530:	4620      	mov	r0, r4
 8009532:	f001 f873 	bl	800a61c <__mdiff>
 8009536:	4605      	mov	r5, r0
 8009538:	2800      	cmp	r0, #0
 800953a:	f43f ae71 	beq.w	8009220 <_strtod_l+0x478>
 800953e:	2300      	movs	r3, #0
 8009540:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009544:	60c3      	str	r3, [r0, #12]
 8009546:	4631      	mov	r1, r6
 8009548:	f001 f84c 	bl	800a5e4 <__mcmp>
 800954c:	2800      	cmp	r0, #0
 800954e:	da7d      	bge.n	800964c <_strtod_l+0x8a4>
 8009550:	ea5a 0308 	orrs.w	r3, sl, r8
 8009554:	f040 80a3 	bne.w	800969e <_strtod_l+0x8f6>
 8009558:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800955c:	2b00      	cmp	r3, #0
 800955e:	f040 809e 	bne.w	800969e <_strtod_l+0x8f6>
 8009562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009566:	0d1b      	lsrs	r3, r3, #20
 8009568:	051b      	lsls	r3, r3, #20
 800956a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800956e:	f240 8096 	bls.w	800969e <_strtod_l+0x8f6>
 8009572:	696b      	ldr	r3, [r5, #20]
 8009574:	b91b      	cbnz	r3, 800957e <_strtod_l+0x7d6>
 8009576:	692b      	ldr	r3, [r5, #16]
 8009578:	2b01      	cmp	r3, #1
 800957a:	f340 8090 	ble.w	800969e <_strtod_l+0x8f6>
 800957e:	4629      	mov	r1, r5
 8009580:	2201      	movs	r2, #1
 8009582:	4620      	mov	r0, r4
 8009584:	f000 ffbe 	bl	800a504 <__lshift>
 8009588:	4631      	mov	r1, r6
 800958a:	4605      	mov	r5, r0
 800958c:	f001 f82a 	bl	800a5e4 <__mcmp>
 8009590:	2800      	cmp	r0, #0
 8009592:	f340 8084 	ble.w	800969e <_strtod_l+0x8f6>
 8009596:	9904      	ldr	r1, [sp, #16]
 8009598:	4a2b      	ldr	r2, [pc, #172]	; (8009648 <_strtod_l+0x8a0>)
 800959a:	464b      	mov	r3, r9
 800959c:	2900      	cmp	r1, #0
 800959e:	f000 809d 	beq.w	80096dc <_strtod_l+0x934>
 80095a2:	ea02 0109 	and.w	r1, r2, r9
 80095a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80095aa:	f300 8097 	bgt.w	80096dc <_strtod_l+0x934>
 80095ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80095b2:	f77f aea5 	ble.w	8009300 <_strtod_l+0x558>
 80095b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009638 <_strtod_l+0x890>
 80095ba:	ec49 8b16 	vmov	d6, r8, r9
 80095be:	ee26 7b07 	vmul.f64	d7, d6, d7
 80095c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80095c6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	bf08      	it	eq
 80095ce:	2322      	moveq	r3, #34	; 0x22
 80095d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80095d4:	bf08      	it	eq
 80095d6:	6023      	streq	r3, [r4, #0]
 80095d8:	e62c      	b.n	8009234 <_strtod_l+0x48c>
 80095da:	f04f 31ff 	mov.w	r1, #4294967295
 80095de:	fa01 f202 	lsl.w	r2, r1, r2
 80095e2:	ea02 0808 	and.w	r8, r2, r8
 80095e6:	e6d9      	b.n	800939c <_strtod_l+0x5f4>
 80095e8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80095ec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80095f0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80095f4:	33e2      	adds	r3, #226	; 0xe2
 80095f6:	fa00 f303 	lsl.w	r3, r0, r3
 80095fa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80095fe:	e73f      	b.n	8009480 <_strtod_l+0x6d8>
 8009600:	2200      	movs	r2, #0
 8009602:	2301      	movs	r3, #1
 8009604:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009608:	e73a      	b.n	8009480 <_strtod_l+0x6d8>
 800960a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800960c:	461a      	mov	r2, r3
 800960e:	4620      	mov	r0, r4
 8009610:	f000 ff78 	bl	800a504 <__lshift>
 8009614:	9012      	str	r0, [sp, #72]	; 0x48
 8009616:	2800      	cmp	r0, #0
 8009618:	f47f af64 	bne.w	80094e4 <_strtod_l+0x73c>
 800961c:	e600      	b.n	8009220 <_strtod_l+0x478>
 800961e:	bf00      	nop
 8009620:	94a03595 	.word	0x94a03595
 8009624:	3fcfffff 	.word	0x3fcfffff
 8009628:	94a03595 	.word	0x94a03595
 800962c:	3fdfffff 	.word	0x3fdfffff
 8009630:	35afe535 	.word	0x35afe535
 8009634:	3fe00000 	.word	0x3fe00000
 8009638:	00000000 	.word	0x00000000
 800963c:	39500000 	.word	0x39500000
 8009640:	0800bae0 	.word	0x0800bae0
 8009644:	fffffc02 	.word	0xfffffc02
 8009648:	7ff00000 	.word	0x7ff00000
 800964c:	46cb      	mov	fp, r9
 800964e:	d15f      	bne.n	8009710 <_strtod_l+0x968>
 8009650:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009654:	f1ba 0f00 	cmp.w	sl, #0
 8009658:	d02a      	beq.n	80096b0 <_strtod_l+0x908>
 800965a:	4aa7      	ldr	r2, [pc, #668]	; (80098f8 <_strtod_l+0xb50>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d12b      	bne.n	80096b8 <_strtod_l+0x910>
 8009660:	9b04      	ldr	r3, [sp, #16]
 8009662:	4642      	mov	r2, r8
 8009664:	b1fb      	cbz	r3, 80096a6 <_strtod_l+0x8fe>
 8009666:	4ba5      	ldr	r3, [pc, #660]	; (80098fc <_strtod_l+0xb54>)
 8009668:	ea09 0303 	and.w	r3, r9, r3
 800966c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009670:	f04f 31ff 	mov.w	r1, #4294967295
 8009674:	d81a      	bhi.n	80096ac <_strtod_l+0x904>
 8009676:	0d1b      	lsrs	r3, r3, #20
 8009678:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800967c:	fa01 f303 	lsl.w	r3, r1, r3
 8009680:	429a      	cmp	r2, r3
 8009682:	d119      	bne.n	80096b8 <_strtod_l+0x910>
 8009684:	4b9e      	ldr	r3, [pc, #632]	; (8009900 <_strtod_l+0xb58>)
 8009686:	459b      	cmp	fp, r3
 8009688:	d102      	bne.n	8009690 <_strtod_l+0x8e8>
 800968a:	3201      	adds	r2, #1
 800968c:	f43f adc8 	beq.w	8009220 <_strtod_l+0x478>
 8009690:	4b9a      	ldr	r3, [pc, #616]	; (80098fc <_strtod_l+0xb54>)
 8009692:	ea0b 0303 	and.w	r3, fp, r3
 8009696:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800969a:	f04f 0800 	mov.w	r8, #0
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d188      	bne.n	80095b6 <_strtod_l+0x80e>
 80096a4:	e5c6      	b.n	8009234 <_strtod_l+0x48c>
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295
 80096aa:	e7e9      	b.n	8009680 <_strtod_l+0x8d8>
 80096ac:	460b      	mov	r3, r1
 80096ae:	e7e7      	b.n	8009680 <_strtod_l+0x8d8>
 80096b0:	ea53 0308 	orrs.w	r3, r3, r8
 80096b4:	f43f af6f 	beq.w	8009596 <_strtod_l+0x7ee>
 80096b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ba:	b1cb      	cbz	r3, 80096f0 <_strtod_l+0x948>
 80096bc:	ea13 0f0b 	tst.w	r3, fp
 80096c0:	d0ed      	beq.n	800969e <_strtod_l+0x8f6>
 80096c2:	9a04      	ldr	r2, [sp, #16]
 80096c4:	4640      	mov	r0, r8
 80096c6:	4649      	mov	r1, r9
 80096c8:	f1ba 0f00 	cmp.w	sl, #0
 80096cc:	d014      	beq.n	80096f8 <_strtod_l+0x950>
 80096ce:	f7ff fb51 	bl	8008d74 <sulp>
 80096d2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80096d6:	ec59 8b17 	vmov	r8, r9, d7
 80096da:	e7e0      	b.n	800969e <_strtod_l+0x8f6>
 80096dc:	4013      	ands	r3, r2
 80096de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096e2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80096e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80096ea:	f04f 38ff 	mov.w	r8, #4294967295
 80096ee:	e7d6      	b.n	800969e <_strtod_l+0x8f6>
 80096f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096f2:	ea13 0f08 	tst.w	r3, r8
 80096f6:	e7e3      	b.n	80096c0 <_strtod_l+0x918>
 80096f8:	f7ff fb3c 	bl	8008d74 <sulp>
 80096fc:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009700:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009708:	ec59 8b10 	vmov	r8, r9, d0
 800970c:	d1c7      	bne.n	800969e <_strtod_l+0x8f6>
 800970e:	e5f7      	b.n	8009300 <_strtod_l+0x558>
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	f001 f8e4 	bl	800a8e0 <__ratio>
 8009718:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800971c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009724:	d865      	bhi.n	80097f2 <_strtod_l+0xa4a>
 8009726:	f1ba 0f00 	cmp.w	sl, #0
 800972a:	d042      	beq.n	80097b2 <_strtod_l+0xa0a>
 800972c:	4b75      	ldr	r3, [pc, #468]	; (8009904 <_strtod_l+0xb5c>)
 800972e:	2200      	movs	r2, #0
 8009730:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009734:	4871      	ldr	r0, [pc, #452]	; (80098fc <_strtod_l+0xb54>)
 8009736:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009910 <_strtod_l+0xb68>
 800973a:	ea0b 0100 	and.w	r1, fp, r0
 800973e:	4561      	cmp	r1, ip
 8009740:	f040 808e 	bne.w	8009860 <_strtod_l+0xab8>
 8009744:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009748:	ec49 8b10 	vmov	d0, r8, r9
 800974c:	ec43 2b1c 	vmov	d12, r2, r3
 8009750:	910a      	str	r1, [sp, #40]	; 0x28
 8009752:	f000 ffed 	bl	800a730 <__ulp>
 8009756:	ec49 8b1e 	vmov	d14, r8, r9
 800975a:	4868      	ldr	r0, [pc, #416]	; (80098fc <_strtod_l+0xb54>)
 800975c:	eeac eb00 	vfma.f64	d14, d12, d0
 8009760:	ee1e 3a90 	vmov	r3, s29
 8009764:	4a68      	ldr	r2, [pc, #416]	; (8009908 <_strtod_l+0xb60>)
 8009766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009768:	4018      	ands	r0, r3
 800976a:	4290      	cmp	r0, r2
 800976c:	ec59 8b1e 	vmov	r8, r9, d14
 8009770:	d94e      	bls.n	8009810 <_strtod_l+0xa68>
 8009772:	ee18 3a90 	vmov	r3, s17
 8009776:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800977a:	4293      	cmp	r3, r2
 800977c:	d104      	bne.n	8009788 <_strtod_l+0x9e0>
 800977e:	ee18 3a10 	vmov	r3, s16
 8009782:	3301      	adds	r3, #1
 8009784:	f43f ad4c 	beq.w	8009220 <_strtod_l+0x478>
 8009788:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009900 <_strtod_l+0xb58>
 800978c:	f04f 38ff 	mov.w	r8, #4294967295
 8009790:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009792:	4620      	mov	r0, r4
 8009794:	f000 fc9a 	bl	800a0cc <_Bfree>
 8009798:	4639      	mov	r1, r7
 800979a:	4620      	mov	r0, r4
 800979c:	f000 fc96 	bl	800a0cc <_Bfree>
 80097a0:	4631      	mov	r1, r6
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fc92 	bl	800a0cc <_Bfree>
 80097a8:	4629      	mov	r1, r5
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fc8e 	bl	800a0cc <_Bfree>
 80097b0:	e619      	b.n	80093e6 <_strtod_l+0x63e>
 80097b2:	f1b8 0f00 	cmp.w	r8, #0
 80097b6:	d112      	bne.n	80097de <_strtod_l+0xa36>
 80097b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097bc:	b9b3      	cbnz	r3, 80097ec <_strtod_l+0xa44>
 80097be:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80097c2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80097ce:	bf58      	it	pl
 80097d0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80097d4:	eeb1 7b4d 	vneg.f64	d7, d13
 80097d8:	ec53 2b17 	vmov	r2, r3, d7
 80097dc:	e7aa      	b.n	8009734 <_strtod_l+0x98c>
 80097de:	f1b8 0f01 	cmp.w	r8, #1
 80097e2:	d103      	bne.n	80097ec <_strtod_l+0xa44>
 80097e4:	f1b9 0f00 	cmp.w	r9, #0
 80097e8:	f43f ad8a 	beq.w	8009300 <_strtod_l+0x558>
 80097ec:	4b47      	ldr	r3, [pc, #284]	; (800990c <_strtod_l+0xb64>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	e79e      	b.n	8009730 <_strtod_l+0x988>
 80097f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80097f6:	ee20 db0d 	vmul.f64	d13, d0, d13
 80097fa:	f1ba 0f00 	cmp.w	sl, #0
 80097fe:	d104      	bne.n	800980a <_strtod_l+0xa62>
 8009800:	eeb1 7b4d 	vneg.f64	d7, d13
 8009804:	ec53 2b17 	vmov	r2, r3, d7
 8009808:	e794      	b.n	8009734 <_strtod_l+0x98c>
 800980a:	eeb0 7b4d 	vmov.f64	d7, d13
 800980e:	e7f9      	b.n	8009804 <_strtod_l+0xa5c>
 8009810:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009814:	9b04      	ldr	r3, [sp, #16]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1ba      	bne.n	8009790 <_strtod_l+0x9e8>
 800981a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800981e:	0d1b      	lsrs	r3, r3, #20
 8009820:	051b      	lsls	r3, r3, #20
 8009822:	4299      	cmp	r1, r3
 8009824:	d1b4      	bne.n	8009790 <_strtod_l+0x9e8>
 8009826:	ec51 0b1d 	vmov	r0, r1, d13
 800982a:	f7f6 ff9d 	bl	8000768 <__aeabi_d2lz>
 800982e:	f7f6 ff55 	bl	80006dc <__aeabi_l2d>
 8009832:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009836:	ec41 0b17 	vmov	d7, r0, r1
 800983a:	ea43 0308 	orr.w	r3, r3, r8
 800983e:	ea53 030a 	orrs.w	r3, r3, sl
 8009842:	ee3d db47 	vsub.f64	d13, d13, d7
 8009846:	d03c      	beq.n	80098c2 <_strtod_l+0xb1a>
 8009848:	eeb4 dbca 	vcmpe.f64	d13, d10
 800984c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009850:	f53f acf0 	bmi.w	8009234 <_strtod_l+0x48c>
 8009854:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985c:	dd98      	ble.n	8009790 <_strtod_l+0x9e8>
 800985e:	e4e9      	b.n	8009234 <_strtod_l+0x48c>
 8009860:	9804      	ldr	r0, [sp, #16]
 8009862:	b1f0      	cbz	r0, 80098a2 <_strtod_l+0xafa>
 8009864:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009868:	d81b      	bhi.n	80098a2 <_strtod_l+0xafa>
 800986a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80098f0 <_strtod_l+0xb48>
 800986e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	d811      	bhi.n	800989c <_strtod_l+0xaf4>
 8009878:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800987c:	ee1d 3a10 	vmov	r3, s26
 8009880:	2b01      	cmp	r3, #1
 8009882:	bf38      	it	cc
 8009884:	2301      	movcc	r3, #1
 8009886:	ee0d 3a10 	vmov	s26, r3
 800988a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800988e:	f1ba 0f00 	cmp.w	sl, #0
 8009892:	d113      	bne.n	80098bc <_strtod_l+0xb14>
 8009894:	eeb1 7b4d 	vneg.f64	d7, d13
 8009898:	ec53 2b17 	vmov	r2, r3, d7
 800989c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80098a0:	1a43      	subs	r3, r0, r1
 80098a2:	eeb0 0b48 	vmov.f64	d0, d8
 80098a6:	ec43 2b1c 	vmov	d12, r2, r3
 80098aa:	910a      	str	r1, [sp, #40]	; 0x28
 80098ac:	f000 ff40 	bl	800a730 <__ulp>
 80098b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098b2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80098b6:	ec59 8b18 	vmov	r8, r9, d8
 80098ba:	e7ab      	b.n	8009814 <_strtod_l+0xa6c>
 80098bc:	eeb0 7b4d 	vmov.f64	d7, d13
 80098c0:	e7ea      	b.n	8009898 <_strtod_l+0xaf0>
 80098c2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80098c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ca:	f57f af61 	bpl.w	8009790 <_strtod_l+0x9e8>
 80098ce:	e4b1      	b.n	8009234 <_strtod_l+0x48c>
 80098d0:	2300      	movs	r3, #0
 80098d2:	9308      	str	r3, [sp, #32]
 80098d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80098d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	f7ff baad 	b.w	8008e38 <_strtod_l+0x90>
 80098de:	2a65      	cmp	r2, #101	; 0x65
 80098e0:	f43f ab9f 	beq.w	8009022 <_strtod_l+0x27a>
 80098e4:	2a45      	cmp	r2, #69	; 0x45
 80098e6:	f43f ab9c 	beq.w	8009022 <_strtod_l+0x27a>
 80098ea:	2101      	movs	r1, #1
 80098ec:	f7ff bbd4 	b.w	8009098 <_strtod_l+0x2f0>
 80098f0:	ffc00000 	.word	0xffc00000
 80098f4:	41dfffff 	.word	0x41dfffff
 80098f8:	000fffff 	.word	0x000fffff
 80098fc:	7ff00000 	.word	0x7ff00000
 8009900:	7fefffff 	.word	0x7fefffff
 8009904:	3ff00000 	.word	0x3ff00000
 8009908:	7c9fffff 	.word	0x7c9fffff
 800990c:	bff00000 	.word	0xbff00000
 8009910:	7fe00000 	.word	0x7fe00000

08009914 <strtod>:
 8009914:	460a      	mov	r2, r1
 8009916:	4601      	mov	r1, r0
 8009918:	4802      	ldr	r0, [pc, #8]	; (8009924 <strtod+0x10>)
 800991a:	4b03      	ldr	r3, [pc, #12]	; (8009928 <strtod+0x14>)
 800991c:	6800      	ldr	r0, [r0, #0]
 800991e:	f7ff ba43 	b.w	8008da8 <_strtod_l>
 8009922:	bf00      	nop
 8009924:	24000318 	.word	0x24000318
 8009928:	24000380 	.word	0x24000380

0800992c <rshift>:
 800992c:	6903      	ldr	r3, [r0, #16]
 800992e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009936:	ea4f 1261 	mov.w	r2, r1, asr #5
 800993a:	f100 0414 	add.w	r4, r0, #20
 800993e:	dd45      	ble.n	80099cc <rshift+0xa0>
 8009940:	f011 011f 	ands.w	r1, r1, #31
 8009944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800994c:	d10c      	bne.n	8009968 <rshift+0x3c>
 800994e:	f100 0710 	add.w	r7, r0, #16
 8009952:	4629      	mov	r1, r5
 8009954:	42b1      	cmp	r1, r6
 8009956:	d334      	bcc.n	80099c2 <rshift+0x96>
 8009958:	1a9b      	subs	r3, r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	1eea      	subs	r2, r5, #3
 800995e:	4296      	cmp	r6, r2
 8009960:	bf38      	it	cc
 8009962:	2300      	movcc	r3, #0
 8009964:	4423      	add	r3, r4
 8009966:	e015      	b.n	8009994 <rshift+0x68>
 8009968:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800996c:	f1c1 0820 	rsb	r8, r1, #32
 8009970:	40cf      	lsrs	r7, r1
 8009972:	f105 0e04 	add.w	lr, r5, #4
 8009976:	46a1      	mov	r9, r4
 8009978:	4576      	cmp	r6, lr
 800997a:	46f4      	mov	ip, lr
 800997c:	d815      	bhi.n	80099aa <rshift+0x7e>
 800997e:	1a9a      	subs	r2, r3, r2
 8009980:	0092      	lsls	r2, r2, #2
 8009982:	3a04      	subs	r2, #4
 8009984:	3501      	adds	r5, #1
 8009986:	42ae      	cmp	r6, r5
 8009988:	bf38      	it	cc
 800998a:	2200      	movcc	r2, #0
 800998c:	18a3      	adds	r3, r4, r2
 800998e:	50a7      	str	r7, [r4, r2]
 8009990:	b107      	cbz	r7, 8009994 <rshift+0x68>
 8009992:	3304      	adds	r3, #4
 8009994:	1b1a      	subs	r2, r3, r4
 8009996:	42a3      	cmp	r3, r4
 8009998:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800999c:	bf08      	it	eq
 800999e:	2300      	moveq	r3, #0
 80099a0:	6102      	str	r2, [r0, #16]
 80099a2:	bf08      	it	eq
 80099a4:	6143      	streq	r3, [r0, #20]
 80099a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099aa:	f8dc c000 	ldr.w	ip, [ip]
 80099ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80099b2:	ea4c 0707 	orr.w	r7, ip, r7
 80099b6:	f849 7b04 	str.w	r7, [r9], #4
 80099ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099be:	40cf      	lsrs	r7, r1
 80099c0:	e7da      	b.n	8009978 <rshift+0x4c>
 80099c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80099c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80099ca:	e7c3      	b.n	8009954 <rshift+0x28>
 80099cc:	4623      	mov	r3, r4
 80099ce:	e7e1      	b.n	8009994 <rshift+0x68>

080099d0 <__hexdig_fun>:
 80099d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80099d4:	2b09      	cmp	r3, #9
 80099d6:	d802      	bhi.n	80099de <__hexdig_fun+0xe>
 80099d8:	3820      	subs	r0, #32
 80099da:	b2c0      	uxtb	r0, r0
 80099dc:	4770      	bx	lr
 80099de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	d801      	bhi.n	80099ea <__hexdig_fun+0x1a>
 80099e6:	3847      	subs	r0, #71	; 0x47
 80099e8:	e7f7      	b.n	80099da <__hexdig_fun+0xa>
 80099ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80099ee:	2b05      	cmp	r3, #5
 80099f0:	d801      	bhi.n	80099f6 <__hexdig_fun+0x26>
 80099f2:	3827      	subs	r0, #39	; 0x27
 80099f4:	e7f1      	b.n	80099da <__hexdig_fun+0xa>
 80099f6:	2000      	movs	r0, #0
 80099f8:	4770      	bx	lr
	...

080099fc <__gethex>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	ed2d 8b02 	vpush	{d8}
 8009a04:	b089      	sub	sp, #36	; 0x24
 8009a06:	ee08 0a10 	vmov	s16, r0
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	4bb4      	ldr	r3, [pc, #720]	; (8009ce0 <__gethex+0x2e4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	4618      	mov	r0, r3
 8009a14:	468b      	mov	fp, r1
 8009a16:	4690      	mov	r8, r2
 8009a18:	f7f6 fc7a 	bl	8000310 <strlen>
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	f8db 2000 	ldr.w	r2, [fp]
 8009a22:	4403      	add	r3, r0
 8009a24:	4682      	mov	sl, r0
 8009a26:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	1c93      	adds	r3, r2, #2
 8009a2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a36:	32fe      	adds	r2, #254	; 0xfe
 8009a38:	18d1      	adds	r1, r2, r3
 8009a3a:	461f      	mov	r7, r3
 8009a3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a40:	9100      	str	r1, [sp, #0]
 8009a42:	2830      	cmp	r0, #48	; 0x30
 8009a44:	d0f8      	beq.n	8009a38 <__gethex+0x3c>
 8009a46:	f7ff ffc3 	bl	80099d0 <__hexdig_fun>
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d13a      	bne.n	8009ac6 <__gethex+0xca>
 8009a50:	9901      	ldr	r1, [sp, #4]
 8009a52:	4652      	mov	r2, sl
 8009a54:	4638      	mov	r0, r7
 8009a56:	f001 f87b 	bl	800ab50 <strncmp>
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d168      	bne.n	8009b32 <__gethex+0x136>
 8009a60:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009a64:	eb07 060a 	add.w	r6, r7, sl
 8009a68:	f7ff ffb2 	bl	80099d0 <__hexdig_fun>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d062      	beq.n	8009b36 <__gethex+0x13a>
 8009a70:	4633      	mov	r3, r6
 8009a72:	7818      	ldrb	r0, [r3, #0]
 8009a74:	2830      	cmp	r0, #48	; 0x30
 8009a76:	461f      	mov	r7, r3
 8009a78:	f103 0301 	add.w	r3, r3, #1
 8009a7c:	d0f9      	beq.n	8009a72 <__gethex+0x76>
 8009a7e:	f7ff ffa7 	bl	80099d0 <__hexdig_fun>
 8009a82:	2301      	movs	r3, #1
 8009a84:	fab0 f480 	clz	r4, r0
 8009a88:	0964      	lsrs	r4, r4, #5
 8009a8a:	4635      	mov	r5, r6
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	463a      	mov	r2, r7
 8009a90:	4616      	mov	r6, r2
 8009a92:	3201      	adds	r2, #1
 8009a94:	7830      	ldrb	r0, [r6, #0]
 8009a96:	f7ff ff9b 	bl	80099d0 <__hexdig_fun>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	d1f8      	bne.n	8009a90 <__gethex+0x94>
 8009a9e:	9901      	ldr	r1, [sp, #4]
 8009aa0:	4652      	mov	r2, sl
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f001 f854 	bl	800ab50 <strncmp>
 8009aa8:	b980      	cbnz	r0, 8009acc <__gethex+0xd0>
 8009aaa:	b94d      	cbnz	r5, 8009ac0 <__gethex+0xc4>
 8009aac:	eb06 050a 	add.w	r5, r6, sl
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	4616      	mov	r6, r2
 8009ab4:	3201      	adds	r2, #1
 8009ab6:	7830      	ldrb	r0, [r6, #0]
 8009ab8:	f7ff ff8a 	bl	80099d0 <__hexdig_fun>
 8009abc:	2800      	cmp	r0, #0
 8009abe:	d1f8      	bne.n	8009ab2 <__gethex+0xb6>
 8009ac0:	1bad      	subs	r5, r5, r6
 8009ac2:	00ad      	lsls	r5, r5, #2
 8009ac4:	e004      	b.n	8009ad0 <__gethex+0xd4>
 8009ac6:	2400      	movs	r4, #0
 8009ac8:	4625      	mov	r5, r4
 8009aca:	e7e0      	b.n	8009a8e <__gethex+0x92>
 8009acc:	2d00      	cmp	r5, #0
 8009ace:	d1f7      	bne.n	8009ac0 <__gethex+0xc4>
 8009ad0:	7833      	ldrb	r3, [r6, #0]
 8009ad2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ad6:	2b50      	cmp	r3, #80	; 0x50
 8009ad8:	d13b      	bne.n	8009b52 <__gethex+0x156>
 8009ada:	7873      	ldrb	r3, [r6, #1]
 8009adc:	2b2b      	cmp	r3, #43	; 0x2b
 8009ade:	d02c      	beq.n	8009b3a <__gethex+0x13e>
 8009ae0:	2b2d      	cmp	r3, #45	; 0x2d
 8009ae2:	d02e      	beq.n	8009b42 <__gethex+0x146>
 8009ae4:	1c71      	adds	r1, r6, #1
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	7808      	ldrb	r0, [r1, #0]
 8009aec:	f7ff ff70 	bl	80099d0 <__hexdig_fun>
 8009af0:	1e43      	subs	r3, r0, #1
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	2b18      	cmp	r3, #24
 8009af6:	d82c      	bhi.n	8009b52 <__gethex+0x156>
 8009af8:	f1a0 0210 	sub.w	r2, r0, #16
 8009afc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b00:	f7ff ff66 	bl	80099d0 <__hexdig_fun>
 8009b04:	1e43      	subs	r3, r0, #1
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b18      	cmp	r3, #24
 8009b0a:	d91d      	bls.n	8009b48 <__gethex+0x14c>
 8009b0c:	f1b9 0f00 	cmp.w	r9, #0
 8009b10:	d000      	beq.n	8009b14 <__gethex+0x118>
 8009b12:	4252      	negs	r2, r2
 8009b14:	4415      	add	r5, r2
 8009b16:	f8cb 1000 	str.w	r1, [fp]
 8009b1a:	b1e4      	cbz	r4, 8009b56 <__gethex+0x15a>
 8009b1c:	9b00      	ldr	r3, [sp, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	bf14      	ite	ne
 8009b22:	2700      	movne	r7, #0
 8009b24:	2706      	moveq	r7, #6
 8009b26:	4638      	mov	r0, r7
 8009b28:	b009      	add	sp, #36	; 0x24
 8009b2a:	ecbd 8b02 	vpop	{d8}
 8009b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b32:	463e      	mov	r6, r7
 8009b34:	4625      	mov	r5, r4
 8009b36:	2401      	movs	r4, #1
 8009b38:	e7ca      	b.n	8009ad0 <__gethex+0xd4>
 8009b3a:	f04f 0900 	mov.w	r9, #0
 8009b3e:	1cb1      	adds	r1, r6, #2
 8009b40:	e7d3      	b.n	8009aea <__gethex+0xee>
 8009b42:	f04f 0901 	mov.w	r9, #1
 8009b46:	e7fa      	b.n	8009b3e <__gethex+0x142>
 8009b48:	230a      	movs	r3, #10
 8009b4a:	fb03 0202 	mla	r2, r3, r2, r0
 8009b4e:	3a10      	subs	r2, #16
 8009b50:	e7d4      	b.n	8009afc <__gethex+0x100>
 8009b52:	4631      	mov	r1, r6
 8009b54:	e7df      	b.n	8009b16 <__gethex+0x11a>
 8009b56:	1bf3      	subs	r3, r6, r7
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	2b07      	cmp	r3, #7
 8009b5e:	dc0b      	bgt.n	8009b78 <__gethex+0x17c>
 8009b60:	ee18 0a10 	vmov	r0, s16
 8009b64:	f000 fa72 	bl	800a04c <_Balloc>
 8009b68:	4604      	mov	r4, r0
 8009b6a:	b940      	cbnz	r0, 8009b7e <__gethex+0x182>
 8009b6c:	4b5d      	ldr	r3, [pc, #372]	; (8009ce4 <__gethex+0x2e8>)
 8009b6e:	4602      	mov	r2, r0
 8009b70:	21de      	movs	r1, #222	; 0xde
 8009b72:	485d      	ldr	r0, [pc, #372]	; (8009ce8 <__gethex+0x2ec>)
 8009b74:	f001 f80e 	bl	800ab94 <__assert_func>
 8009b78:	3101      	adds	r1, #1
 8009b7a:	105b      	asrs	r3, r3, #1
 8009b7c:	e7ee      	b.n	8009b5c <__gethex+0x160>
 8009b7e:	f100 0914 	add.w	r9, r0, #20
 8009b82:	f04f 0b00 	mov.w	fp, #0
 8009b86:	f1ca 0301 	rsb	r3, sl, #1
 8009b8a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b8e:	f8cd b000 	str.w	fp, [sp]
 8009b92:	9306      	str	r3, [sp, #24]
 8009b94:	42b7      	cmp	r7, r6
 8009b96:	d340      	bcc.n	8009c1a <__gethex+0x21e>
 8009b98:	9802      	ldr	r0, [sp, #8]
 8009b9a:	9b00      	ldr	r3, [sp, #0]
 8009b9c:	f840 3b04 	str.w	r3, [r0], #4
 8009ba0:	eba0 0009 	sub.w	r0, r0, r9
 8009ba4:	1080      	asrs	r0, r0, #2
 8009ba6:	0146      	lsls	r6, r0, #5
 8009ba8:	6120      	str	r0, [r4, #16]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 fb40 	bl	800a230 <__hi0bits>
 8009bb0:	1a30      	subs	r0, r6, r0
 8009bb2:	f8d8 6000 	ldr.w	r6, [r8]
 8009bb6:	42b0      	cmp	r0, r6
 8009bb8:	dd63      	ble.n	8009c82 <__gethex+0x286>
 8009bba:	1b87      	subs	r7, r0, r6
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 fee1 	bl	800a986 <__any_on>
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	b1a8      	cbz	r0, 8009bf4 <__gethex+0x1f8>
 8009bc8:	1e7b      	subs	r3, r7, #1
 8009bca:	1159      	asrs	r1, r3, #5
 8009bcc:	f003 021f 	and.w	r2, r3, #31
 8009bd0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009bd4:	f04f 0a01 	mov.w	sl, #1
 8009bd8:	fa0a f202 	lsl.w	r2, sl, r2
 8009bdc:	420a      	tst	r2, r1
 8009bde:	d009      	beq.n	8009bf4 <__gethex+0x1f8>
 8009be0:	4553      	cmp	r3, sl
 8009be2:	dd05      	ble.n	8009bf0 <__gethex+0x1f4>
 8009be4:	1eb9      	subs	r1, r7, #2
 8009be6:	4620      	mov	r0, r4
 8009be8:	f000 fecd 	bl	800a986 <__any_on>
 8009bec:	2800      	cmp	r0, #0
 8009bee:	d145      	bne.n	8009c7c <__gethex+0x280>
 8009bf0:	f04f 0a02 	mov.w	sl, #2
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f7ff fe98 	bl	800992c <rshift>
 8009bfc:	443d      	add	r5, r7
 8009bfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c02:	42ab      	cmp	r3, r5
 8009c04:	da4c      	bge.n	8009ca0 <__gethex+0x2a4>
 8009c06:	ee18 0a10 	vmov	r0, s16
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	f000 fa5e 	bl	800a0cc <_Bfree>
 8009c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c12:	2300      	movs	r3, #0
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	27a3      	movs	r7, #163	; 0xa3
 8009c18:	e785      	b.n	8009b26 <__gethex+0x12a>
 8009c1a:	1e73      	subs	r3, r6, #1
 8009c1c:	9a05      	ldr	r2, [sp, #20]
 8009c1e:	9303      	str	r3, [sp, #12]
 8009c20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d019      	beq.n	8009c5c <__gethex+0x260>
 8009c28:	f1bb 0f20 	cmp.w	fp, #32
 8009c2c:	d107      	bne.n	8009c3e <__gethex+0x242>
 8009c2e:	9b02      	ldr	r3, [sp, #8]
 8009c30:	9a00      	ldr	r2, [sp, #0]
 8009c32:	f843 2b04 	str.w	r2, [r3], #4
 8009c36:	9302      	str	r3, [sp, #8]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	469b      	mov	fp, r3
 8009c3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c42:	f7ff fec5 	bl	80099d0 <__hexdig_fun>
 8009c46:	9b00      	ldr	r3, [sp, #0]
 8009c48:	f000 000f 	and.w	r0, r0, #15
 8009c4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c50:	4303      	orrs	r3, r0
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	f10b 0b04 	add.w	fp, fp, #4
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	e00d      	b.n	8009c78 <__gethex+0x27c>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	9a06      	ldr	r2, [sp, #24]
 8009c60:	4413      	add	r3, r2
 8009c62:	42bb      	cmp	r3, r7
 8009c64:	d3e0      	bcc.n	8009c28 <__gethex+0x22c>
 8009c66:	4618      	mov	r0, r3
 8009c68:	9901      	ldr	r1, [sp, #4]
 8009c6a:	9307      	str	r3, [sp, #28]
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	f000 ff6f 	bl	800ab50 <strncmp>
 8009c72:	9b07      	ldr	r3, [sp, #28]
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d1d7      	bne.n	8009c28 <__gethex+0x22c>
 8009c78:	461e      	mov	r6, r3
 8009c7a:	e78b      	b.n	8009b94 <__gethex+0x198>
 8009c7c:	f04f 0a03 	mov.w	sl, #3
 8009c80:	e7b8      	b.n	8009bf4 <__gethex+0x1f8>
 8009c82:	da0a      	bge.n	8009c9a <__gethex+0x29e>
 8009c84:	1a37      	subs	r7, r6, r0
 8009c86:	4621      	mov	r1, r4
 8009c88:	ee18 0a10 	vmov	r0, s16
 8009c8c:	463a      	mov	r2, r7
 8009c8e:	f000 fc39 	bl	800a504 <__lshift>
 8009c92:	1bed      	subs	r5, r5, r7
 8009c94:	4604      	mov	r4, r0
 8009c96:	f100 0914 	add.w	r9, r0, #20
 8009c9a:	f04f 0a00 	mov.w	sl, #0
 8009c9e:	e7ae      	b.n	8009bfe <__gethex+0x202>
 8009ca0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ca4:	42a8      	cmp	r0, r5
 8009ca6:	dd72      	ble.n	8009d8e <__gethex+0x392>
 8009ca8:	1b45      	subs	r5, r0, r5
 8009caa:	42ae      	cmp	r6, r5
 8009cac:	dc36      	bgt.n	8009d1c <__gethex+0x320>
 8009cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d02a      	beq.n	8009d0c <__gethex+0x310>
 8009cb6:	2b03      	cmp	r3, #3
 8009cb8:	d02c      	beq.n	8009d14 <__gethex+0x318>
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d11c      	bne.n	8009cf8 <__gethex+0x2fc>
 8009cbe:	42ae      	cmp	r6, r5
 8009cc0:	d11a      	bne.n	8009cf8 <__gethex+0x2fc>
 8009cc2:	2e01      	cmp	r6, #1
 8009cc4:	d112      	bne.n	8009cec <__gethex+0x2f0>
 8009cc6:	9a04      	ldr	r2, [sp, #16]
 8009cc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	6123      	str	r3, [r4, #16]
 8009cd2:	f8c9 3000 	str.w	r3, [r9]
 8009cd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cd8:	2762      	movs	r7, #98	; 0x62
 8009cda:	601c      	str	r4, [r3, #0]
 8009cdc:	e723      	b.n	8009b26 <__gethex+0x12a>
 8009cde:	bf00      	nop
 8009ce0:	0800bb80 	.word	0x0800bb80
 8009ce4:	0800bb08 	.word	0x0800bb08
 8009ce8:	0800bb19 	.word	0x0800bb19
 8009cec:	1e71      	subs	r1, r6, #1
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fe49 	bl	800a986 <__any_on>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d1e6      	bne.n	8009cc6 <__gethex+0x2ca>
 8009cf8:	ee18 0a10 	vmov	r0, s16
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	f000 f9e5 	bl	800a0cc <_Bfree>
 8009d02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d04:	2300      	movs	r3, #0
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	2750      	movs	r7, #80	; 0x50
 8009d0a:	e70c      	b.n	8009b26 <__gethex+0x12a>
 8009d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1f2      	bne.n	8009cf8 <__gethex+0x2fc>
 8009d12:	e7d8      	b.n	8009cc6 <__gethex+0x2ca>
 8009d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d1d5      	bne.n	8009cc6 <__gethex+0x2ca>
 8009d1a:	e7ed      	b.n	8009cf8 <__gethex+0x2fc>
 8009d1c:	1e6f      	subs	r7, r5, #1
 8009d1e:	f1ba 0f00 	cmp.w	sl, #0
 8009d22:	d131      	bne.n	8009d88 <__gethex+0x38c>
 8009d24:	b127      	cbz	r7, 8009d30 <__gethex+0x334>
 8009d26:	4639      	mov	r1, r7
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 fe2c 	bl	800a986 <__any_on>
 8009d2e:	4682      	mov	sl, r0
 8009d30:	117b      	asrs	r3, r7, #5
 8009d32:	2101      	movs	r1, #1
 8009d34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d38:	f007 071f 	and.w	r7, r7, #31
 8009d3c:	fa01 f707 	lsl.w	r7, r1, r7
 8009d40:	421f      	tst	r7, r3
 8009d42:	4629      	mov	r1, r5
 8009d44:	4620      	mov	r0, r4
 8009d46:	bf18      	it	ne
 8009d48:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d4c:	1b76      	subs	r6, r6, r5
 8009d4e:	f7ff fded 	bl	800992c <rshift>
 8009d52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d56:	2702      	movs	r7, #2
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	d048      	beq.n	8009df0 <__gethex+0x3f4>
 8009d5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d015      	beq.n	8009d92 <__gethex+0x396>
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d017      	beq.n	8009d9a <__gethex+0x39e>
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d109      	bne.n	8009d82 <__gethex+0x386>
 8009d6e:	f01a 0f02 	tst.w	sl, #2
 8009d72:	d006      	beq.n	8009d82 <__gethex+0x386>
 8009d74:	f8d9 0000 	ldr.w	r0, [r9]
 8009d78:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d7c:	f01a 0f01 	tst.w	sl, #1
 8009d80:	d10e      	bne.n	8009da0 <__gethex+0x3a4>
 8009d82:	f047 0710 	orr.w	r7, r7, #16
 8009d86:	e033      	b.n	8009df0 <__gethex+0x3f4>
 8009d88:	f04f 0a01 	mov.w	sl, #1
 8009d8c:	e7d0      	b.n	8009d30 <__gethex+0x334>
 8009d8e:	2701      	movs	r7, #1
 8009d90:	e7e2      	b.n	8009d58 <__gethex+0x35c>
 8009d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d94:	f1c3 0301 	rsb	r3, r3, #1
 8009d98:	9315      	str	r3, [sp, #84]	; 0x54
 8009d9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0f0      	beq.n	8009d82 <__gethex+0x386>
 8009da0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009da4:	f104 0314 	add.w	r3, r4, #20
 8009da8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009dac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009db0:	f04f 0c00 	mov.w	ip, #0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dba:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009dbe:	d01c      	beq.n	8009dfa <__gethex+0x3fe>
 8009dc0:	3201      	adds	r2, #1
 8009dc2:	6002      	str	r2, [r0, #0]
 8009dc4:	2f02      	cmp	r7, #2
 8009dc6:	f104 0314 	add.w	r3, r4, #20
 8009dca:	d13f      	bne.n	8009e4c <__gethex+0x450>
 8009dcc:	f8d8 2000 	ldr.w	r2, [r8]
 8009dd0:	3a01      	subs	r2, #1
 8009dd2:	42b2      	cmp	r2, r6
 8009dd4:	d10a      	bne.n	8009dec <__gethex+0x3f0>
 8009dd6:	1171      	asrs	r1, r6, #5
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dde:	f006 061f 	and.w	r6, r6, #31
 8009de2:	fa02 f606 	lsl.w	r6, r2, r6
 8009de6:	421e      	tst	r6, r3
 8009de8:	bf18      	it	ne
 8009dea:	4617      	movne	r7, r2
 8009dec:	f047 0720 	orr.w	r7, r7, #32
 8009df0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009df2:	601c      	str	r4, [r3, #0]
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	601d      	str	r5, [r3, #0]
 8009df8:	e695      	b.n	8009b26 <__gethex+0x12a>
 8009dfa:	4299      	cmp	r1, r3
 8009dfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e00:	d8d8      	bhi.n	8009db4 <__gethex+0x3b8>
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	459b      	cmp	fp, r3
 8009e06:	db19      	blt.n	8009e3c <__gethex+0x440>
 8009e08:	6861      	ldr	r1, [r4, #4]
 8009e0a:	ee18 0a10 	vmov	r0, s16
 8009e0e:	3101      	adds	r1, #1
 8009e10:	f000 f91c 	bl	800a04c <_Balloc>
 8009e14:	4681      	mov	r9, r0
 8009e16:	b918      	cbnz	r0, 8009e20 <__gethex+0x424>
 8009e18:	4b1a      	ldr	r3, [pc, #104]	; (8009e84 <__gethex+0x488>)
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	2184      	movs	r1, #132	; 0x84
 8009e1e:	e6a8      	b.n	8009b72 <__gethex+0x176>
 8009e20:	6922      	ldr	r2, [r4, #16]
 8009e22:	3202      	adds	r2, #2
 8009e24:	f104 010c 	add.w	r1, r4, #12
 8009e28:	0092      	lsls	r2, r2, #2
 8009e2a:	300c      	adds	r0, #12
 8009e2c:	f000 f900 	bl	800a030 <memcpy>
 8009e30:	4621      	mov	r1, r4
 8009e32:	ee18 0a10 	vmov	r0, s16
 8009e36:	f000 f949 	bl	800a0cc <_Bfree>
 8009e3a:	464c      	mov	r4, r9
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e44:	6122      	str	r2, [r4, #16]
 8009e46:	2201      	movs	r2, #1
 8009e48:	615a      	str	r2, [r3, #20]
 8009e4a:	e7bb      	b.n	8009dc4 <__gethex+0x3c8>
 8009e4c:	6922      	ldr	r2, [r4, #16]
 8009e4e:	455a      	cmp	r2, fp
 8009e50:	dd0b      	ble.n	8009e6a <__gethex+0x46e>
 8009e52:	2101      	movs	r1, #1
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7ff fd69 	bl	800992c <rshift>
 8009e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e5e:	3501      	adds	r5, #1
 8009e60:	42ab      	cmp	r3, r5
 8009e62:	f6ff aed0 	blt.w	8009c06 <__gethex+0x20a>
 8009e66:	2701      	movs	r7, #1
 8009e68:	e7c0      	b.n	8009dec <__gethex+0x3f0>
 8009e6a:	f016 061f 	ands.w	r6, r6, #31
 8009e6e:	d0fa      	beq.n	8009e66 <__gethex+0x46a>
 8009e70:	4453      	add	r3, sl
 8009e72:	f1c6 0620 	rsb	r6, r6, #32
 8009e76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e7a:	f000 f9d9 	bl	800a230 <__hi0bits>
 8009e7e:	42b0      	cmp	r0, r6
 8009e80:	dbe7      	blt.n	8009e52 <__gethex+0x456>
 8009e82:	e7f0      	b.n	8009e66 <__gethex+0x46a>
 8009e84:	0800bb08 	.word	0x0800bb08

08009e88 <L_shift>:
 8009e88:	f1c2 0208 	rsb	r2, r2, #8
 8009e8c:	0092      	lsls	r2, r2, #2
 8009e8e:	b570      	push	{r4, r5, r6, lr}
 8009e90:	f1c2 0620 	rsb	r6, r2, #32
 8009e94:	6843      	ldr	r3, [r0, #4]
 8009e96:	6804      	ldr	r4, [r0, #0]
 8009e98:	fa03 f506 	lsl.w	r5, r3, r6
 8009e9c:	432c      	orrs	r4, r5
 8009e9e:	40d3      	lsrs	r3, r2
 8009ea0:	6004      	str	r4, [r0, #0]
 8009ea2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ea6:	4288      	cmp	r0, r1
 8009ea8:	d3f4      	bcc.n	8009e94 <L_shift+0xc>
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}

08009eac <__match>:
 8009eac:	b530      	push	{r4, r5, lr}
 8009eae:	6803      	ldr	r3, [r0, #0]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eb6:	b914      	cbnz	r4, 8009ebe <__match+0x12>
 8009eb8:	6003      	str	r3, [r0, #0]
 8009eba:	2001      	movs	r0, #1
 8009ebc:	bd30      	pop	{r4, r5, pc}
 8009ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ec2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ec6:	2d19      	cmp	r5, #25
 8009ec8:	bf98      	it	ls
 8009eca:	3220      	addls	r2, #32
 8009ecc:	42a2      	cmp	r2, r4
 8009ece:	d0f0      	beq.n	8009eb2 <__match+0x6>
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e7f3      	b.n	8009ebc <__match+0x10>

08009ed4 <__hexnan>:
 8009ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed8:	680b      	ldr	r3, [r1, #0]
 8009eda:	115e      	asrs	r6, r3, #5
 8009edc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ee0:	f013 031f 	ands.w	r3, r3, #31
 8009ee4:	b087      	sub	sp, #28
 8009ee6:	bf18      	it	ne
 8009ee8:	3604      	addne	r6, #4
 8009eea:	2500      	movs	r5, #0
 8009eec:	1f37      	subs	r7, r6, #4
 8009eee:	4690      	mov	r8, r2
 8009ef0:	6802      	ldr	r2, [r0, #0]
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	4682      	mov	sl, r0
 8009ef6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009efa:	46b9      	mov	r9, r7
 8009efc:	463c      	mov	r4, r7
 8009efe:	9502      	str	r5, [sp, #8]
 8009f00:	46ab      	mov	fp, r5
 8009f02:	7851      	ldrb	r1, [r2, #1]
 8009f04:	1c53      	adds	r3, r2, #1
 8009f06:	9303      	str	r3, [sp, #12]
 8009f08:	b341      	cbz	r1, 8009f5c <__hexnan+0x88>
 8009f0a:	4608      	mov	r0, r1
 8009f0c:	9205      	str	r2, [sp, #20]
 8009f0e:	9104      	str	r1, [sp, #16]
 8009f10:	f7ff fd5e 	bl	80099d0 <__hexdig_fun>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	d14f      	bne.n	8009fb8 <__hexnan+0xe4>
 8009f18:	9904      	ldr	r1, [sp, #16]
 8009f1a:	9a05      	ldr	r2, [sp, #20]
 8009f1c:	2920      	cmp	r1, #32
 8009f1e:	d818      	bhi.n	8009f52 <__hexnan+0x7e>
 8009f20:	9b02      	ldr	r3, [sp, #8]
 8009f22:	459b      	cmp	fp, r3
 8009f24:	dd13      	ble.n	8009f4e <__hexnan+0x7a>
 8009f26:	454c      	cmp	r4, r9
 8009f28:	d206      	bcs.n	8009f38 <__hexnan+0x64>
 8009f2a:	2d07      	cmp	r5, #7
 8009f2c:	dc04      	bgt.n	8009f38 <__hexnan+0x64>
 8009f2e:	462a      	mov	r2, r5
 8009f30:	4649      	mov	r1, r9
 8009f32:	4620      	mov	r0, r4
 8009f34:	f7ff ffa8 	bl	8009e88 <L_shift>
 8009f38:	4544      	cmp	r4, r8
 8009f3a:	d950      	bls.n	8009fde <__hexnan+0x10a>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f1a4 0904 	sub.w	r9, r4, #4
 8009f42:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f46:	f8cd b008 	str.w	fp, [sp, #8]
 8009f4a:	464c      	mov	r4, r9
 8009f4c:	461d      	mov	r5, r3
 8009f4e:	9a03      	ldr	r2, [sp, #12]
 8009f50:	e7d7      	b.n	8009f02 <__hexnan+0x2e>
 8009f52:	2929      	cmp	r1, #41	; 0x29
 8009f54:	d156      	bne.n	800a004 <__hexnan+0x130>
 8009f56:	3202      	adds	r2, #2
 8009f58:	f8ca 2000 	str.w	r2, [sl]
 8009f5c:	f1bb 0f00 	cmp.w	fp, #0
 8009f60:	d050      	beq.n	800a004 <__hexnan+0x130>
 8009f62:	454c      	cmp	r4, r9
 8009f64:	d206      	bcs.n	8009f74 <__hexnan+0xa0>
 8009f66:	2d07      	cmp	r5, #7
 8009f68:	dc04      	bgt.n	8009f74 <__hexnan+0xa0>
 8009f6a:	462a      	mov	r2, r5
 8009f6c:	4649      	mov	r1, r9
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f7ff ff8a 	bl	8009e88 <L_shift>
 8009f74:	4544      	cmp	r4, r8
 8009f76:	d934      	bls.n	8009fe2 <__hexnan+0x10e>
 8009f78:	f1a8 0204 	sub.w	r2, r8, #4
 8009f7c:	4623      	mov	r3, r4
 8009f7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f82:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f86:	429f      	cmp	r7, r3
 8009f88:	d2f9      	bcs.n	8009f7e <__hexnan+0xaa>
 8009f8a:	1b3b      	subs	r3, r7, r4
 8009f8c:	f023 0303 	bic.w	r3, r3, #3
 8009f90:	3304      	adds	r3, #4
 8009f92:	3401      	adds	r4, #1
 8009f94:	3e03      	subs	r6, #3
 8009f96:	42b4      	cmp	r4, r6
 8009f98:	bf88      	it	hi
 8009f9a:	2304      	movhi	r3, #4
 8009f9c:	4443      	add	r3, r8
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f843 2b04 	str.w	r2, [r3], #4
 8009fa4:	429f      	cmp	r7, r3
 8009fa6:	d2fb      	bcs.n	8009fa0 <__hexnan+0xcc>
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	b91b      	cbnz	r3, 8009fb4 <__hexnan+0xe0>
 8009fac:	4547      	cmp	r7, r8
 8009fae:	d127      	bne.n	800a000 <__hexnan+0x12c>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	603b      	str	r3, [r7, #0]
 8009fb4:	2005      	movs	r0, #5
 8009fb6:	e026      	b.n	800a006 <__hexnan+0x132>
 8009fb8:	3501      	adds	r5, #1
 8009fba:	2d08      	cmp	r5, #8
 8009fbc:	f10b 0b01 	add.w	fp, fp, #1
 8009fc0:	dd06      	ble.n	8009fd0 <__hexnan+0xfc>
 8009fc2:	4544      	cmp	r4, r8
 8009fc4:	d9c3      	bls.n	8009f4e <__hexnan+0x7a>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fcc:	2501      	movs	r5, #1
 8009fce:	3c04      	subs	r4, #4
 8009fd0:	6822      	ldr	r2, [r4, #0]
 8009fd2:	f000 000f 	and.w	r0, r0, #15
 8009fd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009fda:	6022      	str	r2, [r4, #0]
 8009fdc:	e7b7      	b.n	8009f4e <__hexnan+0x7a>
 8009fde:	2508      	movs	r5, #8
 8009fe0:	e7b5      	b.n	8009f4e <__hexnan+0x7a>
 8009fe2:	9b01      	ldr	r3, [sp, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0df      	beq.n	8009fa8 <__hexnan+0xd4>
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fec:	f1c3 0320 	rsb	r3, r3, #32
 8009ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ff8:	401a      	ands	r2, r3
 8009ffa:	f846 2c04 	str.w	r2, [r6, #-4]
 8009ffe:	e7d3      	b.n	8009fa8 <__hexnan+0xd4>
 800a000:	3f04      	subs	r7, #4
 800a002:	e7d1      	b.n	8009fa8 <__hexnan+0xd4>
 800a004:	2004      	movs	r0, #4
 800a006:	b007      	add	sp, #28
 800a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a00c <__ascii_mbtowc>:
 800a00c:	b082      	sub	sp, #8
 800a00e:	b901      	cbnz	r1, 800a012 <__ascii_mbtowc+0x6>
 800a010:	a901      	add	r1, sp, #4
 800a012:	b142      	cbz	r2, 800a026 <__ascii_mbtowc+0x1a>
 800a014:	b14b      	cbz	r3, 800a02a <__ascii_mbtowc+0x1e>
 800a016:	7813      	ldrb	r3, [r2, #0]
 800a018:	600b      	str	r3, [r1, #0]
 800a01a:	7812      	ldrb	r2, [r2, #0]
 800a01c:	1e10      	subs	r0, r2, #0
 800a01e:	bf18      	it	ne
 800a020:	2001      	movne	r0, #1
 800a022:	b002      	add	sp, #8
 800a024:	4770      	bx	lr
 800a026:	4610      	mov	r0, r2
 800a028:	e7fb      	b.n	800a022 <__ascii_mbtowc+0x16>
 800a02a:	f06f 0001 	mvn.w	r0, #1
 800a02e:	e7f8      	b.n	800a022 <__ascii_mbtowc+0x16>

0800a030 <memcpy>:
 800a030:	440a      	add	r2, r1
 800a032:	4291      	cmp	r1, r2
 800a034:	f100 33ff 	add.w	r3, r0, #4294967295
 800a038:	d100      	bne.n	800a03c <memcpy+0xc>
 800a03a:	4770      	bx	lr
 800a03c:	b510      	push	{r4, lr}
 800a03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a046:	4291      	cmp	r1, r2
 800a048:	d1f9      	bne.n	800a03e <memcpy+0xe>
 800a04a:	bd10      	pop	{r4, pc}

0800a04c <_Balloc>:
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
 800a054:	b976      	cbnz	r6, 800a074 <_Balloc+0x28>
 800a056:	2010      	movs	r0, #16
 800a058:	f000 fdcc 	bl	800abf4 <malloc>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6260      	str	r0, [r4, #36]	; 0x24
 800a060:	b920      	cbnz	r0, 800a06c <_Balloc+0x20>
 800a062:	4b18      	ldr	r3, [pc, #96]	; (800a0c4 <_Balloc+0x78>)
 800a064:	4818      	ldr	r0, [pc, #96]	; (800a0c8 <_Balloc+0x7c>)
 800a066:	2166      	movs	r1, #102	; 0x66
 800a068:	f000 fd94 	bl	800ab94 <__assert_func>
 800a06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a070:	6006      	str	r6, [r0, #0]
 800a072:	60c6      	str	r6, [r0, #12]
 800a074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a076:	68f3      	ldr	r3, [r6, #12]
 800a078:	b183      	cbz	r3, 800a09c <_Balloc+0x50>
 800a07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a082:	b9b8      	cbnz	r0, 800a0b4 <_Balloc+0x68>
 800a084:	2101      	movs	r1, #1
 800a086:	fa01 f605 	lsl.w	r6, r1, r5
 800a08a:	1d72      	adds	r2, r6, #5
 800a08c:	0092      	lsls	r2, r2, #2
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 fc9a 	bl	800a9c8 <_calloc_r>
 800a094:	b160      	cbz	r0, 800a0b0 <_Balloc+0x64>
 800a096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a09a:	e00e      	b.n	800a0ba <_Balloc+0x6e>
 800a09c:	2221      	movs	r2, #33	; 0x21
 800a09e:	2104      	movs	r1, #4
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fc91 	bl	800a9c8 <_calloc_r>
 800a0a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0a8:	60f0      	str	r0, [r6, #12]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1e4      	bne.n	800a07a <_Balloc+0x2e>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
 800a0b4:	6802      	ldr	r2, [r0, #0]
 800a0b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0c0:	e7f7      	b.n	800a0b2 <_Balloc+0x66>
 800a0c2:	bf00      	nop
 800a0c4:	0800bb94 	.word	0x0800bb94
 800a0c8:	0800bbab 	.word	0x0800bbab

0800a0cc <_Bfree>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	b976      	cbnz	r6, 800a0f4 <_Bfree+0x28>
 800a0d6:	2010      	movs	r0, #16
 800a0d8:	f000 fd8c 	bl	800abf4 <malloc>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6268      	str	r0, [r5, #36]	; 0x24
 800a0e0:	b920      	cbnz	r0, 800a0ec <_Bfree+0x20>
 800a0e2:	4b09      	ldr	r3, [pc, #36]	; (800a108 <_Bfree+0x3c>)
 800a0e4:	4809      	ldr	r0, [pc, #36]	; (800a10c <_Bfree+0x40>)
 800a0e6:	218a      	movs	r1, #138	; 0x8a
 800a0e8:	f000 fd54 	bl	800ab94 <__assert_func>
 800a0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0f0:	6006      	str	r6, [r0, #0]
 800a0f2:	60c6      	str	r6, [r0, #12]
 800a0f4:	b13c      	cbz	r4, 800a106 <_Bfree+0x3a>
 800a0f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0f8:	6862      	ldr	r2, [r4, #4]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a100:	6021      	str	r1, [r4, #0]
 800a102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a106:	bd70      	pop	{r4, r5, r6, pc}
 800a108:	0800bb94 	.word	0x0800bb94
 800a10c:	0800bbab 	.word	0x0800bbab

0800a110 <__multadd>:
 800a110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a114:	690d      	ldr	r5, [r1, #16]
 800a116:	4607      	mov	r7, r0
 800a118:	460c      	mov	r4, r1
 800a11a:	461e      	mov	r6, r3
 800a11c:	f101 0c14 	add.w	ip, r1, #20
 800a120:	2000      	movs	r0, #0
 800a122:	f8dc 3000 	ldr.w	r3, [ip]
 800a126:	b299      	uxth	r1, r3
 800a128:	fb02 6101 	mla	r1, r2, r1, r6
 800a12c:	0c1e      	lsrs	r6, r3, #16
 800a12e:	0c0b      	lsrs	r3, r1, #16
 800a130:	fb02 3306 	mla	r3, r2, r6, r3
 800a134:	b289      	uxth	r1, r1
 800a136:	3001      	adds	r0, #1
 800a138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a13c:	4285      	cmp	r5, r0
 800a13e:	f84c 1b04 	str.w	r1, [ip], #4
 800a142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a146:	dcec      	bgt.n	800a122 <__multadd+0x12>
 800a148:	b30e      	cbz	r6, 800a18e <__multadd+0x7e>
 800a14a:	68a3      	ldr	r3, [r4, #8]
 800a14c:	42ab      	cmp	r3, r5
 800a14e:	dc19      	bgt.n	800a184 <__multadd+0x74>
 800a150:	6861      	ldr	r1, [r4, #4]
 800a152:	4638      	mov	r0, r7
 800a154:	3101      	adds	r1, #1
 800a156:	f7ff ff79 	bl	800a04c <_Balloc>
 800a15a:	4680      	mov	r8, r0
 800a15c:	b928      	cbnz	r0, 800a16a <__multadd+0x5a>
 800a15e:	4602      	mov	r2, r0
 800a160:	4b0c      	ldr	r3, [pc, #48]	; (800a194 <__multadd+0x84>)
 800a162:	480d      	ldr	r0, [pc, #52]	; (800a198 <__multadd+0x88>)
 800a164:	21b5      	movs	r1, #181	; 0xb5
 800a166:	f000 fd15 	bl	800ab94 <__assert_func>
 800a16a:	6922      	ldr	r2, [r4, #16]
 800a16c:	3202      	adds	r2, #2
 800a16e:	f104 010c 	add.w	r1, r4, #12
 800a172:	0092      	lsls	r2, r2, #2
 800a174:	300c      	adds	r0, #12
 800a176:	f7ff ff5b 	bl	800a030 <memcpy>
 800a17a:	4621      	mov	r1, r4
 800a17c:	4638      	mov	r0, r7
 800a17e:	f7ff ffa5 	bl	800a0cc <_Bfree>
 800a182:	4644      	mov	r4, r8
 800a184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a188:	3501      	adds	r5, #1
 800a18a:	615e      	str	r6, [r3, #20]
 800a18c:	6125      	str	r5, [r4, #16]
 800a18e:	4620      	mov	r0, r4
 800a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a194:	0800bb08 	.word	0x0800bb08
 800a198:	0800bbab 	.word	0x0800bbab

0800a19c <__s2b>:
 800a19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	4615      	mov	r5, r2
 800a1a4:	461f      	mov	r7, r3
 800a1a6:	2209      	movs	r2, #9
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	db09      	blt.n	800a1cc <__s2b+0x30>
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7ff ff47 	bl	800a04c <_Balloc>
 800a1be:	b940      	cbnz	r0, 800a1d2 <__s2b+0x36>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	4b19      	ldr	r3, [pc, #100]	; (800a228 <__s2b+0x8c>)
 800a1c4:	4819      	ldr	r0, [pc, #100]	; (800a22c <__s2b+0x90>)
 800a1c6:	21ce      	movs	r1, #206	; 0xce
 800a1c8:	f000 fce4 	bl	800ab94 <__assert_func>
 800a1cc:	0052      	lsls	r2, r2, #1
 800a1ce:	3101      	adds	r1, #1
 800a1d0:	e7f0      	b.n	800a1b4 <__s2b+0x18>
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	6143      	str	r3, [r0, #20]
 800a1d6:	2d09      	cmp	r5, #9
 800a1d8:	f04f 0301 	mov.w	r3, #1
 800a1dc:	6103      	str	r3, [r0, #16]
 800a1de:	dd16      	ble.n	800a20e <__s2b+0x72>
 800a1e0:	f104 0909 	add.w	r9, r4, #9
 800a1e4:	46c8      	mov	r8, r9
 800a1e6:	442c      	add	r4, r5
 800a1e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1ec:	4601      	mov	r1, r0
 800a1ee:	3b30      	subs	r3, #48	; 0x30
 800a1f0:	220a      	movs	r2, #10
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f7ff ff8c 	bl	800a110 <__multadd>
 800a1f8:	45a0      	cmp	r8, r4
 800a1fa:	d1f5      	bne.n	800a1e8 <__s2b+0x4c>
 800a1fc:	f1a5 0408 	sub.w	r4, r5, #8
 800a200:	444c      	add	r4, r9
 800a202:	1b2d      	subs	r5, r5, r4
 800a204:	1963      	adds	r3, r4, r5
 800a206:	42bb      	cmp	r3, r7
 800a208:	db04      	blt.n	800a214 <__s2b+0x78>
 800a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20e:	340a      	adds	r4, #10
 800a210:	2509      	movs	r5, #9
 800a212:	e7f6      	b.n	800a202 <__s2b+0x66>
 800a214:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a218:	4601      	mov	r1, r0
 800a21a:	3b30      	subs	r3, #48	; 0x30
 800a21c:	220a      	movs	r2, #10
 800a21e:	4630      	mov	r0, r6
 800a220:	f7ff ff76 	bl	800a110 <__multadd>
 800a224:	e7ee      	b.n	800a204 <__s2b+0x68>
 800a226:	bf00      	nop
 800a228:	0800bb08 	.word	0x0800bb08
 800a22c:	0800bbab 	.word	0x0800bbab

0800a230 <__hi0bits>:
 800a230:	0c03      	lsrs	r3, r0, #16
 800a232:	041b      	lsls	r3, r3, #16
 800a234:	b9d3      	cbnz	r3, 800a26c <__hi0bits+0x3c>
 800a236:	0400      	lsls	r0, r0, #16
 800a238:	2310      	movs	r3, #16
 800a23a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a23e:	bf04      	itt	eq
 800a240:	0200      	lsleq	r0, r0, #8
 800a242:	3308      	addeq	r3, #8
 800a244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a248:	bf04      	itt	eq
 800a24a:	0100      	lsleq	r0, r0, #4
 800a24c:	3304      	addeq	r3, #4
 800a24e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a252:	bf04      	itt	eq
 800a254:	0080      	lsleq	r0, r0, #2
 800a256:	3302      	addeq	r3, #2
 800a258:	2800      	cmp	r0, #0
 800a25a:	db05      	blt.n	800a268 <__hi0bits+0x38>
 800a25c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a260:	f103 0301 	add.w	r3, r3, #1
 800a264:	bf08      	it	eq
 800a266:	2320      	moveq	r3, #32
 800a268:	4618      	mov	r0, r3
 800a26a:	4770      	bx	lr
 800a26c:	2300      	movs	r3, #0
 800a26e:	e7e4      	b.n	800a23a <__hi0bits+0xa>

0800a270 <__lo0bits>:
 800a270:	6803      	ldr	r3, [r0, #0]
 800a272:	f013 0207 	ands.w	r2, r3, #7
 800a276:	4601      	mov	r1, r0
 800a278:	d00b      	beq.n	800a292 <__lo0bits+0x22>
 800a27a:	07da      	lsls	r2, r3, #31
 800a27c:	d423      	bmi.n	800a2c6 <__lo0bits+0x56>
 800a27e:	0798      	lsls	r0, r3, #30
 800a280:	bf49      	itett	mi
 800a282:	085b      	lsrmi	r3, r3, #1
 800a284:	089b      	lsrpl	r3, r3, #2
 800a286:	2001      	movmi	r0, #1
 800a288:	600b      	strmi	r3, [r1, #0]
 800a28a:	bf5c      	itt	pl
 800a28c:	600b      	strpl	r3, [r1, #0]
 800a28e:	2002      	movpl	r0, #2
 800a290:	4770      	bx	lr
 800a292:	b298      	uxth	r0, r3
 800a294:	b9a8      	cbnz	r0, 800a2c2 <__lo0bits+0x52>
 800a296:	0c1b      	lsrs	r3, r3, #16
 800a298:	2010      	movs	r0, #16
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	b90a      	cbnz	r2, 800a2a2 <__lo0bits+0x32>
 800a29e:	3008      	adds	r0, #8
 800a2a0:	0a1b      	lsrs	r3, r3, #8
 800a2a2:	071a      	lsls	r2, r3, #28
 800a2a4:	bf04      	itt	eq
 800a2a6:	091b      	lsreq	r3, r3, #4
 800a2a8:	3004      	addeq	r0, #4
 800a2aa:	079a      	lsls	r2, r3, #30
 800a2ac:	bf04      	itt	eq
 800a2ae:	089b      	lsreq	r3, r3, #2
 800a2b0:	3002      	addeq	r0, #2
 800a2b2:	07da      	lsls	r2, r3, #31
 800a2b4:	d403      	bmi.n	800a2be <__lo0bits+0x4e>
 800a2b6:	085b      	lsrs	r3, r3, #1
 800a2b8:	f100 0001 	add.w	r0, r0, #1
 800a2bc:	d005      	beq.n	800a2ca <__lo0bits+0x5a>
 800a2be:	600b      	str	r3, [r1, #0]
 800a2c0:	4770      	bx	lr
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	e7e9      	b.n	800a29a <__lo0bits+0x2a>
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	4770      	bx	lr
 800a2ca:	2020      	movs	r0, #32
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <__i2b>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	f7ff feb9 	bl	800a04c <_Balloc>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	b928      	cbnz	r0, 800a2ea <__i2b+0x1a>
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <__i2b+0x24>)
 800a2e0:	4805      	ldr	r0, [pc, #20]	; (800a2f8 <__i2b+0x28>)
 800a2e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2e6:	f000 fc55 	bl	800ab94 <__assert_func>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	6144      	str	r4, [r0, #20]
 800a2ee:	6103      	str	r3, [r0, #16]
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	bf00      	nop
 800a2f4:	0800bb08 	.word	0x0800bb08
 800a2f8:	0800bbab 	.word	0x0800bbab

0800a2fc <__multiply>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	4691      	mov	r9, r2
 800a302:	690a      	ldr	r2, [r1, #16]
 800a304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a308:	429a      	cmp	r2, r3
 800a30a:	bfb8      	it	lt
 800a30c:	460b      	movlt	r3, r1
 800a30e:	460c      	mov	r4, r1
 800a310:	bfbc      	itt	lt
 800a312:	464c      	movlt	r4, r9
 800a314:	4699      	movlt	r9, r3
 800a316:	6927      	ldr	r7, [r4, #16]
 800a318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a31c:	68a3      	ldr	r3, [r4, #8]
 800a31e:	6861      	ldr	r1, [r4, #4]
 800a320:	eb07 060a 	add.w	r6, r7, sl
 800a324:	42b3      	cmp	r3, r6
 800a326:	b085      	sub	sp, #20
 800a328:	bfb8      	it	lt
 800a32a:	3101      	addlt	r1, #1
 800a32c:	f7ff fe8e 	bl	800a04c <_Balloc>
 800a330:	b930      	cbnz	r0, 800a340 <__multiply+0x44>
 800a332:	4602      	mov	r2, r0
 800a334:	4b44      	ldr	r3, [pc, #272]	; (800a448 <__multiply+0x14c>)
 800a336:	4845      	ldr	r0, [pc, #276]	; (800a44c <__multiply+0x150>)
 800a338:	f240 115d 	movw	r1, #349	; 0x15d
 800a33c:	f000 fc2a 	bl	800ab94 <__assert_func>
 800a340:	f100 0514 	add.w	r5, r0, #20
 800a344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a348:	462b      	mov	r3, r5
 800a34a:	2200      	movs	r2, #0
 800a34c:	4543      	cmp	r3, r8
 800a34e:	d321      	bcc.n	800a394 <__multiply+0x98>
 800a350:	f104 0314 	add.w	r3, r4, #20
 800a354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a358:	f109 0314 	add.w	r3, r9, #20
 800a35c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a360:	9202      	str	r2, [sp, #8]
 800a362:	1b3a      	subs	r2, r7, r4
 800a364:	3a15      	subs	r2, #21
 800a366:	f022 0203 	bic.w	r2, r2, #3
 800a36a:	3204      	adds	r2, #4
 800a36c:	f104 0115 	add.w	r1, r4, #21
 800a370:	428f      	cmp	r7, r1
 800a372:	bf38      	it	cc
 800a374:	2204      	movcc	r2, #4
 800a376:	9201      	str	r2, [sp, #4]
 800a378:	9a02      	ldr	r2, [sp, #8]
 800a37a:	9303      	str	r3, [sp, #12]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d80c      	bhi.n	800a39a <__multiply+0x9e>
 800a380:	2e00      	cmp	r6, #0
 800a382:	dd03      	ble.n	800a38c <__multiply+0x90>
 800a384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d05a      	beq.n	800a442 <__multiply+0x146>
 800a38c:	6106      	str	r6, [r0, #16]
 800a38e:	b005      	add	sp, #20
 800a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a394:	f843 2b04 	str.w	r2, [r3], #4
 800a398:	e7d8      	b.n	800a34c <__multiply+0x50>
 800a39a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a39e:	f1ba 0f00 	cmp.w	sl, #0
 800a3a2:	d024      	beq.n	800a3ee <__multiply+0xf2>
 800a3a4:	f104 0e14 	add.w	lr, r4, #20
 800a3a8:	46a9      	mov	r9, r5
 800a3aa:	f04f 0c00 	mov.w	ip, #0
 800a3ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a3b2:	f8d9 1000 	ldr.w	r1, [r9]
 800a3b6:	fa1f fb82 	uxth.w	fp, r2
 800a3ba:	b289      	uxth	r1, r1
 800a3bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800a3c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a3c4:	f8d9 2000 	ldr.w	r2, [r9]
 800a3c8:	4461      	add	r1, ip
 800a3ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800a3d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a3d6:	b289      	uxth	r1, r1
 800a3d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a3dc:	4577      	cmp	r7, lr
 800a3de:	f849 1b04 	str.w	r1, [r9], #4
 800a3e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a3e6:	d8e2      	bhi.n	800a3ae <__multiply+0xb2>
 800a3e8:	9a01      	ldr	r2, [sp, #4]
 800a3ea:	f845 c002 	str.w	ip, [r5, r2]
 800a3ee:	9a03      	ldr	r2, [sp, #12]
 800a3f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	f1b9 0f00 	cmp.w	r9, #0
 800a3fa:	d020      	beq.n	800a43e <__multiply+0x142>
 800a3fc:	6829      	ldr	r1, [r5, #0]
 800a3fe:	f104 0c14 	add.w	ip, r4, #20
 800a402:	46ae      	mov	lr, r5
 800a404:	f04f 0a00 	mov.w	sl, #0
 800a408:	f8bc b000 	ldrh.w	fp, [ip]
 800a40c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a410:	fb09 220b 	mla	r2, r9, fp, r2
 800a414:	4492      	add	sl, r2
 800a416:	b289      	uxth	r1, r1
 800a418:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a41c:	f84e 1b04 	str.w	r1, [lr], #4
 800a420:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a424:	f8be 1000 	ldrh.w	r1, [lr]
 800a428:	0c12      	lsrs	r2, r2, #16
 800a42a:	fb09 1102 	mla	r1, r9, r2, r1
 800a42e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a432:	4567      	cmp	r7, ip
 800a434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a438:	d8e6      	bhi.n	800a408 <__multiply+0x10c>
 800a43a:	9a01      	ldr	r2, [sp, #4]
 800a43c:	50a9      	str	r1, [r5, r2]
 800a43e:	3504      	adds	r5, #4
 800a440:	e79a      	b.n	800a378 <__multiply+0x7c>
 800a442:	3e01      	subs	r6, #1
 800a444:	e79c      	b.n	800a380 <__multiply+0x84>
 800a446:	bf00      	nop
 800a448:	0800bb08 	.word	0x0800bb08
 800a44c:	0800bbab 	.word	0x0800bbab

0800a450 <__pow5mult>:
 800a450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a454:	4615      	mov	r5, r2
 800a456:	f012 0203 	ands.w	r2, r2, #3
 800a45a:	4606      	mov	r6, r0
 800a45c:	460f      	mov	r7, r1
 800a45e:	d007      	beq.n	800a470 <__pow5mult+0x20>
 800a460:	4c25      	ldr	r4, [pc, #148]	; (800a4f8 <__pow5mult+0xa8>)
 800a462:	3a01      	subs	r2, #1
 800a464:	2300      	movs	r3, #0
 800a466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a46a:	f7ff fe51 	bl	800a110 <__multadd>
 800a46e:	4607      	mov	r7, r0
 800a470:	10ad      	asrs	r5, r5, #2
 800a472:	d03d      	beq.n	800a4f0 <__pow5mult+0xa0>
 800a474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a476:	b97c      	cbnz	r4, 800a498 <__pow5mult+0x48>
 800a478:	2010      	movs	r0, #16
 800a47a:	f000 fbbb 	bl	800abf4 <malloc>
 800a47e:	4602      	mov	r2, r0
 800a480:	6270      	str	r0, [r6, #36]	; 0x24
 800a482:	b928      	cbnz	r0, 800a490 <__pow5mult+0x40>
 800a484:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <__pow5mult+0xac>)
 800a486:	481e      	ldr	r0, [pc, #120]	; (800a500 <__pow5mult+0xb0>)
 800a488:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a48c:	f000 fb82 	bl	800ab94 <__assert_func>
 800a490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a494:	6004      	str	r4, [r0, #0]
 800a496:	60c4      	str	r4, [r0, #12]
 800a498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a49c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4a0:	b94c      	cbnz	r4, 800a4b6 <__pow5mult+0x66>
 800a4a2:	f240 2171 	movw	r1, #625	; 0x271
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f7ff ff12 	bl	800a2d0 <__i2b>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	f04f 0900 	mov.w	r9, #0
 800a4ba:	07eb      	lsls	r3, r5, #31
 800a4bc:	d50a      	bpl.n	800a4d4 <__pow5mult+0x84>
 800a4be:	4639      	mov	r1, r7
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ff1a 	bl	800a2fc <__multiply>
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	f7ff fdfd 	bl	800a0cc <_Bfree>
 800a4d2:	4647      	mov	r7, r8
 800a4d4:	106d      	asrs	r5, r5, #1
 800a4d6:	d00b      	beq.n	800a4f0 <__pow5mult+0xa0>
 800a4d8:	6820      	ldr	r0, [r4, #0]
 800a4da:	b938      	cbnz	r0, 800a4ec <__pow5mult+0x9c>
 800a4dc:	4622      	mov	r2, r4
 800a4de:	4621      	mov	r1, r4
 800a4e0:	4630      	mov	r0, r6
 800a4e2:	f7ff ff0b 	bl	800a2fc <__multiply>
 800a4e6:	6020      	str	r0, [r4, #0]
 800a4e8:	f8c0 9000 	str.w	r9, [r0]
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	e7e4      	b.n	800a4ba <__pow5mult+0x6a>
 800a4f0:	4638      	mov	r0, r7
 800a4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4f6:	bf00      	nop
 800a4f8:	0800bcf8 	.word	0x0800bcf8
 800a4fc:	0800bb94 	.word	0x0800bb94
 800a500:	0800bbab 	.word	0x0800bbab

0800a504 <__lshift>:
 800a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a508:	460c      	mov	r4, r1
 800a50a:	6849      	ldr	r1, [r1, #4]
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	4607      	mov	r7, r0
 800a516:	4691      	mov	r9, r2
 800a518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a51c:	f108 0601 	add.w	r6, r8, #1
 800a520:	42b3      	cmp	r3, r6
 800a522:	db0b      	blt.n	800a53c <__lshift+0x38>
 800a524:	4638      	mov	r0, r7
 800a526:	f7ff fd91 	bl	800a04c <_Balloc>
 800a52a:	4605      	mov	r5, r0
 800a52c:	b948      	cbnz	r0, 800a542 <__lshift+0x3e>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b2a      	ldr	r3, [pc, #168]	; (800a5dc <__lshift+0xd8>)
 800a532:	482b      	ldr	r0, [pc, #172]	; (800a5e0 <__lshift+0xdc>)
 800a534:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a538:	f000 fb2c 	bl	800ab94 <__assert_func>
 800a53c:	3101      	adds	r1, #1
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	e7ee      	b.n	800a520 <__lshift+0x1c>
 800a542:	2300      	movs	r3, #0
 800a544:	f100 0114 	add.w	r1, r0, #20
 800a548:	f100 0210 	add.w	r2, r0, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	4553      	cmp	r3, sl
 800a550:	db37      	blt.n	800a5c2 <__lshift+0xbe>
 800a552:	6920      	ldr	r0, [r4, #16]
 800a554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a558:	f104 0314 	add.w	r3, r4, #20
 800a55c:	f019 091f 	ands.w	r9, r9, #31
 800a560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a568:	d02f      	beq.n	800a5ca <__lshift+0xc6>
 800a56a:	f1c9 0e20 	rsb	lr, r9, #32
 800a56e:	468a      	mov	sl, r1
 800a570:	f04f 0c00 	mov.w	ip, #0
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	fa02 f209 	lsl.w	r2, r2, r9
 800a57a:	ea42 020c 	orr.w	r2, r2, ip
 800a57e:	f84a 2b04 	str.w	r2, [sl], #4
 800a582:	f853 2b04 	ldr.w	r2, [r3], #4
 800a586:	4298      	cmp	r0, r3
 800a588:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a58c:	d8f2      	bhi.n	800a574 <__lshift+0x70>
 800a58e:	1b03      	subs	r3, r0, r4
 800a590:	3b15      	subs	r3, #21
 800a592:	f023 0303 	bic.w	r3, r3, #3
 800a596:	3304      	adds	r3, #4
 800a598:	f104 0215 	add.w	r2, r4, #21
 800a59c:	4290      	cmp	r0, r2
 800a59e:	bf38      	it	cc
 800a5a0:	2304      	movcc	r3, #4
 800a5a2:	f841 c003 	str.w	ip, [r1, r3]
 800a5a6:	f1bc 0f00 	cmp.w	ip, #0
 800a5aa:	d001      	beq.n	800a5b0 <__lshift+0xac>
 800a5ac:	f108 0602 	add.w	r6, r8, #2
 800a5b0:	3e01      	subs	r6, #1
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	612e      	str	r6, [r5, #16]
 800a5b6:	4621      	mov	r1, r4
 800a5b8:	f7ff fd88 	bl	800a0cc <_Bfree>
 800a5bc:	4628      	mov	r0, r5
 800a5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	e7c1      	b.n	800a54e <__lshift+0x4a>
 800a5ca:	3904      	subs	r1, #4
 800a5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5d4:	4298      	cmp	r0, r3
 800a5d6:	d8f9      	bhi.n	800a5cc <__lshift+0xc8>
 800a5d8:	e7ea      	b.n	800a5b0 <__lshift+0xac>
 800a5da:	bf00      	nop
 800a5dc:	0800bb08 	.word	0x0800bb08
 800a5e0:	0800bbab 	.word	0x0800bbab

0800a5e4 <__mcmp>:
 800a5e4:	b530      	push	{r4, r5, lr}
 800a5e6:	6902      	ldr	r2, [r0, #16]
 800a5e8:	690c      	ldr	r4, [r1, #16]
 800a5ea:	1b12      	subs	r2, r2, r4
 800a5ec:	d10e      	bne.n	800a60c <__mcmp+0x28>
 800a5ee:	f100 0314 	add.w	r3, r0, #20
 800a5f2:	3114      	adds	r1, #20
 800a5f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a604:	42a5      	cmp	r5, r4
 800a606:	d003      	beq.n	800a610 <__mcmp+0x2c>
 800a608:	d305      	bcc.n	800a616 <__mcmp+0x32>
 800a60a:	2201      	movs	r2, #1
 800a60c:	4610      	mov	r0, r2
 800a60e:	bd30      	pop	{r4, r5, pc}
 800a610:	4283      	cmp	r3, r0
 800a612:	d3f3      	bcc.n	800a5fc <__mcmp+0x18>
 800a614:	e7fa      	b.n	800a60c <__mcmp+0x28>
 800a616:	f04f 32ff 	mov.w	r2, #4294967295
 800a61a:	e7f7      	b.n	800a60c <__mcmp+0x28>

0800a61c <__mdiff>:
 800a61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a620:	460c      	mov	r4, r1
 800a622:	4606      	mov	r6, r0
 800a624:	4611      	mov	r1, r2
 800a626:	4620      	mov	r0, r4
 800a628:	4690      	mov	r8, r2
 800a62a:	f7ff ffdb 	bl	800a5e4 <__mcmp>
 800a62e:	1e05      	subs	r5, r0, #0
 800a630:	d110      	bne.n	800a654 <__mdiff+0x38>
 800a632:	4629      	mov	r1, r5
 800a634:	4630      	mov	r0, r6
 800a636:	f7ff fd09 	bl	800a04c <_Balloc>
 800a63a:	b930      	cbnz	r0, 800a64a <__mdiff+0x2e>
 800a63c:	4b3a      	ldr	r3, [pc, #232]	; (800a728 <__mdiff+0x10c>)
 800a63e:	4602      	mov	r2, r0
 800a640:	f240 2132 	movw	r1, #562	; 0x232
 800a644:	4839      	ldr	r0, [pc, #228]	; (800a72c <__mdiff+0x110>)
 800a646:	f000 faa5 	bl	800ab94 <__assert_func>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a654:	bfa4      	itt	ge
 800a656:	4643      	movge	r3, r8
 800a658:	46a0      	movge	r8, r4
 800a65a:	4630      	mov	r0, r6
 800a65c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a660:	bfa6      	itte	ge
 800a662:	461c      	movge	r4, r3
 800a664:	2500      	movge	r5, #0
 800a666:	2501      	movlt	r5, #1
 800a668:	f7ff fcf0 	bl	800a04c <_Balloc>
 800a66c:	b920      	cbnz	r0, 800a678 <__mdiff+0x5c>
 800a66e:	4b2e      	ldr	r3, [pc, #184]	; (800a728 <__mdiff+0x10c>)
 800a670:	4602      	mov	r2, r0
 800a672:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a676:	e7e5      	b.n	800a644 <__mdiff+0x28>
 800a678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a67c:	6926      	ldr	r6, [r4, #16]
 800a67e:	60c5      	str	r5, [r0, #12]
 800a680:	f104 0914 	add.w	r9, r4, #20
 800a684:	f108 0514 	add.w	r5, r8, #20
 800a688:	f100 0e14 	add.w	lr, r0, #20
 800a68c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a694:	f108 0210 	add.w	r2, r8, #16
 800a698:	46f2      	mov	sl, lr
 800a69a:	2100      	movs	r1, #0
 800a69c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6a4:	fa1f f883 	uxth.w	r8, r3
 800a6a8:	fa11 f18b 	uxtah	r1, r1, fp
 800a6ac:	0c1b      	lsrs	r3, r3, #16
 800a6ae:	eba1 0808 	sub.w	r8, r1, r8
 800a6b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6ba:	fa1f f888 	uxth.w	r8, r8
 800a6be:	1419      	asrs	r1, r3, #16
 800a6c0:	454e      	cmp	r6, r9
 800a6c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6c6:	f84a 3b04 	str.w	r3, [sl], #4
 800a6ca:	d8e7      	bhi.n	800a69c <__mdiff+0x80>
 800a6cc:	1b33      	subs	r3, r6, r4
 800a6ce:	3b15      	subs	r3, #21
 800a6d0:	f023 0303 	bic.w	r3, r3, #3
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	3415      	adds	r4, #21
 800a6d8:	42a6      	cmp	r6, r4
 800a6da:	bf38      	it	cc
 800a6dc:	2304      	movcc	r3, #4
 800a6de:	441d      	add	r5, r3
 800a6e0:	4473      	add	r3, lr
 800a6e2:	469e      	mov	lr, r3
 800a6e4:	462e      	mov	r6, r5
 800a6e6:	4566      	cmp	r6, ip
 800a6e8:	d30e      	bcc.n	800a708 <__mdiff+0xec>
 800a6ea:	f10c 0203 	add.w	r2, ip, #3
 800a6ee:	1b52      	subs	r2, r2, r5
 800a6f0:	f022 0203 	bic.w	r2, r2, #3
 800a6f4:	3d03      	subs	r5, #3
 800a6f6:	45ac      	cmp	ip, r5
 800a6f8:	bf38      	it	cc
 800a6fa:	2200      	movcc	r2, #0
 800a6fc:	441a      	add	r2, r3
 800a6fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a702:	b17b      	cbz	r3, 800a724 <__mdiff+0x108>
 800a704:	6107      	str	r7, [r0, #16]
 800a706:	e7a3      	b.n	800a650 <__mdiff+0x34>
 800a708:	f856 8b04 	ldr.w	r8, [r6], #4
 800a70c:	fa11 f288 	uxtah	r2, r1, r8
 800a710:	1414      	asrs	r4, r2, #16
 800a712:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a716:	b292      	uxth	r2, r2
 800a718:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a71c:	f84e 2b04 	str.w	r2, [lr], #4
 800a720:	1421      	asrs	r1, r4, #16
 800a722:	e7e0      	b.n	800a6e6 <__mdiff+0xca>
 800a724:	3f01      	subs	r7, #1
 800a726:	e7ea      	b.n	800a6fe <__mdiff+0xe2>
 800a728:	0800bb08 	.word	0x0800bb08
 800a72c:	0800bbab 	.word	0x0800bbab

0800a730 <__ulp>:
 800a730:	b082      	sub	sp, #8
 800a732:	ed8d 0b00 	vstr	d0, [sp]
 800a736:	9b01      	ldr	r3, [sp, #4]
 800a738:	4912      	ldr	r1, [pc, #72]	; (800a784 <__ulp+0x54>)
 800a73a:	4019      	ands	r1, r3
 800a73c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a740:	2900      	cmp	r1, #0
 800a742:	dd05      	ble.n	800a750 <__ulp+0x20>
 800a744:	2200      	movs	r2, #0
 800a746:	460b      	mov	r3, r1
 800a748:	ec43 2b10 	vmov	d0, r2, r3
 800a74c:	b002      	add	sp, #8
 800a74e:	4770      	bx	lr
 800a750:	4249      	negs	r1, r1
 800a752:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a756:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a75a:	f04f 0200 	mov.w	r2, #0
 800a75e:	f04f 0300 	mov.w	r3, #0
 800a762:	da04      	bge.n	800a76e <__ulp+0x3e>
 800a764:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a768:	fa41 f300 	asr.w	r3, r1, r0
 800a76c:	e7ec      	b.n	800a748 <__ulp+0x18>
 800a76e:	f1a0 0114 	sub.w	r1, r0, #20
 800a772:	291e      	cmp	r1, #30
 800a774:	bfda      	itte	le
 800a776:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a77a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a77e:	2101      	movgt	r1, #1
 800a780:	460a      	mov	r2, r1
 800a782:	e7e1      	b.n	800a748 <__ulp+0x18>
 800a784:	7ff00000 	.word	0x7ff00000

0800a788 <__b2d>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	6905      	ldr	r5, [r0, #16]
 800a78c:	f100 0714 	add.w	r7, r0, #20
 800a790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a794:	1f2e      	subs	r6, r5, #4
 800a796:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a79a:	4620      	mov	r0, r4
 800a79c:	f7ff fd48 	bl	800a230 <__hi0bits>
 800a7a0:	f1c0 0320 	rsb	r3, r0, #32
 800a7a4:	280a      	cmp	r0, #10
 800a7a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a824 <__b2d+0x9c>
 800a7aa:	600b      	str	r3, [r1, #0]
 800a7ac:	dc14      	bgt.n	800a7d8 <__b2d+0x50>
 800a7ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800a7b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800a7b6:	42b7      	cmp	r7, r6
 800a7b8:	ea41 030c 	orr.w	r3, r1, ip
 800a7bc:	bf34      	ite	cc
 800a7be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7c2:	2100      	movcs	r1, #0
 800a7c4:	3015      	adds	r0, #21
 800a7c6:	fa04 f000 	lsl.w	r0, r4, r0
 800a7ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800a7ce:	ea40 0201 	orr.w	r2, r0, r1
 800a7d2:	ec43 2b10 	vmov	d0, r2, r3
 800a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d8:	42b7      	cmp	r7, r6
 800a7da:	bf3a      	itte	cc
 800a7dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a7e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800a7e4:	2100      	movcs	r1, #0
 800a7e6:	380b      	subs	r0, #11
 800a7e8:	d017      	beq.n	800a81a <__b2d+0x92>
 800a7ea:	f1c0 0c20 	rsb	ip, r0, #32
 800a7ee:	fa04 f500 	lsl.w	r5, r4, r0
 800a7f2:	42be      	cmp	r6, r7
 800a7f4:	fa21 f40c 	lsr.w	r4, r1, ip
 800a7f8:	ea45 0504 	orr.w	r5, r5, r4
 800a7fc:	bf8c      	ite	hi
 800a7fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a802:	2400      	movls	r4, #0
 800a804:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a808:	fa01 f000 	lsl.w	r0, r1, r0
 800a80c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a810:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a814:	ea40 0204 	orr.w	r2, r0, r4
 800a818:	e7db      	b.n	800a7d2 <__b2d+0x4a>
 800a81a:	ea44 030c 	orr.w	r3, r4, ip
 800a81e:	460a      	mov	r2, r1
 800a820:	e7d7      	b.n	800a7d2 <__b2d+0x4a>
 800a822:	bf00      	nop
 800a824:	3ff00000 	.word	0x3ff00000

0800a828 <__d2b>:
 800a828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a82c:	4689      	mov	r9, r1
 800a82e:	2101      	movs	r1, #1
 800a830:	ec57 6b10 	vmov	r6, r7, d0
 800a834:	4690      	mov	r8, r2
 800a836:	f7ff fc09 	bl	800a04c <_Balloc>
 800a83a:	4604      	mov	r4, r0
 800a83c:	b930      	cbnz	r0, 800a84c <__d2b+0x24>
 800a83e:	4602      	mov	r2, r0
 800a840:	4b25      	ldr	r3, [pc, #148]	; (800a8d8 <__d2b+0xb0>)
 800a842:	4826      	ldr	r0, [pc, #152]	; (800a8dc <__d2b+0xb4>)
 800a844:	f240 310a 	movw	r1, #778	; 0x30a
 800a848:	f000 f9a4 	bl	800ab94 <__assert_func>
 800a84c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a854:	bb35      	cbnz	r5, 800a8a4 <__d2b+0x7c>
 800a856:	2e00      	cmp	r6, #0
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	d028      	beq.n	800a8ae <__d2b+0x86>
 800a85c:	4668      	mov	r0, sp
 800a85e:	9600      	str	r6, [sp, #0]
 800a860:	f7ff fd06 	bl	800a270 <__lo0bits>
 800a864:	9900      	ldr	r1, [sp, #0]
 800a866:	b300      	cbz	r0, 800a8aa <__d2b+0x82>
 800a868:	9a01      	ldr	r2, [sp, #4]
 800a86a:	f1c0 0320 	rsb	r3, r0, #32
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	430b      	orrs	r3, r1
 800a874:	40c2      	lsrs	r2, r0
 800a876:	6163      	str	r3, [r4, #20]
 800a878:	9201      	str	r2, [sp, #4]
 800a87a:	9b01      	ldr	r3, [sp, #4]
 800a87c:	61a3      	str	r3, [r4, #24]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bf14      	ite	ne
 800a882:	2202      	movne	r2, #2
 800a884:	2201      	moveq	r2, #1
 800a886:	6122      	str	r2, [r4, #16]
 800a888:	b1d5      	cbz	r5, 800a8c0 <__d2b+0x98>
 800a88a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a88e:	4405      	add	r5, r0
 800a890:	f8c9 5000 	str.w	r5, [r9]
 800a894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a898:	f8c8 0000 	str.w	r0, [r8]
 800a89c:	4620      	mov	r0, r4
 800a89e:	b003      	add	sp, #12
 800a8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8a8:	e7d5      	b.n	800a856 <__d2b+0x2e>
 800a8aa:	6161      	str	r1, [r4, #20]
 800a8ac:	e7e5      	b.n	800a87a <__d2b+0x52>
 800a8ae:	a801      	add	r0, sp, #4
 800a8b0:	f7ff fcde 	bl	800a270 <__lo0bits>
 800a8b4:	9b01      	ldr	r3, [sp, #4]
 800a8b6:	6163      	str	r3, [r4, #20]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	6122      	str	r2, [r4, #16]
 800a8bc:	3020      	adds	r0, #32
 800a8be:	e7e3      	b.n	800a888 <__d2b+0x60>
 800a8c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8c8:	f8c9 0000 	str.w	r0, [r9]
 800a8cc:	6918      	ldr	r0, [r3, #16]
 800a8ce:	f7ff fcaf 	bl	800a230 <__hi0bits>
 800a8d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8d6:	e7df      	b.n	800a898 <__d2b+0x70>
 800a8d8:	0800bb08 	.word	0x0800bb08
 800a8dc:	0800bbab 	.word	0x0800bbab

0800a8e0 <__ratio>:
 800a8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	4688      	mov	r8, r1
 800a8e6:	4669      	mov	r1, sp
 800a8e8:	4681      	mov	r9, r0
 800a8ea:	f7ff ff4d 	bl	800a788 <__b2d>
 800a8ee:	a901      	add	r1, sp, #4
 800a8f0:	4640      	mov	r0, r8
 800a8f2:	ec55 4b10 	vmov	r4, r5, d0
 800a8f6:	ee10 aa10 	vmov	sl, s0
 800a8fa:	f7ff ff45 	bl	800a788 <__b2d>
 800a8fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a902:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a906:	1a59      	subs	r1, r3, r1
 800a908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a912:	ec57 6b10 	vmov	r6, r7, d0
 800a916:	2b00      	cmp	r3, #0
 800a918:	bfd6      	itet	le
 800a91a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a91e:	462a      	movgt	r2, r5
 800a920:	463a      	movle	r2, r7
 800a922:	46ab      	mov	fp, r5
 800a924:	bfd6      	itet	le
 800a926:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a92a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a92e:	ee00 3a90 	vmovle	s1, r3
 800a932:	ec4b ab17 	vmov	d7, sl, fp
 800a936:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a93a:	b003      	add	sp, #12
 800a93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a940 <__copybits>:
 800a940:	3901      	subs	r1, #1
 800a942:	b570      	push	{r4, r5, r6, lr}
 800a944:	1149      	asrs	r1, r1, #5
 800a946:	6914      	ldr	r4, [r2, #16]
 800a948:	3101      	adds	r1, #1
 800a94a:	f102 0314 	add.w	r3, r2, #20
 800a94e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a952:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a956:	1f05      	subs	r5, r0, #4
 800a958:	42a3      	cmp	r3, r4
 800a95a:	d30c      	bcc.n	800a976 <__copybits+0x36>
 800a95c:	1aa3      	subs	r3, r4, r2
 800a95e:	3b11      	subs	r3, #17
 800a960:	f023 0303 	bic.w	r3, r3, #3
 800a964:	3211      	adds	r2, #17
 800a966:	42a2      	cmp	r2, r4
 800a968:	bf88      	it	hi
 800a96a:	2300      	movhi	r3, #0
 800a96c:	4418      	add	r0, r3
 800a96e:	2300      	movs	r3, #0
 800a970:	4288      	cmp	r0, r1
 800a972:	d305      	bcc.n	800a980 <__copybits+0x40>
 800a974:	bd70      	pop	{r4, r5, r6, pc}
 800a976:	f853 6b04 	ldr.w	r6, [r3], #4
 800a97a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a97e:	e7eb      	b.n	800a958 <__copybits+0x18>
 800a980:	f840 3b04 	str.w	r3, [r0], #4
 800a984:	e7f4      	b.n	800a970 <__copybits+0x30>

0800a986 <__any_on>:
 800a986:	f100 0214 	add.w	r2, r0, #20
 800a98a:	6900      	ldr	r0, [r0, #16]
 800a98c:	114b      	asrs	r3, r1, #5
 800a98e:	4298      	cmp	r0, r3
 800a990:	b510      	push	{r4, lr}
 800a992:	db11      	blt.n	800a9b8 <__any_on+0x32>
 800a994:	dd0a      	ble.n	800a9ac <__any_on+0x26>
 800a996:	f011 011f 	ands.w	r1, r1, #31
 800a99a:	d007      	beq.n	800a9ac <__any_on+0x26>
 800a99c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9a0:	fa24 f001 	lsr.w	r0, r4, r1
 800a9a4:	fa00 f101 	lsl.w	r1, r0, r1
 800a9a8:	428c      	cmp	r4, r1
 800a9aa:	d10b      	bne.n	800a9c4 <__any_on+0x3e>
 800a9ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d803      	bhi.n	800a9bc <__any_on+0x36>
 800a9b4:	2000      	movs	r0, #0
 800a9b6:	bd10      	pop	{r4, pc}
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	e7f7      	b.n	800a9ac <__any_on+0x26>
 800a9bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9c0:	2900      	cmp	r1, #0
 800a9c2:	d0f5      	beq.n	800a9b0 <__any_on+0x2a>
 800a9c4:	2001      	movs	r0, #1
 800a9c6:	e7f6      	b.n	800a9b6 <__any_on+0x30>

0800a9c8 <_calloc_r>:
 800a9c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9ca:	fba1 2402 	umull	r2, r4, r1, r2
 800a9ce:	b94c      	cbnz	r4, 800a9e4 <_calloc_r+0x1c>
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	9201      	str	r2, [sp, #4]
 800a9d4:	f000 f82e 	bl	800aa34 <_malloc_r>
 800a9d8:	9a01      	ldr	r2, [sp, #4]
 800a9da:	4605      	mov	r5, r0
 800a9dc:	b930      	cbnz	r0, 800a9ec <_calloc_r+0x24>
 800a9de:	4628      	mov	r0, r5
 800a9e0:	b003      	add	sp, #12
 800a9e2:	bd30      	pop	{r4, r5, pc}
 800a9e4:	220c      	movs	r2, #12
 800a9e6:	6002      	str	r2, [r0, #0]
 800a9e8:	2500      	movs	r5, #0
 800a9ea:	e7f8      	b.n	800a9de <_calloc_r+0x16>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f7fe f991 	bl	8008d14 <memset>
 800a9f2:	e7f4      	b.n	800a9de <_calloc_r+0x16>

0800a9f4 <sbrk_aligned>:
 800a9f4:	b570      	push	{r4, r5, r6, lr}
 800a9f6:	4e0e      	ldr	r6, [pc, #56]	; (800aa30 <sbrk_aligned+0x3c>)
 800a9f8:	460c      	mov	r4, r1
 800a9fa:	6831      	ldr	r1, [r6, #0]
 800a9fc:	4605      	mov	r5, r0
 800a9fe:	b911      	cbnz	r1, 800aa06 <sbrk_aligned+0x12>
 800aa00:	f000 f896 	bl	800ab30 <_sbrk_r>
 800aa04:	6030      	str	r0, [r6, #0]
 800aa06:	4621      	mov	r1, r4
 800aa08:	4628      	mov	r0, r5
 800aa0a:	f000 f891 	bl	800ab30 <_sbrk_r>
 800aa0e:	1c43      	adds	r3, r0, #1
 800aa10:	d00a      	beq.n	800aa28 <sbrk_aligned+0x34>
 800aa12:	1cc4      	adds	r4, r0, #3
 800aa14:	f024 0403 	bic.w	r4, r4, #3
 800aa18:	42a0      	cmp	r0, r4
 800aa1a:	d007      	beq.n	800aa2c <sbrk_aligned+0x38>
 800aa1c:	1a21      	subs	r1, r4, r0
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f000 f886 	bl	800ab30 <_sbrk_r>
 800aa24:	3001      	adds	r0, #1
 800aa26:	d101      	bne.n	800aa2c <sbrk_aligned+0x38>
 800aa28:	f04f 34ff 	mov.w	r4, #4294967295
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	240009a4 	.word	0x240009a4

0800aa34 <_malloc_r>:
 800aa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa38:	1ccd      	adds	r5, r1, #3
 800aa3a:	f025 0503 	bic.w	r5, r5, #3
 800aa3e:	3508      	adds	r5, #8
 800aa40:	2d0c      	cmp	r5, #12
 800aa42:	bf38      	it	cc
 800aa44:	250c      	movcc	r5, #12
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	4607      	mov	r7, r0
 800aa4a:	db01      	blt.n	800aa50 <_malloc_r+0x1c>
 800aa4c:	42a9      	cmp	r1, r5
 800aa4e:	d905      	bls.n	800aa5c <_malloc_r+0x28>
 800aa50:	230c      	movs	r3, #12
 800aa52:	603b      	str	r3, [r7, #0]
 800aa54:	2600      	movs	r6, #0
 800aa56:	4630      	mov	r0, r6
 800aa58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5c:	4e2e      	ldr	r6, [pc, #184]	; (800ab18 <_malloc_r+0xe4>)
 800aa5e:	f000 f8d1 	bl	800ac04 <__malloc_lock>
 800aa62:	6833      	ldr	r3, [r6, #0]
 800aa64:	461c      	mov	r4, r3
 800aa66:	bb34      	cbnz	r4, 800aab6 <_malloc_r+0x82>
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4638      	mov	r0, r7
 800aa6c:	f7ff ffc2 	bl	800a9f4 <sbrk_aligned>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	4604      	mov	r4, r0
 800aa74:	d14d      	bne.n	800ab12 <_malloc_r+0xde>
 800aa76:	6834      	ldr	r4, [r6, #0]
 800aa78:	4626      	mov	r6, r4
 800aa7a:	2e00      	cmp	r6, #0
 800aa7c:	d140      	bne.n	800ab00 <_malloc_r+0xcc>
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	4631      	mov	r1, r6
 800aa82:	4638      	mov	r0, r7
 800aa84:	eb04 0803 	add.w	r8, r4, r3
 800aa88:	f000 f852 	bl	800ab30 <_sbrk_r>
 800aa8c:	4580      	cmp	r8, r0
 800aa8e:	d13a      	bne.n	800ab06 <_malloc_r+0xd2>
 800aa90:	6821      	ldr	r1, [r4, #0]
 800aa92:	3503      	adds	r5, #3
 800aa94:	1a6d      	subs	r5, r5, r1
 800aa96:	f025 0503 	bic.w	r5, r5, #3
 800aa9a:	3508      	adds	r5, #8
 800aa9c:	2d0c      	cmp	r5, #12
 800aa9e:	bf38      	it	cc
 800aaa0:	250c      	movcc	r5, #12
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	f7ff ffa5 	bl	800a9f4 <sbrk_aligned>
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d02b      	beq.n	800ab06 <_malloc_r+0xd2>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	442b      	add	r3, r5
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	e00e      	b.n	800aad4 <_malloc_r+0xa0>
 800aab6:	6822      	ldr	r2, [r4, #0]
 800aab8:	1b52      	subs	r2, r2, r5
 800aaba:	d41e      	bmi.n	800aafa <_malloc_r+0xc6>
 800aabc:	2a0b      	cmp	r2, #11
 800aabe:	d916      	bls.n	800aaee <_malloc_r+0xba>
 800aac0:	1961      	adds	r1, r4, r5
 800aac2:	42a3      	cmp	r3, r4
 800aac4:	6025      	str	r5, [r4, #0]
 800aac6:	bf18      	it	ne
 800aac8:	6059      	strne	r1, [r3, #4]
 800aaca:	6863      	ldr	r3, [r4, #4]
 800aacc:	bf08      	it	eq
 800aace:	6031      	streq	r1, [r6, #0]
 800aad0:	5162      	str	r2, [r4, r5]
 800aad2:	604b      	str	r3, [r1, #4]
 800aad4:	4638      	mov	r0, r7
 800aad6:	f104 060b 	add.w	r6, r4, #11
 800aada:	f000 f899 	bl	800ac10 <__malloc_unlock>
 800aade:	f026 0607 	bic.w	r6, r6, #7
 800aae2:	1d23      	adds	r3, r4, #4
 800aae4:	1af2      	subs	r2, r6, r3
 800aae6:	d0b6      	beq.n	800aa56 <_malloc_r+0x22>
 800aae8:	1b9b      	subs	r3, r3, r6
 800aaea:	50a3      	str	r3, [r4, r2]
 800aaec:	e7b3      	b.n	800aa56 <_malloc_r+0x22>
 800aaee:	6862      	ldr	r2, [r4, #4]
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	bf0c      	ite	eq
 800aaf4:	6032      	streq	r2, [r6, #0]
 800aaf6:	605a      	strne	r2, [r3, #4]
 800aaf8:	e7ec      	b.n	800aad4 <_malloc_r+0xa0>
 800aafa:	4623      	mov	r3, r4
 800aafc:	6864      	ldr	r4, [r4, #4]
 800aafe:	e7b2      	b.n	800aa66 <_malloc_r+0x32>
 800ab00:	4634      	mov	r4, r6
 800ab02:	6876      	ldr	r6, [r6, #4]
 800ab04:	e7b9      	b.n	800aa7a <_malloc_r+0x46>
 800ab06:	230c      	movs	r3, #12
 800ab08:	603b      	str	r3, [r7, #0]
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	f000 f880 	bl	800ac10 <__malloc_unlock>
 800ab10:	e7a1      	b.n	800aa56 <_malloc_r+0x22>
 800ab12:	6025      	str	r5, [r4, #0]
 800ab14:	e7de      	b.n	800aad4 <_malloc_r+0xa0>
 800ab16:	bf00      	nop
 800ab18:	240009a0 	.word	0x240009a0
 800ab1c:	00000000 	.word	0x00000000

0800ab20 <nan>:
 800ab20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ab28 <nan+0x8>
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	00000000 	.word	0x00000000
 800ab2c:	7ff80000 	.word	0x7ff80000

0800ab30 <_sbrk_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4d06      	ldr	r5, [pc, #24]	; (800ab4c <_sbrk_r+0x1c>)
 800ab34:	2300      	movs	r3, #0
 800ab36:	4604      	mov	r4, r0
 800ab38:	4608      	mov	r0, r1
 800ab3a:	602b      	str	r3, [r5, #0]
 800ab3c:	f7f7 f91c 	bl	8001d78 <_sbrk>
 800ab40:	1c43      	adds	r3, r0, #1
 800ab42:	d102      	bne.n	800ab4a <_sbrk_r+0x1a>
 800ab44:	682b      	ldr	r3, [r5, #0]
 800ab46:	b103      	cbz	r3, 800ab4a <_sbrk_r+0x1a>
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	bd38      	pop	{r3, r4, r5, pc}
 800ab4c:	240009a8 	.word	0x240009a8

0800ab50 <strncmp>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	b17a      	cbz	r2, 800ab74 <strncmp+0x24>
 800ab54:	4603      	mov	r3, r0
 800ab56:	3901      	subs	r1, #1
 800ab58:	1884      	adds	r4, r0, r2
 800ab5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab62:	4290      	cmp	r0, r2
 800ab64:	d101      	bne.n	800ab6a <strncmp+0x1a>
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	d101      	bne.n	800ab6e <strncmp+0x1e>
 800ab6a:	1a80      	subs	r0, r0, r2
 800ab6c:	bd10      	pop	{r4, pc}
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	d1f3      	bne.n	800ab5a <strncmp+0xa>
 800ab72:	e7fa      	b.n	800ab6a <strncmp+0x1a>
 800ab74:	4610      	mov	r0, r2
 800ab76:	e7f9      	b.n	800ab6c <strncmp+0x1c>

0800ab78 <__ascii_wctomb>:
 800ab78:	b149      	cbz	r1, 800ab8e <__ascii_wctomb+0x16>
 800ab7a:	2aff      	cmp	r2, #255	; 0xff
 800ab7c:	bf85      	ittet	hi
 800ab7e:	238a      	movhi	r3, #138	; 0x8a
 800ab80:	6003      	strhi	r3, [r0, #0]
 800ab82:	700a      	strbls	r2, [r1, #0]
 800ab84:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab88:	bf98      	it	ls
 800ab8a:	2001      	movls	r0, #1
 800ab8c:	4770      	bx	lr
 800ab8e:	4608      	mov	r0, r1
 800ab90:	4770      	bx	lr
	...

0800ab94 <__assert_func>:
 800ab94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab96:	4614      	mov	r4, r2
 800ab98:	461a      	mov	r2, r3
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <__assert_func+0x2c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4605      	mov	r5, r0
 800aba0:	68d8      	ldr	r0, [r3, #12]
 800aba2:	b14c      	cbz	r4, 800abb8 <__assert_func+0x24>
 800aba4:	4b07      	ldr	r3, [pc, #28]	; (800abc4 <__assert_func+0x30>)
 800aba6:	9100      	str	r1, [sp, #0]
 800aba8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abac:	4906      	ldr	r1, [pc, #24]	; (800abc8 <__assert_func+0x34>)
 800abae:	462b      	mov	r3, r5
 800abb0:	f000 f80e 	bl	800abd0 <fiprintf>
 800abb4:	f000 fc2c 	bl	800b410 <abort>
 800abb8:	4b04      	ldr	r3, [pc, #16]	; (800abcc <__assert_func+0x38>)
 800abba:	461c      	mov	r4, r3
 800abbc:	e7f3      	b.n	800aba6 <__assert_func+0x12>
 800abbe:	bf00      	nop
 800abc0:	24000318 	.word	0x24000318
 800abc4:	0800bd04 	.word	0x0800bd04
 800abc8:	0800bd11 	.word	0x0800bd11
 800abcc:	0800bd3f 	.word	0x0800bd3f

0800abd0 <fiprintf>:
 800abd0:	b40e      	push	{r1, r2, r3}
 800abd2:	b503      	push	{r0, r1, lr}
 800abd4:	4601      	mov	r1, r0
 800abd6:	ab03      	add	r3, sp, #12
 800abd8:	4805      	ldr	r0, [pc, #20]	; (800abf0 <fiprintf+0x20>)
 800abda:	f853 2b04 	ldr.w	r2, [r3], #4
 800abde:	6800      	ldr	r0, [r0, #0]
 800abe0:	9301      	str	r3, [sp, #4]
 800abe2:	f000 f891 	bl	800ad08 <_vfiprintf_r>
 800abe6:	b002      	add	sp, #8
 800abe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800abec:	b003      	add	sp, #12
 800abee:	4770      	bx	lr
 800abf0:	24000318 	.word	0x24000318

0800abf4 <malloc>:
 800abf4:	4b02      	ldr	r3, [pc, #8]	; (800ac00 <malloc+0xc>)
 800abf6:	4601      	mov	r1, r0
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f7ff bf1b 	b.w	800aa34 <_malloc_r>
 800abfe:	bf00      	nop
 800ac00:	24000318 	.word	0x24000318

0800ac04 <__malloc_lock>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__malloc_lock+0x8>)
 800ac06:	f000 bdc3 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	240009ac 	.word	0x240009ac

0800ac10 <__malloc_unlock>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__malloc_unlock+0x8>)
 800ac12:	f000 bdbe 	b.w	800b792 <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	240009ac 	.word	0x240009ac

0800ac1c <_free_r>:
 800ac1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac1e:	2900      	cmp	r1, #0
 800ac20:	d044      	beq.n	800acac <_free_r+0x90>
 800ac22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac26:	9001      	str	r0, [sp, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac2e:	bfb8      	it	lt
 800ac30:	18e4      	addlt	r4, r4, r3
 800ac32:	f7ff ffe7 	bl	800ac04 <__malloc_lock>
 800ac36:	4a1e      	ldr	r2, [pc, #120]	; (800acb0 <_free_r+0x94>)
 800ac38:	9801      	ldr	r0, [sp, #4]
 800ac3a:	6813      	ldr	r3, [r2, #0]
 800ac3c:	b933      	cbnz	r3, 800ac4c <_free_r+0x30>
 800ac3e:	6063      	str	r3, [r4, #4]
 800ac40:	6014      	str	r4, [r2, #0]
 800ac42:	b003      	add	sp, #12
 800ac44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac48:	f7ff bfe2 	b.w	800ac10 <__malloc_unlock>
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	d908      	bls.n	800ac62 <_free_r+0x46>
 800ac50:	6825      	ldr	r5, [r4, #0]
 800ac52:	1961      	adds	r1, r4, r5
 800ac54:	428b      	cmp	r3, r1
 800ac56:	bf01      	itttt	eq
 800ac58:	6819      	ldreq	r1, [r3, #0]
 800ac5a:	685b      	ldreq	r3, [r3, #4]
 800ac5c:	1949      	addeq	r1, r1, r5
 800ac5e:	6021      	streq	r1, [r4, #0]
 800ac60:	e7ed      	b.n	800ac3e <_free_r+0x22>
 800ac62:	461a      	mov	r2, r3
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	b10b      	cbz	r3, 800ac6c <_free_r+0x50>
 800ac68:	42a3      	cmp	r3, r4
 800ac6a:	d9fa      	bls.n	800ac62 <_free_r+0x46>
 800ac6c:	6811      	ldr	r1, [r2, #0]
 800ac6e:	1855      	adds	r5, r2, r1
 800ac70:	42a5      	cmp	r5, r4
 800ac72:	d10b      	bne.n	800ac8c <_free_r+0x70>
 800ac74:	6824      	ldr	r4, [r4, #0]
 800ac76:	4421      	add	r1, r4
 800ac78:	1854      	adds	r4, r2, r1
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	6011      	str	r1, [r2, #0]
 800ac7e:	d1e0      	bne.n	800ac42 <_free_r+0x26>
 800ac80:	681c      	ldr	r4, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	6053      	str	r3, [r2, #4]
 800ac86:	4421      	add	r1, r4
 800ac88:	6011      	str	r1, [r2, #0]
 800ac8a:	e7da      	b.n	800ac42 <_free_r+0x26>
 800ac8c:	d902      	bls.n	800ac94 <_free_r+0x78>
 800ac8e:	230c      	movs	r3, #12
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	e7d6      	b.n	800ac42 <_free_r+0x26>
 800ac94:	6825      	ldr	r5, [r4, #0]
 800ac96:	1961      	adds	r1, r4, r5
 800ac98:	428b      	cmp	r3, r1
 800ac9a:	bf04      	itt	eq
 800ac9c:	6819      	ldreq	r1, [r3, #0]
 800ac9e:	685b      	ldreq	r3, [r3, #4]
 800aca0:	6063      	str	r3, [r4, #4]
 800aca2:	bf04      	itt	eq
 800aca4:	1949      	addeq	r1, r1, r5
 800aca6:	6021      	streq	r1, [r4, #0]
 800aca8:	6054      	str	r4, [r2, #4]
 800acaa:	e7ca      	b.n	800ac42 <_free_r+0x26>
 800acac:	b003      	add	sp, #12
 800acae:	bd30      	pop	{r4, r5, pc}
 800acb0:	240009a0 	.word	0x240009a0

0800acb4 <__sfputc_r>:
 800acb4:	6893      	ldr	r3, [r2, #8]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	b410      	push	{r4}
 800acbc:	6093      	str	r3, [r2, #8]
 800acbe:	da08      	bge.n	800acd2 <__sfputc_r+0x1e>
 800acc0:	6994      	ldr	r4, [r2, #24]
 800acc2:	42a3      	cmp	r3, r4
 800acc4:	db01      	blt.n	800acca <__sfputc_r+0x16>
 800acc6:	290a      	cmp	r1, #10
 800acc8:	d103      	bne.n	800acd2 <__sfputc_r+0x1e>
 800acca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acce:	f000 badf 	b.w	800b290 <__swbuf_r>
 800acd2:	6813      	ldr	r3, [r2, #0]
 800acd4:	1c58      	adds	r0, r3, #1
 800acd6:	6010      	str	r0, [r2, #0]
 800acd8:	7019      	strb	r1, [r3, #0]
 800acda:	4608      	mov	r0, r1
 800acdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ace0:	4770      	bx	lr

0800ace2 <__sfputs_r>:
 800ace2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace4:	4606      	mov	r6, r0
 800ace6:	460f      	mov	r7, r1
 800ace8:	4614      	mov	r4, r2
 800acea:	18d5      	adds	r5, r2, r3
 800acec:	42ac      	cmp	r4, r5
 800acee:	d101      	bne.n	800acf4 <__sfputs_r+0x12>
 800acf0:	2000      	movs	r0, #0
 800acf2:	e007      	b.n	800ad04 <__sfputs_r+0x22>
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	463a      	mov	r2, r7
 800acfa:	4630      	mov	r0, r6
 800acfc:	f7ff ffda 	bl	800acb4 <__sfputc_r>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d1f3      	bne.n	800acec <__sfputs_r+0xa>
 800ad04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad08 <_vfiprintf_r>:
 800ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	b09d      	sub	sp, #116	; 0x74
 800ad10:	4614      	mov	r4, r2
 800ad12:	4698      	mov	r8, r3
 800ad14:	4606      	mov	r6, r0
 800ad16:	b118      	cbz	r0, 800ad20 <_vfiprintf_r+0x18>
 800ad18:	6983      	ldr	r3, [r0, #24]
 800ad1a:	b90b      	cbnz	r3, 800ad20 <_vfiprintf_r+0x18>
 800ad1c:	f000 fc9a 	bl	800b654 <__sinit>
 800ad20:	4b89      	ldr	r3, [pc, #548]	; (800af48 <_vfiprintf_r+0x240>)
 800ad22:	429d      	cmp	r5, r3
 800ad24:	d11b      	bne.n	800ad5e <_vfiprintf_r+0x56>
 800ad26:	6875      	ldr	r5, [r6, #4]
 800ad28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad2a:	07d9      	lsls	r1, r3, #31
 800ad2c:	d405      	bmi.n	800ad3a <_vfiprintf_r+0x32>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	059a      	lsls	r2, r3, #22
 800ad32:	d402      	bmi.n	800ad3a <_vfiprintf_r+0x32>
 800ad34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad36:	f000 fd2b 	bl	800b790 <__retarget_lock_acquire_recursive>
 800ad3a:	89ab      	ldrh	r3, [r5, #12]
 800ad3c:	071b      	lsls	r3, r3, #28
 800ad3e:	d501      	bpl.n	800ad44 <_vfiprintf_r+0x3c>
 800ad40:	692b      	ldr	r3, [r5, #16]
 800ad42:	b9eb      	cbnz	r3, 800ad80 <_vfiprintf_r+0x78>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4630      	mov	r0, r6
 800ad48:	f000 faf4 	bl	800b334 <__swsetup_r>
 800ad4c:	b1c0      	cbz	r0, 800ad80 <_vfiprintf_r+0x78>
 800ad4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad50:	07dc      	lsls	r4, r3, #31
 800ad52:	d50e      	bpl.n	800ad72 <_vfiprintf_r+0x6a>
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	b01d      	add	sp, #116	; 0x74
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5e:	4b7b      	ldr	r3, [pc, #492]	; (800af4c <_vfiprintf_r+0x244>)
 800ad60:	429d      	cmp	r5, r3
 800ad62:	d101      	bne.n	800ad68 <_vfiprintf_r+0x60>
 800ad64:	68b5      	ldr	r5, [r6, #8]
 800ad66:	e7df      	b.n	800ad28 <_vfiprintf_r+0x20>
 800ad68:	4b79      	ldr	r3, [pc, #484]	; (800af50 <_vfiprintf_r+0x248>)
 800ad6a:	429d      	cmp	r5, r3
 800ad6c:	bf08      	it	eq
 800ad6e:	68f5      	ldreq	r5, [r6, #12]
 800ad70:	e7da      	b.n	800ad28 <_vfiprintf_r+0x20>
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	0598      	lsls	r0, r3, #22
 800ad76:	d4ed      	bmi.n	800ad54 <_vfiprintf_r+0x4c>
 800ad78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad7a:	f000 fd0a 	bl	800b792 <__retarget_lock_release_recursive>
 800ad7e:	e7e9      	b.n	800ad54 <_vfiprintf_r+0x4c>
 800ad80:	2300      	movs	r3, #0
 800ad82:	9309      	str	r3, [sp, #36]	; 0x24
 800ad84:	2320      	movs	r3, #32
 800ad86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad8e:	2330      	movs	r3, #48	; 0x30
 800ad90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af54 <_vfiprintf_r+0x24c>
 800ad94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad98:	f04f 0901 	mov.w	r9, #1
 800ad9c:	4623      	mov	r3, r4
 800ad9e:	469a      	mov	sl, r3
 800ada0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ada4:	b10a      	cbz	r2, 800adaa <_vfiprintf_r+0xa2>
 800ada6:	2a25      	cmp	r2, #37	; 0x25
 800ada8:	d1f9      	bne.n	800ad9e <_vfiprintf_r+0x96>
 800adaa:	ebba 0b04 	subs.w	fp, sl, r4
 800adae:	d00b      	beq.n	800adc8 <_vfiprintf_r+0xc0>
 800adb0:	465b      	mov	r3, fp
 800adb2:	4622      	mov	r2, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7ff ff93 	bl	800ace2 <__sfputs_r>
 800adbc:	3001      	adds	r0, #1
 800adbe:	f000 80aa 	beq.w	800af16 <_vfiprintf_r+0x20e>
 800adc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc4:	445a      	add	r2, fp
 800adc6:	9209      	str	r2, [sp, #36]	; 0x24
 800adc8:	f89a 3000 	ldrb.w	r3, [sl]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 80a2 	beq.w	800af16 <_vfiprintf_r+0x20e>
 800add2:	2300      	movs	r3, #0
 800add4:	f04f 32ff 	mov.w	r2, #4294967295
 800add8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800addc:	f10a 0a01 	add.w	sl, sl, #1
 800ade0:	9304      	str	r3, [sp, #16]
 800ade2:	9307      	str	r3, [sp, #28]
 800ade4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ade8:	931a      	str	r3, [sp, #104]	; 0x68
 800adea:	4654      	mov	r4, sl
 800adec:	2205      	movs	r2, #5
 800adee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf2:	4858      	ldr	r0, [pc, #352]	; (800af54 <_vfiprintf_r+0x24c>)
 800adf4:	f7f5 fa94 	bl	8000320 <memchr>
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	b9d8      	cbnz	r0, 800ae34 <_vfiprintf_r+0x12c>
 800adfc:	06d1      	lsls	r1, r2, #27
 800adfe:	bf44      	itt	mi
 800ae00:	2320      	movmi	r3, #32
 800ae02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae06:	0713      	lsls	r3, r2, #28
 800ae08:	bf44      	itt	mi
 800ae0a:	232b      	movmi	r3, #43	; 0x2b
 800ae0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae10:	f89a 3000 	ldrb.w	r3, [sl]
 800ae14:	2b2a      	cmp	r3, #42	; 0x2a
 800ae16:	d015      	beq.n	800ae44 <_vfiprintf_r+0x13c>
 800ae18:	9a07      	ldr	r2, [sp, #28]
 800ae1a:	4654      	mov	r4, sl
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f04f 0c0a 	mov.w	ip, #10
 800ae22:	4621      	mov	r1, r4
 800ae24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae28:	3b30      	subs	r3, #48	; 0x30
 800ae2a:	2b09      	cmp	r3, #9
 800ae2c:	d94e      	bls.n	800aecc <_vfiprintf_r+0x1c4>
 800ae2e:	b1b0      	cbz	r0, 800ae5e <_vfiprintf_r+0x156>
 800ae30:	9207      	str	r2, [sp, #28]
 800ae32:	e014      	b.n	800ae5e <_vfiprintf_r+0x156>
 800ae34:	eba0 0308 	sub.w	r3, r0, r8
 800ae38:	fa09 f303 	lsl.w	r3, r9, r3
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	9304      	str	r3, [sp, #16]
 800ae40:	46a2      	mov	sl, r4
 800ae42:	e7d2      	b.n	800adea <_vfiprintf_r+0xe2>
 800ae44:	9b03      	ldr	r3, [sp, #12]
 800ae46:	1d19      	adds	r1, r3, #4
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	9103      	str	r1, [sp, #12]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bfbb      	ittet	lt
 800ae50:	425b      	neglt	r3, r3
 800ae52:	f042 0202 	orrlt.w	r2, r2, #2
 800ae56:	9307      	strge	r3, [sp, #28]
 800ae58:	9307      	strlt	r3, [sp, #28]
 800ae5a:	bfb8      	it	lt
 800ae5c:	9204      	strlt	r2, [sp, #16]
 800ae5e:	7823      	ldrb	r3, [r4, #0]
 800ae60:	2b2e      	cmp	r3, #46	; 0x2e
 800ae62:	d10c      	bne.n	800ae7e <_vfiprintf_r+0x176>
 800ae64:	7863      	ldrb	r3, [r4, #1]
 800ae66:	2b2a      	cmp	r3, #42	; 0x2a
 800ae68:	d135      	bne.n	800aed6 <_vfiprintf_r+0x1ce>
 800ae6a:	9b03      	ldr	r3, [sp, #12]
 800ae6c:	1d1a      	adds	r2, r3, #4
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	9203      	str	r2, [sp, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	bfb8      	it	lt
 800ae76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae7a:	3402      	adds	r4, #2
 800ae7c:	9305      	str	r3, [sp, #20]
 800ae7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af64 <_vfiprintf_r+0x25c>
 800ae82:	7821      	ldrb	r1, [r4, #0]
 800ae84:	2203      	movs	r2, #3
 800ae86:	4650      	mov	r0, sl
 800ae88:	f7f5 fa4a 	bl	8000320 <memchr>
 800ae8c:	b140      	cbz	r0, 800aea0 <_vfiprintf_r+0x198>
 800ae8e:	2340      	movs	r3, #64	; 0x40
 800ae90:	eba0 000a 	sub.w	r0, r0, sl
 800ae94:	fa03 f000 	lsl.w	r0, r3, r0
 800ae98:	9b04      	ldr	r3, [sp, #16]
 800ae9a:	4303      	orrs	r3, r0
 800ae9c:	3401      	adds	r4, #1
 800ae9e:	9304      	str	r3, [sp, #16]
 800aea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea4:	482c      	ldr	r0, [pc, #176]	; (800af58 <_vfiprintf_r+0x250>)
 800aea6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeaa:	2206      	movs	r2, #6
 800aeac:	f7f5 fa38 	bl	8000320 <memchr>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d03f      	beq.n	800af34 <_vfiprintf_r+0x22c>
 800aeb4:	4b29      	ldr	r3, [pc, #164]	; (800af5c <_vfiprintf_r+0x254>)
 800aeb6:	bb1b      	cbnz	r3, 800af00 <_vfiprintf_r+0x1f8>
 800aeb8:	9b03      	ldr	r3, [sp, #12]
 800aeba:	3307      	adds	r3, #7
 800aebc:	f023 0307 	bic.w	r3, r3, #7
 800aec0:	3308      	adds	r3, #8
 800aec2:	9303      	str	r3, [sp, #12]
 800aec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec6:	443b      	add	r3, r7
 800aec8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeca:	e767      	b.n	800ad9c <_vfiprintf_r+0x94>
 800aecc:	fb0c 3202 	mla	r2, ip, r2, r3
 800aed0:	460c      	mov	r4, r1
 800aed2:	2001      	movs	r0, #1
 800aed4:	e7a5      	b.n	800ae22 <_vfiprintf_r+0x11a>
 800aed6:	2300      	movs	r3, #0
 800aed8:	3401      	adds	r4, #1
 800aeda:	9305      	str	r3, [sp, #20]
 800aedc:	4619      	mov	r1, r3
 800aede:	f04f 0c0a 	mov.w	ip, #10
 800aee2:	4620      	mov	r0, r4
 800aee4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aee8:	3a30      	subs	r2, #48	; 0x30
 800aeea:	2a09      	cmp	r2, #9
 800aeec:	d903      	bls.n	800aef6 <_vfiprintf_r+0x1ee>
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d0c5      	beq.n	800ae7e <_vfiprintf_r+0x176>
 800aef2:	9105      	str	r1, [sp, #20]
 800aef4:	e7c3      	b.n	800ae7e <_vfiprintf_r+0x176>
 800aef6:	fb0c 2101 	mla	r1, ip, r1, r2
 800aefa:	4604      	mov	r4, r0
 800aefc:	2301      	movs	r3, #1
 800aefe:	e7f0      	b.n	800aee2 <_vfiprintf_r+0x1da>
 800af00:	ab03      	add	r3, sp, #12
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	462a      	mov	r2, r5
 800af06:	4b16      	ldr	r3, [pc, #88]	; (800af60 <_vfiprintf_r+0x258>)
 800af08:	a904      	add	r1, sp, #16
 800af0a:	4630      	mov	r0, r6
 800af0c:	f3af 8000 	nop.w
 800af10:	4607      	mov	r7, r0
 800af12:	1c78      	adds	r0, r7, #1
 800af14:	d1d6      	bne.n	800aec4 <_vfiprintf_r+0x1bc>
 800af16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af18:	07d9      	lsls	r1, r3, #31
 800af1a:	d405      	bmi.n	800af28 <_vfiprintf_r+0x220>
 800af1c:	89ab      	ldrh	r3, [r5, #12]
 800af1e:	059a      	lsls	r2, r3, #22
 800af20:	d402      	bmi.n	800af28 <_vfiprintf_r+0x220>
 800af22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af24:	f000 fc35 	bl	800b792 <__retarget_lock_release_recursive>
 800af28:	89ab      	ldrh	r3, [r5, #12]
 800af2a:	065b      	lsls	r3, r3, #25
 800af2c:	f53f af12 	bmi.w	800ad54 <_vfiprintf_r+0x4c>
 800af30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af32:	e711      	b.n	800ad58 <_vfiprintf_r+0x50>
 800af34:	ab03      	add	r3, sp, #12
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	462a      	mov	r2, r5
 800af3a:	4b09      	ldr	r3, [pc, #36]	; (800af60 <_vfiprintf_r+0x258>)
 800af3c:	a904      	add	r1, sp, #16
 800af3e:	4630      	mov	r0, r6
 800af40:	f000 f880 	bl	800b044 <_printf_i>
 800af44:	e7e4      	b.n	800af10 <_vfiprintf_r+0x208>
 800af46:	bf00      	nop
 800af48:	0800be94 	.word	0x0800be94
 800af4c:	0800beb4 	.word	0x0800beb4
 800af50:	0800be74 	.word	0x0800be74
 800af54:	0800be41 	.word	0x0800be41
 800af58:	0800be4b 	.word	0x0800be4b
 800af5c:	00000000 	.word	0x00000000
 800af60:	0800ace3 	.word	0x0800ace3
 800af64:	0800be47 	.word	0x0800be47

0800af68 <_printf_common>:
 800af68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af6c:	4616      	mov	r6, r2
 800af6e:	4699      	mov	r9, r3
 800af70:	688a      	ldr	r2, [r1, #8]
 800af72:	690b      	ldr	r3, [r1, #16]
 800af74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af78:	4293      	cmp	r3, r2
 800af7a:	bfb8      	it	lt
 800af7c:	4613      	movlt	r3, r2
 800af7e:	6033      	str	r3, [r6, #0]
 800af80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af84:	4607      	mov	r7, r0
 800af86:	460c      	mov	r4, r1
 800af88:	b10a      	cbz	r2, 800af8e <_printf_common+0x26>
 800af8a:	3301      	adds	r3, #1
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	0699      	lsls	r1, r3, #26
 800af92:	bf42      	ittt	mi
 800af94:	6833      	ldrmi	r3, [r6, #0]
 800af96:	3302      	addmi	r3, #2
 800af98:	6033      	strmi	r3, [r6, #0]
 800af9a:	6825      	ldr	r5, [r4, #0]
 800af9c:	f015 0506 	ands.w	r5, r5, #6
 800afa0:	d106      	bne.n	800afb0 <_printf_common+0x48>
 800afa2:	f104 0a19 	add.w	sl, r4, #25
 800afa6:	68e3      	ldr	r3, [r4, #12]
 800afa8:	6832      	ldr	r2, [r6, #0]
 800afaa:	1a9b      	subs	r3, r3, r2
 800afac:	42ab      	cmp	r3, r5
 800afae:	dc26      	bgt.n	800affe <_printf_common+0x96>
 800afb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afb4:	1e13      	subs	r3, r2, #0
 800afb6:	6822      	ldr	r2, [r4, #0]
 800afb8:	bf18      	it	ne
 800afba:	2301      	movne	r3, #1
 800afbc:	0692      	lsls	r2, r2, #26
 800afbe:	d42b      	bmi.n	800b018 <_printf_common+0xb0>
 800afc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afc4:	4649      	mov	r1, r9
 800afc6:	4638      	mov	r0, r7
 800afc8:	47c0      	blx	r8
 800afca:	3001      	adds	r0, #1
 800afcc:	d01e      	beq.n	800b00c <_printf_common+0xa4>
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	68e5      	ldr	r5, [r4, #12]
 800afd2:	6832      	ldr	r2, [r6, #0]
 800afd4:	f003 0306 	and.w	r3, r3, #6
 800afd8:	2b04      	cmp	r3, #4
 800afda:	bf08      	it	eq
 800afdc:	1aad      	subeq	r5, r5, r2
 800afde:	68a3      	ldr	r3, [r4, #8]
 800afe0:	6922      	ldr	r2, [r4, #16]
 800afe2:	bf0c      	ite	eq
 800afe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afe8:	2500      	movne	r5, #0
 800afea:	4293      	cmp	r3, r2
 800afec:	bfc4      	itt	gt
 800afee:	1a9b      	subgt	r3, r3, r2
 800aff0:	18ed      	addgt	r5, r5, r3
 800aff2:	2600      	movs	r6, #0
 800aff4:	341a      	adds	r4, #26
 800aff6:	42b5      	cmp	r5, r6
 800aff8:	d11a      	bne.n	800b030 <_printf_common+0xc8>
 800affa:	2000      	movs	r0, #0
 800affc:	e008      	b.n	800b010 <_printf_common+0xa8>
 800affe:	2301      	movs	r3, #1
 800b000:	4652      	mov	r2, sl
 800b002:	4649      	mov	r1, r9
 800b004:	4638      	mov	r0, r7
 800b006:	47c0      	blx	r8
 800b008:	3001      	adds	r0, #1
 800b00a:	d103      	bne.n	800b014 <_printf_common+0xac>
 800b00c:	f04f 30ff 	mov.w	r0, #4294967295
 800b010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b014:	3501      	adds	r5, #1
 800b016:	e7c6      	b.n	800afa6 <_printf_common+0x3e>
 800b018:	18e1      	adds	r1, r4, r3
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	2030      	movs	r0, #48	; 0x30
 800b01e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b022:	4422      	add	r2, r4
 800b024:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b028:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b02c:	3302      	adds	r3, #2
 800b02e:	e7c7      	b.n	800afc0 <_printf_common+0x58>
 800b030:	2301      	movs	r3, #1
 800b032:	4622      	mov	r2, r4
 800b034:	4649      	mov	r1, r9
 800b036:	4638      	mov	r0, r7
 800b038:	47c0      	blx	r8
 800b03a:	3001      	adds	r0, #1
 800b03c:	d0e6      	beq.n	800b00c <_printf_common+0xa4>
 800b03e:	3601      	adds	r6, #1
 800b040:	e7d9      	b.n	800aff6 <_printf_common+0x8e>
	...

0800b044 <_printf_i>:
 800b044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b048:	7e0f      	ldrb	r7, [r1, #24]
 800b04a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b04c:	2f78      	cmp	r7, #120	; 0x78
 800b04e:	4691      	mov	r9, r2
 800b050:	4680      	mov	r8, r0
 800b052:	460c      	mov	r4, r1
 800b054:	469a      	mov	sl, r3
 800b056:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b05a:	d807      	bhi.n	800b06c <_printf_i+0x28>
 800b05c:	2f62      	cmp	r7, #98	; 0x62
 800b05e:	d80a      	bhi.n	800b076 <_printf_i+0x32>
 800b060:	2f00      	cmp	r7, #0
 800b062:	f000 80d8 	beq.w	800b216 <_printf_i+0x1d2>
 800b066:	2f58      	cmp	r7, #88	; 0x58
 800b068:	f000 80a3 	beq.w	800b1b2 <_printf_i+0x16e>
 800b06c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b074:	e03a      	b.n	800b0ec <_printf_i+0xa8>
 800b076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b07a:	2b15      	cmp	r3, #21
 800b07c:	d8f6      	bhi.n	800b06c <_printf_i+0x28>
 800b07e:	a101      	add	r1, pc, #4	; (adr r1, 800b084 <_printf_i+0x40>)
 800b080:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b084:	0800b0dd 	.word	0x0800b0dd
 800b088:	0800b0f1 	.word	0x0800b0f1
 800b08c:	0800b06d 	.word	0x0800b06d
 800b090:	0800b06d 	.word	0x0800b06d
 800b094:	0800b06d 	.word	0x0800b06d
 800b098:	0800b06d 	.word	0x0800b06d
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b06d 	.word	0x0800b06d
 800b0a4:	0800b06d 	.word	0x0800b06d
 800b0a8:	0800b06d 	.word	0x0800b06d
 800b0ac:	0800b06d 	.word	0x0800b06d
 800b0b0:	0800b1fd 	.word	0x0800b1fd
 800b0b4:	0800b121 	.word	0x0800b121
 800b0b8:	0800b1df 	.word	0x0800b1df
 800b0bc:	0800b06d 	.word	0x0800b06d
 800b0c0:	0800b06d 	.word	0x0800b06d
 800b0c4:	0800b21f 	.word	0x0800b21f
 800b0c8:	0800b06d 	.word	0x0800b06d
 800b0cc:	0800b121 	.word	0x0800b121
 800b0d0:	0800b06d 	.word	0x0800b06d
 800b0d4:	0800b06d 	.word	0x0800b06d
 800b0d8:	0800b1e7 	.word	0x0800b1e7
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	602a      	str	r2, [r5, #0]
 800b0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e0a3      	b.n	800b238 <_printf_i+0x1f4>
 800b0f0:	6820      	ldr	r0, [r4, #0]
 800b0f2:	6829      	ldr	r1, [r5, #0]
 800b0f4:	0606      	lsls	r6, r0, #24
 800b0f6:	f101 0304 	add.w	r3, r1, #4
 800b0fa:	d50a      	bpl.n	800b112 <_printf_i+0xce>
 800b0fc:	680e      	ldr	r6, [r1, #0]
 800b0fe:	602b      	str	r3, [r5, #0]
 800b100:	2e00      	cmp	r6, #0
 800b102:	da03      	bge.n	800b10c <_printf_i+0xc8>
 800b104:	232d      	movs	r3, #45	; 0x2d
 800b106:	4276      	negs	r6, r6
 800b108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b10c:	485e      	ldr	r0, [pc, #376]	; (800b288 <_printf_i+0x244>)
 800b10e:	230a      	movs	r3, #10
 800b110:	e019      	b.n	800b146 <_printf_i+0x102>
 800b112:	680e      	ldr	r6, [r1, #0]
 800b114:	602b      	str	r3, [r5, #0]
 800b116:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b11a:	bf18      	it	ne
 800b11c:	b236      	sxthne	r6, r6
 800b11e:	e7ef      	b.n	800b100 <_printf_i+0xbc>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	6820      	ldr	r0, [r4, #0]
 800b124:	1d19      	adds	r1, r3, #4
 800b126:	6029      	str	r1, [r5, #0]
 800b128:	0601      	lsls	r1, r0, #24
 800b12a:	d501      	bpl.n	800b130 <_printf_i+0xec>
 800b12c:	681e      	ldr	r6, [r3, #0]
 800b12e:	e002      	b.n	800b136 <_printf_i+0xf2>
 800b130:	0646      	lsls	r6, r0, #25
 800b132:	d5fb      	bpl.n	800b12c <_printf_i+0xe8>
 800b134:	881e      	ldrh	r6, [r3, #0]
 800b136:	4854      	ldr	r0, [pc, #336]	; (800b288 <_printf_i+0x244>)
 800b138:	2f6f      	cmp	r7, #111	; 0x6f
 800b13a:	bf0c      	ite	eq
 800b13c:	2308      	moveq	r3, #8
 800b13e:	230a      	movne	r3, #10
 800b140:	2100      	movs	r1, #0
 800b142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b146:	6865      	ldr	r5, [r4, #4]
 800b148:	60a5      	str	r5, [r4, #8]
 800b14a:	2d00      	cmp	r5, #0
 800b14c:	bfa2      	ittt	ge
 800b14e:	6821      	ldrge	r1, [r4, #0]
 800b150:	f021 0104 	bicge.w	r1, r1, #4
 800b154:	6021      	strge	r1, [r4, #0]
 800b156:	b90e      	cbnz	r6, 800b15c <_printf_i+0x118>
 800b158:	2d00      	cmp	r5, #0
 800b15a:	d04d      	beq.n	800b1f8 <_printf_i+0x1b4>
 800b15c:	4615      	mov	r5, r2
 800b15e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b162:	fb03 6711 	mls	r7, r3, r1, r6
 800b166:	5dc7      	ldrb	r7, [r0, r7]
 800b168:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b16c:	4637      	mov	r7, r6
 800b16e:	42bb      	cmp	r3, r7
 800b170:	460e      	mov	r6, r1
 800b172:	d9f4      	bls.n	800b15e <_printf_i+0x11a>
 800b174:	2b08      	cmp	r3, #8
 800b176:	d10b      	bne.n	800b190 <_printf_i+0x14c>
 800b178:	6823      	ldr	r3, [r4, #0]
 800b17a:	07de      	lsls	r6, r3, #31
 800b17c:	d508      	bpl.n	800b190 <_printf_i+0x14c>
 800b17e:	6923      	ldr	r3, [r4, #16]
 800b180:	6861      	ldr	r1, [r4, #4]
 800b182:	4299      	cmp	r1, r3
 800b184:	bfde      	ittt	le
 800b186:	2330      	movle	r3, #48	; 0x30
 800b188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b18c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b190:	1b52      	subs	r2, r2, r5
 800b192:	6122      	str	r2, [r4, #16]
 800b194:	f8cd a000 	str.w	sl, [sp]
 800b198:	464b      	mov	r3, r9
 800b19a:	aa03      	add	r2, sp, #12
 800b19c:	4621      	mov	r1, r4
 800b19e:	4640      	mov	r0, r8
 800b1a0:	f7ff fee2 	bl	800af68 <_printf_common>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d14c      	bne.n	800b242 <_printf_i+0x1fe>
 800b1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ac:	b004      	add	sp, #16
 800b1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b2:	4835      	ldr	r0, [pc, #212]	; (800b288 <_printf_i+0x244>)
 800b1b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1b8:	6829      	ldr	r1, [r5, #0]
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1c0:	6029      	str	r1, [r5, #0]
 800b1c2:	061d      	lsls	r5, r3, #24
 800b1c4:	d514      	bpl.n	800b1f0 <_printf_i+0x1ac>
 800b1c6:	07df      	lsls	r7, r3, #31
 800b1c8:	bf44      	itt	mi
 800b1ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ce:	6023      	strmi	r3, [r4, #0]
 800b1d0:	b91e      	cbnz	r6, 800b1da <_printf_i+0x196>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	f023 0320 	bic.w	r3, r3, #32
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	2310      	movs	r3, #16
 800b1dc:	e7b0      	b.n	800b140 <_printf_i+0xfc>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f043 0320 	orr.w	r3, r3, #32
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	2378      	movs	r3, #120	; 0x78
 800b1e8:	4828      	ldr	r0, [pc, #160]	; (800b28c <_printf_i+0x248>)
 800b1ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1ee:	e7e3      	b.n	800b1b8 <_printf_i+0x174>
 800b1f0:	0659      	lsls	r1, r3, #25
 800b1f2:	bf48      	it	mi
 800b1f4:	b2b6      	uxthmi	r6, r6
 800b1f6:	e7e6      	b.n	800b1c6 <_printf_i+0x182>
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	e7bb      	b.n	800b174 <_printf_i+0x130>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	6826      	ldr	r6, [r4, #0]
 800b200:	6961      	ldr	r1, [r4, #20]
 800b202:	1d18      	adds	r0, r3, #4
 800b204:	6028      	str	r0, [r5, #0]
 800b206:	0635      	lsls	r5, r6, #24
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	d501      	bpl.n	800b210 <_printf_i+0x1cc>
 800b20c:	6019      	str	r1, [r3, #0]
 800b20e:	e002      	b.n	800b216 <_printf_i+0x1d2>
 800b210:	0670      	lsls	r0, r6, #25
 800b212:	d5fb      	bpl.n	800b20c <_printf_i+0x1c8>
 800b214:	8019      	strh	r1, [r3, #0]
 800b216:	2300      	movs	r3, #0
 800b218:	6123      	str	r3, [r4, #16]
 800b21a:	4615      	mov	r5, r2
 800b21c:	e7ba      	b.n	800b194 <_printf_i+0x150>
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	1d1a      	adds	r2, r3, #4
 800b222:	602a      	str	r2, [r5, #0]
 800b224:	681d      	ldr	r5, [r3, #0]
 800b226:	6862      	ldr	r2, [r4, #4]
 800b228:	2100      	movs	r1, #0
 800b22a:	4628      	mov	r0, r5
 800b22c:	f7f5 f878 	bl	8000320 <memchr>
 800b230:	b108      	cbz	r0, 800b236 <_printf_i+0x1f2>
 800b232:	1b40      	subs	r0, r0, r5
 800b234:	6060      	str	r0, [r4, #4]
 800b236:	6863      	ldr	r3, [r4, #4]
 800b238:	6123      	str	r3, [r4, #16]
 800b23a:	2300      	movs	r3, #0
 800b23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b240:	e7a8      	b.n	800b194 <_printf_i+0x150>
 800b242:	6923      	ldr	r3, [r4, #16]
 800b244:	462a      	mov	r2, r5
 800b246:	4649      	mov	r1, r9
 800b248:	4640      	mov	r0, r8
 800b24a:	47d0      	blx	sl
 800b24c:	3001      	adds	r0, #1
 800b24e:	d0ab      	beq.n	800b1a8 <_printf_i+0x164>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	079b      	lsls	r3, r3, #30
 800b254:	d413      	bmi.n	800b27e <_printf_i+0x23a>
 800b256:	68e0      	ldr	r0, [r4, #12]
 800b258:	9b03      	ldr	r3, [sp, #12]
 800b25a:	4298      	cmp	r0, r3
 800b25c:	bfb8      	it	lt
 800b25e:	4618      	movlt	r0, r3
 800b260:	e7a4      	b.n	800b1ac <_printf_i+0x168>
 800b262:	2301      	movs	r3, #1
 800b264:	4632      	mov	r2, r6
 800b266:	4649      	mov	r1, r9
 800b268:	4640      	mov	r0, r8
 800b26a:	47d0      	blx	sl
 800b26c:	3001      	adds	r0, #1
 800b26e:	d09b      	beq.n	800b1a8 <_printf_i+0x164>
 800b270:	3501      	adds	r5, #1
 800b272:	68e3      	ldr	r3, [r4, #12]
 800b274:	9903      	ldr	r1, [sp, #12]
 800b276:	1a5b      	subs	r3, r3, r1
 800b278:	42ab      	cmp	r3, r5
 800b27a:	dcf2      	bgt.n	800b262 <_printf_i+0x21e>
 800b27c:	e7eb      	b.n	800b256 <_printf_i+0x212>
 800b27e:	2500      	movs	r5, #0
 800b280:	f104 0619 	add.w	r6, r4, #25
 800b284:	e7f5      	b.n	800b272 <_printf_i+0x22e>
 800b286:	bf00      	nop
 800b288:	0800be52 	.word	0x0800be52
 800b28c:	0800be63 	.word	0x0800be63

0800b290 <__swbuf_r>:
 800b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b292:	460e      	mov	r6, r1
 800b294:	4614      	mov	r4, r2
 800b296:	4605      	mov	r5, r0
 800b298:	b118      	cbz	r0, 800b2a2 <__swbuf_r+0x12>
 800b29a:	6983      	ldr	r3, [r0, #24]
 800b29c:	b90b      	cbnz	r3, 800b2a2 <__swbuf_r+0x12>
 800b29e:	f000 f9d9 	bl	800b654 <__sinit>
 800b2a2:	4b21      	ldr	r3, [pc, #132]	; (800b328 <__swbuf_r+0x98>)
 800b2a4:	429c      	cmp	r4, r3
 800b2a6:	d12b      	bne.n	800b300 <__swbuf_r+0x70>
 800b2a8:	686c      	ldr	r4, [r5, #4]
 800b2aa:	69a3      	ldr	r3, [r4, #24]
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	071a      	lsls	r2, r3, #28
 800b2b2:	d52f      	bpl.n	800b314 <__swbuf_r+0x84>
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	b36b      	cbz	r3, 800b314 <__swbuf_r+0x84>
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	6820      	ldr	r0, [r4, #0]
 800b2bc:	1ac0      	subs	r0, r0, r3
 800b2be:	6963      	ldr	r3, [r4, #20]
 800b2c0:	b2f6      	uxtb	r6, r6
 800b2c2:	4283      	cmp	r3, r0
 800b2c4:	4637      	mov	r7, r6
 800b2c6:	dc04      	bgt.n	800b2d2 <__swbuf_r+0x42>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f000 f92e 	bl	800b52c <_fflush_r>
 800b2d0:	bb30      	cbnz	r0, 800b320 <__swbuf_r+0x90>
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	60a3      	str	r3, [r4, #8]
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	6022      	str	r2, [r4, #0]
 800b2de:	701e      	strb	r6, [r3, #0]
 800b2e0:	6963      	ldr	r3, [r4, #20]
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	4283      	cmp	r3, r0
 800b2e6:	d004      	beq.n	800b2f2 <__swbuf_r+0x62>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	07db      	lsls	r3, r3, #31
 800b2ec:	d506      	bpl.n	800b2fc <__swbuf_r+0x6c>
 800b2ee:	2e0a      	cmp	r6, #10
 800b2f0:	d104      	bne.n	800b2fc <__swbuf_r+0x6c>
 800b2f2:	4621      	mov	r1, r4
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f000 f919 	bl	800b52c <_fflush_r>
 800b2fa:	b988      	cbnz	r0, 800b320 <__swbuf_r+0x90>
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b300:	4b0a      	ldr	r3, [pc, #40]	; (800b32c <__swbuf_r+0x9c>)
 800b302:	429c      	cmp	r4, r3
 800b304:	d101      	bne.n	800b30a <__swbuf_r+0x7a>
 800b306:	68ac      	ldr	r4, [r5, #8]
 800b308:	e7cf      	b.n	800b2aa <__swbuf_r+0x1a>
 800b30a:	4b09      	ldr	r3, [pc, #36]	; (800b330 <__swbuf_r+0xa0>)
 800b30c:	429c      	cmp	r4, r3
 800b30e:	bf08      	it	eq
 800b310:	68ec      	ldreq	r4, [r5, #12]
 800b312:	e7ca      	b.n	800b2aa <__swbuf_r+0x1a>
 800b314:	4621      	mov	r1, r4
 800b316:	4628      	mov	r0, r5
 800b318:	f000 f80c 	bl	800b334 <__swsetup_r>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d0cb      	beq.n	800b2b8 <__swbuf_r+0x28>
 800b320:	f04f 37ff 	mov.w	r7, #4294967295
 800b324:	e7ea      	b.n	800b2fc <__swbuf_r+0x6c>
 800b326:	bf00      	nop
 800b328:	0800be94 	.word	0x0800be94
 800b32c:	0800beb4 	.word	0x0800beb4
 800b330:	0800be74 	.word	0x0800be74

0800b334 <__swsetup_r>:
 800b334:	4b32      	ldr	r3, [pc, #200]	; (800b400 <__swsetup_r+0xcc>)
 800b336:	b570      	push	{r4, r5, r6, lr}
 800b338:	681d      	ldr	r5, [r3, #0]
 800b33a:	4606      	mov	r6, r0
 800b33c:	460c      	mov	r4, r1
 800b33e:	b125      	cbz	r5, 800b34a <__swsetup_r+0x16>
 800b340:	69ab      	ldr	r3, [r5, #24]
 800b342:	b913      	cbnz	r3, 800b34a <__swsetup_r+0x16>
 800b344:	4628      	mov	r0, r5
 800b346:	f000 f985 	bl	800b654 <__sinit>
 800b34a:	4b2e      	ldr	r3, [pc, #184]	; (800b404 <__swsetup_r+0xd0>)
 800b34c:	429c      	cmp	r4, r3
 800b34e:	d10f      	bne.n	800b370 <__swsetup_r+0x3c>
 800b350:	686c      	ldr	r4, [r5, #4]
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b358:	0719      	lsls	r1, r3, #28
 800b35a:	d42c      	bmi.n	800b3b6 <__swsetup_r+0x82>
 800b35c:	06dd      	lsls	r5, r3, #27
 800b35e:	d411      	bmi.n	800b384 <__swsetup_r+0x50>
 800b360:	2309      	movs	r3, #9
 800b362:	6033      	str	r3, [r6, #0]
 800b364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b368:	81a3      	strh	r3, [r4, #12]
 800b36a:	f04f 30ff 	mov.w	r0, #4294967295
 800b36e:	e03e      	b.n	800b3ee <__swsetup_r+0xba>
 800b370:	4b25      	ldr	r3, [pc, #148]	; (800b408 <__swsetup_r+0xd4>)
 800b372:	429c      	cmp	r4, r3
 800b374:	d101      	bne.n	800b37a <__swsetup_r+0x46>
 800b376:	68ac      	ldr	r4, [r5, #8]
 800b378:	e7eb      	b.n	800b352 <__swsetup_r+0x1e>
 800b37a:	4b24      	ldr	r3, [pc, #144]	; (800b40c <__swsetup_r+0xd8>)
 800b37c:	429c      	cmp	r4, r3
 800b37e:	bf08      	it	eq
 800b380:	68ec      	ldreq	r4, [r5, #12]
 800b382:	e7e6      	b.n	800b352 <__swsetup_r+0x1e>
 800b384:	0758      	lsls	r0, r3, #29
 800b386:	d512      	bpl.n	800b3ae <__swsetup_r+0x7a>
 800b388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b38a:	b141      	cbz	r1, 800b39e <__swsetup_r+0x6a>
 800b38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b390:	4299      	cmp	r1, r3
 800b392:	d002      	beq.n	800b39a <__swsetup_r+0x66>
 800b394:	4630      	mov	r0, r6
 800b396:	f7ff fc41 	bl	800ac1c <_free_r>
 800b39a:	2300      	movs	r3, #0
 800b39c:	6363      	str	r3, [r4, #52]	; 0x34
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3a4:	81a3      	strh	r3, [r4, #12]
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	6923      	ldr	r3, [r4, #16]
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	f043 0308 	orr.w	r3, r3, #8
 800b3b4:	81a3      	strh	r3, [r4, #12]
 800b3b6:	6923      	ldr	r3, [r4, #16]
 800b3b8:	b94b      	cbnz	r3, 800b3ce <__swsetup_r+0x9a>
 800b3ba:	89a3      	ldrh	r3, [r4, #12]
 800b3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c4:	d003      	beq.n	800b3ce <__swsetup_r+0x9a>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f000 fa09 	bl	800b7e0 <__smakebuf_r>
 800b3ce:	89a0      	ldrh	r0, [r4, #12]
 800b3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d4:	f010 0301 	ands.w	r3, r0, #1
 800b3d8:	d00a      	beq.n	800b3f0 <__swsetup_r+0xbc>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60a3      	str	r3, [r4, #8]
 800b3de:	6963      	ldr	r3, [r4, #20]
 800b3e0:	425b      	negs	r3, r3
 800b3e2:	61a3      	str	r3, [r4, #24]
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	b943      	cbnz	r3, 800b3fa <__swsetup_r+0xc6>
 800b3e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3ec:	d1ba      	bne.n	800b364 <__swsetup_r+0x30>
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	0781      	lsls	r1, r0, #30
 800b3f2:	bf58      	it	pl
 800b3f4:	6963      	ldrpl	r3, [r4, #20]
 800b3f6:	60a3      	str	r3, [r4, #8]
 800b3f8:	e7f4      	b.n	800b3e4 <__swsetup_r+0xb0>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	e7f7      	b.n	800b3ee <__swsetup_r+0xba>
 800b3fe:	bf00      	nop
 800b400:	24000318 	.word	0x24000318
 800b404:	0800be94 	.word	0x0800be94
 800b408:	0800beb4 	.word	0x0800beb4
 800b40c:	0800be74 	.word	0x0800be74

0800b410 <abort>:
 800b410:	b508      	push	{r3, lr}
 800b412:	2006      	movs	r0, #6
 800b414:	f000 fa4c 	bl	800b8b0 <raise>
 800b418:	2001      	movs	r0, #1
 800b41a:	f7f6 fc35 	bl	8001c88 <_exit>
	...

0800b420 <__sflush_r>:
 800b420:	898a      	ldrh	r2, [r1, #12]
 800b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b426:	4605      	mov	r5, r0
 800b428:	0710      	lsls	r0, r2, #28
 800b42a:	460c      	mov	r4, r1
 800b42c:	d458      	bmi.n	800b4e0 <__sflush_r+0xc0>
 800b42e:	684b      	ldr	r3, [r1, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	dc05      	bgt.n	800b440 <__sflush_r+0x20>
 800b434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b436:	2b00      	cmp	r3, #0
 800b438:	dc02      	bgt.n	800b440 <__sflush_r+0x20>
 800b43a:	2000      	movs	r0, #0
 800b43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b442:	2e00      	cmp	r6, #0
 800b444:	d0f9      	beq.n	800b43a <__sflush_r+0x1a>
 800b446:	2300      	movs	r3, #0
 800b448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b44c:	682f      	ldr	r7, [r5, #0]
 800b44e:	602b      	str	r3, [r5, #0]
 800b450:	d032      	beq.n	800b4b8 <__sflush_r+0x98>
 800b452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	075a      	lsls	r2, r3, #29
 800b458:	d505      	bpl.n	800b466 <__sflush_r+0x46>
 800b45a:	6863      	ldr	r3, [r4, #4]
 800b45c:	1ac0      	subs	r0, r0, r3
 800b45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b460:	b10b      	cbz	r3, 800b466 <__sflush_r+0x46>
 800b462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b464:	1ac0      	subs	r0, r0, r3
 800b466:	2300      	movs	r3, #0
 800b468:	4602      	mov	r2, r0
 800b46a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b46c:	6a21      	ldr	r1, [r4, #32]
 800b46e:	4628      	mov	r0, r5
 800b470:	47b0      	blx	r6
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	d106      	bne.n	800b486 <__sflush_r+0x66>
 800b478:	6829      	ldr	r1, [r5, #0]
 800b47a:	291d      	cmp	r1, #29
 800b47c:	d82c      	bhi.n	800b4d8 <__sflush_r+0xb8>
 800b47e:	4a2a      	ldr	r2, [pc, #168]	; (800b528 <__sflush_r+0x108>)
 800b480:	40ca      	lsrs	r2, r1
 800b482:	07d6      	lsls	r6, r2, #31
 800b484:	d528      	bpl.n	800b4d8 <__sflush_r+0xb8>
 800b486:	2200      	movs	r2, #0
 800b488:	6062      	str	r2, [r4, #4]
 800b48a:	04d9      	lsls	r1, r3, #19
 800b48c:	6922      	ldr	r2, [r4, #16]
 800b48e:	6022      	str	r2, [r4, #0]
 800b490:	d504      	bpl.n	800b49c <__sflush_r+0x7c>
 800b492:	1c42      	adds	r2, r0, #1
 800b494:	d101      	bne.n	800b49a <__sflush_r+0x7a>
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	b903      	cbnz	r3, 800b49c <__sflush_r+0x7c>
 800b49a:	6560      	str	r0, [r4, #84]	; 0x54
 800b49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b49e:	602f      	str	r7, [r5, #0]
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	d0ca      	beq.n	800b43a <__sflush_r+0x1a>
 800b4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a8:	4299      	cmp	r1, r3
 800b4aa:	d002      	beq.n	800b4b2 <__sflush_r+0x92>
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	f7ff fbb5 	bl	800ac1c <_free_r>
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	6360      	str	r0, [r4, #52]	; 0x34
 800b4b6:	e7c1      	b.n	800b43c <__sflush_r+0x1c>
 800b4b8:	6a21      	ldr	r1, [r4, #32]
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4628      	mov	r0, r5
 800b4be:	47b0      	blx	r6
 800b4c0:	1c41      	adds	r1, r0, #1
 800b4c2:	d1c7      	bne.n	800b454 <__sflush_r+0x34>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0c4      	beq.n	800b454 <__sflush_r+0x34>
 800b4ca:	2b1d      	cmp	r3, #29
 800b4cc:	d001      	beq.n	800b4d2 <__sflush_r+0xb2>
 800b4ce:	2b16      	cmp	r3, #22
 800b4d0:	d101      	bne.n	800b4d6 <__sflush_r+0xb6>
 800b4d2:	602f      	str	r7, [r5, #0]
 800b4d4:	e7b1      	b.n	800b43a <__sflush_r+0x1a>
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4dc:	81a3      	strh	r3, [r4, #12]
 800b4de:	e7ad      	b.n	800b43c <__sflush_r+0x1c>
 800b4e0:	690f      	ldr	r7, [r1, #16]
 800b4e2:	2f00      	cmp	r7, #0
 800b4e4:	d0a9      	beq.n	800b43a <__sflush_r+0x1a>
 800b4e6:	0793      	lsls	r3, r2, #30
 800b4e8:	680e      	ldr	r6, [r1, #0]
 800b4ea:	bf08      	it	eq
 800b4ec:	694b      	ldreq	r3, [r1, #20]
 800b4ee:	600f      	str	r7, [r1, #0]
 800b4f0:	bf18      	it	ne
 800b4f2:	2300      	movne	r3, #0
 800b4f4:	eba6 0807 	sub.w	r8, r6, r7
 800b4f8:	608b      	str	r3, [r1, #8]
 800b4fa:	f1b8 0f00 	cmp.w	r8, #0
 800b4fe:	dd9c      	ble.n	800b43a <__sflush_r+0x1a>
 800b500:	6a21      	ldr	r1, [r4, #32]
 800b502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b504:	4643      	mov	r3, r8
 800b506:	463a      	mov	r2, r7
 800b508:	4628      	mov	r0, r5
 800b50a:	47b0      	blx	r6
 800b50c:	2800      	cmp	r0, #0
 800b50e:	dc06      	bgt.n	800b51e <__sflush_r+0xfe>
 800b510:	89a3      	ldrh	r3, [r4, #12]
 800b512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b516:	81a3      	strh	r3, [r4, #12]
 800b518:	f04f 30ff 	mov.w	r0, #4294967295
 800b51c:	e78e      	b.n	800b43c <__sflush_r+0x1c>
 800b51e:	4407      	add	r7, r0
 800b520:	eba8 0800 	sub.w	r8, r8, r0
 800b524:	e7e9      	b.n	800b4fa <__sflush_r+0xda>
 800b526:	bf00      	nop
 800b528:	20400001 	.word	0x20400001

0800b52c <_fflush_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	690b      	ldr	r3, [r1, #16]
 800b530:	4605      	mov	r5, r0
 800b532:	460c      	mov	r4, r1
 800b534:	b913      	cbnz	r3, 800b53c <_fflush_r+0x10>
 800b536:	2500      	movs	r5, #0
 800b538:	4628      	mov	r0, r5
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	b118      	cbz	r0, 800b546 <_fflush_r+0x1a>
 800b53e:	6983      	ldr	r3, [r0, #24]
 800b540:	b90b      	cbnz	r3, 800b546 <_fflush_r+0x1a>
 800b542:	f000 f887 	bl	800b654 <__sinit>
 800b546:	4b14      	ldr	r3, [pc, #80]	; (800b598 <_fflush_r+0x6c>)
 800b548:	429c      	cmp	r4, r3
 800b54a:	d11b      	bne.n	800b584 <_fflush_r+0x58>
 800b54c:	686c      	ldr	r4, [r5, #4]
 800b54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d0ef      	beq.n	800b536 <_fflush_r+0xa>
 800b556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b558:	07d0      	lsls	r0, r2, #31
 800b55a:	d404      	bmi.n	800b566 <_fflush_r+0x3a>
 800b55c:	0599      	lsls	r1, r3, #22
 800b55e:	d402      	bmi.n	800b566 <_fflush_r+0x3a>
 800b560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b562:	f000 f915 	bl	800b790 <__retarget_lock_acquire_recursive>
 800b566:	4628      	mov	r0, r5
 800b568:	4621      	mov	r1, r4
 800b56a:	f7ff ff59 	bl	800b420 <__sflush_r>
 800b56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b570:	07da      	lsls	r2, r3, #31
 800b572:	4605      	mov	r5, r0
 800b574:	d4e0      	bmi.n	800b538 <_fflush_r+0xc>
 800b576:	89a3      	ldrh	r3, [r4, #12]
 800b578:	059b      	lsls	r3, r3, #22
 800b57a:	d4dd      	bmi.n	800b538 <_fflush_r+0xc>
 800b57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b57e:	f000 f908 	bl	800b792 <__retarget_lock_release_recursive>
 800b582:	e7d9      	b.n	800b538 <_fflush_r+0xc>
 800b584:	4b05      	ldr	r3, [pc, #20]	; (800b59c <_fflush_r+0x70>)
 800b586:	429c      	cmp	r4, r3
 800b588:	d101      	bne.n	800b58e <_fflush_r+0x62>
 800b58a:	68ac      	ldr	r4, [r5, #8]
 800b58c:	e7df      	b.n	800b54e <_fflush_r+0x22>
 800b58e:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <_fflush_r+0x74>)
 800b590:	429c      	cmp	r4, r3
 800b592:	bf08      	it	eq
 800b594:	68ec      	ldreq	r4, [r5, #12]
 800b596:	e7da      	b.n	800b54e <_fflush_r+0x22>
 800b598:	0800be94 	.word	0x0800be94
 800b59c:	0800beb4 	.word	0x0800beb4
 800b5a0:	0800be74 	.word	0x0800be74

0800b5a4 <std>:
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	b510      	push	{r4, lr}
 800b5a8:	4604      	mov	r4, r0
 800b5aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5b2:	6083      	str	r3, [r0, #8]
 800b5b4:	8181      	strh	r1, [r0, #12]
 800b5b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b5b8:	81c2      	strh	r2, [r0, #14]
 800b5ba:	6183      	str	r3, [r0, #24]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	2208      	movs	r2, #8
 800b5c0:	305c      	adds	r0, #92	; 0x5c
 800b5c2:	f7fd fba7 	bl	8008d14 <memset>
 800b5c6:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <std+0x38>)
 800b5c8:	6263      	str	r3, [r4, #36]	; 0x24
 800b5ca:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <std+0x3c>)
 800b5cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <std+0x40>)
 800b5d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5d2:	4b05      	ldr	r3, [pc, #20]	; (800b5e8 <std+0x44>)
 800b5d4:	6224      	str	r4, [r4, #32]
 800b5d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	bf00      	nop
 800b5dc:	0800b8e9 	.word	0x0800b8e9
 800b5e0:	0800b90b 	.word	0x0800b90b
 800b5e4:	0800b943 	.word	0x0800b943
 800b5e8:	0800b967 	.word	0x0800b967

0800b5ec <_cleanup_r>:
 800b5ec:	4901      	ldr	r1, [pc, #4]	; (800b5f4 <_cleanup_r+0x8>)
 800b5ee:	f000 b8af 	b.w	800b750 <_fwalk_reent>
 800b5f2:	bf00      	nop
 800b5f4:	0800b52d 	.word	0x0800b52d

0800b5f8 <__sfmoreglue>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	2268      	movs	r2, #104	; 0x68
 800b5fc:	1e4d      	subs	r5, r1, #1
 800b5fe:	4355      	muls	r5, r2
 800b600:	460e      	mov	r6, r1
 800b602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b606:	f7ff fa15 	bl	800aa34 <_malloc_r>
 800b60a:	4604      	mov	r4, r0
 800b60c:	b140      	cbz	r0, 800b620 <__sfmoreglue+0x28>
 800b60e:	2100      	movs	r1, #0
 800b610:	e9c0 1600 	strd	r1, r6, [r0]
 800b614:	300c      	adds	r0, #12
 800b616:	60a0      	str	r0, [r4, #8]
 800b618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b61c:	f7fd fb7a 	bl	8008d14 <memset>
 800b620:	4620      	mov	r0, r4
 800b622:	bd70      	pop	{r4, r5, r6, pc}

0800b624 <__sfp_lock_acquire>:
 800b624:	4801      	ldr	r0, [pc, #4]	; (800b62c <__sfp_lock_acquire+0x8>)
 800b626:	f000 b8b3 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b62a:	bf00      	nop
 800b62c:	240009ad 	.word	0x240009ad

0800b630 <__sfp_lock_release>:
 800b630:	4801      	ldr	r0, [pc, #4]	; (800b638 <__sfp_lock_release+0x8>)
 800b632:	f000 b8ae 	b.w	800b792 <__retarget_lock_release_recursive>
 800b636:	bf00      	nop
 800b638:	240009ad 	.word	0x240009ad

0800b63c <__sinit_lock_acquire>:
 800b63c:	4801      	ldr	r0, [pc, #4]	; (800b644 <__sinit_lock_acquire+0x8>)
 800b63e:	f000 b8a7 	b.w	800b790 <__retarget_lock_acquire_recursive>
 800b642:	bf00      	nop
 800b644:	240009ae 	.word	0x240009ae

0800b648 <__sinit_lock_release>:
 800b648:	4801      	ldr	r0, [pc, #4]	; (800b650 <__sinit_lock_release+0x8>)
 800b64a:	f000 b8a2 	b.w	800b792 <__retarget_lock_release_recursive>
 800b64e:	bf00      	nop
 800b650:	240009ae 	.word	0x240009ae

0800b654 <__sinit>:
 800b654:	b510      	push	{r4, lr}
 800b656:	4604      	mov	r4, r0
 800b658:	f7ff fff0 	bl	800b63c <__sinit_lock_acquire>
 800b65c:	69a3      	ldr	r3, [r4, #24]
 800b65e:	b11b      	cbz	r3, 800b668 <__sinit+0x14>
 800b660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b664:	f7ff bff0 	b.w	800b648 <__sinit_lock_release>
 800b668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b66c:	6523      	str	r3, [r4, #80]	; 0x50
 800b66e:	4b13      	ldr	r3, [pc, #76]	; (800b6bc <__sinit+0x68>)
 800b670:	4a13      	ldr	r2, [pc, #76]	; (800b6c0 <__sinit+0x6c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	62a2      	str	r2, [r4, #40]	; 0x28
 800b676:	42a3      	cmp	r3, r4
 800b678:	bf04      	itt	eq
 800b67a:	2301      	moveq	r3, #1
 800b67c:	61a3      	streq	r3, [r4, #24]
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 f820 	bl	800b6c4 <__sfp>
 800b684:	6060      	str	r0, [r4, #4]
 800b686:	4620      	mov	r0, r4
 800b688:	f000 f81c 	bl	800b6c4 <__sfp>
 800b68c:	60a0      	str	r0, [r4, #8]
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 f818 	bl	800b6c4 <__sfp>
 800b694:	2200      	movs	r2, #0
 800b696:	60e0      	str	r0, [r4, #12]
 800b698:	2104      	movs	r1, #4
 800b69a:	6860      	ldr	r0, [r4, #4]
 800b69c:	f7ff ff82 	bl	800b5a4 <std>
 800b6a0:	68a0      	ldr	r0, [r4, #8]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	2109      	movs	r1, #9
 800b6a6:	f7ff ff7d 	bl	800b5a4 <std>
 800b6aa:	68e0      	ldr	r0, [r4, #12]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	2112      	movs	r1, #18
 800b6b0:	f7ff ff78 	bl	800b5a4 <std>
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	61a3      	str	r3, [r4, #24]
 800b6b8:	e7d2      	b.n	800b660 <__sinit+0xc>
 800b6ba:	bf00      	nop
 800b6bc:	0800baa4 	.word	0x0800baa4
 800b6c0:	0800b5ed 	.word	0x0800b5ed

0800b6c4 <__sfp>:
 800b6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c6:	4607      	mov	r7, r0
 800b6c8:	f7ff ffac 	bl	800b624 <__sfp_lock_acquire>
 800b6cc:	4b1e      	ldr	r3, [pc, #120]	; (800b748 <__sfp+0x84>)
 800b6ce:	681e      	ldr	r6, [r3, #0]
 800b6d0:	69b3      	ldr	r3, [r6, #24]
 800b6d2:	b913      	cbnz	r3, 800b6da <__sfp+0x16>
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f7ff ffbd 	bl	800b654 <__sinit>
 800b6da:	3648      	adds	r6, #72	; 0x48
 800b6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	d503      	bpl.n	800b6ec <__sfp+0x28>
 800b6e4:	6833      	ldr	r3, [r6, #0]
 800b6e6:	b30b      	cbz	r3, 800b72c <__sfp+0x68>
 800b6e8:	6836      	ldr	r6, [r6, #0]
 800b6ea:	e7f7      	b.n	800b6dc <__sfp+0x18>
 800b6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6f0:	b9d5      	cbnz	r5, 800b728 <__sfp+0x64>
 800b6f2:	4b16      	ldr	r3, [pc, #88]	; (800b74c <__sfp+0x88>)
 800b6f4:	60e3      	str	r3, [r4, #12]
 800b6f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6fa:	6665      	str	r5, [r4, #100]	; 0x64
 800b6fc:	f000 f847 	bl	800b78e <__retarget_lock_init_recursive>
 800b700:	f7ff ff96 	bl	800b630 <__sfp_lock_release>
 800b704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b70c:	6025      	str	r5, [r4, #0]
 800b70e:	61a5      	str	r5, [r4, #24]
 800b710:	2208      	movs	r2, #8
 800b712:	4629      	mov	r1, r5
 800b714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b718:	f7fd fafc 	bl	8008d14 <memset>
 800b71c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b724:	4620      	mov	r0, r4
 800b726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b728:	3468      	adds	r4, #104	; 0x68
 800b72a:	e7d9      	b.n	800b6e0 <__sfp+0x1c>
 800b72c:	2104      	movs	r1, #4
 800b72e:	4638      	mov	r0, r7
 800b730:	f7ff ff62 	bl	800b5f8 <__sfmoreglue>
 800b734:	4604      	mov	r4, r0
 800b736:	6030      	str	r0, [r6, #0]
 800b738:	2800      	cmp	r0, #0
 800b73a:	d1d5      	bne.n	800b6e8 <__sfp+0x24>
 800b73c:	f7ff ff78 	bl	800b630 <__sfp_lock_release>
 800b740:	230c      	movs	r3, #12
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	e7ee      	b.n	800b724 <__sfp+0x60>
 800b746:	bf00      	nop
 800b748:	0800baa4 	.word	0x0800baa4
 800b74c:	ffff0001 	.word	0xffff0001

0800b750 <_fwalk_reent>:
 800b750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b754:	4606      	mov	r6, r0
 800b756:	4688      	mov	r8, r1
 800b758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b75c:	2700      	movs	r7, #0
 800b75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b762:	f1b9 0901 	subs.w	r9, r9, #1
 800b766:	d505      	bpl.n	800b774 <_fwalk_reent+0x24>
 800b768:	6824      	ldr	r4, [r4, #0]
 800b76a:	2c00      	cmp	r4, #0
 800b76c:	d1f7      	bne.n	800b75e <_fwalk_reent+0xe>
 800b76e:	4638      	mov	r0, r7
 800b770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b774:	89ab      	ldrh	r3, [r5, #12]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d907      	bls.n	800b78a <_fwalk_reent+0x3a>
 800b77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b77e:	3301      	adds	r3, #1
 800b780:	d003      	beq.n	800b78a <_fwalk_reent+0x3a>
 800b782:	4629      	mov	r1, r5
 800b784:	4630      	mov	r0, r6
 800b786:	47c0      	blx	r8
 800b788:	4307      	orrs	r7, r0
 800b78a:	3568      	adds	r5, #104	; 0x68
 800b78c:	e7e9      	b.n	800b762 <_fwalk_reent+0x12>

0800b78e <__retarget_lock_init_recursive>:
 800b78e:	4770      	bx	lr

0800b790 <__retarget_lock_acquire_recursive>:
 800b790:	4770      	bx	lr

0800b792 <__retarget_lock_release_recursive>:
 800b792:	4770      	bx	lr

0800b794 <__swhatbuf_r>:
 800b794:	b570      	push	{r4, r5, r6, lr}
 800b796:	460e      	mov	r6, r1
 800b798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b79c:	2900      	cmp	r1, #0
 800b79e:	b096      	sub	sp, #88	; 0x58
 800b7a0:	4614      	mov	r4, r2
 800b7a2:	461d      	mov	r5, r3
 800b7a4:	da08      	bge.n	800b7b8 <__swhatbuf_r+0x24>
 800b7a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	602a      	str	r2, [r5, #0]
 800b7ae:	061a      	lsls	r2, r3, #24
 800b7b0:	d410      	bmi.n	800b7d4 <__swhatbuf_r+0x40>
 800b7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b6:	e00e      	b.n	800b7d6 <__swhatbuf_r+0x42>
 800b7b8:	466a      	mov	r2, sp
 800b7ba:	f000 f8fb 	bl	800b9b4 <_fstat_r>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	dbf1      	blt.n	800b7a6 <__swhatbuf_r+0x12>
 800b7c2:	9a01      	ldr	r2, [sp, #4]
 800b7c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7cc:	425a      	negs	r2, r3
 800b7ce:	415a      	adcs	r2, r3
 800b7d0:	602a      	str	r2, [r5, #0]
 800b7d2:	e7ee      	b.n	800b7b2 <__swhatbuf_r+0x1e>
 800b7d4:	2340      	movs	r3, #64	; 0x40
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	b016      	add	sp, #88	; 0x58
 800b7dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7e0 <__smakebuf_r>:
 800b7e0:	898b      	ldrh	r3, [r1, #12]
 800b7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7e4:	079d      	lsls	r5, r3, #30
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	d507      	bpl.n	800b7fc <__smakebuf_r+0x1c>
 800b7ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7f0:	6023      	str	r3, [r4, #0]
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	6163      	str	r3, [r4, #20]
 800b7f8:	b002      	add	sp, #8
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	ab01      	add	r3, sp, #4
 800b7fe:	466a      	mov	r2, sp
 800b800:	f7ff ffc8 	bl	800b794 <__swhatbuf_r>
 800b804:	9900      	ldr	r1, [sp, #0]
 800b806:	4605      	mov	r5, r0
 800b808:	4630      	mov	r0, r6
 800b80a:	f7ff f913 	bl	800aa34 <_malloc_r>
 800b80e:	b948      	cbnz	r0, 800b824 <__smakebuf_r+0x44>
 800b810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b814:	059a      	lsls	r2, r3, #22
 800b816:	d4ef      	bmi.n	800b7f8 <__smakebuf_r+0x18>
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	f043 0302 	orr.w	r3, r3, #2
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	e7e3      	b.n	800b7ec <__smakebuf_r+0xc>
 800b824:	4b0d      	ldr	r3, [pc, #52]	; (800b85c <__smakebuf_r+0x7c>)
 800b826:	62b3      	str	r3, [r6, #40]	; 0x28
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	6020      	str	r0, [r4, #0]
 800b82c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	9b00      	ldr	r3, [sp, #0]
 800b834:	6163      	str	r3, [r4, #20]
 800b836:	9b01      	ldr	r3, [sp, #4]
 800b838:	6120      	str	r0, [r4, #16]
 800b83a:	b15b      	cbz	r3, 800b854 <__smakebuf_r+0x74>
 800b83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b840:	4630      	mov	r0, r6
 800b842:	f000 f8c9 	bl	800b9d8 <_isatty_r>
 800b846:	b128      	cbz	r0, 800b854 <__smakebuf_r+0x74>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f023 0303 	bic.w	r3, r3, #3
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	89a0      	ldrh	r0, [r4, #12]
 800b856:	4305      	orrs	r5, r0
 800b858:	81a5      	strh	r5, [r4, #12]
 800b85a:	e7cd      	b.n	800b7f8 <__smakebuf_r+0x18>
 800b85c:	0800b5ed 	.word	0x0800b5ed

0800b860 <_raise_r>:
 800b860:	291f      	cmp	r1, #31
 800b862:	b538      	push	{r3, r4, r5, lr}
 800b864:	4604      	mov	r4, r0
 800b866:	460d      	mov	r5, r1
 800b868:	d904      	bls.n	800b874 <_raise_r+0x14>
 800b86a:	2316      	movs	r3, #22
 800b86c:	6003      	str	r3, [r0, #0]
 800b86e:	f04f 30ff 	mov.w	r0, #4294967295
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b876:	b112      	cbz	r2, 800b87e <_raise_r+0x1e>
 800b878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b87c:	b94b      	cbnz	r3, 800b892 <_raise_r+0x32>
 800b87e:	4620      	mov	r0, r4
 800b880:	f000 f830 	bl	800b8e4 <_getpid_r>
 800b884:	462a      	mov	r2, r5
 800b886:	4601      	mov	r1, r0
 800b888:	4620      	mov	r0, r4
 800b88a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b88e:	f000 b817 	b.w	800b8c0 <_kill_r>
 800b892:	2b01      	cmp	r3, #1
 800b894:	d00a      	beq.n	800b8ac <_raise_r+0x4c>
 800b896:	1c59      	adds	r1, r3, #1
 800b898:	d103      	bne.n	800b8a2 <_raise_r+0x42>
 800b89a:	2316      	movs	r3, #22
 800b89c:	6003      	str	r3, [r0, #0]
 800b89e:	2001      	movs	r0, #1
 800b8a0:	e7e7      	b.n	800b872 <_raise_r+0x12>
 800b8a2:	2400      	movs	r4, #0
 800b8a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	4798      	blx	r3
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	e7e0      	b.n	800b872 <_raise_r+0x12>

0800b8b0 <raise>:
 800b8b0:	4b02      	ldr	r3, [pc, #8]	; (800b8bc <raise+0xc>)
 800b8b2:	4601      	mov	r1, r0
 800b8b4:	6818      	ldr	r0, [r3, #0]
 800b8b6:	f7ff bfd3 	b.w	800b860 <_raise_r>
 800b8ba:	bf00      	nop
 800b8bc:	24000318 	.word	0x24000318

0800b8c0 <_kill_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d07      	ldr	r5, [pc, #28]	; (800b8e0 <_kill_r+0x20>)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	4611      	mov	r1, r2
 800b8cc:	602b      	str	r3, [r5, #0]
 800b8ce:	f7f6 f9cb 	bl	8001c68 <_kill>
 800b8d2:	1c43      	adds	r3, r0, #1
 800b8d4:	d102      	bne.n	800b8dc <_kill_r+0x1c>
 800b8d6:	682b      	ldr	r3, [r5, #0]
 800b8d8:	b103      	cbz	r3, 800b8dc <_kill_r+0x1c>
 800b8da:	6023      	str	r3, [r4, #0]
 800b8dc:	bd38      	pop	{r3, r4, r5, pc}
 800b8de:	bf00      	nop
 800b8e0:	240009a8 	.word	0x240009a8

0800b8e4 <_getpid_r>:
 800b8e4:	f7f6 b9b8 	b.w	8001c58 <_getpid>

0800b8e8 <__sread>:
 800b8e8:	b510      	push	{r4, lr}
 800b8ea:	460c      	mov	r4, r1
 800b8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f0:	f000 f894 	bl	800ba1c <_read_r>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	bfab      	itete	ge
 800b8f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b8fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b8fc:	181b      	addge	r3, r3, r0
 800b8fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b902:	bfac      	ite	ge
 800b904:	6563      	strge	r3, [r4, #84]	; 0x54
 800b906:	81a3      	strhlt	r3, [r4, #12]
 800b908:	bd10      	pop	{r4, pc}

0800b90a <__swrite>:
 800b90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b90e:	461f      	mov	r7, r3
 800b910:	898b      	ldrh	r3, [r1, #12]
 800b912:	05db      	lsls	r3, r3, #23
 800b914:	4605      	mov	r5, r0
 800b916:	460c      	mov	r4, r1
 800b918:	4616      	mov	r6, r2
 800b91a:	d505      	bpl.n	800b928 <__swrite+0x1e>
 800b91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b920:	2302      	movs	r3, #2
 800b922:	2200      	movs	r2, #0
 800b924:	f000 f868 	bl	800b9f8 <_lseek_r>
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b92e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	4632      	mov	r2, r6
 800b936:	463b      	mov	r3, r7
 800b938:	4628      	mov	r0, r5
 800b93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b93e:	f000 b817 	b.w	800b970 <_write_r>

0800b942 <__sseek>:
 800b942:	b510      	push	{r4, lr}
 800b944:	460c      	mov	r4, r1
 800b946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b94a:	f000 f855 	bl	800b9f8 <_lseek_r>
 800b94e:	1c43      	adds	r3, r0, #1
 800b950:	89a3      	ldrh	r3, [r4, #12]
 800b952:	bf15      	itete	ne
 800b954:	6560      	strne	r0, [r4, #84]	; 0x54
 800b956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b95a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b95e:	81a3      	strheq	r3, [r4, #12]
 800b960:	bf18      	it	ne
 800b962:	81a3      	strhne	r3, [r4, #12]
 800b964:	bd10      	pop	{r4, pc}

0800b966 <__sclose>:
 800b966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b96a:	f000 b813 	b.w	800b994 <_close_r>
	...

0800b970 <_write_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	4d07      	ldr	r5, [pc, #28]	; (800b990 <_write_r+0x20>)
 800b974:	4604      	mov	r4, r0
 800b976:	4608      	mov	r0, r1
 800b978:	4611      	mov	r1, r2
 800b97a:	2200      	movs	r2, #0
 800b97c:	602a      	str	r2, [r5, #0]
 800b97e:	461a      	mov	r2, r3
 800b980:	f7f6 f9a9 	bl	8001cd6 <_write>
 800b984:	1c43      	adds	r3, r0, #1
 800b986:	d102      	bne.n	800b98e <_write_r+0x1e>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	b103      	cbz	r3, 800b98e <_write_r+0x1e>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	bd38      	pop	{r3, r4, r5, pc}
 800b990:	240009a8 	.word	0x240009a8

0800b994 <_close_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d06      	ldr	r5, [pc, #24]	; (800b9b0 <_close_r+0x1c>)
 800b998:	2300      	movs	r3, #0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	602b      	str	r3, [r5, #0]
 800b9a0:	f7f6 f9b5 	bl	8001d0e <_close>
 800b9a4:	1c43      	adds	r3, r0, #1
 800b9a6:	d102      	bne.n	800b9ae <_close_r+0x1a>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	b103      	cbz	r3, 800b9ae <_close_r+0x1a>
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	bd38      	pop	{r3, r4, r5, pc}
 800b9b0:	240009a8 	.word	0x240009a8

0800b9b4 <_fstat_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d07      	ldr	r5, [pc, #28]	; (800b9d4 <_fstat_r+0x20>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	4611      	mov	r1, r2
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	f7f6 f9b0 	bl	8001d26 <_fstat>
 800b9c6:	1c43      	adds	r3, r0, #1
 800b9c8:	d102      	bne.n	800b9d0 <_fstat_r+0x1c>
 800b9ca:	682b      	ldr	r3, [r5, #0]
 800b9cc:	b103      	cbz	r3, 800b9d0 <_fstat_r+0x1c>
 800b9ce:	6023      	str	r3, [r4, #0]
 800b9d0:	bd38      	pop	{r3, r4, r5, pc}
 800b9d2:	bf00      	nop
 800b9d4:	240009a8 	.word	0x240009a8

0800b9d8 <_isatty_r>:
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	4d06      	ldr	r5, [pc, #24]	; (800b9f4 <_isatty_r+0x1c>)
 800b9dc:	2300      	movs	r3, #0
 800b9de:	4604      	mov	r4, r0
 800b9e0:	4608      	mov	r0, r1
 800b9e2:	602b      	str	r3, [r5, #0]
 800b9e4:	f7f6 f9af 	bl	8001d46 <_isatty>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_isatty_r+0x1a>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_isatty_r+0x1a>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	240009a8 	.word	0x240009a8

0800b9f8 <_lseek_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	; (800ba18 <_lseek_r+0x20>)
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f6 f9a8 	bl	8001d5c <_lseek>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_lseek_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_lseek_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	240009a8 	.word	0x240009a8

0800ba1c <_read_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4d07      	ldr	r5, [pc, #28]	; (800ba3c <_read_r+0x20>)
 800ba20:	4604      	mov	r4, r0
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	2200      	movs	r2, #0
 800ba28:	602a      	str	r2, [r5, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	f7f6 f936 	bl	8001c9c <_read>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_read_r+0x1e>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_read_r+0x1e>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	240009a8 	.word	0x240009a8

0800ba40 <_init>:
 800ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba42:	bf00      	nop
 800ba44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba46:	bc08      	pop	{r3}
 800ba48:	469e      	mov	lr, r3
 800ba4a:	4770      	bx	lr

0800ba4c <_fini>:
 800ba4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4e:	bf00      	nop
 800ba50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba52:	bc08      	pop	{r3}
 800ba54:	469e      	mov	lr, r3
 800ba56:	4770      	bx	lr
