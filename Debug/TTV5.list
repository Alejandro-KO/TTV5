
TTV5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eee4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020e0  0800f1b8  0800f1b8  0001f1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011298  08011298  00021298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080112a0  080112a0  000212a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080112a4  080112a4  000212a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000da8  24000000  080112a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000e9a4  24000da8  08012050  00030da8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400f74c  08012050  0003f74c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030da8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017daf  00000000  00000000  00030dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000027b5  00000000  00000000  00048b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001200  00000000  00000000  0004b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001118  00000000  00000000  0004c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003568c  00000000  00000000  0004d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017a25  00000000  00000000  00082ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00163150  00000000  00000000  0009a709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001fd859  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006508  00000000  00000000  001fd8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000da8 	.word	0x24000da8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f19c 	.word	0x0800f19c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000dac 	.word	0x24000dac
 800030c:	0800f19c 	.word	0x0800f19c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	0000      	movs	r0, r0
	...

08000ab0 <is_zero>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */


int is_zero(float value) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	ed87 0a01 	vstr	s0, [r7, #4]
    return fabs(value) < TOLERANCE;
 8000aba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000abe:	eef0 7ae7 	vabs.f32	s15, s15
 8000ac2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000ae8 <is_zero+0x38>
 8000aca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad2:	bf4c      	ite	mi
 8000ad4:	2301      	movmi	r3, #1
 8000ad6:	2300      	movpl	r3, #0
 8000ad8:	b2db      	uxtb	r3, r3
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000aec:	3f50624d 	.word	0x3f50624d

08000af0 <PID_Init>:
    float prevError;    // Previous error value (for derivative calculation)
    float prevTime;     // Previous time stamp (for derivative calculation)
} PID_Controller;


void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float setpoint) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6178      	str	r0, [r7, #20]
 8000af8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000afc:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b00:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b04:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	60da      	str	r2, [r3, #12]
    pid->integral = 0;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
    pid->prevError = 0;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f04f 0200 	mov.w	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
    pid->prevTime = HAL_GetTick();
 8000b30:	f002 f88c 	bl	8002c4c <HAL_GetTick>
 8000b34:	ee07 0a90 	vmov	s15, r0
 8000b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <clamp>:

float clamp(float value, float min, float max) {
 8000b4a:	b480      	push	{r7}
 8000b4c:	b085      	sub	sp, #20
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	ed87 0a03 	vstr	s0, [r7, #12]
 8000b54:	edc7 0a02 	vstr	s1, [r7, #8]
 8000b58:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min) {
 8000b5c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6c:	d501      	bpl.n	8000b72 <clamp+0x28>
        return min;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	e00b      	b.n	8000b8a <clamp+0x40>
    } else if (value > max) {
 8000b72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	dd01      	ble.n	8000b88 <clamp+0x3e>
        return max;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	e000      	b.n	8000b8a <clamp+0x40>
    } else {
        return value;
 8000b88:	68fb      	ldr	r3, [r7, #12]
    }
}
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	0000      	movs	r0, r0
	...

08000ba0 <PID_Update>:




float PID_Update(PID_Controller *pid,float setpoint , float measurement,const char* identifier,float *errors, float *times, int *index,float *output, float *error) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b098      	sub	sp, #96	; 0x60
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	6178      	str	r0, [r7, #20]
 8000ba8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000bac:	edc7 0a03 	vstr	s1, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
    float currentTime = HAL_GetTick();
 8000bb6:	f002 f849 	bl	8002c4c <HAL_GetTick>
 8000bba:	ee07 0a90 	vmov	s15, r0
 8000bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bc2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    float dt = (currentTime - pid->prevTime) / 1000; // Convertir a segundos
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8000bcc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd4:	eddf 6a68 	vldr	s13, [pc, #416]	; 8000d78 <PID_Update+0x1d8>
 8000bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bdc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    *error = setpoint - measurement;
 8000be0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bee:	edc3 7a00 	vstr	s15, [r3]

    // Proporcional
    float P_out = pid->Kp * (*error);
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	ed93 7a00 	vldr	s14, [r3]
 8000bf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bfa:	edd3 7a00 	vldr	s15, [r3]
 8000bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c02:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Integral
    pid->integral += (*error) * dt;
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	ed93 7a04 	vldr	s14, [r3, #16]
 8000c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c0e:	edd3 6a00 	vldr	s13, [r3]
 8000c12:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	edc3 7a04 	vstr	s15, [r3, #16]
    float I_out = pid->Ki * pid->integral;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c34:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    // Derivativo
    float derivative = ((*error) - pid->prevError) / dt;
 8000c38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c3a:	ed93 7a00 	vldr	s14, [r3]
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000c48:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8000c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c50:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float D_out = pid->Kd * derivative;
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c5a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c62:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

    // Total Output
    *output = P_out + I_out + D_out;
 8000c66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8000c6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000c6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c72:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c7c:	edc3 7a00 	vstr	s15, [r3]
    *output = clamp(*output, -MAX_OUTPUT, MAX_OUTPUT); // Ajusta MAX_OUTPUT según tu sistema
 8000c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c82:	edd3 7a00 	vldr	s15, [r3]
 8000c86:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8000d7c <PID_Update+0x1dc>
 8000c8a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8000d80 <PID_Update+0x1e0>
 8000c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c92:	f7ff ff5a 	bl	8000b4a <clamp>
 8000c96:	eef0 7a40 	vmov.f32	s15, s0
 8000c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c9c:	edc3 7a00 	vstr	s15, [r3]

    // Guardar el error y el tiempo actuales para la próxima iteración
    pid->prevError = (*error)-0.001;
 8000ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000caa:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8000d70 <PID_Update+0x1d0>
 8000cae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000cb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	edc3 7a05 	vstr	s15, [r3, #20]
    pid->prevTime = currentTime;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cc0:	619a      	str	r2, [r3, #24]



    // Almacenar el error y el tiempo
    if (*index < BUFFER_SIZE) {
 8000cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cca:	da19      	bge.n	8000d00 <PID_Update+0x160>
        errors[*index] = *error;
 8000ccc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	601a      	str	r2, [r3, #0]
        times[*index] = currentTime / 1000.0; // Convertir a segundos
 8000cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000cea:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000d78 <PID_Update+0x1d8>
 8000cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf2:	edc3 7a00 	vstr	s15, [r3]
        (*index)++;
 8000cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cfe:	601a      	str	r2, [r3, #0]


    // Convertir error y tiempo a cadena y transmitir por UART
    char buffer_error[20];
    char buffer_time[20];
    float_to_string(*error, buffer_error, 3);
 8000d00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d02:	edd3 7a00 	vldr	s15, [r3]
 8000d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0a:	2103      	movs	r1, #3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d12:	f000 ff99 	bl	8001c48 <float_to_string>
    float_to_string(currentTime / 1000.0, buffer_time, 3);
 8000d16:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000d1a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000d78 <PID_Update+0x1d8>
 8000d1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d22:	f107 0318 	add.w	r3, r7, #24
 8000d26:	2103      	movs	r1, #3
 8000d28:	4618      	mov	r0, r3
 8000d2a:	eeb0 0a47 	vmov.f32	s0, s14
 8000d2e:	f000 ff8b 	bl	8001c48 <float_to_string>
    sprintf(buffer_1, "Medida error %s: %s, Tiempo: %s\r\n", identifier, buffer_error, buffer_time);
 8000d32:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	4910      	ldr	r1, [pc, #64]	; (8000d84 <PID_Update+0x1e4>)
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <PID_Update+0x1e8>)
 8000d44:	f009 faee 	bl	800a324 <siprintf>

     //Transmite la cadena anterior
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer_1, strlen(buffer_1), HAL_MAX_DELAY);
 8000d48:	480f      	ldr	r0, [pc, #60]	; (8000d88 <PID_Update+0x1e8>)
 8000d4a:	f7ff fae1 	bl	8000310 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	490c      	ldr	r1, [pc, #48]	; (8000d88 <PID_Update+0x1e8>)
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <PID_Update+0x1ec>)
 8000d5a:	f006 fa33 	bl	80071c4 <HAL_UART_Transmit>
}
 8000d5e:	bf00      	nop
 8000d60:	eeb0 0a67 	vmov.f32	s0, s15
 8000d64:	3758      	adds	r7, #88	; 0x58
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	f3af 8000 	nop.w
 8000d70:	d2f1a9fc 	.word	0xd2f1a9fc
 8000d74:	3f50624d 	.word	0x3f50624d
 8000d78:	447a0000 	.word	0x447a0000
 8000d7c:	42480000 	.word	0x42480000
 8000d80:	c2480000 	.word	0xc2480000
 8000d84:	0800f1b8 	.word	0x0800f1b8
 8000d88:	24000dc4 	.word	0x24000dc4
 8000d8c:	2400f52c 	.word	0x2400f52c

08000d90 <radianes_a_valor>:

uint32_t radianes_a_valor(float radianes) {
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ajusta los radianes negativos a su equivalente positivo en el rango de 0 a 2PI
    if (radianes < 0) {
 8000d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da6:	d50b      	bpl.n	8000dc0 <radianes_a_valor+0x30>
        radianes += M_PI;
 8000da8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000e08 <radianes_a_valor+0x78>
 8000db4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000db8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dbc:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Normaliza el valor de radianes en el rango de 0 a PI
    if (radianes > M_PI) {
 8000dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dc8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000e08 <radianes_a_valor+0x78>
 8000dcc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	dd01      	ble.n	8000dda <radianes_a_valor+0x4a>
        radianes = M_PI;
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <radianes_a_valor+0x88>)
 8000dd8:	607b      	str	r3, [r7, #4]
    }

    return VALOR_0 + (uint32_t)((VALOR_PI - VALOR_0) * (radianes / M_PI));
 8000dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dde:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000de2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000e08 <radianes_a_valor+0x78>
 8000de6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dea:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000e10 <radianes_a_valor+0x80>
 8000dee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000df2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000df6:	ee17 3a90 	vmov	r3, s15
 8000dfa:	3341      	adds	r3, #65	; 0x41
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	54442d18 	.word	0x54442d18
 8000e0c:	400921fb 	.word	0x400921fb
 8000e10:	00000000 	.word	0x00000000
 8000e14:	406cc000 	.word	0x406cc000
 8000e18:	40490fdb 	.word	0x40490fdb

08000e1c <milimetros_a_pasos>:

uint32_t milimetros_a_pasos(float milimetros) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	ed87 0a01 	vstr	s0, [r7, #4]
    // Calcular el número de pasos necesarios para mover la distancia en milímetros
    float pasos_por_mm = 200.0 / 8.0; // 200 pasos por 8 mm
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <milimetros_a_pasos+0x3c>)
 8000e28:	60fb      	str	r3, [r7, #12]
    return (uint32_t)(fabs(milimetros) * pasos_por_mm);
 8000e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8000e32:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e46:	ee17 3a90 	vmov	r3, s15
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	41c80000 	.word	0x41c80000
 8000e5c:	00000000 	.word	0x00000000

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b0a3      	sub	sp, #140	; 0x8c
 8000e64:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e66:	f000 fe61 	bl	8001b2c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6a:	f001 fe69 	bl	8002b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6e:	f000 fbf9 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e72:	f000 fd61 	bl	8001938 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e76:	f000 fcc7 	bl	8001808 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e7a:	f000 fd11 	bl	80018a0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000e7e:	f000 fc5f 	bl	8001740 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart3,&byte,bufersize);
 8000e82:	2201      	movs	r2, #1
 8000e84:	49c1      	ldr	r1, [pc, #772]	; (800118c <main+0x32c>)
 8000e86:	48c2      	ldr	r0, [pc, #776]	; (8001190 <main+0x330>)
 8000e88:	f006 fa32 	bl	80072f0 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e8c:	210c      	movs	r1, #12
 8000e8e:	48c1      	ldr	r0, [pc, #772]	; (8001194 <main+0x334>)
 8000e90:	f005 fada 	bl	8006448 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e94:	2104      	movs	r1, #4
 8000e96:	48bf      	ldr	r0, [pc, #764]	; (8001194 <main+0x334>)
 8000e98:	f005 fad6 	bl	8006448 <HAL_TIM_PWM_Start>

  A4988_q1();
 8000e9c:	f001 f88c 	bl	8001fb8 <A4988_q1>
  A4988_q2();
 8000ea0:	f001 f8a8 	bl	8001ff4 <A4988_q2>
  A4988_q3();
 8000ea4:	f001 f8c4 	bl	8002030 <A4988_q3>
  Home();
 8000ea8:	f001 f8e4 	bl	8002074 <Home>

///////Valores para el control de posicion PX,PY Y PZ

  float setpoint_px=120;
 8000eac:	4bba      	ldr	r3, [pc, #744]	; (8001198 <main+0x338>)
 8000eae:	667b      	str	r3, [r7, #100]	; 0x64
  float setpoint_py=14;
 8000eb0:	4bba      	ldr	r3, [pc, #744]	; (800119c <main+0x33c>)
 8000eb2:	663b      	str	r3, [r7, #96]	; 0x60
  float setpoint_pz=50;
 8000eb4:	4bba      	ldr	r3, [pc, #744]	; (80011a0 <main+0x340>)
 8000eb6:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Inicializa el controlador PID
  PID_Init(&pid_px, 1, 0, 0.0011, setpoint_px);
 8000eb8:	edd7 1a19 	vldr	s3, [r7, #100]	; 0x64
 8000ebc:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 80011a4 <main+0x344>
 8000ec0:	eddf 0ab9 	vldr	s1, [pc, #740]	; 80011a8 <main+0x348>
 8000ec4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ec8:	48b8      	ldr	r0, [pc, #736]	; (80011ac <main+0x34c>)
 8000eca:	f7ff fe11 	bl	8000af0 <PID_Init>
  PID_Init(&pid_py, 1, 0, 0.0011, setpoint_py);
 8000ece:	edd7 1a18 	vldr	s3, [r7, #96]	; 0x60
 8000ed2:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80011a4 <main+0x344>
 8000ed6:	eddf 0ab4 	vldr	s1, [pc, #720]	; 80011a8 <main+0x348>
 8000eda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ede:	48b4      	ldr	r0, [pc, #720]	; (80011b0 <main+0x350>)
 8000ee0:	f7ff fe06 	bl	8000af0 <PID_Init>
  PID_Init(&pid_pz, 1, 0, 0.0011, setpoint_pz);
 8000ee4:	edd7 1a17 	vldr	s3, [r7, #92]	; 0x5c
 8000ee8:	ed9f 1aae 	vldr	s2, [pc, #696]	; 80011a4 <main+0x344>
 8000eec:	eddf 0aae 	vldr	s1, [pc, #696]	; 80011a8 <main+0x348>
 8000ef0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ef4:	48af      	ldr	r0, [pc, #700]	; (80011b4 <main+0x354>)
 8000ef6:	f7ff fdfb 	bl	8000af0 <PID_Init>


///////Valore para el control de Articulaccion q1 , q2, q3 y q4

  double q1_1, q2_1, q3_1;
  double new_px=0,new_py=0, new_pz=0;
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	e9c7 2302 	strd	r2, r3, [r7, #8]


  float q1_float1 =120;////Solo prueba no tiene efecto q1_float solo se puedo para no borrar la declaracion de la estructura
 8000f1e:	4b9e      	ldr	r3, [pc, #632]	; (8001198 <main+0x338>)
 8000f20:	65bb      	str	r3, [r7, #88]	; 0x58
  float q2_float1 =100;
 8000f22:	4ba5      	ldr	r3, [pc, #660]	; (80011b8 <main+0x358>)
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
  float q3_float1 =40;
 8000f26:	4ba5      	ldr	r3, [pc, #660]	; (80011bc <main+0x35c>)
 8000f28:	653b      	str	r3, [r7, #80]	; 0x50
  float q4_float1 =15;
 8000f2a:	4ba5      	ldr	r3, [pc, #660]	; (80011c0 <main+0x360>)
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  float q5_float1 =30;
 8000f2e:	4ba5      	ldr	r3, [pc, #660]	; (80011c4 <main+0x364>)
 8000f30:	64bb      	str	r3, [r7, #72]	; 0x48

  PID_Init(&pid_q1, 1, 0, 0.0011,q1_float1);
 8000f32:	edd7 1a16 	vldr	s3, [r7, #88]	; 0x58
 8000f36:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 80011a4 <main+0x344>
 8000f3a:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80011a8 <main+0x348>
 8000f3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f42:	48a1      	ldr	r0, [pc, #644]	; (80011c8 <main+0x368>)
 8000f44:	f7ff fdd4 	bl	8000af0 <PID_Init>
  PID_Init(&pid_q2, 1, 0, 0.0011,q2_float1);
 8000f48:	edd7 1a15 	vldr	s3, [r7, #84]	; 0x54
 8000f4c:	ed9f 1a95 	vldr	s2, [pc, #596]	; 80011a4 <main+0x344>
 8000f50:	eddf 0a95 	vldr	s1, [pc, #596]	; 80011a8 <main+0x348>
 8000f54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f58:	489c      	ldr	r0, [pc, #624]	; (80011cc <main+0x36c>)
 8000f5a:	f7ff fdc9 	bl	8000af0 <PID_Init>
  PID_Init(&pid_q3, 1, 0, 0.0011,q3_float1);
 8000f5e:	edd7 1a14 	vldr	s3, [r7, #80]	; 0x50
 8000f62:	ed9f 1a90 	vldr	s2, [pc, #576]	; 80011a4 <main+0x344>
 8000f66:	eddf 0a90 	vldr	s1, [pc, #576]	; 80011a8 <main+0x348>
 8000f6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f6e:	4898      	ldr	r0, [pc, #608]	; (80011d0 <main+0x370>)
 8000f70:	f7ff fdbe 	bl	8000af0 <PID_Init>
  PID_Init(&pid_q4, 1, 0, 0.0011,q4_float1);
 8000f74:	edd7 1a13 	vldr	s3, [r7, #76]	; 0x4c
 8000f78:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 80011a4 <main+0x344>
 8000f7c:	eddf 0a8a 	vldr	s1, [pc, #552]	; 80011a8 <main+0x348>
 8000f80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f84:	4893      	ldr	r0, [pc, #588]	; (80011d4 <main+0x374>)
 8000f86:	f7ff fdb3 	bl	8000af0 <PID_Init>
  PID_Init(&pid_q5, 1, 0, 0.0011,q5_float1);
 8000f8a:	edd7 1a12 	vldr	s3, [r7, #72]	; 0x48
 8000f8e:	ed9f 1a85 	vldr	s2, [pc, #532]	; 80011a4 <main+0x344>
 8000f92:	eddf 0a85 	vldr	s1, [pc, #532]	; 80011a8 <main+0x348>
 8000f96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f9a:	488f      	ldr	r0, [pc, #572]	; (80011d8 <main+0x378>)
 8000f9c:	f7ff fda8 	bl	8000af0 <PID_Init>


  float corrected_length_q1=0;
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	677b      	str	r3, [r7, #116]	; 0x74
  float corrected_length_q2=0;
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	673b      	str	r3, [r7, #112]	; 0x70
  float corrected_length_q3=0;
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  float corrected_length_q4=0;
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	66bb      	str	r3, [r7, #104]	; 0x68
  float corrected_length_q5=0;
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	647b      	str	r3, [r7, #68]	; 0x44


  /* USER CODE BEGIN WHILE */
  while (1){

	  	  	 sprintf(buffer_1, "Valores de articulaciones q1:\r\n");
 8000fbe:	4987      	ldr	r1, [pc, #540]	; (80011dc <main+0x37c>)
 8000fc0:	4887      	ldr	r0, [pc, #540]	; (80011e0 <main+0x380>)
 8000fc2:	f009 f9af 	bl	800a324 <siprintf>
	  	    // Transmite la cadena anterior
	  	     HAL_UART_Transmit(&huart1, (uint8_t*)buffer_1, strlen(buffer_1), HAL_MAX_DELAY);
 8000fc6:	4886      	ldr	r0, [pc, #536]	; (80011e0 <main+0x380>)
 8000fc8:	f7ff f9a2 	bl	8000310 <strlen>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd4:	4982      	ldr	r1, [pc, #520]	; (80011e0 <main+0x380>)
 8000fd6:	4883      	ldr	r0, [pc, #524]	; (80011e4 <main+0x384>)
 8000fd8:	f006 f8f4 	bl	80071c4 <HAL_UART_Transmit>
	  	        // Transmite valores de control de salida
	  	     HAL_UART_Transmit(&huart1, (uint8_t *)q1, strlen(q1), 100);
 8000fdc:	4882      	ldr	r0, [pc, #520]	; (80011e8 <main+0x388>)
 8000fde:	f7ff f997 	bl	8000310 <strlen>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	2364      	movs	r3, #100	; 0x64
 8000fe8:	497f      	ldr	r1, [pc, #508]	; (80011e8 <main+0x388>)
 8000fea:	487e      	ldr	r0, [pc, #504]	; (80011e4 <main+0x384>)
 8000fec:	f006 f8ea 	bl	80071c4 <HAL_UART_Transmit>
	  	     HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	497d      	ldr	r1, [pc, #500]	; (80011ec <main+0x38c>)
 8000ff8:	487a      	ldr	r0, [pc, #488]	; (80011e4 <main+0x384>)
 8000ffa:	f006 f8e3 	bl	80071c4 <HAL_UART_Transmit>

	  	     sprintf(buffer_1, "Valores de articulaciones q2:\r\n");
 8000ffe:	497c      	ldr	r1, [pc, #496]	; (80011f0 <main+0x390>)
 8001000:	4877      	ldr	r0, [pc, #476]	; (80011e0 <main+0x380>)
 8001002:	f009 f98f 	bl	800a324 <siprintf>
	  	  	  	    // Transmite la cadena anterior
	  	  	 HAL_UART_Transmit(&huart1, (uint8_t*)buffer_1, strlen(buffer_1), HAL_MAX_DELAY);
 8001006:	4876      	ldr	r0, [pc, #472]	; (80011e0 <main+0x380>)
 8001008:	f7ff f982 	bl	8000310 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	4972      	ldr	r1, [pc, #456]	; (80011e0 <main+0x380>)
 8001016:	4873      	ldr	r0, [pc, #460]	; (80011e4 <main+0x384>)
 8001018:	f006 f8d4 	bl	80071c4 <HAL_UART_Transmit>

	  	     HAL_UART_Transmit(&huart1, (uint8_t *)q2, strlen(q2), 100);
 800101c:	4875      	ldr	r0, [pc, #468]	; (80011f4 <main+0x394>)
 800101e:	f7ff f977 	bl	8000310 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	b29a      	uxth	r2, r3
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	4972      	ldr	r1, [pc, #456]	; (80011f4 <main+0x394>)
 800102a:	486e      	ldr	r0, [pc, #440]	; (80011e4 <main+0x384>)
 800102c:	f006 f8ca 	bl	80071c4 <HAL_UART_Transmit>
	  	   	 HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	2202      	movs	r2, #2
 8001036:	496d      	ldr	r1, [pc, #436]	; (80011ec <main+0x38c>)
 8001038:	486a      	ldr	r0, [pc, #424]	; (80011e4 <main+0x384>)
 800103a:	f006 f8c3 	bl	80071c4 <HAL_UART_Transmit>


	  	     sprintf(buffer_1, "Valores de articulaciones q3:\r\n");
 800103e:	496e      	ldr	r1, [pc, #440]	; (80011f8 <main+0x398>)
 8001040:	4867      	ldr	r0, [pc, #412]	; (80011e0 <main+0x380>)
 8001042:	f009 f96f 	bl	800a324 <siprintf>
	  	  	  	    // Transmite la cadena anterior
	  	  	 HAL_UART_Transmit(&huart1, (uint8_t*)buffer_1, strlen(buffer_1), HAL_MAX_DELAY);
 8001046:	4866      	ldr	r0, [pc, #408]	; (80011e0 <main+0x380>)
 8001048:	f7ff f962 	bl	8000310 <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	4962      	ldr	r1, [pc, #392]	; (80011e0 <main+0x380>)
 8001056:	4863      	ldr	r0, [pc, #396]	; (80011e4 <main+0x384>)
 8001058:	f006 f8b4 	bl	80071c4 <HAL_UART_Transmit>

	  	     HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100);
 800105c:	4867      	ldr	r0, [pc, #412]	; (80011fc <main+0x39c>)
 800105e:	f7ff f957 	bl	8000310 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	b29a      	uxth	r2, r3
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	4964      	ldr	r1, [pc, #400]	; (80011fc <main+0x39c>)
 800106a:	485e      	ldr	r0, [pc, #376]	; (80011e4 <main+0x384>)
 800106c:	f006 f8aa 	bl	80071c4 <HAL_UART_Transmit>
	  	   	 HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	2202      	movs	r2, #2
 8001076:	495d      	ldr	r1, [pc, #372]	; (80011ec <main+0x38c>)
 8001078:	485a      	ldr	r0, [pc, #360]	; (80011e4 <main+0x384>)
 800107a:	f006 f8a3 	bl	80071c4 <HAL_UART_Transmit>


	  	     sprintf(buffer_1, "Valores de articulaciones q4:\r\n");
 800107e:	4960      	ldr	r1, [pc, #384]	; (8001200 <main+0x3a0>)
 8001080:	4857      	ldr	r0, [pc, #348]	; (80011e0 <main+0x380>)
 8001082:	f009 f94f 	bl	800a324 <siprintf>
	  	  	  	    // Transmite la cadena anterior
	  	  	 HAL_UART_Transmit(&huart1, (uint8_t*)buffer_1, strlen(buffer_1), HAL_MAX_DELAY);
 8001086:	4856      	ldr	r0, [pc, #344]	; (80011e0 <main+0x380>)
 8001088:	f7ff f942 	bl	8000310 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	4952      	ldr	r1, [pc, #328]	; (80011e0 <main+0x380>)
 8001096:	4853      	ldr	r0, [pc, #332]	; (80011e4 <main+0x384>)
 8001098:	f006 f894 	bl	80071c4 <HAL_UART_Transmit>

	  	     HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100);
 800109c:	4859      	ldr	r0, [pc, #356]	; (8001204 <main+0x3a4>)
 800109e:	f7ff f937 	bl	8000310 <strlen>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	4956      	ldr	r1, [pc, #344]	; (8001204 <main+0x3a4>)
 80010aa:	484e      	ldr	r0, [pc, #312]	; (80011e4 <main+0x384>)
 80010ac:	f006 f88a 	bl	80071c4 <HAL_UART_Transmit>
	  	   	 HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80010b0:	f04f 33ff 	mov.w	r3, #4294967295
 80010b4:	2202      	movs	r2, #2
 80010b6:	494d      	ldr	r1, [pc, #308]	; (80011ec <main+0x38c>)
 80010b8:	484a      	ldr	r0, [pc, #296]	; (80011e4 <main+0x384>)
 80010ba:	f006 f883 	bl	80071c4 <HAL_UART_Transmit>

	  	     sprintf(buffer_1, "Valores de articulaciones q5:\r\n");
 80010be:	4952      	ldr	r1, [pc, #328]	; (8001208 <main+0x3a8>)
 80010c0:	4847      	ldr	r0, [pc, #284]	; (80011e0 <main+0x380>)
 80010c2:	f009 f92f 	bl	800a324 <siprintf>
	  	  	  	    // Transmite la cadena anterior
	  	  	 HAL_UART_Transmit(&huart1, (uint8_t*)buffer_1, strlen(buffer_1), HAL_MAX_DELAY);
 80010c6:	4846      	ldr	r0, [pc, #280]	; (80011e0 <main+0x380>)
 80010c8:	f7ff f922 	bl	8000310 <strlen>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f04f 33ff 	mov.w	r3, #4294967295
 80010d4:	4942      	ldr	r1, [pc, #264]	; (80011e0 <main+0x380>)
 80010d6:	4843      	ldr	r0, [pc, #268]	; (80011e4 <main+0x384>)
 80010d8:	f006 f874 	bl	80071c4 <HAL_UART_Transmit>

	  	     HAL_UART_Transmit(&huart1, (uint8_t *)q5, strlen(q5), 100);
 80010dc:	484b      	ldr	r0, [pc, #300]	; (800120c <main+0x3ac>)
 80010de:	f7ff f917 	bl	8000310 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	4948      	ldr	r1, [pc, #288]	; (800120c <main+0x3ac>)
 80010ea:	483e      	ldr	r0, [pc, #248]	; (80011e4 <main+0x384>)
 80010ec:	f006 f86a 	bl	80071c4 <HAL_UART_Transmit>
	  	   	 HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	2202      	movs	r2, #2
 80010f6:	493d      	ldr	r1, [pc, #244]	; (80011ec <main+0x38c>)
 80010f8:	483a      	ldr	r0, [pc, #232]	; (80011e4 <main+0x384>)
 80010fa:	f006 f863 	bl	80071c4 <HAL_UART_Transmit>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	   	 q1_float = atof(q1);
 80010fe:	483a      	ldr	r0, [pc, #232]	; (80011e8 <main+0x388>)
 8001100:	f008 fc7c 	bl	80099fc <atof>
 8001104:	eeb0 7b40 	vmov.f64	d7, d0
 8001108:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <main+0x3b0>)
 800110e:	edc3 7a00 	vstr	s15, [r3]
	  	   	 q2_float = atof(q2);
 8001112:	4838      	ldr	r0, [pc, #224]	; (80011f4 <main+0x394>)
 8001114:	f008 fc72 	bl	80099fc <atof>
 8001118:	eeb0 7b40 	vmov.f64	d7, d0
 800111c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001120:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <main+0x3b4>)
 8001122:	edc3 7a00 	vstr	s15, [r3]
	  	   	 q3_float = atof(q3);
 8001126:	4835      	ldr	r0, [pc, #212]	; (80011fc <main+0x39c>)
 8001128:	f008 fc68 	bl	80099fc <atof>
 800112c:	eeb0 7b40 	vmov.f64	d7, d0
 8001130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001134:	4b38      	ldr	r3, [pc, #224]	; (8001218 <main+0x3b8>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
	  	   	 q4_float = atof(q4);
 800113a:	4832      	ldr	r0, [pc, #200]	; (8001204 <main+0x3a4>)
 800113c:	f008 fc5e 	bl	80099fc <atof>
 8001140:	eeb0 7b40 	vmov.f64	d7, d0
 8001144:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <main+0x3bc>)
 800114a:	edc3 7a00 	vstr	s15, [r3]
	  	   	 q5_float = atof(q5);
 800114e:	482f      	ldr	r0, [pc, #188]	; (800120c <main+0x3ac>)
 8001150:	f008 fc54 	bl	80099fc <atof>
 8001154:	eeb0 7b40 	vmov.f64	d7, d0
 8001158:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <main+0x3c0>)
 800115e:	edc3 7a00 	vstr	s15, [r3]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////CONTROL DE ARTICULACION q1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	     //q1_float = atof(q1);
	  	   	 PID_Update(&pid_q1,q1_float,corrected_length_q1,"q1",errors_q1, times_q1, &index_q1,&control_output_q1,&error_q1);
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <main+0x3b0>)
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <main+0x3c4>)
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <main+0x3c8>)
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	4b2e      	ldr	r3, [pc, #184]	; (800122c <main+0x3cc>)
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <main+0x3d0>)
 8001176:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <main+0x3d4>)
 8001178:	492f      	ldr	r1, [pc, #188]	; (8001238 <main+0x3d8>)
 800117a:	edd7 0a1d 	vldr	s1, [r7, #116]	; 0x74
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	4811      	ldr	r0, [pc, #68]	; (80011c8 <main+0x368>)
 8001184:	f7ff fd0c 	bl	8000ba0 <PID_Update>
 8001188:	e058      	b.n	800123c <main+0x3dc>
 800118a:	bf00      	nop
 800118c:	24000df6 	.word	0x24000df6
 8001190:	2400f5bc 	.word	0x2400f5bc
 8001194:	2400f4e0 	.word	0x2400f4e0
 8001198:	42f00000 	.word	0x42f00000
 800119c:	41600000 	.word	0x41600000
 80011a0:	42480000 	.word	0x42480000
 80011a4:	3a902de0 	.word	0x3a902de0
 80011a8:	00000000 	.word	0x00000000
 80011ac:	2400f654 	.word	0x2400f654
 80011b0:	2400f670 	.word	0x2400f670
 80011b4:	2400f68c 	.word	0x2400f68c
 80011b8:	42c80000 	.word	0x42c80000
 80011bc:	42200000 	.word	0x42200000
 80011c0:	41700000 	.word	0x41700000
 80011c4:	41f00000 	.word	0x41f00000
 80011c8:	2400f6a8 	.word	0x2400f6a8
 80011cc:	2400f6c4 	.word	0x2400f6c4
 80011d0:	2400f6e0 	.word	0x2400f6e0
 80011d4:	2400f6fc 	.word	0x2400f6fc
 80011d8:	2400f718 	.word	0x2400f718
 80011dc:	0800f1dc 	.word	0x0800f1dc
 80011e0:	24000dc4 	.word	0x24000dc4
 80011e4:	2400f52c 	.word	0x2400f52c
 80011e8:	2400ecc0 	.word	0x2400ecc0
 80011ec:	0800f1fc 	.word	0x0800f1fc
 80011f0:	0800f200 	.word	0x0800f200
 80011f4:	24000004 	.word	0x24000004
 80011f8:	0800f220 	.word	0x0800f220
 80011fc:	2400f0a8 	.word	0x2400f0a8
 8001200:	0800f240 	.word	0x0800f240
 8001204:	240003ec 	.word	0x240003ec
 8001208:	0800f260 	.word	0x0800f260
 800120c:	240007d4 	.word	0x240007d4
 8001210:	2400f4cc 	.word	0x2400f4cc
 8001214:	2400f4d0 	.word	0x2400f4d0
 8001218:	2400f4d4 	.word	0x2400f4d4
 800121c:	2400f4d8 	.word	0x2400f4d8
 8001220:	2400f4dc 	.word	0x2400f4dc
 8001224:	2400f4b8 	.word	0x2400f4b8
 8001228:	2400f49c 	.word	0x2400f49c
 800122c:	2400ecb0 	.word	0x2400ecb0
 8001230:	24007f44 	.word	0x24007f44
 8001234:	24006fa4 	.word	0x24006fa4
 8001238:	0800f280 	.word	0x0800f280
	  	   	 corrected_length_q1 = corrected_length_q1 + control_output_q1;
 800123c:	4bce      	ldr	r3, [pc, #824]	; (8001578 <main+0x718>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8001246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800124a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	  	     //q1_float += 0.1; // Simulación de cambio en la longitud medida

/////////////CONTROL DE ARTICULACION q2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	   	 //q2_float = atof(q2);
	  	   	 PID_Update(&pid_q2,q2_float,corrected_length_q2,"q2",errors_q2, times_q2, &index_q2,&control_output_q2,&error_q2);
 800124e:	4bcb      	ldr	r3, [pc, #812]	; (800157c <main+0x71c>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	4bca      	ldr	r3, [pc, #808]	; (8001580 <main+0x720>)
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4bca      	ldr	r3, [pc, #808]	; (8001584 <main+0x724>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	4bca      	ldr	r3, [pc, #808]	; (8001588 <main+0x728>)
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4bca      	ldr	r3, [pc, #808]	; (800158c <main+0x72c>)
 8001262:	4acb      	ldr	r2, [pc, #812]	; (8001590 <main+0x730>)
 8001264:	49cb      	ldr	r1, [pc, #812]	; (8001594 <main+0x734>)
 8001266:	edd7 0a1c 	vldr	s1, [r7, #112]	; 0x70
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	48ca      	ldr	r0, [pc, #808]	; (8001598 <main+0x738>)
 8001270:	f7ff fc96 	bl	8000ba0 <PID_Update>
	  	   	 corrected_length_q2 = corrected_length_q2 + control_output_q2;
 8001274:	4bc3      	ldr	r3, [pc, #780]	; (8001584 <main+0x724>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800127e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001282:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	  	   	 // Simulación de un proceso que cambia la longitud medida (por ejemplo, movimiento de un actuador)
	  	   	 q2_float += 0.1; // Simulación de cambio en la longitud medida
 8001286:	4bbd      	ldr	r3, [pc, #756]	; (800157c <main+0x71c>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001290:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8001570 <main+0x710>
 8001294:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001298:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800129c:	4bb7      	ldr	r3, [pc, #732]	; (800157c <main+0x71c>)
 800129e:	edc3 7a00 	vstr	s15, [r3]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////CONTROL DE ARTICULACION q3
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	   	 //q3_float = atof(q3);
	  	   	 PID_Update(&pid_q3,q3_float,corrected_length_q3,"q3",errors_q3, times_q3, &index_q3,&control_output_q3,&error_q3);
 80012a2:	4bbe      	ldr	r3, [pc, #760]	; (800159c <main+0x73c>)
 80012a4:	edd3 7a00 	vldr	s15, [r3]
 80012a8:	4bbd      	ldr	r3, [pc, #756]	; (80015a0 <main+0x740>)
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	4bbd      	ldr	r3, [pc, #756]	; (80015a4 <main+0x744>)
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	4bbd      	ldr	r3, [pc, #756]	; (80015a8 <main+0x748>)
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	4bbd      	ldr	r3, [pc, #756]	; (80015ac <main+0x74c>)
 80012b6:	4abe      	ldr	r2, [pc, #760]	; (80015b0 <main+0x750>)
 80012b8:	49be      	ldr	r1, [pc, #760]	; (80015b4 <main+0x754>)
 80012ba:	edd7 0a1b 	vldr	s1, [r7, #108]	; 0x6c
 80012be:	eeb0 0a67 	vmov.f32	s0, s15
 80012c2:	48bd      	ldr	r0, [pc, #756]	; (80015b8 <main+0x758>)
 80012c4:	f7ff fc6c 	bl	8000ba0 <PID_Update>
	  	   	 corrected_length_q3 = corrected_length_q3 + control_output_q3;
 80012c8:	4bb6      	ldr	r3, [pc, #728]	; (80015a4 <main+0x744>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80012d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d6:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	  	   	 q3_float += 0.1; // Simulación de cambio en la longitud medida
 80012da:	4bb0      	ldr	r3, [pc, #704]	; (800159c <main+0x73c>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8001570 <main+0x710>
 80012e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012ec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012f0:	4baa      	ldr	r3, [pc, #680]	; (800159c <main+0x73c>)
 80012f2:	edc3 7a00 	vstr	s15, [r3]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////CONTROL DE ARTICULACION q4
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	   	 //q4_float = atof(q4);
	  	   	 PID_Update(&pid_q4,q4_float,corrected_length_q4,"q4",errors_q4, times_q4, &index_q4,&control_output_q4,&error_q4);
 80012f6:	4bb1      	ldr	r3, [pc, #708]	; (80015bc <main+0x75c>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	4bb0      	ldr	r3, [pc, #704]	; (80015c0 <main+0x760>)
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	4bb0      	ldr	r3, [pc, #704]	; (80015c4 <main+0x764>)
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	4bb0      	ldr	r3, [pc, #704]	; (80015c8 <main+0x768>)
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4bb0      	ldr	r3, [pc, #704]	; (80015cc <main+0x76c>)
 800130a:	4ab1      	ldr	r2, [pc, #708]	; (80015d0 <main+0x770>)
 800130c:	49b1      	ldr	r1, [pc, #708]	; (80015d4 <main+0x774>)
 800130e:	edd7 0a1a 	vldr	s1, [r7, #104]	; 0x68
 8001312:	eeb0 0a67 	vmov.f32	s0, s15
 8001316:	48b0      	ldr	r0, [pc, #704]	; (80015d8 <main+0x778>)
 8001318:	f7ff fc42 	bl	8000ba0 <PID_Update>
	  	   	 corrected_length_q4 = corrected_length_q4 + control_output_q4;
 800131c:	4ba9      	ldr	r3, [pc, #676]	; (80015c4 <main+0x764>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8001326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800132a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	  	   	 // Simulación de un proceso que cambia la longitud medida (por ejemplo, movimiento de un actuador)
	  	   	 q4_float += 0.1; // Simulación de cambio en la longitud medida
 800132e:	4ba3      	ldr	r3, [pc, #652]	; (80015bc <main+0x75c>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001338:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8001570 <main+0x710>
 800133c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001340:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001344:	4b9d      	ldr	r3, [pc, #628]	; (80015bc <main+0x75c>)
 8001346:	edc3 7a00 	vstr	s15, [r3]
	  	   	 //corrected_length_q5 = corrected_length_q5 + control_output_q5;
	  	   	 // Simulación de un proceso que cambia la longitud medida (por ejemplo, movimiento de un actuador)
	  	   	 //q5_float += 0.1; // Simulación de cambio en la longitud medida

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  	    mover_motorq1_rad(corrected_length_q1);
 800134a:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800134e:	f000 ff8f 	bl	8002270 <mover_motorq1_rad>
	  	    HAL_Delay(100);
 8001352:	2064      	movs	r0, #100	; 0x64
 8001354:	f001 fc86 	bl	8002c64 <HAL_Delay>
	  	    mover_motorq2_mm(corrected_length_q2);
 8001358:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 800135c:	f001 f806 	bl	800236c <mover_motorq2_mm>
	  	    HAL_Delay(100);
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f001 fc7f 	bl	8002c64 <HAL_Delay>
	  	    mover_motorq3_mm(corrected_length_q3);
 8001366:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 800136a:	f001 f86b 	bl	8002444 <mover_motorq3_mm>
	  	    HAL_Delay(200);
 800136e:	20c8      	movs	r0, #200	; 0xc8
 8001370:	f001 fc78 	bl	8002c64 <HAL_Delay>

	  	    TIM2->CCR4 = radianes_a_valor(corrected_length_q4); //q4
 8001374:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001378:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 800137c:	f7ff fd08 	bl	8000d90 <radianes_a_valor>
 8001380:	4603      	mov	r3, r0
 8001382:	6423      	str	r3, [r4, #64]	; 0x40
	  	    HAL_Delay(200);
 8001384:	20c8      	movs	r0, #200	; 0xc8
 8001386:	f001 fc6d 	bl	8002c64 <HAL_Delay>
	  	    TIM2->CCR2 = radianes_a_valor(q5_float); //q5
 800138a:	4b94      	ldr	r3, [pc, #592]	; (80015dc <main+0x77c>)
 800138c:	edd3 7a00 	vldr	s15, [r3]
 8001390:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	f7ff fcfa 	bl	8000d90 <radianes_a_valor>
 800139c:	4603      	mov	r3, r0
 800139e:	63a3      	str	r3, [r4, #56]	; 0x38
	  	    HAL_Delay(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a4:	f001 fc5e 	bl	8002c64 <HAL_Delay>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



	  	   	 PID_Update(&pid_px,120, new_px,"px",errors_px, times_px, &index_px,&control_output_px,&error_x);
 80013a8:	ed97 7b06 	vldr	d7, [r7, #24]
 80013ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013b0:	4b8b      	ldr	r3, [pc, #556]	; (80015e0 <main+0x780>)
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	4b8b      	ldr	r3, [pc, #556]	; (80015e4 <main+0x784>)
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <main+0x788>)
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4b8b      	ldr	r3, [pc, #556]	; (80015ec <main+0x78c>)
 80013be:	4a8c      	ldr	r2, [pc, #560]	; (80015f0 <main+0x790>)
 80013c0:	498c      	ldr	r1, [pc, #560]	; (80015f4 <main+0x794>)
 80013c2:	eef0 0a67 	vmov.f32	s1, s15
 80013c6:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80015f8 <main+0x798>
 80013ca:	488c      	ldr	r0, [pc, #560]	; (80015fc <main+0x79c>)
 80013cc:	f7ff fbe8 	bl	8000ba0 <PID_Update>
	        float corrected_length_px =  new_px + control_output_px;
 80013d0:	4b84      	ldr	r3, [pc, #528]	; (80015e4 <main+0x784>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80013da:	ed97 7b06 	vldr	d7, [r7, #24]
 80013de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80013e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	        // Simulación de un proceso que cambia la longitud medida (por ejemplo, movimiento de un actuador)
	        new_px += 0.1; // Simulación de cambio en la longitud medida
 80013ea:	ed97 7b06 	vldr	d7, [r7, #24]
 80013ee:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8001570 <main+0x710>
 80013f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80013f6:	ed87 7b06 	vstr	d7, [r7, #24]

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	        PID_Update(&pid_py,50, new_py,"py",errors_py, times_py, &index_py,&control_output_py,&error_y);
 80013fa:	ed97 7b04 	vldr	d7, [r7, #16]
 80013fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001402:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <main+0x7a0>)
 8001404:	9302      	str	r3, [sp, #8]
 8001406:	4b7f      	ldr	r3, [pc, #508]	; (8001604 <main+0x7a4>)
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	4b7f      	ldr	r3, [pc, #508]	; (8001608 <main+0x7a8>)
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4b7f      	ldr	r3, [pc, #508]	; (800160c <main+0x7ac>)
 8001410:	4a7f      	ldr	r2, [pc, #508]	; (8001610 <main+0x7b0>)
 8001412:	4980      	ldr	r1, [pc, #512]	; (8001614 <main+0x7b4>)
 8001414:	eef0 0a67 	vmov.f32	s1, s15
 8001418:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8001618 <main+0x7b8>
 800141c:	487f      	ldr	r0, [pc, #508]	; (800161c <main+0x7bc>)
 800141e:	f7ff fbbf 	bl	8000ba0 <PID_Update>

	        float corrected_length_py = new_py + control_output_py;
 8001422:	4b78      	ldr	r3, [pc, #480]	; (8001604 <main+0x7a4>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800142c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001430:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001434:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001438:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	        // Simulación de un proceso que cambia la longitud medida (por ejemplo, movimiento de un actuador)
	        new_py += 0.1; // Simulación de cambio en la longitud medida
 800143c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001440:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8001570 <main+0x710>
 8001444:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001448:	ed87 7b04 	vstr	d7, [r7, #16]

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	        PID_Update(&pid_pz,10,new_pz,"pz",errors_pz, times_pz, &index_pz,&control_output_pz,&error_z);
 800144c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001450:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001454:	4b72      	ldr	r3, [pc, #456]	; (8001620 <main+0x7c0>)
 8001456:	9302      	str	r3, [sp, #8]
 8001458:	4b72      	ldr	r3, [pc, #456]	; (8001624 <main+0x7c4>)
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	4b72      	ldr	r3, [pc, #456]	; (8001628 <main+0x7c8>)
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4b72      	ldr	r3, [pc, #456]	; (800162c <main+0x7cc>)
 8001462:	4a73      	ldr	r2, [pc, #460]	; (8001630 <main+0x7d0>)
 8001464:	4973      	ldr	r1, [pc, #460]	; (8001634 <main+0x7d4>)
 8001466:	eef0 0a67 	vmov.f32	s1, s15
 800146a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800146e:	4872      	ldr	r0, [pc, #456]	; (8001638 <main+0x7d8>)
 8001470:	f7ff fb96 	bl	8000ba0 <PID_Update>

	        float corrected_length_pz = new_pz + control_output_pz;
 8001474:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <main+0x7c4>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800147e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001482:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001486:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800148a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	        	        // Simulación de un proceso que cambia la longitud medida (por ejemplo, movimiento de un actuador)
	        new_pz += 0.1; // Simulación de cambio en la longitud medida
 800148e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001492:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8001570 <main+0x710>
 8001496:	ee37 7b06 	vadd.f64	d7, d7, d6
 800149a:	ed87 7b02 	vstr	d7, [r7, #8]



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	        cinematica_inversa(corrected_length_px, corrected_length_py,corrected_length_pz, &q1_1, &q2_1, &q3_1);
 800149e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80014a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80014aa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80014ae:	edd7 5a0e 	vldr	s11, [r7, #56]	; 0x38
 80014b2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80014b6:	f107 0220 	add.w	r2, r7, #32
 80014ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c2:	4618      	mov	r0, r3
 80014c4:	eeb0 2b45 	vmov.f64	d2, d5
 80014c8:	eeb0 1b46 	vmov.f64	d1, d6
 80014cc:	eeb0 0b47 	vmov.f64	d0, d7
 80014d0:	f000 fc1e 	bl	8001d10 <cinematica_inversa>

	        cinematica_directa(q1_1, q2_1, q3_1, &new_px, &new_py, &new_pz);
 80014d4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80014d8:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80014dc:	ed97 5b08 	vldr	d5, [r7, #32]
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	f107 0110 	add.w	r1, r7, #16
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4618      	mov	r0, r3
 80014ee:	eeb0 2b45 	vmov.f64	d2, d5
 80014f2:	eeb0 1b46 	vmov.f64	d1, d6
 80014f6:	eeb0 0b47 	vmov.f64	d0, d7
 80014fa:	f000 fc5d 	bl	8001db8 <cinematica_directa>



	        if (is_zero(error_q1) && is_zero(error_q2) && is_zero(error_q3) && is_zero(error_q4) && is_zero(error_q5)) {
 80014fe:	4b4f      	ldr	r3, [pc, #316]	; (800163c <main+0x7dc>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	f7ff fad2 	bl	8000ab0 <is_zero>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80a1 	beq.w	8001656 <main+0x7f6>
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <main+0x720>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	f7ff fac7 	bl	8000ab0 <is_zero>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8096 	beq.w	8001656 <main+0x7f6>
 800152a:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <main+0x740>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	f7ff fabc 	bl	8000ab0 <is_zero>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 808b 	beq.w	8001656 <main+0x7f6>
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <main+0x760>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	eeb0 0a67 	vmov.f32	s0, s15
 800154a:	f7ff fab1 	bl	8000ab0 <is_zero>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8080 	beq.w	8001656 <main+0x7f6>
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <main+0x7e0>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f7ff faa6 	bl	8000ab0 <is_zero>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d075      	beq.n	8001656 <main+0x7f6>
 800156a:	e06b      	b.n	8001644 <main+0x7e4>
 800156c:	f3af 8000 	nop.w
 8001570:	9999999a 	.word	0x9999999a
 8001574:	3fb99999 	.word	0x3fb99999
 8001578:	2400f49c 	.word	0x2400f49c
 800157c:	2400f4d0 	.word	0x2400f4d0
 8001580:	2400f4bc 	.word	0x2400f4bc
 8001584:	2400f4a0 	.word	0x2400f4a0
 8001588:	2400ecb4 	.word	0x2400ecb4
 800158c:	24009e84 	.word	0x24009e84
 8001590:	24008ee4 	.word	0x24008ee4
 8001594:	0800f284 	.word	0x0800f284
 8001598:	2400f6c4 	.word	0x2400f6c4
 800159c:	2400f4d4 	.word	0x2400f4d4
 80015a0:	2400f4c0 	.word	0x2400f4c0
 80015a4:	2400f4a4 	.word	0x2400f4a4
 80015a8:	2400ecb8 	.word	0x2400ecb8
 80015ac:	2400bdc4 	.word	0x2400bdc4
 80015b0:	2400ae24 	.word	0x2400ae24
 80015b4:	0800f288 	.word	0x0800f288
 80015b8:	2400f6e0 	.word	0x2400f6e0
 80015bc:	2400f4d8 	.word	0x2400f4d8
 80015c0:	2400f4c4 	.word	0x2400f4c4
 80015c4:	2400f4a8 	.word	0x2400f4a8
 80015c8:	2400ecbc 	.word	0x2400ecbc
 80015cc:	2400dd04 	.word	0x2400dd04
 80015d0:	2400cd64 	.word	0x2400cd64
 80015d4:	0800f28c 	.word	0x0800f28c
 80015d8:	2400f6fc 	.word	0x2400f6fc
 80015dc:	2400f4dc 	.word	0x2400f4dc
 80015e0:	2400f4ac 	.word	0x2400f4ac
 80015e4:	2400f490 	.word	0x2400f490
 80015e8:	2400eca4 	.word	0x2400eca4
 80015ec:	24002184 	.word	0x24002184
 80015f0:	240011e4 	.word	0x240011e4
 80015f4:	0800f290 	.word	0x0800f290
 80015f8:	42f00000 	.word	0x42f00000
 80015fc:	2400f654 	.word	0x2400f654
 8001600:	2400f4b0 	.word	0x2400f4b0
 8001604:	2400f494 	.word	0x2400f494
 8001608:	2400eca8 	.word	0x2400eca8
 800160c:	240040c4 	.word	0x240040c4
 8001610:	24003124 	.word	0x24003124
 8001614:	0800f294 	.word	0x0800f294
 8001618:	42480000 	.word	0x42480000
 800161c:	2400f670 	.word	0x2400f670
 8001620:	2400f4b4 	.word	0x2400f4b4
 8001624:	2400f498 	.word	0x2400f498
 8001628:	2400ecac 	.word	0x2400ecac
 800162c:	24006004 	.word	0x24006004
 8001630:	24005064 	.word	0x24005064
 8001634:	0800f298 	.word	0x0800f298
 8001638:	2400f68c 	.word	0x2400f68c
 800163c:	2400f4b8 	.word	0x2400f4b8
 8001640:	2400f4c8 	.word	0x2400f4c8
	            char singleChar = '1';
 8001644:	2331      	movs	r3, #49	; 0x31
 8001646:	71fb      	strb	r3, [r7, #7]
	            HAL_UART_Transmit(&huart3, (uint8_t*)&singleChar, 1, HAL_MAX_DELAY);
 8001648:	1df9      	adds	r1, r7, #7
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	2201      	movs	r2, #1
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <main+0x800>)
 8001652:	f005 fdb7 	bl	80071c4 <HAL_UART_Transmit>
	        }

	        HAL_Delay(1500); // Retardo de 1 segundo (1000 milisegundos)
 8001656:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800165a:	f001 fb03 	bl	8002c64 <HAL_Delay>
  while (1){
 800165e:	e4ae      	b.n	8000fbe <main+0x15e>
 8001660:	2400f5bc 	.word	0x2400f5bc

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b09c      	sub	sp, #112	; 0x70
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	224c      	movs	r2, #76	; 0x4c
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f008 fa0a 	bl	8009a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2220      	movs	r2, #32
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f008 fa04 	bl	8009a8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001684:	2002      	movs	r0, #2
 8001686:	f002 fbf7 	bl	8003e78 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <SystemClock_Config+0xd4>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001696:	4a28      	ldr	r2, [pc, #160]	; (8001738 <SystemClock_Config+0xd4>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6193      	str	r3, [r2, #24]
 800169e:	4b26      	ldr	r3, [pc, #152]	; (8001738 <SystemClock_Config+0xd4>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016aa:	bf00      	nop
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <SystemClock_Config+0xd4>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b8:	d1f8      	bne.n	80016ac <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80016ba:	4b20      	ldr	r3, [pc, #128]	; (800173c <SystemClock_Config+0xd8>)
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <SystemClock_Config+0xd8>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80016ca:	2303      	movs	r3, #3
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d8:	2340      	movs	r3, #64	; 0x40
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016dc:	2300      	movs	r3, #0
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e0:	2302      	movs	r3, #2
 80016e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fbff 	bl	8003eec <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f4:	f000 ff2e 	bl	8002554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	233f      	movs	r3, #63	; 0x3f
 80016fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV8;
 8001700:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800170a:	2340      	movs	r3, #64	; 0x40
 800170c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001716:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001718:	2340      	movs	r3, #64	; 0x40
 800171a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f002 ff91 	bl	8004648 <HAL_RCC_ClockConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800172c:	f000 ff12 	bl	8002554 <Error_Handler>
  }
}
 8001730:	bf00      	nop
 8001732:	3770      	adds	r7, #112	; 0x70
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	58024800 	.word	0x58024800
 800173c:	58024400 	.word	0x58024400

08001740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001746:	f107 031c 	add.w	r3, r7, #28
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	463b      	mov	r3, r7
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <MX_TIM2_Init+0xc4>)
 8001766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <MX_TIM2_Init+0xc4>)
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <MX_TIM2_Init+0xc4>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <MX_TIM2_Init+0xc4>)
 800177a:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800177e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MX_TIM2_Init+0xc4>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <MX_TIM2_Init+0xc4>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800178c:	481d      	ldr	r0, [pc, #116]	; (8001804 <MX_TIM2_Init+0xc4>)
 800178e:	f004 fe03 	bl	8006398 <HAL_TIM_PWM_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001798:	f000 fedc 	bl	8002554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a4:	f107 031c 	add.w	r3, r7, #28
 80017a8:	4619      	mov	r1, r3
 80017aa:	4816      	ldr	r0, [pc, #88]	; (8001804 <MX_TIM2_Init+0xc4>)
 80017ac:	f005 fc1e 	bl	8006fec <HAL_TIMEx_MasterConfigSynchronization>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80017b6:	f000 fecd 	bl	8002554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ba:	2360      	movs	r3, #96	; 0x60
 80017bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	2204      	movs	r2, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <MX_TIM2_Init+0xc4>)
 80017d2:	f004 ff55 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80017dc:	f000 feba 	bl	8002554 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	220c      	movs	r2, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_TIM2_Init+0xc4>)
 80017e8:	f004 ff4a 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80017f2:	f000 feaf 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <MX_TIM2_Init+0xc4>)
 80017f8:	f000 feec 	bl	80025d4 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2400f4e0 	.word	0x2400f4e0

08001808 <MX_USART1_UART_Init>:




static void MX_USART1_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <MX_USART1_UART_Init+0x90>)
 800180e:	4a23      	ldr	r2, [pc, #140]	; (800189c <MX_USART1_UART_Init+0x94>)
 8001810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_USART1_UART_Init+0x90>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_USART1_UART_Init+0x90>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_USART1_UART_Init+0x90>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001844:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_USART1_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001850:	4811      	ldr	r0, [pc, #68]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001852:	f005 fc67 	bl	8007124 <HAL_UART_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800185c:	f000 fe7a 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001860:	2100      	movs	r1, #0
 8001862:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001864:	f007 ffff 	bl	8009866 <HAL_UARTEx_SetTxFifoThreshold>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800186e:	f000 fe71 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001872:	2100      	movs	r1, #0
 8001874:	4808      	ldr	r0, [pc, #32]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001876:	f008 f834 	bl	80098e2 <HAL_UARTEx_SetRxFifoThreshold>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001880:	f000 fe68 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_USART1_UART_Init+0x90>)
 8001886:	f007 ffb5 	bl	80097f4 <HAL_UARTEx_DisableFifoMode>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001890:	f000 fe60 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2400f52c 	.word	0x2400f52c
 800189c:	40011000 	.word	0x40011000

080018a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018a6:	4a23      	ldr	r2, [pc, #140]	; (8001934 <MX_USART3_UART_Init+0x94>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018be:	4b1c      	ldr	r3, [pc, #112]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e8:	4811      	ldr	r0, [pc, #68]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018ea:	f005 fc1b 	bl	8007124 <HAL_UART_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018f4:	f000 fe2e 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_USART3_UART_Init+0x90>)
 80018fc:	f007 ffb3 	bl	8009866 <HAL_UARTEx_SetTxFifoThreshold>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001906:	f000 fe25 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190a:	2100      	movs	r1, #0
 800190c:	4808      	ldr	r0, [pc, #32]	; (8001930 <MX_USART3_UART_Init+0x90>)
 800190e:	f007 ffe8 	bl	80098e2 <HAL_UARTEx_SetRxFifoThreshold>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001918:	f000 fe1c 	bl	8002554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800191c:	4804      	ldr	r0, [pc, #16]	; (8001930 <MX_USART3_UART_Init+0x90>)
 800191e:	f007 ff69 	bl	80097f4 <HAL_UARTEx_DisableFifoMode>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001928:	f000 fe14 	bl	8002554 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	2400f5bc 	.word	0x2400f5bc
 8001934:	40004800 	.word	0x40004800

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800194e:	4b71      	ldr	r3, [pc, #452]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001954:	4a6f      	ldr	r2, [pc, #444]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800195e:	4b6d      	ldr	r3, [pc, #436]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196c:	4b69      	ldr	r3, [pc, #420]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	4a68      	ldr	r2, [pc, #416]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197c:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b62      	ldr	r3, [pc, #392]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4a60      	ldr	r2, [pc, #384]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4b5e      	ldr	r3, [pc, #376]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a8:	4b5a      	ldr	r3, [pc, #360]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ae:	4a59      	ldr	r2, [pc, #356]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b8:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	4a51      	ldr	r2, [pc, #324]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d6:	4b4f      	ldr	r3, [pc, #316]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ea:	4a4a      	ldr	r2, [pc, #296]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f4:	4b47      	ldr	r3, [pc, #284]	; (8001b14 <MX_GPIO_Init+0x1dc>)
 80019f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);
 8001a02:	2200      	movs	r2, #0
 8001a04:	210a      	movs	r1, #10
 8001a06:	4844      	ldr	r0, [pc, #272]	; (8001b18 <MX_GPIO_Init+0x1e0>)
 8001a08:	f002 f9e8 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f640 2188 	movw	r1, #2696	; 0xa88
 8001a12:	4842      	ldr	r0, [pc, #264]	; (8001b1c <MX_GPIO_Init+0x1e4>)
 8001a14:	f002 f9e2 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f64a 0155 	movw	r1, #43093	; 0xa855
 8001a1e:	4840      	ldr	r0, [pc, #256]	; (8001b20 <MX_GPIO_Init+0x1e8>)
 8001a20:	f002 f9dc 	bl	8003ddc <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8001a2a:	483e      	ldr	r0, [pc, #248]	; (8001b24 <MX_GPIO_Init+0x1ec>)
 8001a2c:	f002 f9d6 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8001a36:	483c      	ldr	r0, [pc, #240]	; (8001b28 <MX_GPIO_Init+0x1f0>)
 8001a38:	f002 f9d0 	bl	8003ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4831      	ldr	r0, [pc, #196]	; (8001b18 <MX_GPIO_Init+0x1e0>)
 8001a54:	f002 f81a 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC7 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11;
 8001a58:	f640 2388 	movw	r3, #2696	; 0xa88
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6a:	f107 031c 	add.w	r3, r7, #28
 8001a6e:	4619      	mov	r1, r3
 8001a70:	482a      	ldr	r0, [pc, #168]	; (8001b1c <MX_GPIO_Init+0x1e4>)
 8001a72:	f002 f80b 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001a76:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4822      	ldr	r0, [pc, #136]	; (8001b18 <MX_GPIO_Init+0x1e0>)
 8001a8e:	f001 fffd 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD13 PD15 PD0
                           PD2 PD4 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_0
 8001a92:	f64a 0355 	movw	r3, #43093	; 0xa855
 8001a96:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	481d      	ldr	r0, [pc, #116]	; (8001b20 <MX_GPIO_Init+0x1e8>)
 8001aac:	f001 ffee 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001ab0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4816      	ldr	r0, [pc, #88]	; (8001b24 <MX_GPIO_Init+0x1ec>)
 8001aca:	f001 ffdf 	bl	8003a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB7 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_9;
 8001ace:	f44f 732a 	mov.w	r3, #680	; 0x2a8
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4810      	ldr	r0, [pc, #64]	; (8001b28 <MX_GPIO_Init+0x1f0>)
 8001ae8:	f001 ffd0 	bl	8003a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	2017      	movs	r0, #23
 8001af2:	f001 f9b6 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001af6:	2017      	movs	r0, #23
 8001af8:	f001 f9cd 	bl	8002e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	2028      	movs	r0, #40	; 0x28
 8001b02:	f001 f9ae 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b06:	2028      	movs	r0, #40	; 0x28
 8001b08:	f001 f9c5 	bl	8002e96 <HAL_NVIC_EnableIRQ>

}
 8001b0c:	bf00      	nop
 8001b0e:	3730      	adds	r7, #48	; 0x30
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	58024400 	.word	0x58024400
 8001b18:	58021000 	.word	0x58021000
 8001b1c:	58020800 	.word	0x58020800
 8001b20:	58020c00 	.word	0x58020c00
 8001b24:	58020000 	.word	0x58020000
 8001b28:	58020400 	.word	0x58020400

08001b2c <MPU_Config>:



void MPU_Config(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b32:	463b      	mov	r3, r7
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b3e:	f001 f9c5 	bl	8002ecc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b42:	2301      	movs	r3, #1
 8001b44:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b4e:	231f      	movs	r3, #31
 8001b50:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b52:	2387      	movs	r3, #135	; 0x87
 8001b54:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 f9e3 	bl	8002f3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b76:	2004      	movs	r0, #4
 8001b78:	f001 f9c0 	bl	8002efc <HAL_MPU_Enable>

}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_7) {
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	2b80      	cmp	r3, #128	; 0x80
 8001b92:	d102      	bne.n	8001b9a <HAL_GPIO_EXTI_Callback+0x16>
    	FC_Home_q2 = 0;
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_GPIO_EXTI_Callback+0xa8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_9) {
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba0:	d102      	bne.n	8001ba8 <HAL_GPIO_EXTI_Callback+0x24>
    	FC_Home_q3 = 0;
 8001ba2:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <HAL_GPIO_EXTI_Callback+0xac>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_11) { //rojo
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bae:	d116      	bne.n	8001bde <HAL_GPIO_EXTI_Callback+0x5a>
    	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	4820      	ldr	r0, [pc, #128]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001bb4:	f002 f92b 	bl	8003e0e <HAL_GPIO_TogglePin>
    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2102      	movs	r1, #2
 8001bbc:	481d      	ldr	r0, [pc, #116]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001bbe:	f002 f90d 	bl	8003ddc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	481c      	ldr	r0, [pc, #112]	; (8001c38 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001bc8:	f002 f908 	bl	8003ddc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd2:	481a      	ldr	r0, [pc, #104]	; (8001c3c <HAL_GPIO_EXTI_Callback+0xb8>)
 8001bd4:	f002 f902 	bl	8003ddc <HAL_GPIO_WritePin>
    	Paro_emergencia = 0;
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
    }
    if (GPIO_Pin == GPIO_PIN_13) { //verde
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be4:	d11d      	bne.n	8001c22 <HAL_GPIO_EXTI_Callback+0x9e>
    	Paro_emergencia = Paro_emergencia + 1;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bf2:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4813      	ldr	r0, [pc, #76]	; (8001c44 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001bf8:	f002 f909 	bl	8003e0e <HAL_GPIO_TogglePin>
    	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2102      	movs	r1, #2
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001c02:	f002 f8eb 	bl	8003ddc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2110      	movs	r1, #16
 8001c0a:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001c0c:	f002 f8e6 	bl	8003ddc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c16:	4809      	ldr	r0, [pc, #36]	; (8001c3c <HAL_GPIO_EXTI_Callback+0xb8>)
 8001c18:	f002 f8e0 	bl	8003ddc <HAL_GPIO_WritePin>
    	Paro_emergencia = 1;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
    }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24000bbc 	.word	0x24000bbc
 8001c30:	24000bbd 	.word	0x24000bbd
 8001c34:	58021000 	.word	0x58021000
 8001c38:	58020c00 	.word	0x58020c00
 8001c3c:	58020000 	.word	0x58020000
 8001c40:	24000bbe 	.word	0x24000bbe
 8001c44:	58020800 	.word	0x58020800

08001c48 <float_to_string>:

void float_to_string(float value, char* buffer, int precision) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	ed2d 8b02 	vpush	{d8}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c56:	60b8      	str	r0, [r7, #8]
 8001c58:	6079      	str	r1, [r7, #4]
    int int_part = (int)value;
 8001c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c62:	ee17 3a90 	vmov	r3, s15
 8001c66:	61fb      	str	r3, [r7, #28]
    float frac_part = value - int_part;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7a:	edc7 7a05 	vstr	s15, [r7, #20]
    int frac_part_int = (int)(frac_part * pow(10, precision));
 8001c7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c82:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001c90:	eeb0 1b47 	vmov.f64	d1, d7
 8001c94:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001c98:	f00c f87e 	bl	800dd98 <pow>
 8001c9c:	eeb0 7b40 	vmov.f64	d7, d0
 8001ca0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ca4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001ca8:	ee17 3a90 	vmov	r3, s15
 8001cac:	61bb      	str	r3, [r7, #24]

    if (value < 0) {
 8001cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d50a      	bpl.n	8001cd2 <float_to_string+0x8a>
        *buffer++ = '-';
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	222d      	movs	r2, #45	; 0x2d
 8001cc4:	701a      	strb	r2, [r3, #0]
        int_part = -int_part;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	425b      	negs	r3, r3
 8001cca:	61fb      	str	r3, [r7, #28]
        frac_part_int = -frac_part_int;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	425b      	negs	r3, r3
 8001cd0:	61bb      	str	r3, [r7, #24]
    }

    itoa(int_part, buffer, 10);
 8001cd2:	220a      	movs	r2, #10
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	69f8      	ldr	r0, [r7, #28]
 8001cd8:	f007 fed6 	bl	8009a88 <itoa>
    while (*buffer != '\0') buffer++;
 8001cdc:	e002      	b.n	8001ce4 <float_to_string+0x9c>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f8      	bne.n	8001cde <float_to_string+0x96>
    *buffer++ = '.';
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	1c5a      	adds	r2, r3, #1
 8001cf0:	60ba      	str	r2, [r7, #8]
 8001cf2:	222e      	movs	r2, #46	; 0x2e
 8001cf4:	701a      	strb	r2, [r3, #0]
    itoa(frac_part_int, buffer, 10);
 8001cf6:	220a      	movs	r2, #10
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	69b8      	ldr	r0, [r7, #24]
 8001cfc:	f007 fec4 	bl	8009a88 <itoa>
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	ecbd 8b02 	vpop	{d8}
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	0000      	movs	r0, r0
	...

08001d10 <cinematica_inversa>:



//Funciones para calcular las cinematicas
void cinematica_inversa(double px, double py, double pz, double *q1_out, double *q2_out, double *q3_out){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	ed2d 8b02 	vpush	{d8}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	ed87 0b08 	vstr	d0, [r7, #32]
 8001d1e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001d22:	ed87 2b04 	vstr	d2, [r7, #16]
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
	 // Calcular q1
	*q1_out = atan(-px / py) + M_PI;
 8001d2c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001d30:	eeb1 6b47 	vneg.f64	d6, d7
 8001d34:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d38:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001d3c:	eeb0 0b45 	vmov.f64	d0, d5
 8001d40:	f00c fa7e 	bl	800e240 <atan>
 8001d44:	eeb0 7b40 	vmov.f64	d7, d0
 8001d48:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8001db0 <cinematica_inversa+0xa0>
 8001d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	ed83 7b00 	vstr	d7, [r3]
    // Calcular q2
    // Calcular q2
    *q2_out = px * sin(*q1_out) - py * cos(*q1_out);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	ed93 7b00 	vldr	d7, [r3]
 8001d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d60:	f00c fbc2 	bl	800e4e8 <sin>
 8001d64:	eeb0 6b40 	vmov.f64	d6, d0
 8001d68:	ed97 7b08 	vldr	d7, [r7, #32]
 8001d6c:	ee26 8b07 	vmul.f64	d8, d6, d7
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	ed93 7b00 	vldr	d7, [r3]
 8001d76:	eeb0 0b47 	vmov.f64	d0, d7
 8001d7a:	f00c fb5d 	bl	800e438 <cos>
 8001d7e:	eeb0 6b40 	vmov.f64	d6, d0
 8001d82:	ed97 7b06 	vldr	d7, [r7, #24]
 8001d86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001d8a:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	ed83 7b00 	vstr	d7, [r3]

    // Asignar pz al parámetro de salida q3
    *q3_out = pz;
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d9a:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	ecbd 8b02 	vpop	{d8}
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	f3af 8000 	nop.w
 8001db0:	54442d18 	.word	0x54442d18
 8001db4:	400921fb 	.word	0x400921fb

08001db8 <cinematica_directa>:

void cinematica_directa(double q1, double q2, double q3, double *px, double *py, double *pz){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	ed2d 8b02 	vpush	{d8}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	ed87 0b08 	vstr	d0, [r7, #32]
 8001dc6:	ed87 1b06 	vstr	d1, [r7, #24]
 8001dca:	ed87 2b04 	vstr	d2, [r7, #16]
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
	//calcualar px
	*px=q2*sin(q1);
 8001dd4:	ed97 0b08 	vldr	d0, [r7, #32]
 8001dd8:	f00c fb86 	bl	800e4e8 <sin>
 8001ddc:	eeb0 6b40 	vmov.f64	d6, d0
 8001de0:	ed97 7b06 	vldr	d7, [r7, #24]
 8001de4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	ed83 7b00 	vstr	d7, [r3]

	//calcular py
	*py=-q2*cos(q1);
 8001dee:	ed97 7b06 	vldr	d7, [r7, #24]
 8001df2:	eeb1 8b47 	vneg.f64	d8, d7
 8001df6:	ed97 0b08 	vldr	d0, [r7, #32]
 8001dfa:	f00c fb1d 	bl	800e438 <cos>
 8001dfe:	eeb0 7b40 	vmov.f64	d7, d0
 8001e02:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	ed83 7b00 	vstr	d7, [r3]

	// calcualr pz

	*pz=q3;
 8001e0c:	6879      	ldr	r1, [r7, #4]
 8001e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e12:	e9c1 2300 	strd	r2, r3, [r1]

}
 8001e16:	bf00      	nop
 8001e18:	3728      	adds	r7, #40	; 0x28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	ecbd 8b02 	vpop	{d8}
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_UART_RxCpltCallback>:
}


/////
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <HAL_UART_RxCpltCallback+0x7c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d130      	bne.n	8001e98 <HAL_UART_RxCpltCallback+0x74>
    {
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_LED, GPIO_PIN_SET); // Enciende el LED
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_UART_RxCpltCallback+0x80>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	481a      	ldr	r0, [pc, #104]	; (8001ea8 <HAL_UART_RxCpltCallback+0x84>)
 8001e40:	f001 ffcc 	bl	8003ddc <HAL_GPIO_WritePin>
        //HAL_UART_Transmit(&huart3,&byte,1, 100); // Envía la cadena a través de UART



        // Almacenar el byte recibido en el buffer si no es '>'
        if (byte != 62) // 62 es el código ASCII para '>'
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_UART_RxCpltCallback+0x88>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b3e      	cmp	r3, #62	; 0x3e
 8001e4a:	d017      	beq.n	8001e7c <HAL_UART_RxCpltCallback+0x58>
        {

            if (bufferIndex < BUFFER_SIZE)
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e54:	d20b      	bcs.n	8001e6e <HAL_UART_RxCpltCallback+0x4a>
            {

                buffer[bufferIndex++] = byte;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	b291      	uxth	r1, r2
 8001e5e:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001e60:	8011      	strh	r1, [r2, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_UART_RxCpltCallback+0x88>)
 8001e66:	7819      	ldrb	r1, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_UART_RxCpltCallback+0x90>)
 8001e6a:	5499      	strb	r1, [r3, r2]
 8001e6c:	e00f      	b.n	8001e8e <HAL_UART_RxCpltCallback+0x6a>

            }
            else
            {
                // Manejar el caso de desbordamiento del buffer
                bufferOverflowFlag = 1; // Establecer la bandera de desbordamiento
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_UART_RxCpltCallback+0x94>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
                bufferIndex = 0; // Opcional: restablecer el índice del buffer
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e008      	b.n	8001e8e <HAL_UART_RxCpltCallback+0x6a>
        {
            // Aquí puedes manejar el caso cuando se recibe '>'
            // Por ejemplo, procesar el buffer y restablecer bufferIndex
        	 //HAL_UART_Transmit(&huart1, prueba_1, sizeof(prueba_1) - 1, 100);
        	 //HAL_UART_Transmit(&huart1, buffer,bufferIndex, 100);// Envía la cadena a través de UART
            processBuffer(buffer, bufferIndex);
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <HAL_UART_RxCpltCallback+0x90>)
 8001e84:	f000 f81c 	bl	8001ec0 <processBuffer>
            bufferIndex = 0;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_UART_RxCpltCallback+0x8c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	801a      	strh	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(&huart3, &byte, 1);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4906      	ldr	r1, [pc, #24]	; (8001eac <HAL_UART_RxCpltCallback+0x88>)
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <HAL_UART_RxCpltCallback+0x98>)
 8001e94:	f005 fa2c 	bl	80072f0 <HAL_UART_Receive_IT>


        // Vuelve a habilitar la recepción por interrupción

    }
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40004800 	.word	0x40004800
 8001ea4:	24000000 	.word	0x24000000
 8001ea8:	58021000 	.word	0x58021000
 8001eac:	24000df6 	.word	0x24000df6
 8001eb0:	240011e0 	.word	0x240011e0
 8001eb4:	24000df8 	.word	0x24000df8
 8001eb8:	240011e2 	.word	0x240011e2
 8001ebc:	2400f5bc 	.word	0x2400f5bc

08001ec0 <processBuffer>:

void processBuffer(uint8_t *buffer, uint16_t length)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	807b      	strh	r3, [r7, #2]
    if (bufferOverflowFlag)
 8001ecc:	4b32      	ldr	r3, [pc, #200]	; (8001f98 <processBuffer+0xd8>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <processBuffer+0x28>
    {
        // Manejar el desbordamiento del buffer
        // Por ejemplo, enviar un mensaje de error o realizar acciones correctivas
        HAL_UART_Transmit(&huart1, (uint8_t *)"Buffer overflow\n", 16, 100);
 8001ed4:	2364      	movs	r3, #100	; 0x64
 8001ed6:	2210      	movs	r2, #16
 8001ed8:	4930      	ldr	r1, [pc, #192]	; (8001f9c <processBuffer+0xdc>)
 8001eda:	4831      	ldr	r0, [pc, #196]	; (8001fa0 <processBuffer+0xe0>)
 8001edc:	f005 f972 	bl	80071c4 <HAL_UART_Transmit>
        bufferOverflowFlag = 0; // Restablecer la bandera de desbordamiento
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <processBuffer+0xd8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
        return;
 8001ee6:	e053      	b.n	8001f90 <processBuffer+0xd0>
    }


    // Punteros para la división de la cadena
    char *ptr = (char *)buffer;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	617b      	str	r3, [r7, #20]
    char *start = ptr;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
    char *end = strchr(start, 'a');
 8001ef0:	2161      	movs	r1, #97	; 0x61
 8001ef2:	6938      	ldr	r0, [r7, #16]
 8001ef4:	f008 fa36 	bl	800a364 <strchr>
 8001ef8:	60f8      	str	r0, [r7, #12]

    if (end != NULL)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d047      	beq.n	8001f90 <processBuffer+0xd0>
    {
        strncpy(q1, start, end - start);
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6939      	ldr	r1, [r7, #16]
 8001f0a:	4826      	ldr	r0, [pc, #152]	; (8001fa4 <processBuffer+0xe4>)
 8001f0c:	f008 fa3f 	bl	800a38e <strncpy>
        start = end + 1;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	613b      	str	r3, [r7, #16]
        end = strchr(start, 'b');
 8001f16:	2162      	movs	r1, #98	; 0x62
 8001f18:	6938      	ldr	r0, [r7, #16]
 8001f1a:	f008 fa23 	bl	800a364 <strchr>
 8001f1e:	60f8      	str	r0, [r7, #12]

        if (end != NULL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d034      	beq.n	8001f90 <processBuffer+0xd0>
        {
            strncpy(q2, start, end - start);
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6939      	ldr	r1, [r7, #16]
 8001f30:	481d      	ldr	r0, [pc, #116]	; (8001fa8 <processBuffer+0xe8>)
 8001f32:	f008 fa2c 	bl	800a38e <strncpy>
            start = end + 1;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
            end = strchr(start, 'c');
 8001f3c:	2163      	movs	r1, #99	; 0x63
 8001f3e:	6938      	ldr	r0, [r7, #16]
 8001f40:	f008 fa10 	bl	800a364 <strchr>
 8001f44:	60f8      	str	r0, [r7, #12]

            if (end != NULL)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d021      	beq.n	8001f90 <processBuffer+0xd0>
            {
                strncpy(q3, start, end - start);
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	6939      	ldr	r1, [r7, #16]
 8001f56:	4815      	ldr	r0, [pc, #84]	; (8001fac <processBuffer+0xec>)
 8001f58:	f008 fa19 	bl	800a38e <strncpy>
                start = end + 1;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
                end = strchr(start, 'd');
 8001f62:	2164      	movs	r1, #100	; 0x64
 8001f64:	6938      	ldr	r0, [r7, #16]
 8001f66:	f008 f9fd 	bl	800a364 <strchr>
 8001f6a:	60f8      	str	r0, [r7, #12]

                if(end != NULL){
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00e      	beq.n	8001f90 <processBuffer+0xd0>
                	 strncpy(q4, start, end - start);
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6939      	ldr	r1, [r7, #16]
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <processBuffer+0xf0>)
 8001f7e:	f008 fa06 	bl	800a38e <strncpy>
                	 start = end + 1;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3301      	adds	r3, #1
 8001f86:	613b      	str	r3, [r7, #16]
                	 strcpy(q5, start);
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	480a      	ldr	r0, [pc, #40]	; (8001fb4 <processBuffer+0xf4>)
 8001f8c:	f008 f9f7 	bl	800a37e <strcpy>
    //HAL_UART_Transmit(&huart3, (uint8_t *)q1, strlen(q1), 100); // 0 puntos desfazados
    //HAL_UART_Transmit(&huart3, (uint8_t *)q2, strlen(q2), 100); // 5 puntos desfazados
    //HAL_UART_Transmit(&huart1, (uint8_t *)q3, strlen(q3), 100); // 2 puntos malos
    //HAL_UART_Transmit(&huart1, (uint8_t *)q4, strlen(q4), 100); // Enviar q4 si hay datos

}
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	240011e2 	.word	0x240011e2
 8001f9c:	0800f2b4 	.word	0x0800f2b4
 8001fa0:	2400f52c 	.word	0x2400f52c
 8001fa4:	2400ecc0 	.word	0x2400ecc0
 8001fa8:	24000004 	.word	0x24000004
 8001fac:	2400f0a8 	.word	0x2400f0a8
 8001fb0:	240003ec 	.word	0x240003ec
 8001fb4:	240007d4 	.word	0x240007d4

08001fb8 <A4988_q1>:

void A4988_q1(){
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, ENABLE_PIN_q1, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2102      	movs	r1, #2
 8001fc0:	480a      	ldr	r0, [pc, #40]	; (8001fec <A4988_q1+0x34>)
 8001fc2:	f001 ff0b 	bl	8003ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS0_PIN_q1, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fcc:	4808      	ldr	r0, [pc, #32]	; (8001ff0 <A4988_q1+0x38>)
 8001fce:	f001 ff05 	bl	8003ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS1_PIN_q1, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <A4988_q1+0x38>)
 8001fd8:	f001 ff00 	bl	8003ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MS2_PIN_q1, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2120      	movs	r1, #32
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <A4988_q1+0x38>)
 8001fe2:	f001 fefb 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	58021000 	.word	0x58021000
 8001ff0:	58020400 	.word	0x58020400

08001ff4 <A4988_q2>:

void A4988_q2(){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, ENABLE_PIN_q2, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	480a      	ldr	r0, [pc, #40]	; (8002028 <A4988_q2+0x34>)
 8001ffe:	f001 feed 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS0_PIN_q2, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2104      	movs	r1, #4
 8002006:	4808      	ldr	r0, [pc, #32]	; (8002028 <A4988_q2+0x34>)
 8002008:	f001 fee8 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS1_PIN_q2, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	2101      	movs	r1, #1
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <A4988_q2+0x34>)
 8002012:	f001 fee3 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS2_PIN_q2, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <A4988_q2+0x38>)
 800201e:	f001 fedd 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	58020c00 	.word	0x58020c00
 800202c:	58020800 	.word	0x58020800

08002030 <A4988_q3>:

void A4988_q3(){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, ENABLE_PIN_q3, GPIO_PIN_RESET);
 8002034:	2200      	movs	r2, #0
 8002036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800203a:	480b      	ldr	r0, [pc, #44]	; (8002068 <A4988_q3+0x38>)
 800203c:	f001 fece 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS0_PIN_q3, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <A4988_q3+0x3c>)
 8002048:	f001 fec8 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, MS1_PIN_q3, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	4806      	ldr	r0, [pc, #24]	; (800206c <A4988_q3+0x3c>)
 8002052:	f001 fec3 	bl	8003ddc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, MS2_PIN_q3, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <A4988_q3+0x40>)
 800205e:	f001 febd 	bl	8003ddc <HAL_GPIO_WritePin>
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	58020000 	.word	0x58020000
 800206c:	58020800 	.word	0x58020800
 8002070:	58020c00 	.word	0x58020c00

08002074 <Home>:

void Home (void){
 8002074:	b598      	push	{r3, r4, r7, lr}
 8002076:	af00      	add	r7, sp, #0
	Home_q2();
 8002078:	f000 f816 	bl	80020a8 <Home_q2>
	Home_q3();
 800207c:	f000 f88a 	bl	8002194 <Home_q3>
	TIM2->CCR2 = radianes_a_valor(M_PI/2); //q5
 8002080:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002084:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80020a4 <Home+0x30>
 8002088:	f7fe fe82 	bl	8000d90 <radianes_a_valor>
 800208c:	4603      	mov	r3, r0
 800208e:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM2->CCR4 = radianes_a_valor(M_PI/2); //q4
 8002090:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002094:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80020a4 <Home+0x30>
 8002098:	f7fe fe7a 	bl	8000d90 <radianes_a_valor>
 800209c:	4603      	mov	r3, r0
 800209e:	6423      	str	r3, [r4, #64]	; 0x40
}
 80020a0:	bf00      	nop
 80020a2:	bd98      	pop	{r3, r4, r7, pc}
 80020a4:	3fc90fdb 	.word	0x3fc90fdb

080020a8 <Home_q2>:

void Home_q2(void){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
	while(FC_Home_q2){
 80020ae:	e02f      	b.n	8002110 <Home_q2+0x68>
		HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET);  //Retroceso
 80020b0:	2200      	movs	r2, #0
 80020b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b6:	4833      	ldr	r0, [pc, #204]	; (8002184 <Home_q2+0xdc>)
 80020b8:	f001 fe90 	bl	8003ddc <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	e014      	b.n	80020ec <Home_q2+0x44>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020c8:	482e      	ldr	r0, [pc, #184]	; (8002184 <Home_q2+0xdc>)
 80020ca:	f001 fe87 	bl	8003ddc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f000 fdc8 	bl	8002c64 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020da:	482a      	ldr	r0, [pc, #168]	; (8002184 <Home_q2+0xdc>)
 80020dc:	f001 fe7e 	bl	8003ddc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80020e0:	2000      	movs	r0, #0
 80020e2:	f000 fdbf 	bl	8002c64 <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q2; i++) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3301      	adds	r3, #1
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a26      	ldr	r2, [pc, #152]	; (8002188 <Home_q2+0xe0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	dc04      	bgt.n	80020fe <Home_q2+0x56>
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <Home_q2+0xe4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e1      	bne.n	80020c2 <Home_q2+0x1a>
		}
		if (!FC_Home_q2) break;
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <Home_q2+0xe4>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <Home_q2+0x74>
		HAL_Delay(500);
 8002108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800210c:	f000 fdaa 	bl	8002c64 <HAL_Delay>
	while(FC_Home_q2){
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <Home_q2+0xe4>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ca      	bne.n	80020b0 <Home_q2+0x8>
 800211a:	e000      	b.n	800211e <Home_q2+0x76>
		if (!FC_Home_q2) break;
 800211c:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002124:	4817      	ldr	r0, [pc, #92]	; (8002184 <Home_q2+0xdc>)
 8002126:	f001 fe59 	bl	8003ddc <HAL_GPIO_WritePin>
	for (int i = 0; i < 2500; i++) {
 800212a:	2300      	movs	r3, #0
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	e019      	b.n	8002164 <Home_q2+0xbc>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002136:	4813      	ldr	r0, [pc, #76]	; (8002184 <Home_q2+0xdc>)
 8002138:	f001 fe50 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800213c:	2000      	movs	r0, #0
 800213e:	f000 fd91 	bl	8002c64 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002148:	480e      	ldr	r0, [pc, #56]	; (8002184 <Home_q2+0xdc>)
 800214a:	f001 fe47 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800214e:	2000      	movs	r0, #0
 8002150:	f000 fd88 	bl	8002c64 <HAL_Delay>
		paso_actual_q2--;
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <Home_q2+0xe8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3b01      	subs	r3, #1
 800215a:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <Home_q2+0xe8>)
 800215c:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 2500; i++) {
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800216a:	4293      	cmp	r3, r2
 800216c:	dde0      	ble.n	8002130 <Home_q2+0x88>
	}
	HAL_Delay(500);
 800216e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002172:	f000 fd77 	bl	8002c64 <HAL_Delay>
	FC_Home_q2 = 1;
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <Home_q2+0xe4>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	58020000 	.word	0x58020000
 8002188:	0001869f 	.word	0x0001869f
 800218c:	24000bbc 	.word	0x24000bbc
 8002190:	24000bc0 	.word	0x24000bc0

08002194 <Home_q3>:

void Home_q3(void){
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
	while(FC_Home_q3){
 800219a:	e02f      	b.n	80021fc <Home_q3+0x68>
		HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 800219c:	2200      	movs	r2, #0
 800219e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a2:	4830      	ldr	r0, [pc, #192]	; (8002264 <Home_q3+0xd0>)
 80021a4:	f001 fe1a 	bl	8003ddc <HAL_GPIO_WritePin>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	e014      	b.n	80021d8 <Home_q3+0x44>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021b4:	482b      	ldr	r0, [pc, #172]	; (8002264 <Home_q3+0xd0>)
 80021b6:	f001 fe11 	bl	8003ddc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 fd52 	bl	8002c64 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80021c0:	2200      	movs	r2, #0
 80021c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c6:	4827      	ldr	r0, [pc, #156]	; (8002264 <Home_q3+0xd0>)
 80021c8:	f001 fe08 	bl	8003ddc <HAL_GPIO_WritePin>
			HAL_Delay(VELOCIDAD);
 80021cc:	2000      	movs	r0, #0
 80021ce:	f000 fd49 	bl	8002c64 <HAL_Delay>
		for (int i = 0; i < 100000 && FC_Home_q3; i++) {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3301      	adds	r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a23      	ldr	r2, [pc, #140]	; (8002268 <Home_q3+0xd4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	dc04      	bgt.n	80021ea <Home_q3+0x56>
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <Home_q3+0xd8>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e1      	bne.n	80021ae <Home_q3+0x1a>
		}
		if (!FC_Home_q3) break;
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <Home_q3+0xd8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d009      	beq.n	8002208 <Home_q3+0x74>
		HAL_Delay(500);
 80021f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021f8:	f000 fd34 	bl	8002c64 <HAL_Delay>
	while(FC_Home_q3){
 80021fc:	4b1b      	ldr	r3, [pc, #108]	; (800226c <Home_q3+0xd8>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1ca      	bne.n	800219c <Home_q3+0x8>
 8002206:	e000      	b.n	800220a <Home_q3+0x76>
		if (!FC_Home_q3) break;
 8002208:	bf00      	nop
	}

	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002210:	4814      	ldr	r0, [pc, #80]	; (8002264 <Home_q3+0xd0>)
 8002212:	f001 fde3 	bl	8003ddc <HAL_GPIO_WritePin>
	for (int i = 0; i < 80; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	e014      	b.n	8002246 <Home_q3+0xb2>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002222:	4810      	ldr	r0, [pc, #64]	; (8002264 <Home_q3+0xd0>)
 8002224:	f001 fdda 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 8002228:	2000      	movs	r0, #0
 800222a:	f000 fd1b 	bl	8002c64 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002234:	480b      	ldr	r0, [pc, #44]	; (8002264 <Home_q3+0xd0>)
 8002236:	f001 fdd1 	bl	8003ddc <HAL_GPIO_WritePin>
		HAL_Delay(VELOCIDAD);
 800223a:	2000      	movs	r0, #0
 800223c:	f000 fd12 	bl	8002c64 <HAL_Delay>
	for (int i = 0; i < 80; i++) {
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b4f      	cmp	r3, #79	; 0x4f
 800224a:	dde7      	ble.n	800221c <Home_q3+0x88>
	}
	HAL_Delay(500);
 800224c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002250:	f000 fd08 	bl	8002c64 <HAL_Delay>
	FC_Home_q3 = 1;
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <Home_q3+0xd8>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	58020c00 	.word	0x58020c00
 8002268:	0001869f 	.word	0x0001869f
 800226c:	24000bbd 	.word	0x24000bbd

08002270 <mover_motorq1_rad>:

void mover_motorq1_rad(float radianes){
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	ed87 0a01 	vstr	s0, [r7, #4]

    int pasos = (int)((radianes / (2 * M_PI)) * 400);
 800227a:	edd7 7a01 	vldr	s15, [r7, #4]
 800227e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002282:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8002350 <mover_motorq1_rad+0xe0>
 8002286:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800228a:	ed9f 6b33 	vldr	d6, [pc, #204]	; 8002358 <mover_motorq1_rad+0xe8>
 800228e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002292:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002296:	ee17 3a90 	vmov	r3, s15
 800229a:	617b      	str	r3, [r7, #20]
    int nuevo_paso = pasos;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
    int diferencia_pasos = nuevo_paso - paso_actual_q1;
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <mover_motorq1_rad+0xf0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	dd1f      	ble.n	80022f0 <mover_motorq1_rad+0x80>
        // Movimiento hacia adelante
    	HAL_GPIO_WritePin(GPIOD, DIR_q1, GPIO_PIN_RESET); //Antihorario
 80022b0:	2200      	movs	r2, #0
 80022b2:	2140      	movs	r1, #64	; 0x40
 80022b4:	482b      	ldr	r0, [pc, #172]	; (8002364 <mover_motorq1_rad+0xf4>)
 80022b6:	f001 fd91 	bl	8003ddc <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e012      	b.n	80022e6 <mover_motorq1_rad+0x76>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	2108      	movs	r1, #8
 80022c4:	4828      	ldr	r0, [pc, #160]	; (8002368 <mover_motorq1_rad+0xf8>)
 80022c6:	f001 fd89 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f000 fcca 	bl	8002c64 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2108      	movs	r1, #8
 80022d4:	4824      	ldr	r0, [pc, #144]	; (8002368 <mover_motorq1_rad+0xf8>)
 80022d6:	f001 fd81 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80022da:	2000      	movs	r0, #0
 80022dc:	f000 fcc2 	bl	8002c64 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	dbe8      	blt.n	80022c0 <mover_motorq1_rad+0x50>
 80022ee:	e024      	b.n	800233a <mover_motorq1_rad+0xca>
//    if(radianes == (2*M_PI))
//    {
//    	radianes = 0;
//    }

    else if (diferencia_pasos < 0) {
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	da21      	bge.n	800233a <mover_motorq1_rad+0xca>
        // Movimiento hacia atrás
    	HAL_GPIO_WritePin(GPIOD, DIR_q1, GPIO_PIN_SET); //Horario
 80022f6:	2201      	movs	r2, #1
 80022f8:	2140      	movs	r1, #64	; 0x40
 80022fa:	481a      	ldr	r0, [pc, #104]	; (8002364 <mover_motorq1_rad+0xf4>)
 80022fc:	f001 fd6e 	bl	8003ddc <HAL_GPIO_WritePin>
    	diferencia_pasos = -diferencia_pasos;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	425b      	negs	r3, r3
 8002304:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < diferencia_pasos ; i++) {
 8002306:	2300      	movs	r3, #0
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	e012      	b.n	8002332 <mover_motorq1_rad+0xc2>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_SET);
 800230c:	2201      	movs	r2, #1
 800230e:	2108      	movs	r1, #8
 8002310:	4815      	ldr	r0, [pc, #84]	; (8002368 <mover_motorq1_rad+0xf8>)
 8002312:	f001 fd63 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8002316:	2000      	movs	r0, #0
 8002318:	f000 fca4 	bl	8002c64 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOB, STEP_q1, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	2108      	movs	r1, #8
 8002320:	4811      	ldr	r0, [pc, #68]	; (8002368 <mover_motorq1_rad+0xf8>)
 8002322:	f001 fd5b 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8002326:	2000      	movs	r0, #0
 8002328:	f000 fc9c 	bl	8002c64 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos ; i++) {
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3301      	adds	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	dbe8      	blt.n	800230c <mover_motorq1_rad+0x9c>
    	}
    }

    paso_actual_q1 = nuevo_paso;
 800233a:	4a09      	ldr	r2, [pc, #36]	; (8002360 <mover_motorq1_rad+0xf0>)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 8002340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002344:	f000 fc8e 	bl	8002c64 <HAL_Delay>
}
 8002348:	bf00      	nop
 800234a:	3720      	adds	r7, #32
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	54442d18 	.word	0x54442d18
 8002354:	401921fb 	.word	0x401921fb
 8002358:	00000000 	.word	0x00000000
 800235c:	40790000 	.word	0x40790000
 8002360:	2400f64c 	.word	0x2400f64c
 8002364:	58020c00 	.word	0x58020c00
 8002368:	58020400 	.word	0x58020400

0800236c <mover_motorq2_mm>:

void mover_motorq2_mm(float milimetros){
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	ed87 0a01 	vstr	s0, [r7, #4]

	//milimetros = milimetros - 500;

    if (milimetros < 0) {
 8002376:	edd7 7a01 	vldr	s15, [r7, #4]
 800237a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	d503      	bpl.n	800238c <mover_motorq2_mm+0x20>
        milimetros = 0;
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	e00a      	b.n	80023a2 <mover_motorq2_mm+0x36>
    }
    else if (milimetros > 210) {
 800238c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002390:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002434 <mover_motorq2_mm+0xc8>
 8002394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	dd01      	ble.n	80023a2 <mover_motorq2_mm+0x36>
        milimetros = 210;
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <mover_motorq2_mm+0xcc>)
 80023a0:	607b      	str	r3, [r7, #4]
    }

    uint32_t pasos = milimetros_a_pasos(milimetros);
 80023a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80023a6:	f7fe fd39 	bl	8000e1c <milimetros_a_pasos>
 80023aa:	60f8      	str	r0, [r7, #12]
    int diferencia_pasos = pasos - paso_actual_q2;
 80023ac:	4b23      	ldr	r3, [pc, #140]	; (800243c <mover_motorq2_mm+0xd0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	617b      	str	r3, [r7, #20]

    if (diferencia_pasos != 0) {
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d031      	beq.n	8002422 <mover_motorq2_mm+0xb6>
        if (diferencia_pasos > 0) {
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	dd06      	ble.n	80023d2 <mover_motorq2_mm+0x66>
        	 HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_RESET); //Retroceso
 80023c4:	2200      	movs	r2, #0
 80023c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ca:	481d      	ldr	r0, [pc, #116]	; (8002440 <mover_motorq2_mm+0xd4>)
 80023cc:	f001 fd06 	bl	8003ddc <HAL_GPIO_WritePin>
 80023d0:	e008      	b.n	80023e4 <mover_motorq2_mm+0x78>
        }
        else {
        	HAL_GPIO_WritePin(GPIOA, DIR_q2, GPIO_PIN_SET); //Avance
 80023d2:	2201      	movs	r2, #1
 80023d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023d8:	4819      	ldr	r0, [pc, #100]	; (8002440 <mover_motorq2_mm+0xd4>)
 80023da:	f001 fcff 	bl	8003ddc <HAL_GPIO_WritePin>
            diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	425b      	negs	r3, r3
 80023e2:	617b      	str	r3, [r7, #20]
        }

        for (int i = 0; i < diferencia_pasos; i++) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	e014      	b.n	8002414 <mover_motorq2_mm+0xa8>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_SET);
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023f0:	4813      	ldr	r0, [pc, #76]	; (8002440 <mover_motorq2_mm+0xd4>)
 80023f2:	f001 fcf3 	bl	8003ddc <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f000 fc34 	bl	8002c64 <HAL_Delay>
        	HAL_GPIO_WritePin(GPIOA, STEP_q2, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002402:	480f      	ldr	r0, [pc, #60]	; (8002440 <mover_motorq2_mm+0xd4>)
 8002404:	f001 fcea 	bl	8003ddc <HAL_GPIO_WritePin>
        	HAL_Delay(VELOCIDAD);
 8002408:	2000      	movs	r0, #0
 800240a:	f000 fc2b 	bl	8002c64 <HAL_Delay>
        for (int i = 0; i < diferencia_pasos; i++) {
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3301      	adds	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbe6      	blt.n	80023ea <mover_motorq2_mm+0x7e>
        }

        paso_actual_q2 = pasos;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <mover_motorq2_mm+0xd0>)
 8002420:	6013      	str	r3, [r2, #0]
    }

    HAL_Delay(500);
 8002422:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002426:	f000 fc1d 	bl	8002c64 <HAL_Delay>
}
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	43520000 	.word	0x43520000
 8002438:	43520000 	.word	0x43520000
 800243c:	24000bc0 	.word	0x24000bc0
 8002440:	58020000 	.word	0x58020000

08002444 <mover_motorq3_mm>:

void mover_motorq3_mm(float milimetros){
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	ed87 0a01 	vstr	s0, [r7, #4]

	if (milimetros < 0) {
 800244e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002452:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245a:	d503      	bpl.n	8002464 <mover_motorq3_mm+0x20>
		milimetros = 0;
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	607b      	str	r3, [r7, #4]
 8002462:	e00a      	b.n	800247a <mover_motorq3_mm+0x36>
	}
	else if (milimetros > 215) {
 8002464:	edd7 7a01 	vldr	s15, [r7, #4]
 8002468:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002544 <mover_motorq3_mm+0x100>
 800246c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	dd01      	ble.n	800247a <mover_motorq3_mm+0x36>
		milimetros = 215 ;
 8002476:	4b34      	ldr	r3, [pc, #208]	; (8002548 <mover_motorq3_mm+0x104>)
 8002478:	607b      	str	r3, [r7, #4]
	}

    uint32_t pasos = milimetros_a_pasos(milimetros);
 800247a:	ed97 0a01 	vldr	s0, [r7, #4]
 800247e:	f7fe fccd 	bl	8000e1c <milimetros_a_pasos>
 8002482:	6178      	str	r0, [r7, #20]
    int nuevo_paso = pasos;
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	613b      	str	r3, [r7, #16]
    int diferencia_pasos = nuevo_paso - paso_actual_q3;
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <mover_motorq3_mm+0x108>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	60fb      	str	r3, [r7, #12]

    if (diferencia_pasos > 0) {
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	dd22      	ble.n	80024de <mover_motorq3_mm+0x9a>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_SET); //Arriba
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800249e:	482c      	ldr	r0, [pc, #176]	; (8002550 <mover_motorq3_mm+0x10c>)
 80024a0:	f001 fc9c 	bl	8003ddc <HAL_GPIO_WritePin>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	e014      	b.n	80024d4 <mover_motorq3_mm+0x90>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 80024aa:	2201      	movs	r2, #1
 80024ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024b0:	4827      	ldr	r0, [pc, #156]	; (8002550 <mover_motorq3_mm+0x10c>)
 80024b2:	f001 fc93 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80024b6:	2000      	movs	r0, #0
 80024b8:	f000 fbd4 	bl	8002c64 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c2:	4823      	ldr	r0, [pc, #140]	; (8002550 <mover_motorq3_mm+0x10c>)
 80024c4:	f001 fc8a 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 fbcb 	bl	8002c64 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	dbe6      	blt.n	80024aa <mover_motorq3_mm+0x66>
 80024dc:	e027      	b.n	800252e <mover_motorq3_mm+0xea>
    	}
    }

    else if (diferencia_pasos < 0) {
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	da24      	bge.n	800252e <mover_motorq3_mm+0xea>
    	HAL_GPIO_WritePin(GPIOD, DIR_q3, GPIO_PIN_RESET);  //Abajo
 80024e4:	2200      	movs	r2, #0
 80024e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ea:	4819      	ldr	r0, [pc, #100]	; (8002550 <mover_motorq3_mm+0x10c>)
 80024ec:	f001 fc76 	bl	8003ddc <HAL_GPIO_WritePin>
    	diferencia_pasos = -diferencia_pasos; // Hacer positiva la diferencia para el bucle
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	425b      	negs	r3, r3
 80024f4:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < diferencia_pasos; i++) {
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e014      	b.n	8002526 <mover_motorq3_mm+0xe2>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_SET);
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002502:	4813      	ldr	r0, [pc, #76]	; (8002550 <mover_motorq3_mm+0x10c>)
 8002504:	f001 fc6a 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 8002508:	2000      	movs	r0, #0
 800250a:	f000 fbab 	bl	8002c64 <HAL_Delay>
    		HAL_GPIO_WritePin(GPIOD, STEP_q3, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002514:	480e      	ldr	r0, [pc, #56]	; (8002550 <mover_motorq3_mm+0x10c>)
 8002516:	f001 fc61 	bl	8003ddc <HAL_GPIO_WritePin>
    		HAL_Delay(VELOCIDAD);
 800251a:	2000      	movs	r0, #0
 800251c:	f000 fba2 	bl	8002c64 <HAL_Delay>
    	for (int i = 0; i < diferencia_pasos; i++) {
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	3301      	adds	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	429a      	cmp	r2, r3
 800252c:	dbe6      	blt.n	80024fc <mover_motorq3_mm+0xb8>
    	}
    }

    paso_actual_q3 = nuevo_paso;
 800252e:	4a07      	ldr	r2, [pc, #28]	; (800254c <mover_motorq3_mm+0x108>)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	6013      	str	r3, [r2, #0]
    HAL_Delay(500);
 8002534:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002538:	f000 fb94 	bl	8002c64 <HAL_Delay>
}
 800253c:	bf00      	nop
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	43570000 	.word	0x43570000
 8002548:	43570000 	.word	0x43570000
 800254c:	2400f650 	.word	0x2400f650
 8002550:	58020c00 	.word	0x58020c00

08002554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002558:	b672      	cpsid	i
}
 800255a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255c:	e7fe      	b.n	800255c <Error_Handler+0x8>
	...

08002560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_MspInit+0x30>)
 8002568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_MspInit+0x30>)
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_MspInit+0x30>)
 8002578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	58024400 	.word	0x58024400

08002594 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a4:	d10e      	bne.n	80025c4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80025a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ac:	4a08      	ldr	r2, [pc, #32]	; (80025d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80025b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	58024400 	.word	0x58024400

080025d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d11e      	bne.n	8002634 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 80025f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fc:	4a0f      	ldr	r2, [pc, #60]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <HAL_TIM_MspPostInit+0x68>)
 8002608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002614:	230a      	movs	r3, #10
 8002616:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002624:	2301      	movs	r3, #1
 8002626:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	4619      	mov	r1, r3
 800262e:	4804      	ldr	r0, [pc, #16]	; (8002640 <HAL_TIM_MspPostInit+0x6c>)
 8002630:	f001 fa2c 	bl	8003a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	58024400 	.word	0x58024400
 8002640:	58020000 	.word	0x58020000

08002644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0b8      	sub	sp, #224	; 0xe0
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800265c:	f107 0318 	add.w	r3, r7, #24
 8002660:	22b4      	movs	r2, #180	; 0xb4
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f007 fa11 	bl	8009a8c <memset>
  if(huart->Instance==USART1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <HAL_UART_MspInit+0x170>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d14b      	bne.n	800270c <HAL_UART_MspInit+0xc8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002674:	2301      	movs	r3, #1
 8002676:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267e:	f107 0318 	add.w	r3, r7, #24
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fb6c 	bl	8004d60 <HAL_RCCEx_PeriphCLKConfig>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800268e:	f7ff ff61 	bl	8002554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002692:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_UART_MspInit+0x174>)
 8002694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002698:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <HAL_UART_MspInit+0x174>)
 800269a:	f043 0310 	orr.w	r3, r3, #16
 800269e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026a2:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <HAL_UART_MspInit+0x174>)
 80026a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b0:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <HAL_UART_MspInit+0x174>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	4a40      	ldr	r2, [pc, #256]	; (80027b8 <HAL_UART_MspInit+0x174>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c0:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_UART_MspInit+0x174>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80026ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026e8:	2304      	movs	r3, #4
 80026ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026f2:	4619      	mov	r1, r3
 80026f4:	4831      	ldr	r0, [pc, #196]	; (80027bc <HAL_UART_MspInit+0x178>)
 80026f6:	f001 f9c9 	bl	8003a8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026fa:	2200      	movs	r2, #0
 80026fc:	2100      	movs	r1, #0
 80026fe:	2025      	movs	r0, #37	; 0x25
 8002700:	f000 fbaf 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002704:	2025      	movs	r0, #37	; 0x25
 8002706:	f000 fbc6 	bl	8002e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800270a:	e04f      	b.n	80027ac <HAL_UART_MspInit+0x168>
  else if(huart->Instance==USART3)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_UART_MspInit+0x17c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d14a      	bne.n	80027ac <HAL_UART_MspInit+0x168>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002720:	f107 0318 	add.w	r3, r7, #24
 8002724:	4618      	mov	r0, r3
 8002726:	f002 fb1b 	bl	8004d60 <HAL_RCCEx_PeriphCLKConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002730:	f7ff ff10 	bl	8002554 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_UART_MspInit+0x174>)
 8002736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800273a:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <HAL_UART_MspInit+0x174>)
 800273c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002740:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_UART_MspInit+0x174>)
 8002746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800274a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_UART_MspInit+0x174>)
 8002754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <HAL_UART_MspInit+0x174>)
 800275a:	f043 0302 	orr.w	r3, r3, #2
 800275e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <HAL_UART_MspInit+0x174>)
 8002764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002770:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800278a:	2307      	movs	r3, #7
 800278c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002794:	4619      	mov	r1, r3
 8002796:	4809      	ldr	r0, [pc, #36]	; (80027bc <HAL_UART_MspInit+0x178>)
 8002798:	f001 f978 	bl	8003a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800279c:	2200      	movs	r2, #0
 800279e:	2100      	movs	r1, #0
 80027a0:	2027      	movs	r0, #39	; 0x27
 80027a2:	f000 fb5e 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027a6:	2027      	movs	r0, #39	; 0x27
 80027a8:	f000 fb75 	bl	8002e96 <HAL_NVIC_EnableIRQ>
}
 80027ac:	bf00      	nop
 80027ae:	37e0      	adds	r7, #224	; 0xe0
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40011000 	.word	0x40011000
 80027b8:	58024400 	.word	0x58024400
 80027bc:	58020400 	.word	0x58020400
 80027c0:	40004800 	.word	0x40004800

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <NMI_Handler+0x4>

080027ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <HardFault_Handler+0x4>

080027d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <MemManage_Handler+0x4>

080027d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <BusFault_Handler+0x4>

080027dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <UsageFault_Handler+0x4>

080027e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002810:	f000 fa08 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800281c:	2080      	movs	r0, #128	; 0x80
 800281e:	f001 fb10 	bl	8003e42 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002822:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002826:	f001 fb0c 	bl	8003e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <USART1_IRQHandler+0x10>)
 8002836:	f004 fdb1 	bl	800739c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2400f52c 	.word	0x2400f52c

08002844 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <USART3_IRQHandler+0x10>)
 800284a:	f004 fda7 	bl	800739c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2400f5bc 	.word	0x2400f5bc

08002858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800285c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002860:	f001 faef 	bl	8003e42 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002864:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002868:	f001 faeb 	bl	8003e42 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
	return 1;
 8002874:	2301      	movs	r3, #1
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <_kill>:

int _kill(int pid, int sig)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800288a:	f007 f8bb 	bl	8009a04 <__errno>
 800288e:	4603      	mov	r3, r0
 8002890:	2216      	movs	r2, #22
 8002892:	601a      	str	r2, [r3, #0]
	return -1;
 8002894:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_exit>:

void _exit (int status)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff ffe7 	bl	8002880 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028b2:	e7fe      	b.n	80028b2 <_exit+0x12>

080028b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	e00a      	b.n	80028dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028c6:	f3af 8000 	nop.w
 80028ca:	4601      	mov	r1, r0
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	60ba      	str	r2, [r7, #8]
 80028d2:	b2ca      	uxtb	r2, r1
 80028d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3301      	adds	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dbf0      	blt.n	80028c6 <_read+0x12>
	}

return len;
 80028e4:	687b      	ldr	r3, [r7, #4]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e009      	b.n	8002914 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	60ba      	str	r2, [r7, #8]
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3301      	adds	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	429a      	cmp	r2, r3
 800291a:	dbf1      	blt.n	8002900 <_write+0x12>
	}
	return len;
 800291c:	687b      	ldr	r3, [r7, #4]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <_close>:

int _close(int file)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
	return -1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800294e:	605a      	str	r2, [r3, #4]
	return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_isatty>:

int _isatty(int file)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
	return 1;
 8002966:	2301      	movs	r3, #1
}
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
	return 0;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f007 f820 	bl	8009a04 <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	24050000 	.word	0x24050000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	2400f734 	.word	0x2400f734
 80029f8:	2400f750 	.word	0x2400f750

080029fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a00:	4b32      	ldr	r3, [pc, #200]	; (8002acc <SystemInit+0xd0>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	4a31      	ldr	r2, [pc, #196]	; (8002acc <SystemInit+0xd0>)
 8002a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a10:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <SystemInit+0xd4>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d807      	bhi.n	8002a2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <SystemInit+0xd4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 030f 	bic.w	r3, r3, #15
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <SystemInit+0xd4>)
 8002a26:	f043 0307 	orr.w	r3, r3, #7
 8002a2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a2c:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <SystemInit+0xd8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <SystemInit+0xd8>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <SystemInit+0xd8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a3e:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <SystemInit+0xd8>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	4924      	ldr	r1, [pc, #144]	; (8002ad4 <SystemInit+0xd8>)
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <SystemInit+0xdc>)
 8002a46:	4013      	ands	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <SystemInit+0xd4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d007      	beq.n	8002a66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <SystemInit+0xd4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 030f 	bic.w	r3, r3, #15
 8002a5e:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <SystemInit+0xd4>)
 8002a60:	f043 0307 	orr.w	r3, r3, #7
 8002a64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <SystemInit+0xd8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <SystemInit+0xd8>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <SystemInit+0xd8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <SystemInit+0xd8>)
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <SystemInit+0xe0>)
 8002a7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <SystemInit+0xd8>)
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <SystemInit+0xe4>)
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <SystemInit+0xd8>)
 8002a86:	4a17      	ldr	r2, [pc, #92]	; (8002ae4 <SystemInit+0xe8>)
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <SystemInit+0xd8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <SystemInit+0xd8>)
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <SystemInit+0xe8>)
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <SystemInit+0xd8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <SystemInit+0xd8>)
 8002a9e:	4a11      	ldr	r2, [pc, #68]	; (8002ae4 <SystemInit+0xe8>)
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002aa2:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <SystemInit+0xd8>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <SystemInit+0xd8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <SystemInit+0xd8>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <SystemInit+0xd8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002aba:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <SystemInit+0xec>)
 8002abc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002ac0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	52002000 	.word	0x52002000
 8002ad4:	58024400 	.word	0x58024400
 8002ad8:	eaf6ed7f 	.word	0xeaf6ed7f
 8002adc:	02020200 	.word	0x02020200
 8002ae0:	01ff0000 	.word	0x01ff0000
 8002ae4:	01010280 	.word	0x01010280
 8002ae8:	52004000 	.word	0x52004000

08002aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002af0:	f7ff ff84 	bl	80029fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002af4:	480c      	ldr	r0, [pc, #48]	; (8002b28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002af6:	490d      	ldr	r1, [pc, #52]	; (8002b2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002afc:	e002      	b.n	8002b04 <LoopCopyDataInit>

08002afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b02:	3304      	adds	r3, #4

08002b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b08:	d3f9      	bcc.n	8002afe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b0c:	4c0a      	ldr	r4, [pc, #40]	; (8002b38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b10:	e001      	b.n	8002b16 <LoopFillZerobss>

08002b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b14:	3204      	adds	r2, #4

08002b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b18:	d3fb      	bcc.n	8002b12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b1a:	f006 ff79 	bl	8009a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1e:	f7fe f99f 	bl	8000e60 <main>
  bx  lr
 8002b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b24:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002b28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b2c:	24000da8 	.word	0x24000da8
  ldr r2, =_sidata
 8002b30:	080112a8 	.word	0x080112a8
  ldr r2, =_sbss
 8002b34:	24000da8 	.word	0x24000da8
  ldr r4, =_ebss
 8002b38:	2400f74c 	.word	0x2400f74c

08002b3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC3_IRQHandler>
	...

08002b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b46:	2003      	movs	r0, #3
 8002b48:	f000 f980 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b4c:	f001 ff32 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <HAL_Init+0x68>)
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	4913      	ldr	r1, [pc, #76]	; (8002bac <HAL_Init+0x6c>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_Init+0x68>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <HAL_Init+0x6c>)
 8002b74:	5cd3      	ldrb	r3, [r2, r3]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_Init+0x70>)
 8002b82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b84:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_Init+0x74>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b8a:	200f      	movs	r0, #15
 8002b8c:	f000 f814 	bl	8002bb8 <HAL_InitTick>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e002      	b.n	8002ba0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b9a:	f7ff fce1 	bl	8002560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	0800f2c8 	.word	0x0800f2c8
 8002bb0:	24000bc8 	.word	0x24000bc8
 8002bb4:	24000bc4 	.word	0x24000bc4

08002bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_InitTick+0x60>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e021      	b.n	8002c10 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_InitTick+0x64>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_InitTick+0x60>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f965 	bl	8002eb2 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 f92f 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x68>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	24000bd0 	.word	0x24000bd0
 8002c1c:	24000bc4 	.word	0x24000bc4
 8002c20:	24000bcc 	.word	0x24000bcc

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	24000bd0 	.word	0x24000bd0
 8002c48:	2400f738 	.word	0x2400f738

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2400f738 	.word	0x2400f738

08002c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c6c:	f7ff ffee 	bl	8002c4c <HAL_GetTick>
 8002c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d005      	beq.n	8002c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_Delay+0x44>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	461a      	mov	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c8a:	bf00      	nop
 8002c8c:	f7ff ffde 	bl	8002c4c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d8f7      	bhi.n	8002c8c <HAL_Delay+0x28>
  {
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	24000bd0 	.word	0x24000bd0

08002cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <__NVIC_SetPriorityGrouping+0x40>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cd4:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x40>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00
 8002cf0:	05fa0000 	.word	0x05fa0000

08002cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <__NVIC_GetPriorityGrouping+0x18>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	f003 0307 	and.w	r3, r3, #7
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db0b      	blt.n	8002d3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	4907      	ldr	r1, [pc, #28]	; (8002d48 <__NVIC_EnableIRQ+0x38>)
 8002d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff29 	bl	8002cac <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e70:	f7ff ff40 	bl	8002cf4 <__NVIC_GetPriorityGrouping>
 8002e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff ff90 	bl	8002da0 <NVIC_EncodePriority>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff5f 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff33 	bl	8002d10 <__NVIC_EnableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffa4 	bl	8002e08 <SysTick_Config>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ed0:	f3bf 8f5f 	dmb	sy
}
 8002ed4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ed6:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_MPU_Disable+0x28>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <HAL_MPU_Disable+0x28>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_MPU_Disable+0x2c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	605a      	str	r2, [r3, #4]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00
 8002ef8:	e000ed90 	.word	0xe000ed90

08002efc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002f04:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <HAL_MPU_Enable+0x38>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <HAL_MPU_Enable+0x3c>)
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <HAL_MPU_Enable+0x3c>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002f1a:	f3bf 8f4f 	dsb	sy
}
 8002f1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f20:	f3bf 8f6f 	isb	sy
}
 8002f24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	e000ed90 	.word	0xe000ed90
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	785a      	ldrb	r2, [r3, #1]
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_MPU_ConfigRegion+0x84>)
 8002f4a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d029      	beq.n	8002fa8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002f54:	4a1a      	ldr	r2, [pc, #104]	; (8002fc0 <HAL_MPU_ConfigRegion+0x84>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7b1b      	ldrb	r3, [r3, #12]
 8002f60:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7adb      	ldrb	r3, [r3, #11]
 8002f66:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002f68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7a9b      	ldrb	r3, [r3, #10]
 8002f6e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002f70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7b5b      	ldrb	r3, [r3, #13]
 8002f76:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002f78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7b9b      	ldrb	r3, [r3, #14]
 8002f7e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002f80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7bdb      	ldrb	r3, [r3, #15]
 8002f86:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	7a5b      	ldrb	r3, [r3, #9]
 8002f8e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7a1b      	ldrb	r3, [r3, #8]
 8002f96:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002f98:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fa0:	4a07      	ldr	r2, [pc, #28]	; (8002fc0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002fa2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002fa4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002fa6:	e005      	b.n	8002fb4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_MPU_ConfigRegion+0x84>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <HAL_MPU_ConfigRegion+0x84>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed90 	.word	0xe000ed90

08002fc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff fe3e 	bl	8002c4c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e2dc      	b.n	8003596 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d008      	beq.n	8002ffa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e2cd      	b.n	8003596 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a76      	ldr	r2, [pc, #472]	; (80031d8 <HAL_DMA_Abort+0x214>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d04a      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a74      	ldr	r2, [pc, #464]	; (80031dc <HAL_DMA_Abort+0x218>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d045      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a73      	ldr	r2, [pc, #460]	; (80031e0 <HAL_DMA_Abort+0x21c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d040      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a71      	ldr	r2, [pc, #452]	; (80031e4 <HAL_DMA_Abort+0x220>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d03b      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a70      	ldr	r2, [pc, #448]	; (80031e8 <HAL_DMA_Abort+0x224>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d036      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6e      	ldr	r2, [pc, #440]	; (80031ec <HAL_DMA_Abort+0x228>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d031      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6d      	ldr	r2, [pc, #436]	; (80031f0 <HAL_DMA_Abort+0x22c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d02c      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a6b      	ldr	r2, [pc, #428]	; (80031f4 <HAL_DMA_Abort+0x230>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d027      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6a      	ldr	r2, [pc, #424]	; (80031f8 <HAL_DMA_Abort+0x234>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a68      	ldr	r2, [pc, #416]	; (80031fc <HAL_DMA_Abort+0x238>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01d      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a67      	ldr	r2, [pc, #412]	; (8003200 <HAL_DMA_Abort+0x23c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a65      	ldr	r2, [pc, #404]	; (8003204 <HAL_DMA_Abort+0x240>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a64      	ldr	r2, [pc, #400]	; (8003208 <HAL_DMA_Abort+0x244>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a62      	ldr	r2, [pc, #392]	; (800320c <HAL_DMA_Abort+0x248>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a61      	ldr	r2, [pc, #388]	; (8003210 <HAL_DMA_Abort+0x24c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_DMA_Abort+0xd6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a5f      	ldr	r2, [pc, #380]	; (8003214 <HAL_DMA_Abort+0x250>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_DMA_Abort+0xda>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <HAL_DMA_Abort+0xdc>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 021e 	bic.w	r2, r2, #30
 80030b2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	e00a      	b.n	80030e2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 020e 	bic.w	r2, r2, #14
 80030da:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a3c      	ldr	r2, [pc, #240]	; (80031d8 <HAL_DMA_Abort+0x214>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d072      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a3a      	ldr	r2, [pc, #232]	; (80031dc <HAL_DMA_Abort+0x218>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d06d      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a39      	ldr	r2, [pc, #228]	; (80031e0 <HAL_DMA_Abort+0x21c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d068      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a37      	ldr	r2, [pc, #220]	; (80031e4 <HAL_DMA_Abort+0x220>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d063      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a36      	ldr	r2, [pc, #216]	; (80031e8 <HAL_DMA_Abort+0x224>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d05e      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a34      	ldr	r2, [pc, #208]	; (80031ec <HAL_DMA_Abort+0x228>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d059      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a33      	ldr	r2, [pc, #204]	; (80031f0 <HAL_DMA_Abort+0x22c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d054      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_DMA_Abort+0x230>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d04f      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a30      	ldr	r2, [pc, #192]	; (80031f8 <HAL_DMA_Abort+0x234>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d04a      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <HAL_DMA_Abort+0x238>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d045      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <HAL_DMA_Abort+0x23c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d040      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_DMA_Abort+0x240>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d03b      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <HAL_DMA_Abort+0x244>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d036      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <HAL_DMA_Abort+0x248>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d031      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a27      	ldr	r2, [pc, #156]	; (8003210 <HAL_DMA_Abort+0x24c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d02c      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a25      	ldr	r2, [pc, #148]	; (8003214 <HAL_DMA_Abort+0x250>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d027      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a24      	ldr	r2, [pc, #144]	; (8003218 <HAL_DMA_Abort+0x254>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d022      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a22      	ldr	r2, [pc, #136]	; (800321c <HAL_DMA_Abort+0x258>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d01d      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_DMA_Abort+0x25c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d018      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_DMA_Abort+0x260>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_DMA_Abort+0x264>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00e      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_DMA_Abort+0x268>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d009      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_DMA_Abort+0x26c>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d004      	beq.n	80031d2 <HAL_DMA_Abort+0x20e>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <HAL_DMA_Abort+0x270>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d132      	bne.n	8003238 <HAL_DMA_Abort+0x274>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e031      	b.n	800323a <HAL_DMA_Abort+0x276>
 80031d6:	bf00      	nop
 80031d8:	40020010 	.word	0x40020010
 80031dc:	40020028 	.word	0x40020028
 80031e0:	40020040 	.word	0x40020040
 80031e4:	40020058 	.word	0x40020058
 80031e8:	40020070 	.word	0x40020070
 80031ec:	40020088 	.word	0x40020088
 80031f0:	400200a0 	.word	0x400200a0
 80031f4:	400200b8 	.word	0x400200b8
 80031f8:	40020410 	.word	0x40020410
 80031fc:	40020428 	.word	0x40020428
 8003200:	40020440 	.word	0x40020440
 8003204:	40020458 	.word	0x40020458
 8003208:	40020470 	.word	0x40020470
 800320c:	40020488 	.word	0x40020488
 8003210:	400204a0 	.word	0x400204a0
 8003214:	400204b8 	.word	0x400204b8
 8003218:	58025408 	.word	0x58025408
 800321c:	5802541c 	.word	0x5802541c
 8003220:	58025430 	.word	0x58025430
 8003224:	58025444 	.word	0x58025444
 8003228:	58025458 	.word	0x58025458
 800322c:	5802546c 	.word	0x5802546c
 8003230:	58025480 	.word	0x58025480
 8003234:	58025494 	.word	0x58025494
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800324c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6d      	ldr	r2, [pc, #436]	; (8003408 <HAL_DMA_Abort+0x444>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6b      	ldr	r2, [pc, #428]	; (800340c <HAL_DMA_Abort+0x448>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a6a      	ldr	r2, [pc, #424]	; (8003410 <HAL_DMA_Abort+0x44c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a68      	ldr	r2, [pc, #416]	; (8003414 <HAL_DMA_Abort+0x450>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a67      	ldr	r2, [pc, #412]	; (8003418 <HAL_DMA_Abort+0x454>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_DMA_Abort+0x458>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a64      	ldr	r2, [pc, #400]	; (8003420 <HAL_DMA_Abort+0x45c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a62      	ldr	r2, [pc, #392]	; (8003424 <HAL_DMA_Abort+0x460>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a61      	ldr	r2, [pc, #388]	; (8003428 <HAL_DMA_Abort+0x464>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a5f      	ldr	r2, [pc, #380]	; (800342c <HAL_DMA_Abort+0x468>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5e      	ldr	r2, [pc, #376]	; (8003430 <HAL_DMA_Abort+0x46c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a5c      	ldr	r2, [pc, #368]	; (8003434 <HAL_DMA_Abort+0x470>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a5b      	ldr	r2, [pc, #364]	; (8003438 <HAL_DMA_Abort+0x474>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a59      	ldr	r2, [pc, #356]	; (800343c <HAL_DMA_Abort+0x478>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a58      	ldr	r2, [pc, #352]	; (8003440 <HAL_DMA_Abort+0x47c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_Abort+0x32a>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a56      	ldr	r2, [pc, #344]	; (8003444 <HAL_DMA_Abort+0x480>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d108      	bne.n	8003300 <HAL_DMA_Abort+0x33c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e007      	b.n	8003310 <HAL_DMA_Abort+0x34c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0201 	bic.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003310:	e013      	b.n	800333a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003312:	f7ff fc9b 	bl	8002c4c <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b05      	cmp	r3, #5
 800331e:	d90c      	bls.n	800333a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2203      	movs	r2, #3
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e12d      	b.n	8003596 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2f      	ldr	r2, [pc, #188]	; (8003408 <HAL_DMA_Abort+0x444>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d04a      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a2d      	ldr	r2, [pc, #180]	; (800340c <HAL_DMA_Abort+0x448>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d045      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2c      	ldr	r2, [pc, #176]	; (8003410 <HAL_DMA_Abort+0x44c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d040      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <HAL_DMA_Abort+0x450>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d03b      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a29      	ldr	r2, [pc, #164]	; (8003418 <HAL_DMA_Abort+0x454>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d036      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <HAL_DMA_Abort+0x458>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a26      	ldr	r2, [pc, #152]	; (8003420 <HAL_DMA_Abort+0x45c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d02c      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a24      	ldr	r2, [pc, #144]	; (8003424 <HAL_DMA_Abort+0x460>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d027      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a23      	ldr	r2, [pc, #140]	; (8003428 <HAL_DMA_Abort+0x464>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a21      	ldr	r2, [pc, #132]	; (800342c <HAL_DMA_Abort+0x468>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a20      	ldr	r2, [pc, #128]	; (8003430 <HAL_DMA_Abort+0x46c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <HAL_DMA_Abort+0x470>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a1d      	ldr	r2, [pc, #116]	; (8003438 <HAL_DMA_Abort+0x474>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1b      	ldr	r2, [pc, #108]	; (800343c <HAL_DMA_Abort+0x478>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a1a      	ldr	r2, [pc, #104]	; (8003440 <HAL_DMA_Abort+0x47c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_DMA_Abort+0x422>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_DMA_Abort+0x480>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Abort+0x426>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <HAL_DMA_Abort+0x428>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d02b      	beq.n	8003448 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	223f      	movs	r2, #63	; 0x3f
 8003400:	409a      	lsls	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	e02a      	b.n	800345e <HAL_DMA_Abort+0x49a>
 8003408:	40020010 	.word	0x40020010
 800340c:	40020028 	.word	0x40020028
 8003410:	40020040 	.word	0x40020040
 8003414:	40020058 	.word	0x40020058
 8003418:	40020070 	.word	0x40020070
 800341c:	40020088 	.word	0x40020088
 8003420:	400200a0 	.word	0x400200a0
 8003424:	400200b8 	.word	0x400200b8
 8003428:	40020410 	.word	0x40020410
 800342c:	40020428 	.word	0x40020428
 8003430:	40020440 	.word	0x40020440
 8003434:	40020458 	.word	0x40020458
 8003438:	40020470 	.word	0x40020470
 800343c:	40020488 	.word	0x40020488
 8003440:	400204a0 	.word	0x400204a0
 8003444:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2201      	movs	r2, #1
 8003458:	409a      	lsls	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4f      	ldr	r2, [pc, #316]	; (80035a0 <HAL_DMA_Abort+0x5dc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d072      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4d      	ldr	r2, [pc, #308]	; (80035a4 <HAL_DMA_Abort+0x5e0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d06d      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4c      	ldr	r2, [pc, #304]	; (80035a8 <HAL_DMA_Abort+0x5e4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d068      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a4a      	ldr	r2, [pc, #296]	; (80035ac <HAL_DMA_Abort+0x5e8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d063      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a49      	ldr	r2, [pc, #292]	; (80035b0 <HAL_DMA_Abort+0x5ec>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d05e      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a47      	ldr	r2, [pc, #284]	; (80035b4 <HAL_DMA_Abort+0x5f0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d059      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a46      	ldr	r2, [pc, #280]	; (80035b8 <HAL_DMA_Abort+0x5f4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d054      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a44      	ldr	r2, [pc, #272]	; (80035bc <HAL_DMA_Abort+0x5f8>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d04f      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a43      	ldr	r2, [pc, #268]	; (80035c0 <HAL_DMA_Abort+0x5fc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a41      	ldr	r2, [pc, #260]	; (80035c4 <HAL_DMA_Abort+0x600>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a40      	ldr	r2, [pc, #256]	; (80035c8 <HAL_DMA_Abort+0x604>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3e      	ldr	r2, [pc, #248]	; (80035cc <HAL_DMA_Abort+0x608>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3d      	ldr	r2, [pc, #244]	; (80035d0 <HAL_DMA_Abort+0x60c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <HAL_DMA_Abort+0x610>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <HAL_DMA_Abort+0x614>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a38      	ldr	r2, [pc, #224]	; (80035dc <HAL_DMA_Abort+0x618>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a37      	ldr	r2, [pc, #220]	; (80035e0 <HAL_DMA_Abort+0x61c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a35      	ldr	r2, [pc, #212]	; (80035e4 <HAL_DMA_Abort+0x620>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <HAL_DMA_Abort+0x624>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a32      	ldr	r2, [pc, #200]	; (80035ec <HAL_DMA_Abort+0x628>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <HAL_DMA_Abort+0x62c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2f      	ldr	r2, [pc, #188]	; (80035f4 <HAL_DMA_Abort+0x630>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2e      	ldr	r2, [pc, #184]	; (80035f8 <HAL_DMA_Abort+0x634>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_Abort+0x58a>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <HAL_DMA_Abort+0x638>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_DMA_Abort+0x58e>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_DMA_Abort+0x590>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003560:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003578:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003582:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40020010 	.word	0x40020010
 80035a4:	40020028 	.word	0x40020028
 80035a8:	40020040 	.word	0x40020040
 80035ac:	40020058 	.word	0x40020058
 80035b0:	40020070 	.word	0x40020070
 80035b4:	40020088 	.word	0x40020088
 80035b8:	400200a0 	.word	0x400200a0
 80035bc:	400200b8 	.word	0x400200b8
 80035c0:	40020410 	.word	0x40020410
 80035c4:	40020428 	.word	0x40020428
 80035c8:	40020440 	.word	0x40020440
 80035cc:	40020458 	.word	0x40020458
 80035d0:	40020470 	.word	0x40020470
 80035d4:	40020488 	.word	0x40020488
 80035d8:	400204a0 	.word	0x400204a0
 80035dc:	400204b8 	.word	0x400204b8
 80035e0:	58025408 	.word	0x58025408
 80035e4:	5802541c 	.word	0x5802541c
 80035e8:	58025430 	.word	0x58025430
 80035ec:	58025444 	.word	0x58025444
 80035f0:	58025458 	.word	0x58025458
 80035f4:	5802546c 	.word	0x5802546c
 80035f8:	58025480 	.word	0x58025480
 80035fc:	58025494 	.word	0x58025494

08003600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e237      	b.n	8003a82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d004      	beq.n	8003628 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e22c      	b.n	8003a82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5c      	ldr	r2, [pc, #368]	; (80037a0 <HAL_DMA_Abort_IT+0x1a0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d04a      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5b      	ldr	r2, [pc, #364]	; (80037a4 <HAL_DMA_Abort_IT+0x1a4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d045      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a59      	ldr	r2, [pc, #356]	; (80037a8 <HAL_DMA_Abort_IT+0x1a8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d040      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_DMA_Abort_IT+0x1ac>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d03b      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a56      	ldr	r2, [pc, #344]	; (80037b0 <HAL_DMA_Abort_IT+0x1b0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d036      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a55      	ldr	r2, [pc, #340]	; (80037b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d031      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a53      	ldr	r2, [pc, #332]	; (80037b8 <HAL_DMA_Abort_IT+0x1b8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d02c      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_DMA_Abort_IT+0x1bc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d027      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a50      	ldr	r2, [pc, #320]	; (80037c0 <HAL_DMA_Abort_IT+0x1c0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a4f      	ldr	r2, [pc, #316]	; (80037c4 <HAL_DMA_Abort_IT+0x1c4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d01d      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a4d      	ldr	r2, [pc, #308]	; (80037c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a4c      	ldr	r2, [pc, #304]	; (80037cc <HAL_DMA_Abort_IT+0x1cc>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a4a      	ldr	r2, [pc, #296]	; (80037d0 <HAL_DMA_Abort_IT+0x1d0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a49      	ldr	r2, [pc, #292]	; (80037d4 <HAL_DMA_Abort_IT+0x1d4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <HAL_DMA_Abort_IT+0x1d8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_DMA_Abort_IT+0xc8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a46      	ldr	r2, [pc, #280]	; (80037dc <HAL_DMA_Abort_IT+0x1dc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_DMA_Abort_IT+0xcc>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_DMA_Abort_IT+0xce>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8086 	beq.w	80037e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2204      	movs	r2, #4
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2f      	ldr	r2, [pc, #188]	; (80037a0 <HAL_DMA_Abort_IT+0x1a0>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d04a      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2e      	ldr	r2, [pc, #184]	; (80037a4 <HAL_DMA_Abort_IT+0x1a4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d045      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <HAL_DMA_Abort_IT+0x1a8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d040      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <HAL_DMA_Abort_IT+0x1ac>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d03b      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <HAL_DMA_Abort_IT+0x1b0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d036      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a28      	ldr	r2, [pc, #160]	; (80037b4 <HAL_DMA_Abort_IT+0x1b4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d031      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <HAL_DMA_Abort_IT+0x1b8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d02c      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a25      	ldr	r2, [pc, #148]	; (80037bc <HAL_DMA_Abort_IT+0x1bc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d027      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a23      	ldr	r2, [pc, #140]	; (80037c0 <HAL_DMA_Abort_IT+0x1c0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <HAL_DMA_Abort_IT+0x1c4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d01d      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <HAL_DMA_Abort_IT+0x1c8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_DMA_Abort_IT+0x1cc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <HAL_DMA_Abort_IT+0x1d0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_DMA_Abort_IT+0x1d4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_DMA_Abort_IT+0x1d8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_DMA_Abort_IT+0x17c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a19      	ldr	r2, [pc, #100]	; (80037dc <HAL_DMA_Abort_IT+0x1dc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d108      	bne.n	800378e <HAL_DMA_Abort_IT+0x18e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e178      	b.n	8003a80 <HAL_DMA_Abort_IT+0x480>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e16f      	b.n	8003a80 <HAL_DMA_Abort_IT+0x480>
 80037a0:	40020010 	.word	0x40020010
 80037a4:	40020028 	.word	0x40020028
 80037a8:	40020040 	.word	0x40020040
 80037ac:	40020058 	.word	0x40020058
 80037b0:	40020070 	.word	0x40020070
 80037b4:	40020088 	.word	0x40020088
 80037b8:	400200a0 	.word	0x400200a0
 80037bc:	400200b8 	.word	0x400200b8
 80037c0:	40020410 	.word	0x40020410
 80037c4:	40020428 	.word	0x40020428
 80037c8:	40020440 	.word	0x40020440
 80037cc:	40020458 	.word	0x40020458
 80037d0:	40020470 	.word	0x40020470
 80037d4:	40020488 	.word	0x40020488
 80037d8:	400204a0 	.word	0x400204a0
 80037dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 020e 	bic.w	r2, r2, #14
 80037ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a6c      	ldr	r2, [pc, #432]	; (80039a8 <HAL_DMA_Abort_IT+0x3a8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d04a      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6b      	ldr	r2, [pc, #428]	; (80039ac <HAL_DMA_Abort_IT+0x3ac>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d045      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a69      	ldr	r2, [pc, #420]	; (80039b0 <HAL_DMA_Abort_IT+0x3b0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d040      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a68      	ldr	r2, [pc, #416]	; (80039b4 <HAL_DMA_Abort_IT+0x3b4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d03b      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a66      	ldr	r2, [pc, #408]	; (80039b8 <HAL_DMA_Abort_IT+0x3b8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d036      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a65      	ldr	r2, [pc, #404]	; (80039bc <HAL_DMA_Abort_IT+0x3bc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d031      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a63      	ldr	r2, [pc, #396]	; (80039c0 <HAL_DMA_Abort_IT+0x3c0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02c      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a62      	ldr	r2, [pc, #392]	; (80039c4 <HAL_DMA_Abort_IT+0x3c4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d027      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a60      	ldr	r2, [pc, #384]	; (80039c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d022      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a5f      	ldr	r2, [pc, #380]	; (80039cc <HAL_DMA_Abort_IT+0x3cc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d01d      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a5d      	ldr	r2, [pc, #372]	; (80039d0 <HAL_DMA_Abort_IT+0x3d0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d018      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a5c      	ldr	r2, [pc, #368]	; (80039d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a5a      	ldr	r2, [pc, #360]	; (80039d8 <HAL_DMA_Abort_IT+0x3d8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00e      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a59      	ldr	r2, [pc, #356]	; (80039dc <HAL_DMA_Abort_IT+0x3dc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_DMA_Abort_IT+0x290>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_DMA_Abort_IT+0x3e4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <HAL_DMA_Abort_IT+0x2a2>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	e007      	b.n	80038b2 <HAL_DMA_Abort_IT+0x2b2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a3c      	ldr	r2, [pc, #240]	; (80039a8 <HAL_DMA_Abort_IT+0x3a8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d072      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a3a      	ldr	r2, [pc, #232]	; (80039ac <HAL_DMA_Abort_IT+0x3ac>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d06d      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a39      	ldr	r2, [pc, #228]	; (80039b0 <HAL_DMA_Abort_IT+0x3b0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d068      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <HAL_DMA_Abort_IT+0x3b4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d063      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a36      	ldr	r2, [pc, #216]	; (80039b8 <HAL_DMA_Abort_IT+0x3b8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d05e      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_DMA_Abort_IT+0x3bc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d059      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a33      	ldr	r2, [pc, #204]	; (80039c0 <HAL_DMA_Abort_IT+0x3c0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d054      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <HAL_DMA_Abort_IT+0x3c4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d04f      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a30      	ldr	r2, [pc, #192]	; (80039c8 <HAL_DMA_Abort_IT+0x3c8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d04a      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2e      	ldr	r2, [pc, #184]	; (80039cc <HAL_DMA_Abort_IT+0x3cc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d045      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_DMA_Abort_IT+0x3d0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d040      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <HAL_DMA_Abort_IT+0x3d4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d03b      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2a      	ldr	r2, [pc, #168]	; (80039d8 <HAL_DMA_Abort_IT+0x3d8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d036      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a28      	ldr	r2, [pc, #160]	; (80039dc <HAL_DMA_Abort_IT+0x3dc>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d031      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a27      	ldr	r2, [pc, #156]	; (80039e0 <HAL_DMA_Abort_IT+0x3e0>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d02c      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a25      	ldr	r2, [pc, #148]	; (80039e4 <HAL_DMA_Abort_IT+0x3e4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d027      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <HAL_DMA_Abort_IT+0x3e8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d022      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <HAL_DMA_Abort_IT+0x3ec>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01d      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a21      	ldr	r2, [pc, #132]	; (80039f0 <HAL_DMA_Abort_IT+0x3f0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d018      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <HAL_DMA_Abort_IT+0x3f4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <HAL_DMA_Abort_IT+0x3f8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00e      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_DMA_Abort_IT+0x3fc>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d009      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1b      	ldr	r2, [pc, #108]	; (8003a00 <HAL_DMA_Abort_IT+0x400>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x3a2>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_DMA_Abort_IT+0x404>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d132      	bne.n	8003a08 <HAL_DMA_Abort_IT+0x408>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e031      	b.n	8003a0a <HAL_DMA_Abort_IT+0x40a>
 80039a6:	bf00      	nop
 80039a8:	40020010 	.word	0x40020010
 80039ac:	40020028 	.word	0x40020028
 80039b0:	40020040 	.word	0x40020040
 80039b4:	40020058 	.word	0x40020058
 80039b8:	40020070 	.word	0x40020070
 80039bc:	40020088 	.word	0x40020088
 80039c0:	400200a0 	.word	0x400200a0
 80039c4:	400200b8 	.word	0x400200b8
 80039c8:	40020410 	.word	0x40020410
 80039cc:	40020428 	.word	0x40020428
 80039d0:	40020440 	.word	0x40020440
 80039d4:	40020458 	.word	0x40020458
 80039d8:	40020470 	.word	0x40020470
 80039dc:	40020488 	.word	0x40020488
 80039e0:	400204a0 	.word	0x400204a0
 80039e4:	400204b8 	.word	0x400204b8
 80039e8:	58025408 	.word	0x58025408
 80039ec:	5802541c 	.word	0x5802541c
 80039f0:	58025430 	.word	0x58025430
 80039f4:	58025444 	.word	0x58025444
 80039f8:	58025458 	.word	0x58025458
 80039fc:	5802546c 	.word	0x5802546c
 8003a00:	58025480 	.word	0x58025480
 8003a04:	58025494 	.word	0x58025494
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d028      	beq.n	8003a60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop

08003a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b089      	sub	sp, #36	; 0x24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a9a:	4b86      	ldr	r3, [pc, #536]	; (8003cb4 <HAL_GPIO_Init+0x228>)
 8003a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a9e:	e18c      	b.n	8003dba <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 817e 	beq.w	8003db4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d005      	beq.n	8003ad0 <HAL_GPIO_Init+0x44>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d130      	bne.n	8003b32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b06:	2201      	movs	r2, #1
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f003 0201 	and.w	r2, r3, #1
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d017      	beq.n	8003b6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d123      	bne.n	8003bc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	08da      	lsrs	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	220f      	movs	r2, #15
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	08da      	lsrs	r2, r3, #3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	2203      	movs	r2, #3
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f003 0203 	and.w	r2, r3, #3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80d8 	beq.w	8003db4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c04:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <HAL_GPIO_Init+0x22c>)
 8003c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c0a:	4a2b      	ldr	r2, [pc, #172]	; (8003cb8 <HAL_GPIO_Init+0x22c>)
 8003c0c:	f043 0302 	orr.w	r3, r3, #2
 8003c10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_GPIO_Init+0x22c>)
 8003c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c22:	4a26      	ldr	r2, [pc, #152]	; (8003cbc <HAL_GPIO_Init+0x230>)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	220f      	movs	r2, #15
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a1d      	ldr	r2, [pc, #116]	; (8003cc0 <HAL_GPIO_Init+0x234>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d04a      	beq.n	8003ce4 <HAL_GPIO_Init+0x258>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_GPIO_Init+0x238>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02b      	beq.n	8003cae <HAL_GPIO_Init+0x222>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_GPIO_Init+0x23c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d025      	beq.n	8003caa <HAL_GPIO_Init+0x21e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <HAL_GPIO_Init+0x240>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01f      	beq.n	8003ca6 <HAL_GPIO_Init+0x21a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <HAL_GPIO_Init+0x244>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d019      	beq.n	8003ca2 <HAL_GPIO_Init+0x216>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_GPIO_Init+0x248>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_GPIO_Init+0x212>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <HAL_GPIO_Init+0x24c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00d      	beq.n	8003c9a <HAL_GPIO_Init+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a16      	ldr	r2, [pc, #88]	; (8003cdc <HAL_GPIO_Init+0x250>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d007      	beq.n	8003c96 <HAL_GPIO_Init+0x20a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a15      	ldr	r2, [pc, #84]	; (8003ce0 <HAL_GPIO_Init+0x254>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d101      	bne.n	8003c92 <HAL_GPIO_Init+0x206>
 8003c8e:	2309      	movs	r3, #9
 8003c90:	e029      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003c92:	230a      	movs	r3, #10
 8003c94:	e027      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003c96:	2307      	movs	r3, #7
 8003c98:	e025      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003c9a:	2306      	movs	r3, #6
 8003c9c:	e023      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003c9e:	2305      	movs	r3, #5
 8003ca0:	e021      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	e01f      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e01d      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e01b      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e019      	b.n	8003ce6 <HAL_GPIO_Init+0x25a>
 8003cb2:	bf00      	nop
 8003cb4:	58000080 	.word	0x58000080
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	58000400 	.word	0x58000400
 8003cc0:	58020000 	.word	0x58020000
 8003cc4:	58020400 	.word	0x58020400
 8003cc8:	58020800 	.word	0x58020800
 8003ccc:	58020c00 	.word	0x58020c00
 8003cd0:	58021000 	.word	0x58021000
 8003cd4:	58021400 	.word	0x58021400
 8003cd8:	58021800 	.word	0x58021800
 8003cdc:	58021c00 	.word	0x58021c00
 8003ce0:	58022400 	.word	0x58022400
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	f002 0203 	and.w	r2, r2, #3
 8003cec:	0092      	lsls	r2, r2, #2
 8003cee:	4093      	lsls	r3, r2
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf6:	4938      	ldr	r1, [pc, #224]	; (8003dd8 <HAL_GPIO_Init+0x34c>)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	089b      	lsrs	r3, r3, #2
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f47f ae6b 	bne.w	8003aa0 <HAL_GPIO_Init+0x14>
  }
}
 8003dca:	bf00      	nop
 8003dcc:	bf00      	nop
 8003dce:	3724      	adds	r7, #36	; 0x24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	58000400 	.word	0x58000400

08003ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
 8003de8:	4613      	mov	r3, r2
 8003dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dec:	787b      	ldrb	r3, [r7, #1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003df8:	e003      	b.n	8003e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	619a      	str	r2, [r3, #24]
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e20:	887a      	ldrh	r2, [r7, #2]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	041a      	lsls	r2, r3, #16
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43d9      	mvns	r1, r3
 8003e2c:	887b      	ldrh	r3, [r7, #2]
 8003e2e:	400b      	ands	r3, r1
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	619a      	str	r2, [r3, #24]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	4603      	mov	r3, r0
 8003e4a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e54:	88fb      	ldrh	r3, [r7, #6]
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e60:	88fb      	ldrh	r3, [r7, #6]
 8003e62:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fd fe8b 	bl	8001b84 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
	...

08003e78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d001      	beq.n	8003e9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e01f      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e01d      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	490f      	ldr	r1, [pc, #60]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003eb2:	f7fe fecb 	bl	8002c4c <HAL_GetTick>
 8003eb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003eb8:	e009      	b.n	8003ece <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003eba:	f7fe fec7 	bl	8002c4c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ec8:	d901      	bls.n	8003ece <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e007      	b.n	8003ede <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_PWREx_ConfigSupply+0x70>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eda:	d1ee      	bne.n	8003eba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58024800 	.word	0x58024800

08003eec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	; 0x30
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e39d      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8087 	beq.w	800401a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0c:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f16:	4b86      	ldr	r3, [pc, #536]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d007      	beq.n	8003f32 <HAL_RCC_OscConfig+0x46>
 8003f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f24:	2b18      	cmp	r3, #24
 8003f26:	d110      	bne.n	8003f4a <HAL_RCC_OscConfig+0x5e>
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d10b      	bne.n	8003f4a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f32:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d06c      	beq.n	8004018 <HAL_RCC_OscConfig+0x12c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d168      	bne.n	8004018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e377      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d106      	bne.n	8003f62 <HAL_RCC_OscConfig+0x76>
 8003f54:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a75      	ldr	r2, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	e02e      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd4>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x98>
 8003f6a:	4b71      	ldr	r3, [pc, #452]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a70      	ldr	r2, [pc, #448]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6d      	ldr	r2, [pc, #436]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e01d      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd4>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8c:	d10c      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xbc>
 8003f8e:	4b68      	ldr	r3, [pc, #416]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a67      	ldr	r2, [pc, #412]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b65      	ldr	r3, [pc, #404]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a64      	ldr	r2, [pc, #400]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e00b      	b.n	8003fc0 <HAL_RCC_OscConfig+0xd4>
 8003fa8:	4b61      	ldr	r3, [pc, #388]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a60      	ldr	r2, [pc, #384]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5d      	ldr	r2, [pc, #372]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d013      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fe40 	bl	8002c4c <HAL_GetTick>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fe fe3c 	bl	8002c4c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e32b      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0xe4>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fe fe2c 	bl	8002c4c <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fe fe28 	bl	8002c4c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e317      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x10c>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 808c 	beq.w	8004140 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004028:	4b41      	ldr	r3, [pc, #260]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004030:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004032:	4b3f      	ldr	r3, [pc, #252]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_RCC_OscConfig+0x162>
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	2b18      	cmp	r3, #24
 8004042:	d137      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1c8>
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d132      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x17a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e2e9      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f023 0219 	bic.w	r2, r3, #25
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	492f      	ldr	r1, [pc, #188]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004074:	4313      	orrs	r3, r2
 8004076:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004078:	f7fe fde8 	bl	8002c4c <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004080:	f7fe fde4 	bl	8002c4c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e2d3      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004092:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	4920      	ldr	r1, [pc, #128]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b2:	e045      	b.n	8004140 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d026      	beq.n	800410a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f023 0219 	bic.w	r2, r3, #25
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4919      	ldr	r1, [pc, #100]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ce:	f7fe fdbd 	bl	8002c4c <HAL_GetTick>
 80040d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d6:	f7fe fdb9 	bl	8002c4c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e2a8      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	490b      	ldr	r1, [pc, #44]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
 8004108:	e01a      	b.n	8004140 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <HAL_RCC_OscConfig+0x244>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fe fd99 	bl	8002c4c <HAL_GetTick>
 800411a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411e:	f7fe fd95 	bl	8002c4c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d903      	bls.n	8004134 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e284      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
 8004130:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004134:	4b96      	ldr	r3, [pc, #600]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ee      	bne.n	800411e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d06a      	beq.n	8004222 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414c:	4b90      	ldr	r3, [pc, #576]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004154:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004156:	4b8e      	ldr	r3, [pc, #568]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b08      	cmp	r3, #8
 8004160:	d007      	beq.n	8004172 <HAL_RCC_OscConfig+0x286>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b18      	cmp	r3, #24
 8004166:	d11b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x2b4>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d116      	bne.n	80041a0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004172:	4b87      	ldr	r3, [pc, #540]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x29e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d001      	beq.n	800418a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e257      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800418a:	4b81      	ldr	r3, [pc, #516]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	061b      	lsls	r3, r3, #24
 8004198:	497d      	ldr	r1, [pc, #500]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800419e:	e040      	b.n	8004222 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d023      	beq.n	80041f0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80041a8:	4b79      	ldr	r3, [pc, #484]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a78      	ldr	r2, [pc, #480]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fe fd4a 	bl	8002c4c <HAL_GetTick>
 80041b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80041bc:	f7fe fd46 	bl	8002c4c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e235      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041ce:	4b70      	ldr	r3, [pc, #448]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80041da:	4b6d      	ldr	r3, [pc, #436]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	061b      	lsls	r3, r3, #24
 80041e8:	4969      	ldr	r1, [pc, #420]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60cb      	str	r3, [r1, #12]
 80041ee:	e018      	b.n	8004222 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80041f0:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a66      	ldr	r2, [pc, #408]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80041f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fe fd26 	bl	8002c4c <HAL_GetTick>
 8004200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004204:	f7fe fd22 	bl	8002c4c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e211      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004216:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d036      	beq.n	800429c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d019      	beq.n	800426a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004236:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423a:	4a55      	ldr	r2, [pc, #340]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004242:	f7fe fd03 	bl	8002c4c <HAL_GetTick>
 8004246:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004248:	e008      	b.n	800425c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800424a:	f7fe fcff 	bl	8002c4c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e1ee      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800425c:	4b4c      	ldr	r3, [pc, #304]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800425e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f0      	beq.n	800424a <HAL_RCC_OscConfig+0x35e>
 8004268:	e018      	b.n	800429c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426e:	4a48      	ldr	r2, [pc, #288]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fe fce9 	bl	8002c4c <HAL_GetTick>
 800427a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800427e:	f7fe fce5 	bl	8002c4c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1d4      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004290:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d036      	beq.n	8004316 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d019      	beq.n	80042e4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a36      	ldr	r2, [pc, #216]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042bc:	f7fe fcc6 	bl	8002c4c <HAL_GetTick>
 80042c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042c4:	f7fe fcc2 	bl	8002c4c <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1b1      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80042d6:	4b2e      	ldr	r3, [pc, #184]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0x3d8>
 80042e2:	e018      	b.n	8004316 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a29      	ldr	r2, [pc, #164]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 80042ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80042f0:	f7fe fcac 	bl	8002c4c <HAL_GetTick>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80042f8:	f7fe fca8 	bl	8002c4c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e197      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8086 	beq.w	8004430 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <HAL_RCC_OscConfig+0x4a8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1a      	ldr	r2, [pc, #104]	; (8004394 <HAL_RCC_OscConfig+0x4a8>)
 800432a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004330:	f7fe fc8c 	bl	8002c4c <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004338:	f7fe fc88 	bl	8002c4c <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e177      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_RCC_OscConfig+0x4a8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <HAL_RCC_OscConfig+0x480>
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	6713      	str	r3, [r2, #112]	; 0x70
 800436a:	e032      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d111      	bne.n	8004398 <HAL_RCC_OscConfig+0x4ac>
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a05      	ldr	r2, [pc, #20]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	4b03      	ldr	r3, [pc, #12]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a02      	ldr	r2, [pc, #8]	; (8004390 <HAL_RCC_OscConfig+0x4a4>)
 8004386:	f023 0304 	bic.w	r3, r3, #4
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e021      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e6>
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
 8004394:	58024800 	.word	0x58024800
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d10c      	bne.n	80043ba <HAL_RCC_OscConfig+0x4ce>
 80043a0:	4b83      	ldr	r3, [pc, #524]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	4a82      	ldr	r2, [pc, #520]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043a6:	f043 0304 	orr.w	r3, r3, #4
 80043aa:	6713      	str	r3, [r2, #112]	; 0x70
 80043ac:	4b80      	ldr	r3, [pc, #512]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a7f      	ldr	r2, [pc, #508]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	e00b      	b.n	80043d2 <HAL_RCC_OscConfig+0x4e6>
 80043ba:	4b7d      	ldr	r3, [pc, #500]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a7c      	ldr	r2, [pc, #496]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	4b7a      	ldr	r3, [pc, #488]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a79      	ldr	r2, [pc, #484]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d015      	beq.n	8004406 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fe fc37 	bl	8002c4c <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe fc33 	bl	8002c4c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e120      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043f8:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ee      	beq.n	80043e2 <HAL_RCC_OscConfig+0x4f6>
 8004404:	e014      	b.n	8004430 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fe fc21 	bl	8002c4c <HAL_GetTick>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800440c:	e00a      	b.n	8004424 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fe fc1d 	bl	8002c4c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e10a      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004424:	4b62      	ldr	r3, [pc, #392]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ee      	bne.n	800440e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80ff 	beq.w	8004638 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800443a:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004442:	2b18      	cmp	r3, #24
 8004444:	f000 80ba 	beq.w	80045bc <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2b02      	cmp	r3, #2
 800444e:	f040 8095 	bne.w	800457c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b57      	ldr	r3, [pc, #348]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a56      	ldr	r2, [pc, #344]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fe fbf5 	bl	8002c4c <HAL_GetTick>
 8004462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004466:	f7fe fbf1 	bl	8002c4c <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e0e0      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004478:	4b4d      	ldr	r3, [pc, #308]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004484:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004488:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x6c8>)
 800448a:	4013      	ands	r3, r2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004494:	0112      	lsls	r2, r2, #4
 8004496:	430a      	orrs	r2, r1
 8004498:	4945      	ldr	r1, [pc, #276]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	628b      	str	r3, [r1, #40]	; 0x28
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	3b01      	subs	r3, #1
 80044a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	3b01      	subs	r3, #1
 80044ae:	025b      	lsls	r3, r3, #9
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	3b01      	subs	r3, #1
 80044ba:	041b      	lsls	r3, r3, #16
 80044bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c6:	3b01      	subs	r3, #1
 80044c8:	061b      	lsls	r3, r3, #24
 80044ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044ce:	4938      	ldr	r1, [pc, #224]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a35      	ldr	r2, [pc, #212]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044e0:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044e4:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_RCC_OscConfig+0x6cc>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044ec:	00d2      	lsls	r2, r2, #3
 80044ee:	4930      	ldr	r1, [pc, #192]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	f023 020c 	bic.w	r2, r3, #12
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	492b      	ldr	r1, [pc, #172]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450a:	f023 0202 	bic.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	4927      	ldr	r1, [pc, #156]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004514:	4313      	orrs	r3, r2
 8004516:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004524:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	4a1e      	ldr	r2, [pc, #120]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800453a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800453c:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	4a1b      	ldr	r2, [pc, #108]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004548:	4b19      	ldr	r3, [pc, #100]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a18      	ldr	r2, [pc, #96]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004554:	f7fe fb7a 	bl	8002c4c <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fe fb76 	bl	8002c4c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e065      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800456e:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x670>
 800457a:	e05d      	b.n	8004638 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457c:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 8004582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fe fb60 	bl	8002c4c <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004590:	f7fe fb5c 	bl	8002c4c <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e04b      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80045a2:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x6c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x6a4>
 80045ae:	e043      	b.n	8004638 <HAL_RCC_OscConfig+0x74c>
 80045b0:	58024400 	.word	0x58024400
 80045b4:	fffffc0c 	.word	0xfffffc0c
 80045b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80045bc:	4b21      	ldr	r3, [pc, #132]	; (8004644 <HAL_RCC_OscConfig+0x758>)
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80045c2:	4b20      	ldr	r3, [pc, #128]	; (8004644 <HAL_RCC_OscConfig+0x758>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d031      	beq.n	8004634 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f003 0203 	and.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d12a      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d122      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d11a      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	0a5b      	lsrs	r3, r3, #9
 8004602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d111      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d108      	bne.n	8004634 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	0e1b      	lsrs	r3, r3, #24
 8004626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3730      	adds	r7, #48	; 0x30
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	58024400 	.word	0x58024400

08004648 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e19c      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800465c:	4b8a      	ldr	r3, [pc, #552]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d910      	bls.n	800468c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b87      	ldr	r3, [pc, #540]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 020f 	bic.w	r2, r3, #15
 8004672:	4985      	ldr	r1, [pc, #532]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467a:	4b83      	ldr	r3, [pc, #524]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e184      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d010      	beq.n	80046ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	4b7b      	ldr	r3, [pc, #492]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d908      	bls.n	80046ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046a8:	4b78      	ldr	r3, [pc, #480]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	4975      	ldr	r1, [pc, #468]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d010      	beq.n	80046e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d908      	bls.n	80046e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046d6:	4b6d      	ldr	r3, [pc, #436]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	496a      	ldr	r1, [pc, #424]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d010      	beq.n	8004716 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	4b64      	ldr	r3, [pc, #400]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004700:	429a      	cmp	r2, r3
 8004702:	d908      	bls.n	8004716 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004704:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	495e      	ldr	r1, [pc, #376]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004712:	4313      	orrs	r3, r2
 8004714:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d010      	beq.n	8004744 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	4b59      	ldr	r3, [pc, #356]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800472e:	429a      	cmp	r2, r3
 8004730:	d908      	bls.n	8004744 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004732:	4b56      	ldr	r3, [pc, #344]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	4953      	ldr	r1, [pc, #332]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004740:	4313      	orrs	r3, r2
 8004742:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d010      	beq.n	8004772 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	4b4d      	ldr	r3, [pc, #308]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	429a      	cmp	r2, r3
 800475e:	d908      	bls.n	8004772 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004760:	4b4a      	ldr	r3, [pc, #296]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	f023 020f 	bic.w	r2, r3, #15
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4947      	ldr	r1, [pc, #284]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 800476e:	4313      	orrs	r3, r2
 8004770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d055      	beq.n	800482a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800477e:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4940      	ldr	r1, [pc, #256]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 800478c:	4313      	orrs	r3, r2
 800478e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004798:	4b3c      	ldr	r3, [pc, #240]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d121      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0f6      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d107      	bne.n	80047c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047b0:	4b36      	ldr	r3, [pc, #216]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d115      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0ea      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047c8:	4b30      	ldr	r3, [pc, #192]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e0de      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047d8:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0d6      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f023 0207 	bic.w	r2, r3, #7
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4925      	ldr	r1, [pc, #148]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fe fa27 	bl	8002c4c <HAL_GetTick>
 80047fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004800:	e00a      	b.n	8004818 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004802:	f7fe fa23 	bl	8002c4c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e0be      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004818:	4b1c      	ldr	r3, [pc, #112]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	429a      	cmp	r2, r3
 8004828:	d1eb      	bne.n	8004802 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	429a      	cmp	r2, r3
 8004844:	d208      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f023 020f 	bic.w	r2, r3, #15
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	490e      	ldr	r1, [pc, #56]	; (800488c <HAL_RCC_ClockConfig+0x244>)
 8004854:	4313      	orrs	r3, r2
 8004856:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d214      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 020f 	bic.w	r2, r3, #15
 800486e:	4906      	ldr	r1, [pc, #24]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b04      	ldr	r3, [pc, #16]	; (8004888 <HAL_RCC_ClockConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e086      	b.n	8004996 <HAL_RCC_ClockConfig+0x34e>
 8004888:	52002000 	.word	0x52002000
 800488c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d010      	beq.n	80048be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d208      	bcs.n	80048be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80048ac:	4b3c      	ldr	r3, [pc, #240]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	4939      	ldr	r1, [pc, #228]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d010      	beq.n	80048ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	4b34      	ldr	r3, [pc, #208]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d208      	bcs.n	80048ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	492e      	ldr	r1, [pc, #184]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d010      	beq.n	800491a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	4b28      	ldr	r3, [pc, #160]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 80048fe:	69db      	ldr	r3, [r3, #28]
 8004900:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004904:	429a      	cmp	r2, r3
 8004906:	d208      	bcs.n	800491a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	4922      	ldr	r1, [pc, #136]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 8004916:	4313      	orrs	r3, r2
 8004918:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d010      	beq.n	8004948 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69da      	ldr	r2, [r3, #28]
 800492a:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004932:	429a      	cmp	r2, r3
 8004934:	d208      	bcs.n	8004948 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	4917      	ldr	r1, [pc, #92]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 8004944:	4313      	orrs	r3, r2
 8004946:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004948:	f000 f834 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 800494c:	4602      	mov	r2, r0
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	4912      	ldr	r1, [pc, #72]	; (80049a4 <HAL_RCC_ClockConfig+0x35c>)
 800495a:	5ccb      	ldrb	r3, [r1, r3]
 800495c:	f003 031f 	and.w	r3, r3, #31
 8004960:	fa22 f303 	lsr.w	r3, r2, r3
 8004964:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <HAL_RCC_ClockConfig+0x358>)
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	4a0d      	ldr	r2, [pc, #52]	; (80049a4 <HAL_RCC_ClockConfig+0x35c>)
 8004970:	5cd3      	ldrb	r3, [r2, r3]
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <HAL_RCC_ClockConfig+0x360>)
 800497e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <HAL_RCC_ClockConfig+0x364>)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004986:	4b0a      	ldr	r3, [pc, #40]	; (80049b0 <HAL_RCC_ClockConfig+0x368>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe f914 	bl	8002bb8 <HAL_InitTick>
 8004990:	4603      	mov	r3, r0
 8004992:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	58024400 	.word	0x58024400
 80049a4:	0800f2c8 	.word	0x0800f2c8
 80049a8:	24000bc8 	.word	0x24000bc8
 80049ac:	24000bc4 	.word	0x24000bc4
 80049b0:	24000bcc 	.word	0x24000bcc

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049ba:	4bb3      	ldr	r3, [pc, #716]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049c2:	2b18      	cmp	r3, #24
 80049c4:	f200 8155 	bhi.w	8004c72 <HAL_RCC_GetSysClockFreq+0x2be>
 80049c8:	a201      	add	r2, pc, #4	; (adr r2, 80049d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	08004a35 	.word	0x08004a35
 80049d4:	08004c73 	.word	0x08004c73
 80049d8:	08004c73 	.word	0x08004c73
 80049dc:	08004c73 	.word	0x08004c73
 80049e0:	08004c73 	.word	0x08004c73
 80049e4:	08004c73 	.word	0x08004c73
 80049e8:	08004c73 	.word	0x08004c73
 80049ec:	08004c73 	.word	0x08004c73
 80049f0:	08004a5b 	.word	0x08004a5b
 80049f4:	08004c73 	.word	0x08004c73
 80049f8:	08004c73 	.word	0x08004c73
 80049fc:	08004c73 	.word	0x08004c73
 8004a00:	08004c73 	.word	0x08004c73
 8004a04:	08004c73 	.word	0x08004c73
 8004a08:	08004c73 	.word	0x08004c73
 8004a0c:	08004c73 	.word	0x08004c73
 8004a10:	08004a61 	.word	0x08004a61
 8004a14:	08004c73 	.word	0x08004c73
 8004a18:	08004c73 	.word	0x08004c73
 8004a1c:	08004c73 	.word	0x08004c73
 8004a20:	08004c73 	.word	0x08004c73
 8004a24:	08004c73 	.word	0x08004c73
 8004a28:	08004c73 	.word	0x08004c73
 8004a2c:	08004c73 	.word	0x08004c73
 8004a30:	08004a67 	.word	0x08004a67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a34:	4b94      	ldr	r3, [pc, #592]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a40:	4b91      	ldr	r3, [pc, #580]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	08db      	lsrs	r3, r3, #3
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	4a90      	ldr	r2, [pc, #576]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004a52:	e111      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004a54:	4b8d      	ldr	r3, [pc, #564]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a56:	61bb      	str	r3, [r7, #24]
    break;
 8004a58:	e10e      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004a5a:	4b8d      	ldr	r3, [pc, #564]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a5c:	61bb      	str	r3, [r7, #24]
    break;
 8004a5e:	e10b      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004a60:	4b8c      	ldr	r3, [pc, #560]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004a62:	61bb      	str	r3, [r7, #24]
    break;
 8004a64:	e108      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a66:	4b88      	ldr	r3, [pc, #544]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004a70:	4b85      	ldr	r3, [pc, #532]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004a7c:	4b82      	ldr	r3, [pc, #520]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004a86:	4b80      	ldr	r3, [pc, #512]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	08db      	lsrs	r3, r3, #3
 8004a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 80e1 	beq.w	8004c6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	f000 8083 	beq.w	8004bb8 <HAL_RCC_GetSysClockFreq+0x204>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f200 80a1 	bhi.w	8004bfc <HAL_RCC_GetSysClockFreq+0x248>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x114>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d056      	beq.n	8004b74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ac6:	e099      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ac8:	4b6f      	ldr	r3, [pc, #444]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0320 	and.w	r3, r3, #32
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d02d      	beq.n	8004b30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ad4:	4b6c      	ldr	r3, [pc, #432]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	08db      	lsrs	r3, r3, #3
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	4a6b      	ldr	r2, [pc, #428]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004afe:	4b62      	ldr	r3, [pc, #392]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004b2e:	e087      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004c9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b51      	ldr	r3, [pc, #324]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b72:	e065      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004ca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b40      	ldr	r3, [pc, #256]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	e043      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004ca4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b2f      	ldr	r3, [pc, #188]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfa:	e021      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004ca0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b1e      	ldr	r3, [pc, #120]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004c98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	0a5b      	lsrs	r3, r3, #9
 8004c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c64:	ee17 3a90 	vmov	r3, s15
 8004c68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004c6a:	e005      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61bb      	str	r3, [r7, #24]
    break;
 8004c70:	e002      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004c72:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004c74:	61bb      	str	r3, [r7, #24]
    break;
 8004c76:	bf00      	nop
  }

  return sysclockfreq;
 8004c78:	69bb      	ldr	r3, [r7, #24]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	; 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	03d09000 	.word	0x03d09000
 8004c90:	003d0900 	.word	0x003d0900
 8004c94:	017d7840 	.word	0x017d7840
 8004c98:	46000000 	.word	0x46000000
 8004c9c:	4c742400 	.word	0x4c742400
 8004ca0:	4a742400 	.word	0x4a742400
 8004ca4:	4bbebc20 	.word	0x4bbebc20

08004ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004cae:	f7ff fe81 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	490f      	ldr	r1, [pc, #60]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8004cc0:	5ccb      	ldrb	r3, [r1, r3]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x54>)
 8004cd6:	5cd3      	ldrb	r3, [r2, r3]
 8004cd8:	f003 031f 	and.w	r3, r3, #31
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce2:	4a07      	ldr	r2, [pc, #28]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ce4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_RCC_GetHCLKFreq+0x58>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	0800f2c8 	.word	0x0800f2c8
 8004d00:	24000bc8 	.word	0x24000bc8
 8004d04:	24000bc4 	.word	0x24000bc4

08004d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004d0c:	f7ff ffcc 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	4904      	ldr	r1, [pc, #16]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d1e:	5ccb      	ldrb	r3, [r1, r3]
 8004d20:	f003 031f 	and.w	r3, r3, #31
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	0800f2c8 	.word	0x0800f2c8

08004d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004d38:	f7ff ffb6 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	0a1b      	lsrs	r3, r3, #8
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4904      	ldr	r1, [pc, #16]	; (8004d5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d4a:	5ccb      	ldrb	r3, [r1, r3]
 8004d4c:	f003 031f 	and.w	r3, r3, #31
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	0800f2c8 	.word	0x0800f2c8

08004d60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d03f      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d84:	d02a      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d8a:	d824      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d90:	d018      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d96:	d81e      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da0:	d007      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004da2:	e018      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da4:	4ba4      	ldr	r3, [pc, #656]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	4aa3      	ldr	r2, [pc, #652]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004db0:	e015      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2102      	movs	r1, #2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f989 	bl	80060d0 <RCCEx_PLL2_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004dc2:	e00c      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3324      	adds	r3, #36	; 0x24
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 fa32 	bl	8006234 <RCCEx_PLL3_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dda:	e000      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d109      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004de4:	4b94      	ldr	r3, [pc, #592]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	4991      	ldr	r1, [pc, #580]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	650b      	str	r3, [r1, #80]	; 0x50
 8004df6:	e001      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
 8004dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d03d      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d826      	bhi.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004e10:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e16:	bf00      	nop
 8004e18:	08004e2d 	.word	0x08004e2d
 8004e1c:	08004e3b 	.word	0x08004e3b
 8004e20:	08004e4d 	.word	0x08004e4d
 8004e24:	08004e65 	.word	0x08004e65
 8004e28:	08004e65 	.word	0x08004e65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2c:	4b82      	ldr	r3, [pc, #520]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	4a81      	ldr	r2, [pc, #516]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e38:	e015      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	2100      	movs	r1, #0
 8004e40:	4618      	mov	r0, r3
 8004e42:	f001 f945 	bl	80060d0 <RCCEx_PLL2_Config>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e4a:	e00c      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3324      	adds	r3, #36	; 0x24
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 f9ee 	bl	8006234 <RCCEx_PLL3_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e5c:	e003      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	75fb      	strb	r3, [r7, #23]
      break;
 8004e62:	e000      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004e64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e6c:	4b72      	ldr	r3, [pc, #456]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e70:	f023 0207 	bic.w	r2, r3, #7
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	496f      	ldr	r1, [pc, #444]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	650b      	str	r3, [r1, #80]	; 0x50
 8004e7e:	e001      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	7dfb      	ldrb	r3, [r7, #23]
 8004e82:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d051      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e96:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004e9a:	d036      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e9c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004ea0:	d830      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ea2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ea6:	d032      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004ea8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eac:	d82a      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004eae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004eb2:	d02e      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004eb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004eb8:	d824      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ebe:	d018      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec4:	d81e      	bhi.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8004eca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ece:	d007      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004ed0:	e018      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed2:	4b59      	ldr	r3, [pc, #356]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	4a58      	ldr	r2, [pc, #352]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004edc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ede:	e019      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f8f2 	bl	80060d0 <RCCEx_PLL2_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ef0:	e010      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3324      	adds	r3, #36	; 0x24
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f001 f99b 	bl	8006234 <RCCEx_PLL3_Config>
 8004efe:	4603      	mov	r3, r0
 8004f00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f02:	e007      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	75fb      	strb	r3, [r7, #23]
      break;
 8004f08:	e004      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f1a:	4b47      	ldr	r3, [pc, #284]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f28:	4943      	ldr	r1, [pc, #268]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	658b      	str	r3, [r1, #88]	; 0x58
 8004f2e:	e001      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d051      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004f4a:	d036      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004f4c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004f50:	d830      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f56:	d032      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f5c:	d82a      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f62:	d02e      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8004f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f68:	d824      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f6e:	d018      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f74:	d81e      	bhi.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004f7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f7e:	d007      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004f80:	e018      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f82:	4b2d      	ldr	r3, [pc, #180]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f86:	4a2c      	ldr	r2, [pc, #176]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e019      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 f89a 	bl	80060d0 <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004fa0:	e010      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3324      	adds	r3, #36	; 0x24
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 f943 	bl	8006234 <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004fb2:	e007      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb8:	e004      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8004fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fd8:	4917      	ldr	r1, [pc, #92]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	658b      	str	r3, [r1, #88]	; 0x58
 8004fde:	e001      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
 8004fe2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d035      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff4:	2b30      	cmp	r3, #48	; 0x30
 8004ff6:	d01c      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ff8:	2b30      	cmp	r3, #48	; 0x30
 8004ffa:	d817      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d00c      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8005000:	2b20      	cmp	r3, #32
 8005002:	d813      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d019      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8005008:	2b10      	cmp	r3, #16
 800500a:	d10f      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a09      	ldr	r2, [pc, #36]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005018:	e011      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3304      	adds	r3, #4
 800501e:	2102      	movs	r1, #2
 8005020:	4618      	mov	r0, r3
 8005022:	f001 f855 	bl	80060d0 <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800502a:	e008      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
      break;
 8005030:	e005      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8005032:	bf00      	nop
 8005034:	e003      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400
      break;
 800503c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503e:	7dfb      	ldrb	r3, [r7, #23]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005044:	4ba3      	ldr	r3, [pc, #652]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005048:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005050:	49a0      	ldr	r1, [pc, #640]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005052:	4313      	orrs	r3, r2
 8005054:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005056:	e001      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d047      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005070:	d030      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8005072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005076:	d82a      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005078:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800507c:	d02c      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800507e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005082:	d824      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005088:	d018      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508e:	d81e      	bhi.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005098:	d007      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800509a:	e018      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509c:	4b8d      	ldr	r3, [pc, #564]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a8c      	ldr	r2, [pc, #560]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050a8:	e017      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2100      	movs	r1, #0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 f80d 	bl	80060d0 <RCCEx_PLL2_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050ba:	e00e      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3324      	adds	r3, #36	; 0x24
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 f8b6 	bl	8006234 <RCCEx_PLL3_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80050cc:	e005      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
      break;
 80050d2:	e002      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80050d4:	bf00      	nop
 80050d6:	e000      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80050d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050da:	7dfb      	ldrb	r3, [r7, #23]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050e0:	4b7c      	ldr	r3, [pc, #496]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	4979      	ldr	r1, [pc, #484]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	650b      	str	r3, [r1, #80]	; 0x50
 80050f2:	e001      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
 80050f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d049      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800510c:	d02e      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800510e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005112:	d828      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005118:	d02a      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800511a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800511e:	d822      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005120:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005124:	d026      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005126:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800512a:	d81c      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800512c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005130:	d010      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8005132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005136:	d816      	bhi.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01d      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d111      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2101      	movs	r1, #1
 8005148:	4618      	mov	r0, r3
 800514a:	f000 ffc1 	bl	80060d0 <RCCEx_PLL2_Config>
 800514e:	4603      	mov	r3, r0
 8005150:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005152:	e012      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3324      	adds	r3, #36	; 0x24
 8005158:	2101      	movs	r1, #1
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f86a 	bl	8006234 <RCCEx_PLL3_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005164:	e009      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
      break;
 800516a:	e006      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800516c:	bf00      	nop
 800516e:	e004      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005170:	bf00      	nop
 8005172:	e002      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005178:	bf00      	nop
    }

    if(ret == HAL_OK)
 800517a:	7dfb      	ldrb	r3, [r7, #23]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005180:	4b54      	ldr	r3, [pc, #336]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	4951      	ldr	r1, [pc, #324]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800518e:	4313      	orrs	r3, r2
 8005190:	650b      	str	r3, [r1, #80]	; 0x50
 8005192:	e001      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d04b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ae:	d02e      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80051b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b4:	d828      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d02a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d822      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80051c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051c6:	d026      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80051c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051cc:	d81c      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80051ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d2:	d010      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d8:	d816      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01d      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80051de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e2:	d111      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3304      	adds	r3, #4
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 ff70 	bl	80060d0 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80051f4:	e012      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	3324      	adds	r3, #36	; 0x24
 80051fa:	2101      	movs	r1, #1
 80051fc:	4618      	mov	r0, r3
 80051fe:	f001 f819 	bl	8006234 <RCCEx_PLL3_Config>
 8005202:	4603      	mov	r3, r0
 8005204:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005206:	e009      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
      break;
 800520c:	e006      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800520e:	bf00      	nop
 8005210:	e004      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005212:	bf00      	nop
 8005214:	e002      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800521a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005222:	4b2c      	ldr	r3, [pc, #176]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005226:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005230:	4928      	ldr	r1, [pc, #160]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005232:	4313      	orrs	r3, r2
 8005234:	658b      	str	r3, [r1, #88]	; 0x58
 8005236:	e001      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d02f      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800524c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005250:	d00e      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005256:	d814      	bhi.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d015      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800525c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005260:	d10f      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800526e:	e00c      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3304      	adds	r3, #4
 8005274:	2101      	movs	r1, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f000 ff2a 	bl	80060d0 <RCCEx_PLL2_Config>
 800527c:	4603      	mov	r3, r0
 800527e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005280:	e003      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	75fb      	strb	r3, [r7, #23]
      break;
 8005286:	e000      	b.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d109      	bne.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005290:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8005292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005294:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800529c:	490d      	ldr	r1, [pc, #52]	; (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	650b      	str	r3, [r1, #80]	; 0x50
 80052a2:	e001      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
 80052a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d034      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d81d      	bhi.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80052bc:	a201      	add	r2, pc, #4	; (adr r2, 80052c4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80052be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c2:	bf00      	nop
 80052c4:	080052ff 	.word	0x080052ff
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052e7 	.word	0x080052e7
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052d8:	4bb1      	ldr	r3, [pc, #708]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	4ab0      	ldr	r2, [pc, #704]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80052de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052e4:	e00c      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3304      	adds	r3, #4
 80052ea:	2102      	movs	r1, #2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 feef 	bl	80060d0 <RCCEx_PLL2_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052f6:	e003      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
      break;
 80052fc:	e000      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 80052fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005300:	7dfb      	ldrb	r3, [r7, #23]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005306:	4ba6      	ldr	r3, [pc, #664]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530a:	f023 0203 	bic.w	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	49a3      	ldr	r1, [pc, #652]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005314:	4313      	orrs	r3, r2
 8005316:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005318:	e001      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 8086 	beq.w	8005438 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800532c:	4b9d      	ldr	r3, [pc, #628]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a9c      	ldr	r2, [pc, #624]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005338:	f7fd fc88 	bl	8002c4c <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800533e:	e009      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005340:	f7fd fc84 	bl	8002c4c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b64      	cmp	r3, #100	; 0x64
 800534c:	d902      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	75fb      	strb	r3, [r7, #23]
        break;
 8005352:	e005      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005354:	4b93      	ldr	r3, [pc, #588]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ef      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d166      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005366:	4b8e      	ldr	r3, [pc, #568]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005368:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005370:	4053      	eors	r3, r2
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d013      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800537a:	4b89      	ldr	r3, [pc, #548]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005382:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005384:	4b86      	ldr	r3, [pc, #536]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	4a85      	ldr	r2, [pc, #532]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800538a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005390:	4b83      	ldr	r3, [pc, #524]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005394:	4a82      	ldr	r2, [pc, #520]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800539a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800539c:	4a80      	ldr	r2, [pc, #512]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ac:	d115      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fd fc4d 	bl	8002c4c <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053b4:	e00b      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b6:	f7fd fc49 	bl	8002c4c <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d902      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	75fb      	strb	r3, [r7, #23]
            break;
 80053cc:	e005      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ce:	4b74      	ldr	r3, [pc, #464]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ed      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80053da:	7dfb      	ldrb	r3, [r7, #23]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d126      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ee:	d10d      	bne.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 80053f0:	4b6b      	ldr	r3, [pc, #428]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053fe:	0919      	lsrs	r1, r3, #4
 8005400:	4b69      	ldr	r3, [pc, #420]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005402:	400b      	ands	r3, r1
 8005404:	4966      	ldr	r1, [pc, #408]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005406:	4313      	orrs	r3, r2
 8005408:	610b      	str	r3, [r1, #16]
 800540a:	e005      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800540c:	4b64      	ldr	r3, [pc, #400]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	4a63      	ldr	r2, [pc, #396]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005412:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005416:	6113      	str	r3, [r2, #16]
 8005418:	4b61      	ldr	r3, [pc, #388]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800541a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005426:	495e      	ldr	r1, [pc, #376]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005428:	4313      	orrs	r3, r2
 800542a:	670b      	str	r3, [r1, #112]	; 0x70
 800542c:	e004      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	75bb      	strb	r3, [r7, #22]
 8005432:	e001      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
 8005436:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d07e      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005448:	2b28      	cmp	r3, #40	; 0x28
 800544a:	d867      	bhi.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005523 	.word	0x08005523
 8005458:	0800551d 	.word	0x0800551d
 800545c:	0800551d 	.word	0x0800551d
 8005460:	0800551d 	.word	0x0800551d
 8005464:	0800551d 	.word	0x0800551d
 8005468:	0800551d 	.word	0x0800551d
 800546c:	0800551d 	.word	0x0800551d
 8005470:	0800551d 	.word	0x0800551d
 8005474:	080054f9 	.word	0x080054f9
 8005478:	0800551d 	.word	0x0800551d
 800547c:	0800551d 	.word	0x0800551d
 8005480:	0800551d 	.word	0x0800551d
 8005484:	0800551d 	.word	0x0800551d
 8005488:	0800551d 	.word	0x0800551d
 800548c:	0800551d 	.word	0x0800551d
 8005490:	0800551d 	.word	0x0800551d
 8005494:	0800550b 	.word	0x0800550b
 8005498:	0800551d 	.word	0x0800551d
 800549c:	0800551d 	.word	0x0800551d
 80054a0:	0800551d 	.word	0x0800551d
 80054a4:	0800551d 	.word	0x0800551d
 80054a8:	0800551d 	.word	0x0800551d
 80054ac:	0800551d 	.word	0x0800551d
 80054b0:	0800551d 	.word	0x0800551d
 80054b4:	08005523 	.word	0x08005523
 80054b8:	0800551d 	.word	0x0800551d
 80054bc:	0800551d 	.word	0x0800551d
 80054c0:	0800551d 	.word	0x0800551d
 80054c4:	0800551d 	.word	0x0800551d
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	0800551d 	.word	0x0800551d
 80054d0:	0800551d 	.word	0x0800551d
 80054d4:	08005523 	.word	0x08005523
 80054d8:	0800551d 	.word	0x0800551d
 80054dc:	0800551d 	.word	0x0800551d
 80054e0:	0800551d 	.word	0x0800551d
 80054e4:	0800551d 	.word	0x0800551d
 80054e8:	0800551d 	.word	0x0800551d
 80054ec:	0800551d 	.word	0x0800551d
 80054f0:	0800551d 	.word	0x0800551d
 80054f4:	08005523 	.word	0x08005523
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	2101      	movs	r1, #1
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fde6 	bl	80060d0 <RCCEx_PLL2_Config>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005508:	e00c      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3324      	adds	r3, #36	; 0x24
 800550e:	2101      	movs	r1, #1
 8005510:	4618      	mov	r0, r3
 8005512:	f000 fe8f 	bl	8006234 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	75fb      	strb	r3, [r7, #23]
      break;
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8005522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005524:	7dfb      	ldrb	r3, [r7, #23]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800552a:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005536:	491a      	ldr	r1, [pc, #104]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8005538:	4313      	orrs	r3, r2
 800553a:	654b      	str	r3, [r1, #84]	; 0x54
 800553c:	e001      	b.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d03e      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	2b05      	cmp	r3, #5
 8005554:	d820      	bhi.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	080055ad 	.word	0x080055ad
 8005560:	08005575 	.word	0x08005575
 8005564:	08005587 	.word	0x08005587
 8005568:	080055ad 	.word	0x080055ad
 800556c:	080055ad 	.word	0x080055ad
 8005570:	080055ad 	.word	0x080055ad
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fda8 	bl	80060d0 <RCCEx_PLL2_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005584:	e013      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	2101      	movs	r1, #1
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fe51 	bl	8006234 <RCCEx_PLL3_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005596:	e00a      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
      break;
 800559c:	e007      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800559e:	bf00      	nop
 80055a0:	58024400 	.word	0x58024400
 80055a4:	58024800 	.word	0x58024800
 80055a8:	00ffffcf 	.word	0x00ffffcf
      break;
 80055ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d109      	bne.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80055b4:	4b9f      	ldr	r3, [pc, #636]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b8:	f023 0207 	bic.w	r2, r3, #7
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	499c      	ldr	r1, [pc, #624]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	654b      	str	r3, [r1, #84]	; 0x54
 80055c6:	e001      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c8:	7dfb      	ldrb	r3, [r7, #23]
 80055ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d039      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055de:	2b05      	cmp	r3, #5
 80055e0:	d820      	bhi.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	0800562b 	.word	0x0800562b
 80055ec:	08005601 	.word	0x08005601
 80055f0:	08005613 	.word	0x08005613
 80055f4:	0800562b 	.word	0x0800562b
 80055f8:	0800562b 	.word	0x0800562b
 80055fc:	0800562b 	.word	0x0800562b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	2101      	movs	r1, #1
 8005606:	4618      	mov	r0, r3
 8005608:	f000 fd62 	bl	80060d0 <RCCEx_PLL2_Config>
 800560c:	4603      	mov	r3, r0
 800560e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005610:	e00c      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3324      	adds	r3, #36	; 0x24
 8005616:	2101      	movs	r1, #1
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fe0b 	bl	8006234 <RCCEx_PLL3_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005622:	e003      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e000      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800562a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10a      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005632:	4b80      	ldr	r3, [pc, #512]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005636:	f023 0207 	bic.w	r2, r3, #7
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005640:	497c      	ldr	r1, [pc, #496]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005642:	4313      	orrs	r3, r2
 8005644:	658b      	str	r3, [r1, #88]	; 0x58
 8005646:	e001      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d04b      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800565e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005662:	d02e      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005668:	d828      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566e:	d02a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d822      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005676:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800567a:	d026      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800567c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005680:	d81c      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8005682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005686:	d010      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8005688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800568c:	d816      	bhi.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01d      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005696:	d111      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3304      	adds	r3, #4
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fd16 	bl	80060d0 <RCCEx_PLL2_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80056a8:	e012      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3324      	adds	r3, #36	; 0x24
 80056ae:	2102      	movs	r1, #2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fdbf 	bl	8006234 <RCCEx_PLL3_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80056ba:	e009      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	75fb      	strb	r3, [r7, #23]
      break;
 80056c0:	e006      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80056c2:	bf00      	nop
 80056c4:	e004      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80056c6:	bf00      	nop
 80056c8:	e002      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80056ca:	bf00      	nop
 80056cc:	e000      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80056ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10a      	bne.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056d6:	4b57      	ldr	r3, [pc, #348]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	4953      	ldr	r1, [pc, #332]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	654b      	str	r3, [r1, #84]	; 0x54
 80056ea:	e001      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d04b      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005702:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005706:	d02e      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8005708:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800570c:	d828      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	d02a      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005718:	d822      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800571a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800571e:	d026      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005724:	d81c      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800572a:	d010      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800572c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005730:	d816      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01d      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800573a:	d111      	bne.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3304      	adds	r3, #4
 8005740:	2100      	movs	r1, #0
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fcc4 	bl	80060d0 <RCCEx_PLL2_Config>
 8005748:	4603      	mov	r3, r0
 800574a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800574c:	e012      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3324      	adds	r3, #36	; 0x24
 8005752:	2102      	movs	r1, #2
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fd6d 	bl	8006234 <RCCEx_PLL3_Config>
 800575a:	4603      	mov	r3, r0
 800575c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800575e:	e009      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
      break;
 8005764:	e006      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005766:	bf00      	nop
 8005768:	e004      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800576a:	bf00      	nop
 800576c:	e002      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800576e:	bf00      	nop
 8005770:	e000      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8005772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800577a:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800577c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800577e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005788:	492a      	ldr	r1, [pc, #168]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800578a:	4313      	orrs	r3, r2
 800578c:	658b      	str	r3, [r1, #88]	; 0x58
 800578e:	e001      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	d04d      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057aa:	d02e      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80057ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80057b0:	d828      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b6:	d02a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 80057b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057bc:	d822      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80057be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80057c2:	d026      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80057c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80057c8:	d81c      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80057ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ce:	d010      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80057d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057d4:	d816      	bhi.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d01d      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057de:	d111      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	3304      	adds	r3, #4
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fc72 	bl	80060d0 <RCCEx_PLL2_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80057f0:	e012      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3324      	adds	r3, #36	; 0x24
 80057f6:	2102      	movs	r1, #2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fd1b 	bl	8006234 <RCCEx_PLL3_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005802:	e009      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	75fb      	strb	r3, [r7, #23]
      break;
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800580a:	bf00      	nop
 800580c:	e004      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8005816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10c      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800582c:	4901      	ldr	r1, [pc, #4]	; (8005834 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800582e:	4313      	orrs	r3, r2
 8005830:	658b      	str	r3, [r1, #88]	; 0x58
 8005832:	e003      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8005834:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d018      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005850:	d10a      	bne.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3324      	adds	r3, #36	; 0x24
 8005856:	2102      	movs	r1, #2
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fceb 	bl	8006234 <RCCEx_PLL3_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005868:	4b8a      	ldr	r3, [pc, #552]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005874:	4987      	ldr	r1, [pc, #540]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005876:	4313      	orrs	r3, r2
 8005878:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b00      	cmp	r3, #0
 8005884:	d01a      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005890:	d10a      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3324      	adds	r3, #36	; 0x24
 8005896:	2102      	movs	r1, #2
 8005898:	4618      	mov	r0, r3
 800589a:	f000 fccb 	bl	8006234 <RCCEx_PLL3_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058a8:	4b7a      	ldr	r3, [pc, #488]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	4977      	ldr	r1, [pc, #476]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d034      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058d2:	d01d      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80058d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058d8:	d817      	bhi.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80058de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e2:	d009      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80058e4:	e011      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3304      	adds	r3, #4
 80058ea:	2100      	movs	r1, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fbef 	bl	80060d0 <RCCEx_PLL2_Config>
 80058f2:	4603      	mov	r3, r0
 80058f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80058f6:	e00c      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3324      	adds	r3, #36	; 0x24
 80058fc:	2102      	movs	r1, #2
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fc98 	bl	8006234 <RCCEx_PLL3_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005908:	e003      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	75fb      	strb	r3, [r7, #23]
      break;
 800590e:	e000      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8005910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005912:	7dfb      	ldrb	r3, [r7, #23]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005918:	4b5e      	ldr	r3, [pc, #376]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005926:	495b      	ldr	r1, [pc, #364]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005928:	4313      	orrs	r3, r2
 800592a:	658b      	str	r3, [r1, #88]	; 0x58
 800592c:	e001      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
 8005930:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d033      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005944:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005948:	d01c      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800594a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800594e:	d816      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005954:	d003      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800595a:	d007      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800595c:	e00f      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800595e:	4b4d      	ldr	r3, [pc, #308]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	4a4c      	ldr	r2, [pc, #304]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005968:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800596a:	e00c      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	2101      	movs	r1, #1
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fc5e 	bl	8006234 <RCCEx_PLL3_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800597c:	e003      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	75fb      	strb	r3, [r7, #23]
      break;
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8005984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005986:	7dfb      	ldrb	r3, [r7, #23]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800598c:	4b41      	ldr	r3, [pc, #260]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800598e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800599a:	493e      	ldr	r1, [pc, #248]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800599c:	4313      	orrs	r3, r2
 800599e:	654b      	str	r3, [r1, #84]	; 0x54
 80059a0:	e001      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d029      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80059ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059be:	d007      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80059c0:	e00f      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059c2:	4b34      	ldr	r3, [pc, #208]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c6:	4a33      	ldr	r2, [pc, #204]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80059ce:	e00b      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	2102      	movs	r1, #2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fb7a 	bl	80060d0 <RCCEx_PLL2_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	75fb      	strb	r3, [r7, #23]
      break;
 80059e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059ee:	4b29      	ldr	r3, [pc, #164]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059fa:	4926      	ldr	r1, [pc, #152]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005a00:	e001      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a02:	7dfb      	ldrb	r3, [r7, #23]
 8005a04:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3324      	adds	r3, #36	; 0x24
 8005a16:	2102      	movs	r1, #2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fc0b 	bl	8006234 <RCCEx_PLL3_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d033      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3c:	d017      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a42:	d811      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a48:	d013      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8005a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a4e:	d80b      	bhi.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8005a54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a58:	d106      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5a:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	4a0d      	ldr	r2, [pc, #52]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005a66:	e007      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6c:	e004      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e002      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a78:	7dfb      	ldrb	r3, [r7, #23]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8a:	4902      	ldr	r1, [pc, #8]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8005a90:	e004      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005aa8:	4b29      	ldr	r3, [pc, #164]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab4:	4926      	ldr	r1, [pc, #152]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ac6:	4b22      	ldr	r3, [pc, #136]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad2:	491f      	ldr	r1, [pc, #124]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00d      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ae4:	4b1a      	ldr	r3, [pc, #104]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005aea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005aee:	6113      	str	r3, [r2, #16]
 8005af0:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005afa:	4915      	ldr	r1, [pc, #84]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da08      	bge.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b08:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b14:	490e      	ldr	r1, [pc, #56]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b26:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b34:	4906      	ldr	r1, [pc, #24]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005b3a:	7dbb      	ldrb	r3, [r7, #22]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e000      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	58024400 	.word	0x58024400

08005b54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b58:	f7ff f8a6 	bl	8004ca8 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4904      	ldr	r1, [pc, #16]	; (8005b7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	0800f2c8 	.word	0x0800f2c8

08005b80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	; 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b88:	4ba1      	ldr	r3, [pc, #644]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b92:	4b9f      	ldr	r3, [pc, #636]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	0b1b      	lsrs	r3, r3, #12
 8005b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b9e:	4b9c      	ldr	r3, [pc, #624]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005baa:	4b99      	ldr	r3, [pc, #612]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	08db      	lsrs	r3, r3, #3
 8005bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8111 	beq.w	8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	f000 8083 	beq.w	8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	f200 80a1 	bhi.w	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d056      	beq.n	8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bea:	e099      	b.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bec:	4b88      	ldr	r3, [pc, #544]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d02d      	beq.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bf8:	4b85      	ldr	r3, [pc, #532]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	08db      	lsrs	r3, r3, #3
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	4a84      	ldr	r2, [pc, #528]	; (8005e14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b7b      	ldr	r3, [pc, #492]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c52:	e087      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c66:	4b6a      	ldr	r3, [pc, #424]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c96:	e065      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005caa:	4b59      	ldr	r3, [pc, #356]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cda:	e043      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cee:	4b48      	ldr	r3, [pc, #288]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d02:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d1e:	e021      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d32:	4b37      	ldr	r3, [pc, #220]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d46:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d64:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	0a5b      	lsrs	r3, r3, #9
 8005d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8a:	ee17 2a90 	vmov	r2, s15
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d92:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db8:	ee17 2a90 	vmov	r2, s15
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	0e1b      	lsrs	r3, r3, #24
 8005dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de6:	ee17 2a90 	vmov	r2, s15
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dee:	e008      	b.n	8005e02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
}
 8005e02:	bf00      	nop
 8005e04:	3724      	adds	r7, #36	; 0x24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
 8005e14:	03d09000 	.word	0x03d09000
 8005e18:	46000000 	.word	0x46000000
 8005e1c:	4c742400 	.word	0x4c742400
 8005e20:	4a742400 	.word	0x4a742400
 8005e24:	4bbebc20 	.word	0x4bbebc20

08005e28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b089      	sub	sp, #36	; 0x24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e30:	4ba1      	ldr	r3, [pc, #644]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e3a:	4b9f      	ldr	r3, [pc, #636]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3e:	0d1b      	lsrs	r3, r3, #20
 8005e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e46:	4b9c      	ldr	r3, [pc, #624]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e52:	4b99      	ldr	r3, [pc, #612]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	08db      	lsrs	r3, r3, #3
 8005e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8111 	beq.w	8006098 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	f000 8083 	beq.w	8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	f200 80a1 	bhi.w	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d056      	beq.n	8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e92:	e099      	b.n	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e94:	4b88      	ldr	r3, [pc, #544]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02d      	beq.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ea0:	4b85      	ldr	r3, [pc, #532]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	4a84      	ldr	r2, [pc, #528]	; (80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b7b      	ldr	r3, [pc, #492]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ede:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005efa:	e087      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	4b6a      	ldr	r3, [pc, #424]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f22:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f3e:	e065      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f52:	4b59      	ldr	r3, [pc, #356]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f66:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f82:	e043      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b48      	ldr	r3, [pc, #288]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005faa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc6:	e021      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	4b37      	ldr	r3, [pc, #220]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006006:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800600a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800600c:	4b2a      	ldr	r3, [pc, #168]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006010:	0a5b      	lsrs	r3, r3, #9
 8006012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006026:	edd7 6a07 	vldr	s13, [r7, #28]
 800602a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800602e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006032:	ee17 2a90 	vmov	r2, s15
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800603a:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	0c1b      	lsrs	r3, r3, #16
 8006040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006054:	edd7 6a07 	vldr	s13, [r7, #28]
 8006058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006060:	ee17 2a90 	vmov	r2, s15
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	0e1b      	lsrs	r3, r3, #24
 800606e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800607e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006082:	edd7 6a07 	vldr	s13, [r7, #28]
 8006086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006096:	e008      	b.n	80060aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
}
 80060aa:	bf00      	nop
 80060ac:	3724      	adds	r7, #36	; 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	58024400 	.word	0x58024400
 80060bc:	03d09000 	.word	0x03d09000
 80060c0:	46000000 	.word	0x46000000
 80060c4:	4c742400 	.word	0x4c742400
 80060c8:	4a742400 	.word	0x4a742400
 80060cc:	4bbebc20 	.word	0x4bbebc20

080060d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060de:	4b53      	ldr	r3, [pc, #332]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d101      	bne.n	80060ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e099      	b.n	8006222 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060ee:	4b4f      	ldr	r3, [pc, #316]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a4e      	ldr	r2, [pc, #312]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80060f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fa:	f7fc fda7 	bl	8002c4c <HAL_GetTick>
 80060fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006100:	e008      	b.n	8006114 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006102:	f7fc fda3 	bl	8002c4c <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e086      	b.n	8006222 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006114:	4b45      	ldr	r3, [pc, #276]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f0      	bne.n	8006102 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006120:	4b42      	ldr	r3, [pc, #264]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	493f      	ldr	r1, [pc, #252]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	628b      	str	r3, [r1, #40]	; 0x28
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	3b01      	subs	r3, #1
 800613a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	3b01      	subs	r3, #1
 8006144:	025b      	lsls	r3, r3, #9
 8006146:	b29b      	uxth	r3, r3
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	3b01      	subs	r3, #1
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	3b01      	subs	r3, #1
 800615e:	061b      	lsls	r3, r3, #24
 8006160:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006164:	4931      	ldr	r1, [pc, #196]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006166:	4313      	orrs	r3, r2
 8006168:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800616a:	4b30      	ldr	r3, [pc, #192]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	492d      	ldr	r1, [pc, #180]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800617c:	4b2b      	ldr	r3, [pc, #172]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	f023 0220 	bic.w	r2, r3, #32
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	4928      	ldr	r1, [pc, #160]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800618e:	4b27      	ldr	r3, [pc, #156]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	4a26      	ldr	r2, [pc, #152]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800619a:	4b24      	ldr	r3, [pc, #144]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 800619c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800619e:	4b24      	ldr	r3, [pc, #144]	; (8006230 <RCCEx_PLL2_Config+0x160>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	69d2      	ldr	r2, [r2, #28]
 80061a6:	00d2      	lsls	r2, r2, #3
 80061a8:	4920      	ldr	r1, [pc, #128]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ae:	4b1f      	ldr	r3, [pc, #124]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	4a1e      	ldr	r2, [pc, #120]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061c0:	4b1a      	ldr	r3, [pc, #104]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	4a19      	ldr	r2, [pc, #100]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061cc:	e00f      	b.n	80061ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d106      	bne.n	80061e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061d4:	4b15      	ldr	r3, [pc, #84]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	4a14      	ldr	r2, [pc, #80]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061e0:	e005      	b.n	80061ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061e2:	4b12      	ldr	r3, [pc, #72]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	4a11      	ldr	r2, [pc, #68]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0e      	ldr	r2, [pc, #56]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 80061f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061fa:	f7fc fd27 	bl	8002c4c <HAL_GetTick>
 80061fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006200:	e008      	b.n	8006214 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006202:	f7fc fd23 	bl	8002c4c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e006      	b.n	8006222 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <RCCEx_PLL2_Config+0x15c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	58024400 	.word	0x58024400
 8006230:	ffff0007 	.word	0xffff0007

08006234 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006242:	4b53      	ldr	r3, [pc, #332]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b03      	cmp	r3, #3
 800624c:	d101      	bne.n	8006252 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e099      	b.n	8006386 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006252:	4b4f      	ldr	r3, [pc, #316]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4e      	ldr	r2, [pc, #312]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800625c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800625e:	f7fc fcf5 	bl	8002c4c <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006264:	e008      	b.n	8006278 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006266:	f7fc fcf1 	bl	8002c4c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e086      	b.n	8006386 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006278:	4b45      	ldr	r3, [pc, #276]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006284:	4b42      	ldr	r3, [pc, #264]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	051b      	lsls	r3, r3, #20
 8006292:	493f      	ldr	r1, [pc, #252]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	628b      	str	r3, [r1, #40]	; 0x28
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	3b01      	subs	r3, #1
 800629e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	025b      	lsls	r3, r3, #9
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062c8:	4931      	ldr	r1, [pc, #196]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062ce:	4b30      	ldr	r3, [pc, #192]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	492d      	ldr	r1, [pc, #180]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062e0:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	4928      	ldr	r1, [pc, #160]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062f2:	4b27      	ldr	r3, [pc, #156]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	4a26      	ldr	r2, [pc, #152]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062fe:	4b24      	ldr	r3, [pc, #144]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006302:	4b24      	ldr	r3, [pc, #144]	; (8006394 <RCCEx_PLL3_Config+0x160>)
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	69d2      	ldr	r2, [r2, #28]
 800630a:	00d2      	lsls	r2, r2, #3
 800630c:	4920      	ldr	r1, [pc, #128]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006312:	4b1f      	ldr	r3, [pc, #124]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006316:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800631c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006324:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4a19      	ldr	r2, [pc, #100]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 800632a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006330:	e00f      	b.n	8006352 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d106      	bne.n	8006346 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006338:	4b15      	ldr	r3, [pc, #84]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	4a14      	ldr	r2, [pc, #80]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 800633e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006344:	e005      	b.n	8006352 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006346:	4b12      	ldr	r3, [pc, #72]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	4a11      	ldr	r2, [pc, #68]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 800634c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006350:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006352:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635e:	f7fc fc75 	bl	8002c4c <HAL_GetTick>
 8006362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006364:	e008      	b.n	8006378 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006366:	f7fc fc71 	bl	8002c4c <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e006      	b.n	8006386 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <RCCEx_PLL3_Config+0x15c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
 8006394:	ffff0007 	.word	0xffff0007

08006398 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e049      	b.n	800643e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fc f8e8 	bl	8002594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f000 fa66 	bl	80068a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d109      	bne.n	800646c <HAL_TIM_PWM_Start+0x24>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e03c      	b.n	80064e6 <HAL_TIM_PWM_Start+0x9e>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b04      	cmp	r3, #4
 8006470:	d109      	bne.n	8006486 <HAL_TIM_PWM_Start+0x3e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b01      	cmp	r3, #1
 800647c:	bf14      	ite	ne
 800647e:	2301      	movne	r3, #1
 8006480:	2300      	moveq	r3, #0
 8006482:	b2db      	uxtb	r3, r3
 8006484:	e02f      	b.n	80064e6 <HAL_TIM_PWM_Start+0x9e>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d109      	bne.n	80064a0 <HAL_TIM_PWM_Start+0x58>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	bf14      	ite	ne
 8006498:	2301      	movne	r3, #1
 800649a:	2300      	moveq	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	e022      	b.n	80064e6 <HAL_TIM_PWM_Start+0x9e>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	2b0c      	cmp	r3, #12
 80064a4:	d109      	bne.n	80064ba <HAL_TIM_PWM_Start+0x72>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	bf14      	ite	ne
 80064b2:	2301      	movne	r3, #1
 80064b4:	2300      	moveq	r3, #0
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	e015      	b.n	80064e6 <HAL_TIM_PWM_Start+0x9e>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d109      	bne.n	80064d4 <HAL_TIM_PWM_Start+0x8c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	bf14      	ite	ne
 80064cc:	2301      	movne	r3, #1
 80064ce:	2300      	moveq	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	e008      	b.n	80064e6 <HAL_TIM_PWM_Start+0x9e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b01      	cmp	r3, #1
 80064de:	bf14      	ite	ne
 80064e0:	2301      	movne	r3, #1
 80064e2:	2300      	moveq	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e0ab      	b.n	8006646 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_PWM_Start+0xb6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064fc:	e023      	b.n	8006546 <HAL_TIM_PWM_Start+0xfe>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d104      	bne.n	800650e <HAL_TIM_PWM_Start+0xc6>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2202      	movs	r2, #2
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800650c:	e01b      	b.n	8006546 <HAL_TIM_PWM_Start+0xfe>
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d104      	bne.n	800651e <HAL_TIM_PWM_Start+0xd6>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651c:	e013      	b.n	8006546 <HAL_TIM_PWM_Start+0xfe>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b0c      	cmp	r3, #12
 8006522:	d104      	bne.n	800652e <HAL_TIM_PWM_Start+0xe6>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800652c:	e00b      	b.n	8006546 <HAL_TIM_PWM_Start+0xfe>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b10      	cmp	r3, #16
 8006532:	d104      	bne.n	800653e <HAL_TIM_PWM_Start+0xf6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800653c:	e003      	b.n	8006546 <HAL_TIM_PWM_Start+0xfe>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2202      	movs	r2, #2
 8006542:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2201      	movs	r2, #1
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fd26 	bl	8006fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a3d      	ldr	r2, [pc, #244]	; (8006650 <HAL_TIM_PWM_Start+0x208>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d013      	beq.n	8006586 <HAL_TIM_PWM_Start+0x13e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a3c      	ldr	r2, [pc, #240]	; (8006654 <HAL_TIM_PWM_Start+0x20c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00e      	beq.n	8006586 <HAL_TIM_PWM_Start+0x13e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a3a      	ldr	r2, [pc, #232]	; (8006658 <HAL_TIM_PWM_Start+0x210>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d009      	beq.n	8006586 <HAL_TIM_PWM_Start+0x13e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a39      	ldr	r2, [pc, #228]	; (800665c <HAL_TIM_PWM_Start+0x214>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d004      	beq.n	8006586 <HAL_TIM_PWM_Start+0x13e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a37      	ldr	r2, [pc, #220]	; (8006660 <HAL_TIM_PWM_Start+0x218>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d101      	bne.n	800658a <HAL_TIM_PWM_Start+0x142>
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <HAL_TIM_PWM_Start+0x144>
 800658a:	2300      	movs	r3, #0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800659e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a2a      	ldr	r2, [pc, #168]	; (8006650 <HAL_TIM_PWM_Start+0x208>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d02c      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d027      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <HAL_TIM_PWM_Start+0x21c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d022      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a29      	ldr	r2, [pc, #164]	; (8006668 <HAL_TIM_PWM_Start+0x220>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d01d      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <HAL_TIM_PWM_Start+0x224>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d018      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_TIM_PWM_Start+0x20c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d013      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a23      	ldr	r2, [pc, #140]	; (8006670 <HAL_TIM_PWM_Start+0x228>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00e      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1b      	ldr	r2, [pc, #108]	; (8006658 <HAL_TIM_PWM_Start+0x210>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d009      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1f      	ldr	r2, [pc, #124]	; (8006674 <HAL_TIM_PWM_Start+0x22c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d004      	beq.n	8006604 <HAL_TIM_PWM_Start+0x1bc>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1e      	ldr	r2, [pc, #120]	; (8006678 <HAL_TIM_PWM_Start+0x230>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d115      	bne.n	8006630 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	4b1c      	ldr	r3, [pc, #112]	; (800667c <HAL_TIM_PWM_Start+0x234>)
 800660c:	4013      	ands	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2b06      	cmp	r3, #6
 8006614:	d015      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1fa>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661c:	d011      	beq.n	8006642 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662e:	e008      	b.n	8006642 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	e000      	b.n	8006644 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006642:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40010000 	.word	0x40010000
 8006654:	40010400 	.word	0x40010400
 8006658:	40014000 	.word	0x40014000
 800665c:	40014400 	.word	0x40014400
 8006660:	40014800 	.word	0x40014800
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40001800 	.word	0x40001800
 8006674:	4000e000 	.word	0x4000e000
 8006678:	4000e400 	.word	0x4000e400
 800667c:	00010007 	.word	0x00010007

08006680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800669a:	2302      	movs	r3, #2
 800669c:	e0ff      	b.n	800689e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b14      	cmp	r3, #20
 80066aa:	f200 80f0 	bhi.w	800688e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ae:	a201      	add	r2, pc, #4	; (adr r2, 80066b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b4:	08006709 	.word	0x08006709
 80066b8:	0800688f 	.word	0x0800688f
 80066bc:	0800688f 	.word	0x0800688f
 80066c0:	0800688f 	.word	0x0800688f
 80066c4:	08006749 	.word	0x08006749
 80066c8:	0800688f 	.word	0x0800688f
 80066cc:	0800688f 	.word	0x0800688f
 80066d0:	0800688f 	.word	0x0800688f
 80066d4:	0800678b 	.word	0x0800678b
 80066d8:	0800688f 	.word	0x0800688f
 80066dc:	0800688f 	.word	0x0800688f
 80066e0:	0800688f 	.word	0x0800688f
 80066e4:	080067cb 	.word	0x080067cb
 80066e8:	0800688f 	.word	0x0800688f
 80066ec:	0800688f 	.word	0x0800688f
 80066f0:	0800688f 	.word	0x0800688f
 80066f4:	0800680d 	.word	0x0800680d
 80066f8:	0800688f 	.word	0x0800688f
 80066fc:	0800688f 	.word	0x0800688f
 8006700:	0800688f 	.word	0x0800688f
 8006704:	0800684d 	.word	0x0800684d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f970 	bl	80069f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0208 	orr.w	r2, r2, #8
 8006722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0204 	bic.w	r2, r2, #4
 8006732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691a      	ldr	r2, [r3, #16]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	619a      	str	r2, [r3, #24]
      break;
 8006746:	e0a5      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68b9      	ldr	r1, [r7, #8]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 f9e0 	bl	8006b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6999      	ldr	r1, [r3, #24]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	021a      	lsls	r2, r3, #8
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	619a      	str	r2, [r3, #24]
      break;
 8006788:	e084      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fa49 	bl	8006c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f042 0208 	orr.w	r2, r2, #8
 80067a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0204 	bic.w	r2, r2, #4
 80067b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	61da      	str	r2, [r3, #28]
      break;
 80067c8:	e064      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 fab1 	bl	8006d38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69da      	ldr	r2, [r3, #28]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69da      	ldr	r2, [r3, #28]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69d9      	ldr	r1, [r3, #28]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	021a      	lsls	r2, r3, #8
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	61da      	str	r2, [r3, #28]
      break;
 800680a:	e043      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 fafa 	bl	8006e0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0208 	orr.w	r2, r2, #8
 8006826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0204 	bic.w	r2, r2, #4
 8006836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800684a:	e023      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fb3e 	bl	8006ed4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	021a      	lsls	r2, r3, #8
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800688c:	e002      	b.n	8006894 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	75fb      	strb	r3, [r7, #23]
      break;
 8006892:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop

080068a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a44      	ldr	r2, [pc, #272]	; (80069cc <TIM_Base_SetConfig+0x124>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d013      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c6:	d00f      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a41      	ldr	r2, [pc, #260]	; (80069d0 <TIM_Base_SetConfig+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00b      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a40      	ldr	r2, [pc, #256]	; (80069d4 <TIM_Base_SetConfig+0x12c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d007      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a3f      	ldr	r2, [pc, #252]	; (80069d8 <TIM_Base_SetConfig+0x130>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d003      	beq.n	80068e8 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a3e      	ldr	r2, [pc, #248]	; (80069dc <TIM_Base_SetConfig+0x134>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d108      	bne.n	80068fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a33      	ldr	r2, [pc, #204]	; (80069cc <TIM_Base_SetConfig+0x124>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d027      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006908:	d023      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a30      	ldr	r2, [pc, #192]	; (80069d0 <TIM_Base_SetConfig+0x128>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01f      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2f      	ldr	r2, [pc, #188]	; (80069d4 <TIM_Base_SetConfig+0x12c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d01b      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2e      	ldr	r2, [pc, #184]	; (80069d8 <TIM_Base_SetConfig+0x130>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d017      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2d      	ldr	r2, [pc, #180]	; (80069dc <TIM_Base_SetConfig+0x134>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d013      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <TIM_Base_SetConfig+0x138>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00f      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <TIM_Base_SetConfig+0x13c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00b      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <TIM_Base_SetConfig+0x140>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d007      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a29      	ldr	r2, [pc, #164]	; (80069ec <TIM_Base_SetConfig+0x144>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d003      	beq.n	8006952 <TIM_Base_SetConfig+0xaa>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a28      	ldr	r2, [pc, #160]	; (80069f0 <TIM_Base_SetConfig+0x148>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d108      	bne.n	8006964 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a10      	ldr	r2, [pc, #64]	; (80069cc <TIM_Base_SetConfig+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d00f      	beq.n	80069b0 <TIM_Base_SetConfig+0x108>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a12      	ldr	r2, [pc, #72]	; (80069dc <TIM_Base_SetConfig+0x134>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00b      	beq.n	80069b0 <TIM_Base_SetConfig+0x108>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a11      	ldr	r2, [pc, #68]	; (80069e0 <TIM_Base_SetConfig+0x138>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d007      	beq.n	80069b0 <TIM_Base_SetConfig+0x108>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <TIM_Base_SetConfig+0x13c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_Base_SetConfig+0x108>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <TIM_Base_SetConfig+0x140>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d103      	bne.n	80069b8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	615a      	str	r2, [r3, #20]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40010400 	.word	0x40010400
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40014400 	.word	0x40014400
 80069e8:	40014800 	.word	0x40014800
 80069ec:	4000e000 	.word	0x4000e000
 80069f0:	4000e400 	.word	0x4000e400

080069f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	f023 0201 	bic.w	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4b37      	ldr	r3, [pc, #220]	; (8006afc <TIM_OC1_SetConfig+0x108>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 0302 	bic.w	r3, r3, #2
 8006a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a2d      	ldr	r2, [pc, #180]	; (8006b00 <TIM_OC1_SetConfig+0x10c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d00f      	beq.n	8006a70 <TIM_OC1_SetConfig+0x7c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2c      	ldr	r2, [pc, #176]	; (8006b04 <TIM_OC1_SetConfig+0x110>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d00b      	beq.n	8006a70 <TIM_OC1_SetConfig+0x7c>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2b      	ldr	r2, [pc, #172]	; (8006b08 <TIM_OC1_SetConfig+0x114>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d007      	beq.n	8006a70 <TIM_OC1_SetConfig+0x7c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a2a      	ldr	r2, [pc, #168]	; (8006b0c <TIM_OC1_SetConfig+0x118>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC1_SetConfig+0x7c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a29      	ldr	r2, [pc, #164]	; (8006b10 <TIM_OC1_SetConfig+0x11c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10c      	bne.n	8006a8a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0308 	bic.w	r3, r3, #8
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f023 0304 	bic.w	r3, r3, #4
 8006a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <TIM_OC1_SetConfig+0x10c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00f      	beq.n	8006ab2 <TIM_OC1_SetConfig+0xbe>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <TIM_OC1_SetConfig+0x110>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00b      	beq.n	8006ab2 <TIM_OC1_SetConfig+0xbe>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <TIM_OC1_SetConfig+0x114>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <TIM_OC1_SetConfig+0xbe>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <TIM_OC1_SetConfig+0x118>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <TIM_OC1_SetConfig+0xbe>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <TIM_OC1_SetConfig+0x11c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d111      	bne.n	8006ad6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	621a      	str	r2, [r3, #32]
}
 8006af0:	bf00      	nop
 8006af2:	371c      	adds	r7, #28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	fffeff8f 	.word	0xfffeff8f
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800

08006b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f023 0210 	bic.w	r2, r3, #16
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4b34      	ldr	r3, [pc, #208]	; (8006c10 <TIM_OC2_SetConfig+0xfc>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	021b      	lsls	r3, r3, #8
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f023 0320 	bic.w	r3, r3, #32
 8006b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a29      	ldr	r2, [pc, #164]	; (8006c14 <TIM_OC2_SetConfig+0x100>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_OC2_SetConfig+0x68>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a28      	ldr	r2, [pc, #160]	; (8006c18 <TIM_OC2_SetConfig+0x104>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d10d      	bne.n	8006b98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a1e      	ldr	r2, [pc, #120]	; (8006c14 <TIM_OC2_SetConfig+0x100>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00f      	beq.n	8006bc0 <TIM_OC2_SetConfig+0xac>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <TIM_OC2_SetConfig+0x104>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00b      	beq.n	8006bc0 <TIM_OC2_SetConfig+0xac>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a1c      	ldr	r2, [pc, #112]	; (8006c1c <TIM_OC2_SetConfig+0x108>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <TIM_OC2_SetConfig+0xac>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <TIM_OC2_SetConfig+0x10c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_OC2_SetConfig+0xac>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <TIM_OC2_SetConfig+0x110>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d113      	bne.n	8006be8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	695b      	ldr	r3, [r3, #20]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	621a      	str	r2, [r3, #32]
}
 8006c02:	bf00      	nop
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	feff8fff 	.word	0xfeff8fff
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400
 8006c1c:	40014000 	.word	0x40014000
 8006c20:	40014400 	.word	0x40014400
 8006c24:	40014800 	.word	0x40014800

08006c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4b33      	ldr	r3, [pc, #204]	; (8006d20 <TIM_OC3_SetConfig+0xf8>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a28      	ldr	r2, [pc, #160]	; (8006d24 <TIM_OC3_SetConfig+0xfc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <TIM_OC3_SetConfig+0x66>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a27      	ldr	r2, [pc, #156]	; (8006d28 <TIM_OC3_SetConfig+0x100>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d10d      	bne.n	8006caa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a1d      	ldr	r2, [pc, #116]	; (8006d24 <TIM_OC3_SetConfig+0xfc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d00f      	beq.n	8006cd2 <TIM_OC3_SetConfig+0xaa>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a1c      	ldr	r2, [pc, #112]	; (8006d28 <TIM_OC3_SetConfig+0x100>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d00b      	beq.n	8006cd2 <TIM_OC3_SetConfig+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a1b      	ldr	r2, [pc, #108]	; (8006d2c <TIM_OC3_SetConfig+0x104>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d007      	beq.n	8006cd2 <TIM_OC3_SetConfig+0xaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a1a      	ldr	r2, [pc, #104]	; (8006d30 <TIM_OC3_SetConfig+0x108>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d003      	beq.n	8006cd2 <TIM_OC3_SetConfig+0xaa>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <TIM_OC3_SetConfig+0x10c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d113      	bne.n	8006cfa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	011b      	lsls	r3, r3, #4
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	621a      	str	r2, [r3, #32]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr
 8006d20:	fffeff8f 	.word	0xfffeff8f
 8006d24:	40010000 	.word	0x40010000
 8006d28:	40010400 	.word	0x40010400
 8006d2c:	40014000 	.word	0x40014000
 8006d30:	40014400 	.word	0x40014400
 8006d34:	40014800 	.word	0x40014800

08006d38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4b24      	ldr	r3, [pc, #144]	; (8006df4 <TIM_OC4_SetConfig+0xbc>)
 8006d64:	4013      	ands	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	031b      	lsls	r3, r3, #12
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a19      	ldr	r2, [pc, #100]	; (8006df8 <TIM_OC4_SetConfig+0xc0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00f      	beq.n	8006db8 <TIM_OC4_SetConfig+0x80>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a18      	ldr	r2, [pc, #96]	; (8006dfc <TIM_OC4_SetConfig+0xc4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00b      	beq.n	8006db8 <TIM_OC4_SetConfig+0x80>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <TIM_OC4_SetConfig+0xc8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d007      	beq.n	8006db8 <TIM_OC4_SetConfig+0x80>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a16      	ldr	r2, [pc, #88]	; (8006e04 <TIM_OC4_SetConfig+0xcc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d003      	beq.n	8006db8 <TIM_OC4_SetConfig+0x80>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <TIM_OC4_SetConfig+0xd0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d109      	bne.n	8006dcc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	feff8fff 	.word	0xfeff8fff
 8006df8:	40010000 	.word	0x40010000
 8006dfc:	40010400 	.word	0x40010400
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400
 8006e08:	40014800 	.word	0x40014800

08006e0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4b21      	ldr	r3, [pc, #132]	; (8006ebc <TIM_OC5_SetConfig+0xb0>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006e4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	041b      	lsls	r3, r3, #16
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <TIM_OC5_SetConfig+0xb4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00f      	beq.n	8006e82 <TIM_OC5_SetConfig+0x76>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <TIM_OC5_SetConfig+0xb8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00b      	beq.n	8006e82 <TIM_OC5_SetConfig+0x76>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a16      	ldr	r2, [pc, #88]	; (8006ec8 <TIM_OC5_SetConfig+0xbc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d007      	beq.n	8006e82 <TIM_OC5_SetConfig+0x76>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a15      	ldr	r2, [pc, #84]	; (8006ecc <TIM_OC5_SetConfig+0xc0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d003      	beq.n	8006e82 <TIM_OC5_SetConfig+0x76>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <TIM_OC5_SetConfig+0xc4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d109      	bne.n	8006e96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	021b      	lsls	r3, r3, #8
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	fffeff8f 	.word	0xfffeff8f
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40010400 	.word	0x40010400
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	40014800 	.word	0x40014800

08006ed4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <TIM_OC6_SetConfig+0xb4>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	051b      	lsls	r3, r3, #20
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <TIM_OC6_SetConfig+0xb8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00f      	beq.n	8006f4c <TIM_OC6_SetConfig+0x78>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a18      	ldr	r2, [pc, #96]	; (8006f90 <TIM_OC6_SetConfig+0xbc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00b      	beq.n	8006f4c <TIM_OC6_SetConfig+0x78>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a17      	ldr	r2, [pc, #92]	; (8006f94 <TIM_OC6_SetConfig+0xc0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d007      	beq.n	8006f4c <TIM_OC6_SetConfig+0x78>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <TIM_OC6_SetConfig+0xc4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d003      	beq.n	8006f4c <TIM_OC6_SetConfig+0x78>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <TIM_OC6_SetConfig+0xc8>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d109      	bne.n	8006f60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	695b      	ldr	r3, [r3, #20]
 8006f58:	029b      	lsls	r3, r3, #10
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	feff8fff 	.word	0xfeff8fff
 8006f8c:	40010000 	.word	0x40010000
 8006f90:	40010400 	.word	0x40010400
 8006f94:	40014000 	.word	0x40014000
 8006f98:	40014400 	.word	0x40014400
 8006f9c:	40014800 	.word	0x40014800

08006fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b087      	sub	sp, #28
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a1a      	ldr	r2, [r3, #32]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	401a      	ands	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007000:	2302      	movs	r3, #2
 8007002:	e077      	b.n	80070f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a35      	ldr	r2, [pc, #212]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a34      	ldr	r2, [pc, #208]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d108      	bne.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800703e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a25      	ldr	r2, [pc, #148]	; (8007100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d02c      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d027      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a22      	ldr	r2, [pc, #136]	; (8007108 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d022      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a21      	ldr	r2, [pc, #132]	; (800710c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d01d      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d018      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d013      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00e      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1a      	ldr	r2, [pc, #104]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d009      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a18      	ldr	r2, [pc, #96]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d004      	beq.n	80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a17      	ldr	r2, [pc, #92]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d10c      	bne.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	40010000 	.word	0x40010000
 8007104:	40010400 	.word	0x40010400
 8007108:	40000400 	.word	0x40000400
 800710c:	40000800 	.word	0x40000800
 8007110:	40000c00 	.word	0x40000c00
 8007114:	40001800 	.word	0x40001800
 8007118:	40014000 	.word	0x40014000
 800711c:	4000e000 	.word	0x4000e000
 8007120:	4000e400 	.word	0x4000e400

08007124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e042      	b.n	80071bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800713c:	2b00      	cmp	r3, #0
 800713e:	d106      	bne.n	800714e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7fb fa7b 	bl	8002644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2224      	movs	r2, #36	; 0x24
 8007152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0201 	bic.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fcd6 	bl	8007b18 <UART_SetConfig>
 800716c:	4603      	mov	r3, r0
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e022      	b.n	80071bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fb36 	bl	80087f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	685a      	ldr	r2, [r3, #4]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0201 	orr.w	r2, r2, #1
 80071b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fbbd 	bl	8008934 <UART_CheckIdleState>
 80071ba:	4603      	mov	r3, r0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	; 0x28
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071da:	2b20      	cmp	r3, #32
 80071dc:	f040 8083 	bne.w	80072e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <HAL_UART_Transmit+0x28>
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e07b      	b.n	80072e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Transmit+0x3a>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e074      	b.n	80072e8 <HAL_UART_Transmit+0x124>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2221      	movs	r2, #33	; 0x21
 8007212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007216:	f7fb fd19 	bl	8002c4c <HAL_GetTick>
 800721a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007234:	d108      	bne.n	8007248 <HAL_UART_Transmit+0x84>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d104      	bne.n	8007248 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800723e:	2300      	movs	r3, #0
 8007240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e003      	b.n	8007250 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007258:	e02c      	b.n	80072b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2200      	movs	r2, #0
 8007262:	2180      	movs	r1, #128	; 0x80
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f001 fbb0 	bl	80089ca <UART_WaitOnFlagUntilTimeout>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e039      	b.n	80072e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10b      	bne.n	8007292 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007288:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	3302      	adds	r3, #2
 800728e:	61bb      	str	r3, [r7, #24]
 8007290:	e007      	b.n	80072a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	3301      	adds	r3, #1
 80072a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1cc      	bne.n	800725a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	2140      	movs	r1, #64	; 0x40
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f001 fb7d 	bl	80089ca <UART_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d001      	beq.n	80072da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e006      	b.n	80072e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2220      	movs	r2, #32
 80072de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e000      	b.n	80072e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3720      	adds	r7, #32
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08a      	sub	sp, #40	; 0x28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	2b20      	cmp	r3, #32
 8007306:	d142      	bne.n	800738e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <HAL_UART_Receive_IT+0x24>
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e03b      	b.n	8007390 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_UART_Receive_IT+0x36>
 8007322:	2302      	movs	r3, #2
 8007324:	e034      	b.n	8007390 <HAL_UART_Receive_IT+0xa0>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a17      	ldr	r2, [pc, #92]	; (8007398 <HAL_UART_Receive_IT+0xa8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d01f      	beq.n	800737e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d018      	beq.n	800737e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	613b      	str	r3, [r7, #16]
   return(result);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	623b      	str	r3, [r7, #32]
 800736c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736e:	69f9      	ldr	r1, [r7, #28]
 8007370:	6a3a      	ldr	r2, [r7, #32]
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	61bb      	str	r3, [r7, #24]
   return(result);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e6      	bne.n	800734c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	461a      	mov	r2, r3
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f001 fbe9 	bl	8008b5c <UART_Start_Receive_IT>
 800738a:	4603      	mov	r3, r0
 800738c:	e000      	b.n	8007390 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800738e:	2302      	movs	r3, #2
  }
}
 8007390:	4618      	mov	r0, r3
 8007392:	3728      	adds	r7, #40	; 0x28
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	58000c00 	.word	0x58000c00

0800739c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b0ba      	sub	sp, #232	; 0xe8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80073ca:	4013      	ands	r3, r2
 80073cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d11b      	bne.n	8007410 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d015      	beq.n	8007410 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d105      	bne.n	80073fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d009      	beq.n	8007410 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 835a 	beq.w	8007aba <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
      }
      return;
 800740e:	e354      	b.n	8007aba <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007410:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007414:	2b00      	cmp	r3, #0
 8007416:	f000 811f 	beq.w	8007658 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800741a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800741e:	4b8b      	ldr	r3, [pc, #556]	; (800764c <HAL_UART_IRQHandler+0x2b0>)
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d106      	bne.n	8007434 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007426:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800742a:	4b89      	ldr	r3, [pc, #548]	; (8007650 <HAL_UART_IRQHandler+0x2b4>)
 800742c:	4013      	ands	r3, r2
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8112 	beq.w	8007658 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007438:	f003 0301 	and.w	r3, r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	d011      	beq.n	8007464 <HAL_UART_IRQHandler+0xc8>
 8007440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00b      	beq.n	8007464 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2201      	movs	r2, #1
 8007452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800745a:	f043 0201 	orr.w	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d011      	beq.n	8007494 <HAL_UART_IRQHandler+0xf8>
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00b      	beq.n	8007494 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2202      	movs	r2, #2
 8007482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748a:	f043 0204 	orr.w	r2, r3, #4
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d011      	beq.n	80074c4 <HAL_UART_IRQHandler+0x128>
 80074a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2204      	movs	r2, #4
 80074b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ba:	f043 0202 	orr.w	r2, r3, #2
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d017      	beq.n	8007500 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074e0:	4b5a      	ldr	r3, [pc, #360]	; (800764c <HAL_UART_IRQHandler+0x2b0>)
 80074e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00b      	beq.n	8007500 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2208      	movs	r2, #8
 80074ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f6:	f043 0208 	orr.w	r2, r3, #8
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007508:	2b00      	cmp	r3, #0
 800750a:	d012      	beq.n	8007532 <HAL_UART_IRQHandler+0x196>
 800750c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007510:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00c      	beq.n	8007532 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007528:	f043 0220 	orr.w	r2, r3, #32
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 82c0 	beq.w	8007abe <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800753e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d013      	beq.n	8007572 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800754a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d105      	bne.n	8007562 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d005      	beq.n	8007596 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800758a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800758e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007592:	2b00      	cmp	r3, #0
 8007594:	d04f      	beq.n	8007636 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fc0a 	bl	8008db0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a6:	2b40      	cmp	r3, #64	; 0x40
 80075a8:	d141      	bne.n	800762e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3308      	adds	r3, #8
 80075b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1d9      	bne.n	80075aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d013      	beq.n	8007626 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007602:	4a14      	ldr	r2, [pc, #80]	; (8007654 <HAL_UART_IRQHandler+0x2b8>)
 8007604:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800760a:	4618      	mov	r0, r3
 800760c:	f7fb fff8 	bl	8003600 <HAL_DMA_Abort_IT>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d017      	beq.n	8007646 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007624:	e00f      	b.n	8007646 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa60 	bl	8007aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762c:	e00b      	b.n	8007646 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa5c 	bl	8007aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007634:	e007      	b.n	8007646 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 fa58 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007644:	e23b      	b.n	8007abe <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007646:	bf00      	nop
    return;
 8007648:	e239      	b.n	8007abe <HAL_UART_IRQHandler+0x722>
 800764a:	bf00      	nop
 800764c:	10000001 	.word	0x10000001
 8007650:	04000120 	.word	0x04000120
 8007654:	08008e7d 	.word	0x08008e7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800765c:	2b01      	cmp	r3, #1
 800765e:	f040 81ce 	bne.w	80079fe <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 81c7 	beq.w	80079fe <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 81c0 	beq.w	80079fe <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2210      	movs	r2, #16
 8007684:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	f040 813b 	bne.w	800790c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a8b      	ldr	r2, [pc, #556]	; (80078cc <HAL_UART_IRQHandler+0x530>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d059      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a89      	ldr	r2, [pc, #548]	; (80078d0 <HAL_UART_IRQHandler+0x534>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d053      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a87      	ldr	r2, [pc, #540]	; (80078d4 <HAL_UART_IRQHandler+0x538>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d04d      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a85      	ldr	r2, [pc, #532]	; (80078d8 <HAL_UART_IRQHandler+0x53c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d047      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a83      	ldr	r2, [pc, #524]	; (80078dc <HAL_UART_IRQHandler+0x540>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d041      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a81      	ldr	r2, [pc, #516]	; (80078e0 <HAL_UART_IRQHandler+0x544>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d03b      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a7f      	ldr	r2, [pc, #508]	; (80078e4 <HAL_UART_IRQHandler+0x548>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d035      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a7d      	ldr	r2, [pc, #500]	; (80078e8 <HAL_UART_IRQHandler+0x54c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d02f      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a7b      	ldr	r2, [pc, #492]	; (80078ec <HAL_UART_IRQHandler+0x550>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d029      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a79      	ldr	r2, [pc, #484]	; (80078f0 <HAL_UART_IRQHandler+0x554>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d023      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a77      	ldr	r2, [pc, #476]	; (80078f4 <HAL_UART_IRQHandler+0x558>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d01d      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a75      	ldr	r2, [pc, #468]	; (80078f8 <HAL_UART_IRQHandler+0x55c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d017      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a73      	ldr	r2, [pc, #460]	; (80078fc <HAL_UART_IRQHandler+0x560>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d011      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a71      	ldr	r2, [pc, #452]	; (8007900 <HAL_UART_IRQHandler+0x564>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00b      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a6f      	ldr	r2, [pc, #444]	; (8007904 <HAL_UART_IRQHandler+0x568>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d005      	beq.n	8007756 <HAL_UART_IRQHandler+0x3ba>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a6d      	ldr	r2, [pc, #436]	; (8007908 <HAL_UART_IRQHandler+0x56c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d105      	bne.n	8007762 <HAL_UART_IRQHandler+0x3c6>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	b29b      	uxth	r3, r3
 8007760:	e004      	b.n	800776c <HAL_UART_IRQHandler+0x3d0>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	b29b      	uxth	r3, r3
 800776c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 81a4 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007780:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007784:	429a      	cmp	r2, r3
 8007786:	f080 819c 	bcs.w	8007ac2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007790:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779e:	f000 8086 	beq.w	80078ae <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80077cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80077d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80077dc:	e841 2300 	strex	r3, r2, [r1]
 80077e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80077e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1da      	bne.n	80077a2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3308      	adds	r3, #8
 80077f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007810:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007814:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007818:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800781c:	e841 2300 	strex	r3, r2, [r1]
 8007820:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1e1      	bne.n	80077ec <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3308      	adds	r3, #8
 800782e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800783a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800784c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800784e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007852:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800785a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e3      	bne.n	8007828 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800787c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800787e:	f023 0310 	bic.w	r3, r3, #16
 8007882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007890:	65bb      	str	r3, [r7, #88]	; 0x58
 8007892:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800789e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e4      	bne.n	800786e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fb fb8b 	bl	8002fc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	b29b      	uxth	r3, r3
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f91c 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078c8:	e0fb      	b.n	8007ac2 <HAL_UART_IRQHandler+0x726>
 80078ca:	bf00      	nop
 80078cc:	40020010 	.word	0x40020010
 80078d0:	40020028 	.word	0x40020028
 80078d4:	40020040 	.word	0x40020040
 80078d8:	40020058 	.word	0x40020058
 80078dc:	40020070 	.word	0x40020070
 80078e0:	40020088 	.word	0x40020088
 80078e4:	400200a0 	.word	0x400200a0
 80078e8:	400200b8 	.word	0x400200b8
 80078ec:	40020410 	.word	0x40020410
 80078f0:	40020428 	.word	0x40020428
 80078f4:	40020440 	.word	0x40020440
 80078f8:	40020458 	.word	0x40020458
 80078fc:	40020470 	.word	0x40020470
 8007900:	40020488 	.word	0x40020488
 8007904:	400204a0 	.word	0x400204a0
 8007908:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007918:	b29b      	uxth	r3, r3
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 80cc 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800792e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80c7 	beq.w	8007ac6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800794c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	461a      	mov	r2, r3
 8007956:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800795a:	647b      	str	r3, [r7, #68]	; 0x44
 800795c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007962:	e841 2300 	strex	r3, r2, [r1]
 8007966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1e4      	bne.n	8007938 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	623b      	str	r3, [r7, #32]
   return(result);
 800797e:	6a3a      	ldr	r2, [r7, #32]
 8007980:	4b54      	ldr	r3, [pc, #336]	; (8007ad4 <HAL_UART_IRQHandler+0x738>)
 8007982:	4013      	ands	r3, r2
 8007984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007992:	633a      	str	r2, [r7, #48]	; 0x30
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e3      	bne.n	800796e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f023 0310 	bic.w	r3, r3, #16
 80079ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	69b9      	ldr	r1, [r7, #24]
 80079e2:	69fa      	ldr	r2, [r7, #28]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e4      	bne.n	80079ba <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f882 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079fc:	e063      	b.n	8007ac6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00e      	beq.n	8007a28 <HAL_UART_IRQHandler+0x68c>
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d008      	beq.n	8007a28 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 fec9 	bl	80097b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a26:	e051      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d014      	beq.n	8007a5e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d008      	beq.n	8007a5e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d03a      	beq.n	8007aca <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
    }
    return;
 8007a5c:	e035      	b.n	8007aca <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d009      	beq.n	8007a7e <HAL_UART_IRQHandler+0x6e2>
 8007a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fa16 	bl	8008ea8 <UART_EndTransmit_IT>
    return;
 8007a7c:	e026      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <HAL_UART_IRQHandler+0x702>
 8007a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fea2 	bl	80097e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a9c:	e016      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d010      	beq.n	8007acc <HAL_UART_IRQHandler+0x730>
 8007aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da0c      	bge.n	8007acc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fe8a 	bl	80097cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ab8:	e008      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
      return;
 8007aba:	bf00      	nop
 8007abc:	e006      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
    return;
 8007abe:	bf00      	nop
 8007ac0:	e004      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
      return;
 8007ac2:	bf00      	nop
 8007ac4:	e002      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
      return;
 8007ac6:	bf00      	nop
 8007ac8:	e000      	b.n	8007acc <HAL_UART_IRQHandler+0x730>
    return;
 8007aca:	bf00      	nop
  }
}
 8007acc:	37e8      	adds	r7, #232	; 0xe8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	effffffe 	.word	0xeffffffe

08007ad8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b1c:	b092      	sub	sp, #72	; 0x48
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	689a      	ldr	r2, [r3, #8]
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	431a      	orrs	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	431a      	orrs	r2, r3
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4bbe      	ldr	r3, [pc, #760]	; (8007e40 <UART_SetConfig+0x328>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b50:	430b      	orrs	r3, r1
 8007b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4ab3      	ldr	r2, [pc, #716]	; (8007e44 <UART_SetConfig+0x32c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b80:	4313      	orrs	r3, r2
 8007b82:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	4baf      	ldr	r3, [pc, #700]	; (8007e48 <UART_SetConfig+0x330>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b94:	430b      	orrs	r3, r1
 8007b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	f023 010f 	bic.w	r1, r3, #15
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4aa6      	ldr	r2, [pc, #664]	; (8007e4c <UART_SetConfig+0x334>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d177      	bne.n	8007ca8 <UART_SetConfig+0x190>
 8007bb8:	4ba5      	ldr	r3, [pc, #660]	; (8007e50 <UART_SetConfig+0x338>)
 8007bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bc0:	2b28      	cmp	r3, #40	; 0x28
 8007bc2:	d86d      	bhi.n	8007ca0 <UART_SetConfig+0x188>
 8007bc4:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <UART_SetConfig+0xb4>)
 8007bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bca:	bf00      	nop
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007ca1 	.word	0x08007ca1
 8007bd4:	08007ca1 	.word	0x08007ca1
 8007bd8:	08007ca1 	.word	0x08007ca1
 8007bdc:	08007ca1 	.word	0x08007ca1
 8007be0:	08007ca1 	.word	0x08007ca1
 8007be4:	08007ca1 	.word	0x08007ca1
 8007be8:	08007ca1 	.word	0x08007ca1
 8007bec:	08007c79 	.word	0x08007c79
 8007bf0:	08007ca1 	.word	0x08007ca1
 8007bf4:	08007ca1 	.word	0x08007ca1
 8007bf8:	08007ca1 	.word	0x08007ca1
 8007bfc:	08007ca1 	.word	0x08007ca1
 8007c00:	08007ca1 	.word	0x08007ca1
 8007c04:	08007ca1 	.word	0x08007ca1
 8007c08:	08007ca1 	.word	0x08007ca1
 8007c0c:	08007c81 	.word	0x08007c81
 8007c10:	08007ca1 	.word	0x08007ca1
 8007c14:	08007ca1 	.word	0x08007ca1
 8007c18:	08007ca1 	.word	0x08007ca1
 8007c1c:	08007ca1 	.word	0x08007ca1
 8007c20:	08007ca1 	.word	0x08007ca1
 8007c24:	08007ca1 	.word	0x08007ca1
 8007c28:	08007ca1 	.word	0x08007ca1
 8007c2c:	08007c89 	.word	0x08007c89
 8007c30:	08007ca1 	.word	0x08007ca1
 8007c34:	08007ca1 	.word	0x08007ca1
 8007c38:	08007ca1 	.word	0x08007ca1
 8007c3c:	08007ca1 	.word	0x08007ca1
 8007c40:	08007ca1 	.word	0x08007ca1
 8007c44:	08007ca1 	.word	0x08007ca1
 8007c48:	08007ca1 	.word	0x08007ca1
 8007c4c:	08007c91 	.word	0x08007c91
 8007c50:	08007ca1 	.word	0x08007ca1
 8007c54:	08007ca1 	.word	0x08007ca1
 8007c58:	08007ca1 	.word	0x08007ca1
 8007c5c:	08007ca1 	.word	0x08007ca1
 8007c60:	08007ca1 	.word	0x08007ca1
 8007c64:	08007ca1 	.word	0x08007ca1
 8007c68:	08007ca1 	.word	0x08007ca1
 8007c6c:	08007c99 	.word	0x08007c99
 8007c70:	2301      	movs	r3, #1
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e326      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007c78:	2304      	movs	r3, #4
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c7e:	e322      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007c80:	2308      	movs	r3, #8
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c86:	e31e      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007c88:	2310      	movs	r3, #16
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c8e:	e31a      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007c90:	2320      	movs	r3, #32
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c96:	e316      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c9e:	e312      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007ca0:	2380      	movs	r3, #128	; 0x80
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ca6:	e30e      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a69      	ldr	r2, [pc, #420]	; (8007e54 <UART_SetConfig+0x33c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d130      	bne.n	8007d14 <UART_SetConfig+0x1fc>
 8007cb2:	4b67      	ldr	r3, [pc, #412]	; (8007e50 <UART_SetConfig+0x338>)
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	d826      	bhi.n	8007d0c <UART_SetConfig+0x1f4>
 8007cbe:	a201      	add	r2, pc, #4	; (adr r2, 8007cc4 <UART_SetConfig+0x1ac>)
 8007cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc4:	08007cdd 	.word	0x08007cdd
 8007cc8:	08007ce5 	.word	0x08007ce5
 8007ccc:	08007ced 	.word	0x08007ced
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007cfd 	.word	0x08007cfd
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e2f0      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cea:	e2ec      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007cec:	2308      	movs	r3, #8
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cf2:	e2e8      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cfa:	e2e4      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007cfc:	2320      	movs	r3, #32
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d02:	e2e0      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d04:	2340      	movs	r3, #64	; 0x40
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d0a:	e2dc      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d0c:	2380      	movs	r3, #128	; 0x80
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d12:	e2d8      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a4f      	ldr	r2, [pc, #316]	; (8007e58 <UART_SetConfig+0x340>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d130      	bne.n	8007d80 <UART_SetConfig+0x268>
 8007d1e:	4b4c      	ldr	r3, [pc, #304]	; (8007e50 <UART_SetConfig+0x338>)
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d826      	bhi.n	8007d78 <UART_SetConfig+0x260>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <UART_SetConfig+0x218>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d51 	.word	0x08007d51
 8007d38:	08007d59 	.word	0x08007d59
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e2ba      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e2b6      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5e:	e2b2      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d66:	e2ae      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d68:	2320      	movs	r3, #32
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d6e:	e2aa      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d70:	2340      	movs	r3, #64	; 0x40
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d76:	e2a6      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d7e:	e2a2      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a35      	ldr	r2, [pc, #212]	; (8007e5c <UART_SetConfig+0x344>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d130      	bne.n	8007dec <UART_SetConfig+0x2d4>
 8007d8a:	4b31      	ldr	r3, [pc, #196]	; (8007e50 <UART_SetConfig+0x338>)
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d826      	bhi.n	8007de4 <UART_SetConfig+0x2cc>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <UART_SetConfig+0x284>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007db5 	.word	0x08007db5
 8007da0:	08007dbd 	.word	0x08007dbd
 8007da4:	08007dc5 	.word	0x08007dc5
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007dd5 	.word	0x08007dd5
 8007db0:	08007ddd 	.word	0x08007ddd
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e284      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007dbc:	2304      	movs	r3, #4
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc2:	e280      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dca:	e27c      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dd2:	e278      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007dd4:	2320      	movs	r3, #32
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dda:	e274      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007ddc:	2340      	movs	r3, #64	; 0x40
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007de2:	e270      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dea:	e26c      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a1b      	ldr	r2, [pc, #108]	; (8007e60 <UART_SetConfig+0x348>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d142      	bne.n	8007e7c <UART_SetConfig+0x364>
 8007df6:	4b16      	ldr	r3, [pc, #88]	; (8007e50 <UART_SetConfig+0x338>)
 8007df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	2b05      	cmp	r3, #5
 8007e00:	d838      	bhi.n	8007e74 <UART_SetConfig+0x35c>
 8007e02:	a201      	add	r2, pc, #4	; (adr r2, 8007e08 <UART_SetConfig+0x2f0>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e21 	.word	0x08007e21
 8007e0c:	08007e29 	.word	0x08007e29
 8007e10:	08007e31 	.word	0x08007e31
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e65 	.word	0x08007e65
 8007e1c:	08007e6d 	.word	0x08007e6d
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e24e      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2e:	e24a      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007e30:	2308      	movs	r3, #8
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e36:	e246      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007e38:	2310      	movs	r3, #16
 8007e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3e:	e242      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007e40:	cfff69f3 	.word	0xcfff69f3
 8007e44:	58000c00 	.word	0x58000c00
 8007e48:	11fff4ff 	.word	0x11fff4ff
 8007e4c:	40011000 	.word	0x40011000
 8007e50:	58024400 	.word	0x58024400
 8007e54:	40004400 	.word	0x40004400
 8007e58:	40004800 	.word	0x40004800
 8007e5c:	40004c00 	.word	0x40004c00
 8007e60:	40005000 	.word	0x40005000
 8007e64:	2320      	movs	r3, #32
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e22c      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007e6c:	2340      	movs	r3, #64	; 0x40
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e228      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007e74:	2380      	movs	r3, #128	; 0x80
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e224      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4ab1      	ldr	r2, [pc, #708]	; (8008148 <UART_SetConfig+0x630>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d176      	bne.n	8007f74 <UART_SetConfig+0x45c>
 8007e86:	4bb1      	ldr	r3, [pc, #708]	; (800814c <UART_SetConfig+0x634>)
 8007e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e8e:	2b28      	cmp	r3, #40	; 0x28
 8007e90:	d86c      	bhi.n	8007f6c <UART_SetConfig+0x454>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <UART_SetConfig+0x380>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007f3d 	.word	0x08007f3d
 8007e9c:	08007f6d 	.word	0x08007f6d
 8007ea0:	08007f6d 	.word	0x08007f6d
 8007ea4:	08007f6d 	.word	0x08007f6d
 8007ea8:	08007f6d 	.word	0x08007f6d
 8007eac:	08007f6d 	.word	0x08007f6d
 8007eb0:	08007f6d 	.word	0x08007f6d
 8007eb4:	08007f6d 	.word	0x08007f6d
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f6d 	.word	0x08007f6d
 8007ec0:	08007f6d 	.word	0x08007f6d
 8007ec4:	08007f6d 	.word	0x08007f6d
 8007ec8:	08007f6d 	.word	0x08007f6d
 8007ecc:	08007f6d 	.word	0x08007f6d
 8007ed0:	08007f6d 	.word	0x08007f6d
 8007ed4:	08007f6d 	.word	0x08007f6d
 8007ed8:	08007f4d 	.word	0x08007f4d
 8007edc:	08007f6d 	.word	0x08007f6d
 8007ee0:	08007f6d 	.word	0x08007f6d
 8007ee4:	08007f6d 	.word	0x08007f6d
 8007ee8:	08007f6d 	.word	0x08007f6d
 8007eec:	08007f6d 	.word	0x08007f6d
 8007ef0:	08007f6d 	.word	0x08007f6d
 8007ef4:	08007f6d 	.word	0x08007f6d
 8007ef8:	08007f55 	.word	0x08007f55
 8007efc:	08007f6d 	.word	0x08007f6d
 8007f00:	08007f6d 	.word	0x08007f6d
 8007f04:	08007f6d 	.word	0x08007f6d
 8007f08:	08007f6d 	.word	0x08007f6d
 8007f0c:	08007f6d 	.word	0x08007f6d
 8007f10:	08007f6d 	.word	0x08007f6d
 8007f14:	08007f6d 	.word	0x08007f6d
 8007f18:	08007f5d 	.word	0x08007f5d
 8007f1c:	08007f6d 	.word	0x08007f6d
 8007f20:	08007f6d 	.word	0x08007f6d
 8007f24:	08007f6d 	.word	0x08007f6d
 8007f28:	08007f6d 	.word	0x08007f6d
 8007f2c:	08007f6d 	.word	0x08007f6d
 8007f30:	08007f6d 	.word	0x08007f6d
 8007f34:	08007f6d 	.word	0x08007f6d
 8007f38:	08007f65 	.word	0x08007f65
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e1c0      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007f44:	2304      	movs	r3, #4
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e1bc      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007f4c:	2308      	movs	r3, #8
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f52:	e1b8      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007f54:	2310      	movs	r3, #16
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5a:	e1b4      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007f5c:	2320      	movs	r3, #32
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f62:	e1b0      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007f64:	2340      	movs	r3, #64	; 0x40
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e1ac      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f72:	e1a8      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a75      	ldr	r2, [pc, #468]	; (8008150 <UART_SetConfig+0x638>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d130      	bne.n	8007fe0 <UART_SetConfig+0x4c8>
 8007f7e:	4b73      	ldr	r3, [pc, #460]	; (800814c <UART_SetConfig+0x634>)
 8007f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f82:	f003 0307 	and.w	r3, r3, #7
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d826      	bhi.n	8007fd8 <UART_SetConfig+0x4c0>
 8007f8a:	a201      	add	r2, pc, #4	; (adr r2, 8007f90 <UART_SetConfig+0x478>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fa9 	.word	0x08007fa9
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	08007fb9 	.word	0x08007fb9
 8007f9c:	08007fc1 	.word	0x08007fc1
 8007fa0:	08007fc9 	.word	0x08007fc9
 8007fa4:	08007fd1 	.word	0x08007fd1
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e18a      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007fb0:	2304      	movs	r3, #4
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fb6:	e186      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007fb8:	2308      	movs	r3, #8
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fbe:	e182      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc6:	e17e      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007fc8:	2320      	movs	r3, #32
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fce:	e17a      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007fd0:	2340      	movs	r3, #64	; 0x40
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e176      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007fd8:	2380      	movs	r3, #128	; 0x80
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e172      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a5b      	ldr	r2, [pc, #364]	; (8008154 <UART_SetConfig+0x63c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d130      	bne.n	800804c <UART_SetConfig+0x534>
 8007fea:	4b58      	ldr	r3, [pc, #352]	; (800814c <UART_SetConfig+0x634>)
 8007fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	d826      	bhi.n	8008044 <UART_SetConfig+0x52c>
 8007ff6:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <UART_SetConfig+0x4e4>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008015 	.word	0x08008015
 8008000:	0800801d 	.word	0x0800801d
 8008004:	08008025 	.word	0x08008025
 8008008:	0800802d 	.word	0x0800802d
 800800c:	08008035 	.word	0x08008035
 8008010:	0800803d 	.word	0x0800803d
 8008014:	2300      	movs	r3, #0
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e154      	b.n	80082c6 <UART_SetConfig+0x7ae>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e150      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e14c      	b.n	80082c6 <UART_SetConfig+0x7ae>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e148      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008034:	2320      	movs	r3, #32
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803a:	e144      	b.n	80082c6 <UART_SetConfig+0x7ae>
 800803c:	2340      	movs	r3, #64	; 0x40
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e140      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008044:	2380      	movs	r3, #128	; 0x80
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e13c      	b.n	80082c6 <UART_SetConfig+0x7ae>
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a41      	ldr	r2, [pc, #260]	; (8008158 <UART_SetConfig+0x640>)
 8008052:	4293      	cmp	r3, r2
 8008054:	f040 8082 	bne.w	800815c <UART_SetConfig+0x644>
 8008058:	4b3c      	ldr	r3, [pc, #240]	; (800814c <UART_SetConfig+0x634>)
 800805a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008060:	2b28      	cmp	r3, #40	; 0x28
 8008062:	d86d      	bhi.n	8008140 <UART_SetConfig+0x628>
 8008064:	a201      	add	r2, pc, #4	; (adr r2, 800806c <UART_SetConfig+0x554>)
 8008066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806a:	bf00      	nop
 800806c:	08008111 	.word	0x08008111
 8008070:	08008141 	.word	0x08008141
 8008074:	08008141 	.word	0x08008141
 8008078:	08008141 	.word	0x08008141
 800807c:	08008141 	.word	0x08008141
 8008080:	08008141 	.word	0x08008141
 8008084:	08008141 	.word	0x08008141
 8008088:	08008141 	.word	0x08008141
 800808c:	08008119 	.word	0x08008119
 8008090:	08008141 	.word	0x08008141
 8008094:	08008141 	.word	0x08008141
 8008098:	08008141 	.word	0x08008141
 800809c:	08008141 	.word	0x08008141
 80080a0:	08008141 	.word	0x08008141
 80080a4:	08008141 	.word	0x08008141
 80080a8:	08008141 	.word	0x08008141
 80080ac:	08008121 	.word	0x08008121
 80080b0:	08008141 	.word	0x08008141
 80080b4:	08008141 	.word	0x08008141
 80080b8:	08008141 	.word	0x08008141
 80080bc:	08008141 	.word	0x08008141
 80080c0:	08008141 	.word	0x08008141
 80080c4:	08008141 	.word	0x08008141
 80080c8:	08008141 	.word	0x08008141
 80080cc:	08008129 	.word	0x08008129
 80080d0:	08008141 	.word	0x08008141
 80080d4:	08008141 	.word	0x08008141
 80080d8:	08008141 	.word	0x08008141
 80080dc:	08008141 	.word	0x08008141
 80080e0:	08008141 	.word	0x08008141
 80080e4:	08008141 	.word	0x08008141
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008131 	.word	0x08008131
 80080f0:	08008141 	.word	0x08008141
 80080f4:	08008141 	.word	0x08008141
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008141 	.word	0x08008141
 8008100:	08008141 	.word	0x08008141
 8008104:	08008141 	.word	0x08008141
 8008108:	08008141 	.word	0x08008141
 800810c:	08008139 	.word	0x08008139
 8008110:	2301      	movs	r3, #1
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e0d6      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811e:	e0d2      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008126:	e0ce      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e0ca      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008130:	2320      	movs	r3, #32
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e0c6      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008138:	2340      	movs	r3, #64	; 0x40
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e0c2      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008140:	2380      	movs	r3, #128	; 0x80
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e0be      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008148:	40011400 	.word	0x40011400
 800814c:	58024400 	.word	0x58024400
 8008150:	40007800 	.word	0x40007800
 8008154:	40007c00 	.word	0x40007c00
 8008158:	40011800 	.word	0x40011800
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4aad      	ldr	r2, [pc, #692]	; (8008418 <UART_SetConfig+0x900>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d176      	bne.n	8008254 <UART_SetConfig+0x73c>
 8008166:	4bad      	ldr	r3, [pc, #692]	; (800841c <UART_SetConfig+0x904>)
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800816e:	2b28      	cmp	r3, #40	; 0x28
 8008170:	d86c      	bhi.n	800824c <UART_SetConfig+0x734>
 8008172:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <UART_SetConfig+0x660>)
 8008174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008178:	0800821d 	.word	0x0800821d
 800817c:	0800824d 	.word	0x0800824d
 8008180:	0800824d 	.word	0x0800824d
 8008184:	0800824d 	.word	0x0800824d
 8008188:	0800824d 	.word	0x0800824d
 800818c:	0800824d 	.word	0x0800824d
 8008190:	0800824d 	.word	0x0800824d
 8008194:	0800824d 	.word	0x0800824d
 8008198:	08008225 	.word	0x08008225
 800819c:	0800824d 	.word	0x0800824d
 80081a0:	0800824d 	.word	0x0800824d
 80081a4:	0800824d 	.word	0x0800824d
 80081a8:	0800824d 	.word	0x0800824d
 80081ac:	0800824d 	.word	0x0800824d
 80081b0:	0800824d 	.word	0x0800824d
 80081b4:	0800824d 	.word	0x0800824d
 80081b8:	0800822d 	.word	0x0800822d
 80081bc:	0800824d 	.word	0x0800824d
 80081c0:	0800824d 	.word	0x0800824d
 80081c4:	0800824d 	.word	0x0800824d
 80081c8:	0800824d 	.word	0x0800824d
 80081cc:	0800824d 	.word	0x0800824d
 80081d0:	0800824d 	.word	0x0800824d
 80081d4:	0800824d 	.word	0x0800824d
 80081d8:	08008235 	.word	0x08008235
 80081dc:	0800824d 	.word	0x0800824d
 80081e0:	0800824d 	.word	0x0800824d
 80081e4:	0800824d 	.word	0x0800824d
 80081e8:	0800824d 	.word	0x0800824d
 80081ec:	0800824d 	.word	0x0800824d
 80081f0:	0800824d 	.word	0x0800824d
 80081f4:	0800824d 	.word	0x0800824d
 80081f8:	0800823d 	.word	0x0800823d
 80081fc:	0800824d 	.word	0x0800824d
 8008200:	0800824d 	.word	0x0800824d
 8008204:	0800824d 	.word	0x0800824d
 8008208:	0800824d 	.word	0x0800824d
 800820c:	0800824d 	.word	0x0800824d
 8008210:	0800824d 	.word	0x0800824d
 8008214:	0800824d 	.word	0x0800824d
 8008218:	08008245 	.word	0x08008245
 800821c:	2301      	movs	r3, #1
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e050      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008224:	2304      	movs	r3, #4
 8008226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822a:	e04c      	b.n	80082c6 <UART_SetConfig+0x7ae>
 800822c:	2308      	movs	r3, #8
 800822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008232:	e048      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008234:	2310      	movs	r3, #16
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823a:	e044      	b.n	80082c6 <UART_SetConfig+0x7ae>
 800823c:	2320      	movs	r3, #32
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008242:	e040      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824a:	e03c      	b.n	80082c6 <UART_SetConfig+0x7ae>
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008252:	e038      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a71      	ldr	r2, [pc, #452]	; (8008420 <UART_SetConfig+0x908>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d130      	bne.n	80082c0 <UART_SetConfig+0x7a8>
 800825e:	4b6f      	ldr	r3, [pc, #444]	; (800841c <UART_SetConfig+0x904>)
 8008260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008262:	f003 0307 	and.w	r3, r3, #7
 8008266:	2b05      	cmp	r3, #5
 8008268:	d826      	bhi.n	80082b8 <UART_SetConfig+0x7a0>
 800826a:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <UART_SetConfig+0x758>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008289 	.word	0x08008289
 8008274:	08008291 	.word	0x08008291
 8008278:	08008299 	.word	0x08008299
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082a9 	.word	0x080082a9
 8008284:	080082b1 	.word	0x080082b1
 8008288:	2302      	movs	r3, #2
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e01a      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008290:	2304      	movs	r3, #4
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008296:	e016      	b.n	80082c6 <UART_SetConfig+0x7ae>
 8008298:	2308      	movs	r3, #8
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829e:	e012      	b.n	80082c6 <UART_SetConfig+0x7ae>
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a6:	e00e      	b.n	80082c6 <UART_SetConfig+0x7ae>
 80082a8:	2320      	movs	r3, #32
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ae:	e00a      	b.n	80082c6 <UART_SetConfig+0x7ae>
 80082b0:	2340      	movs	r3, #64	; 0x40
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b6:	e006      	b.n	80082c6 <UART_SetConfig+0x7ae>
 80082b8:	2380      	movs	r3, #128	; 0x80
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082be:	e002      	b.n	80082c6 <UART_SetConfig+0x7ae>
 80082c0:	2380      	movs	r3, #128	; 0x80
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a55      	ldr	r2, [pc, #340]	; (8008420 <UART_SetConfig+0x908>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	f040 80f8 	bne.w	80084c2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	dc46      	bgt.n	8008368 <UART_SetConfig+0x850>
 80082da:	2b02      	cmp	r3, #2
 80082dc:	db75      	blt.n	80083ca <UART_SetConfig+0x8b2>
 80082de:	3b02      	subs	r3, #2
 80082e0:	2b1e      	cmp	r3, #30
 80082e2:	d872      	bhi.n	80083ca <UART_SetConfig+0x8b2>
 80082e4:	a201      	add	r2, pc, #4	; (adr r2, 80082ec <UART_SetConfig+0x7d4>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	0800836f 	.word	0x0800836f
 80082f0:	080083cb 	.word	0x080083cb
 80082f4:	08008377 	.word	0x08008377
 80082f8:	080083cb 	.word	0x080083cb
 80082fc:	080083cb 	.word	0x080083cb
 8008300:	080083cb 	.word	0x080083cb
 8008304:	08008387 	.word	0x08008387
 8008308:	080083cb 	.word	0x080083cb
 800830c:	080083cb 	.word	0x080083cb
 8008310:	080083cb 	.word	0x080083cb
 8008314:	080083cb 	.word	0x080083cb
 8008318:	080083cb 	.word	0x080083cb
 800831c:	080083cb 	.word	0x080083cb
 8008320:	080083cb 	.word	0x080083cb
 8008324:	08008397 	.word	0x08008397
 8008328:	080083cb 	.word	0x080083cb
 800832c:	080083cb 	.word	0x080083cb
 8008330:	080083cb 	.word	0x080083cb
 8008334:	080083cb 	.word	0x080083cb
 8008338:	080083cb 	.word	0x080083cb
 800833c:	080083cb 	.word	0x080083cb
 8008340:	080083cb 	.word	0x080083cb
 8008344:	080083cb 	.word	0x080083cb
 8008348:	080083cb 	.word	0x080083cb
 800834c:	080083cb 	.word	0x080083cb
 8008350:	080083cb 	.word	0x080083cb
 8008354:	080083cb 	.word	0x080083cb
 8008358:	080083cb 	.word	0x080083cb
 800835c:	080083cb 	.word	0x080083cb
 8008360:	080083cb 	.word	0x080083cb
 8008364:	080083bd 	.word	0x080083bd
 8008368:	2b40      	cmp	r3, #64	; 0x40
 800836a:	d02a      	beq.n	80083c2 <UART_SetConfig+0x8aa>
 800836c:	e02d      	b.n	80083ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800836e:	f7fd fbf1 	bl	8005b54 <HAL_RCCEx_GetD3PCLK1Freq>
 8008372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008374:	e02f      	b.n	80083d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800837a:	4618      	mov	r0, r3
 800837c:	f7fd fc00 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008384:	e027      	b.n	80083d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008386:	f107 0318 	add.w	r3, r7, #24
 800838a:	4618      	mov	r0, r3
 800838c:	f7fd fd4c 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008394:	e01f      	b.n	80083d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008396:	4b21      	ldr	r3, [pc, #132]	; (800841c <UART_SetConfig+0x904>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083a2:	4b1e      	ldr	r3, [pc, #120]	; (800841c <UART_SetConfig+0x904>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	08db      	lsrs	r3, r3, #3
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <UART_SetConfig+0x90c>)
 80083ae:	fa22 f303 	lsr.w	r3, r2, r3
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083b4:	e00f      	b.n	80083d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80083b6:	4b1b      	ldr	r3, [pc, #108]	; (8008424 <UART_SetConfig+0x90c>)
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083ba:	e00c      	b.n	80083d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083bc:	4b1a      	ldr	r3, [pc, #104]	; (8008428 <UART_SetConfig+0x910>)
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c0:	e009      	b.n	80083d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083c8:	e005      	b.n	80083d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80083d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 81ee 	beq.w	80087ba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	4a12      	ldr	r2, [pc, #72]	; (800842c <UART_SetConfig+0x914>)
 80083e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80083f0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4413      	add	r3, r2
 80083fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fe:	429a      	cmp	r2, r3
 8008400:	d305      	bcc.n	800840e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800840a:	429a      	cmp	r2, r3
 800840c:	d910      	bls.n	8008430 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008414:	e1d1      	b.n	80087ba <UART_SetConfig+0xca2>
 8008416:	bf00      	nop
 8008418:	40011c00 	.word	0x40011c00
 800841c:	58024400 	.word	0x58024400
 8008420:	58000c00 	.word	0x58000c00
 8008424:	03d09000 	.word	0x03d09000
 8008428:	003d0900 	.word	0x003d0900
 800842c:	0800f2d8 	.word	0x0800f2d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008432:	2200      	movs	r2, #0
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	60fa      	str	r2, [r7, #12]
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	4ac0      	ldr	r2, [pc, #768]	; (8008740 <UART_SetConfig+0xc28>)
 800843e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008442:	b29b      	uxth	r3, r3
 8008444:	2200      	movs	r2, #0
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	607a      	str	r2, [r7, #4]
 800844a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800844e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008452:	f7f8 f971 	bl	8000738 <__aeabi_uldivmod>
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	4610      	mov	r0, r2
 800845c:	4619      	mov	r1, r3
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	f04f 0300 	mov.w	r3, #0
 8008466:	020b      	lsls	r3, r1, #8
 8008468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800846c:	0202      	lsls	r2, r0, #8
 800846e:	6979      	ldr	r1, [r7, #20]
 8008470:	6849      	ldr	r1, [r1, #4]
 8008472:	0849      	lsrs	r1, r1, #1
 8008474:	2000      	movs	r0, #0
 8008476:	460c      	mov	r4, r1
 8008478:	4605      	mov	r5, r0
 800847a:	eb12 0804 	adds.w	r8, r2, r4
 800847e:	eb43 0905 	adc.w	r9, r3, r5
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	469a      	mov	sl, r3
 800848a:	4693      	mov	fp, r2
 800848c:	4652      	mov	r2, sl
 800848e:	465b      	mov	r3, fp
 8008490:	4640      	mov	r0, r8
 8008492:	4649      	mov	r1, r9
 8008494:	f7f8 f950 	bl	8000738 <__aeabi_uldivmod>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4613      	mov	r3, r2
 800849e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084a6:	d308      	bcc.n	80084ba <UART_SetConfig+0x9a2>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ae:	d204      	bcs.n	80084ba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b6:	60da      	str	r2, [r3, #12]
 80084b8:	e17f      	b.n	80087ba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084c0:	e17b      	b.n	80087ba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ca:	f040 80bd 	bne.w	8008648 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80084ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	dc48      	bgt.n	8008568 <UART_SetConfig+0xa50>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	db7b      	blt.n	80085d2 <UART_SetConfig+0xaba>
 80084da:	2b20      	cmp	r3, #32
 80084dc:	d879      	bhi.n	80085d2 <UART_SetConfig+0xaba>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <UART_SetConfig+0x9cc>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	0800856f 	.word	0x0800856f
 80084e8:	08008577 	.word	0x08008577
 80084ec:	080085d3 	.word	0x080085d3
 80084f0:	080085d3 	.word	0x080085d3
 80084f4:	0800857f 	.word	0x0800857f
 80084f8:	080085d3 	.word	0x080085d3
 80084fc:	080085d3 	.word	0x080085d3
 8008500:	080085d3 	.word	0x080085d3
 8008504:	0800858f 	.word	0x0800858f
 8008508:	080085d3 	.word	0x080085d3
 800850c:	080085d3 	.word	0x080085d3
 8008510:	080085d3 	.word	0x080085d3
 8008514:	080085d3 	.word	0x080085d3
 8008518:	080085d3 	.word	0x080085d3
 800851c:	080085d3 	.word	0x080085d3
 8008520:	080085d3 	.word	0x080085d3
 8008524:	0800859f 	.word	0x0800859f
 8008528:	080085d3 	.word	0x080085d3
 800852c:	080085d3 	.word	0x080085d3
 8008530:	080085d3 	.word	0x080085d3
 8008534:	080085d3 	.word	0x080085d3
 8008538:	080085d3 	.word	0x080085d3
 800853c:	080085d3 	.word	0x080085d3
 8008540:	080085d3 	.word	0x080085d3
 8008544:	080085d3 	.word	0x080085d3
 8008548:	080085d3 	.word	0x080085d3
 800854c:	080085d3 	.word	0x080085d3
 8008550:	080085d3 	.word	0x080085d3
 8008554:	080085d3 	.word	0x080085d3
 8008558:	080085d3 	.word	0x080085d3
 800855c:	080085d3 	.word	0x080085d3
 8008560:	080085d3 	.word	0x080085d3
 8008564:	080085c5 	.word	0x080085c5
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d02e      	beq.n	80085ca <UART_SetConfig+0xab2>
 800856c:	e031      	b.n	80085d2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800856e:	f7fc fbcb 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 8008572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008574:	e033      	b.n	80085de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008576:	f7fc fbdd 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 800857a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800857c:	e02f      	b.n	80085de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800857e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008582:	4618      	mov	r0, r3
 8008584:	f7fd fafc 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800858c:	e027      	b.n	80085de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800858e:	f107 0318 	add.w	r3, r7, #24
 8008592:	4618      	mov	r0, r3
 8008594:	f7fd fc48 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800859c:	e01f      	b.n	80085de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800859e:	4b69      	ldr	r3, [pc, #420]	; (8008744 <UART_SetConfig+0xc2c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085aa:	4b66      	ldr	r3, [pc, #408]	; (8008744 <UART_SetConfig+0xc2c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	08db      	lsrs	r3, r3, #3
 80085b0:	f003 0303 	and.w	r3, r3, #3
 80085b4:	4a64      	ldr	r2, [pc, #400]	; (8008748 <UART_SetConfig+0xc30>)
 80085b6:	fa22 f303 	lsr.w	r3, r2, r3
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085bc:	e00f      	b.n	80085de <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80085be:	4b62      	ldr	r3, [pc, #392]	; (8008748 <UART_SetConfig+0xc30>)
 80085c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c2:	e00c      	b.n	80085de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085c4:	4b61      	ldr	r3, [pc, #388]	; (800874c <UART_SetConfig+0xc34>)
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c8:	e009      	b.n	80085de <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d0:	e005      	b.n	80085de <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80085dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 80ea 	beq.w	80087ba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	4a55      	ldr	r2, [pc, #340]	; (8008740 <UART_SetConfig+0xc28>)
 80085ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085f8:	005a      	lsls	r2, r3, #1
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	441a      	add	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	fbb2 f3f3 	udiv	r3, r2, r3
 800860a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800860c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d916      	bls.n	8008640 <UART_SetConfig+0xb28>
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008618:	d212      	bcs.n	8008640 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	b29b      	uxth	r3, r3
 800861e:	f023 030f 	bic.w	r3, r3, #15
 8008622:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	b29b      	uxth	r3, r3
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	b29a      	uxth	r2, r3
 8008630:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008632:	4313      	orrs	r3, r2
 8008634:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	e0bc      	b.n	80087ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008646:	e0b8      	b.n	80087ba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008648:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800864c:	2b20      	cmp	r3, #32
 800864e:	dc4b      	bgt.n	80086e8 <UART_SetConfig+0xbd0>
 8008650:	2b00      	cmp	r3, #0
 8008652:	f2c0 8087 	blt.w	8008764 <UART_SetConfig+0xc4c>
 8008656:	2b20      	cmp	r3, #32
 8008658:	f200 8084 	bhi.w	8008764 <UART_SetConfig+0xc4c>
 800865c:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <UART_SetConfig+0xb4c>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	080086ef 	.word	0x080086ef
 8008668:	080086f7 	.word	0x080086f7
 800866c:	08008765 	.word	0x08008765
 8008670:	08008765 	.word	0x08008765
 8008674:	080086ff 	.word	0x080086ff
 8008678:	08008765 	.word	0x08008765
 800867c:	08008765 	.word	0x08008765
 8008680:	08008765 	.word	0x08008765
 8008684:	0800870f 	.word	0x0800870f
 8008688:	08008765 	.word	0x08008765
 800868c:	08008765 	.word	0x08008765
 8008690:	08008765 	.word	0x08008765
 8008694:	08008765 	.word	0x08008765
 8008698:	08008765 	.word	0x08008765
 800869c:	08008765 	.word	0x08008765
 80086a0:	08008765 	.word	0x08008765
 80086a4:	0800871f 	.word	0x0800871f
 80086a8:	08008765 	.word	0x08008765
 80086ac:	08008765 	.word	0x08008765
 80086b0:	08008765 	.word	0x08008765
 80086b4:	08008765 	.word	0x08008765
 80086b8:	08008765 	.word	0x08008765
 80086bc:	08008765 	.word	0x08008765
 80086c0:	08008765 	.word	0x08008765
 80086c4:	08008765 	.word	0x08008765
 80086c8:	08008765 	.word	0x08008765
 80086cc:	08008765 	.word	0x08008765
 80086d0:	08008765 	.word	0x08008765
 80086d4:	08008765 	.word	0x08008765
 80086d8:	08008765 	.word	0x08008765
 80086dc:	08008765 	.word	0x08008765
 80086e0:	08008765 	.word	0x08008765
 80086e4:	08008757 	.word	0x08008757
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d037      	beq.n	800875c <UART_SetConfig+0xc44>
 80086ec:	e03a      	b.n	8008764 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ee:	f7fc fb0b 	bl	8004d08 <HAL_RCC_GetPCLK1Freq>
 80086f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086f4:	e03c      	b.n	8008770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086f6:	f7fc fb1d 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 80086fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086fc:	e038      	b.n	8008770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008702:	4618      	mov	r0, r3
 8008704:	f7fd fa3c 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800870c:	e030      	b.n	8008770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800870e:	f107 0318 	add.w	r3, r7, #24
 8008712:	4618      	mov	r0, r3
 8008714:	f7fd fb88 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800871c:	e028      	b.n	8008770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <UART_SetConfig+0xc2c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d012      	beq.n	8008750 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800872a:	4b06      	ldr	r3, [pc, #24]	; (8008744 <UART_SetConfig+0xc2c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	4a04      	ldr	r2, [pc, #16]	; (8008748 <UART_SetConfig+0xc30>)
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800873c:	e018      	b.n	8008770 <UART_SetConfig+0xc58>
 800873e:	bf00      	nop
 8008740:	0800f2d8 	.word	0x0800f2d8
 8008744:	58024400 	.word	0x58024400
 8008748:	03d09000 	.word	0x03d09000
 800874c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008750:	4b24      	ldr	r3, [pc, #144]	; (80087e4 <UART_SetConfig+0xccc>)
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008754:	e00c      	b.n	8008770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008756:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <UART_SetConfig+0xcd0>)
 8008758:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800875a:	e009      	b.n	8008770 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800875c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008762:	e005      	b.n	8008770 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800876e:	bf00      	nop
    }

    if (pclk != 0U)
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d021      	beq.n	80087ba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <UART_SetConfig+0xcd4>)
 800877c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008780:	461a      	mov	r2, r3
 8008782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008784:	fbb3 f2f2 	udiv	r2, r3, r2
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	441a      	add	r2, r3
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b0f      	cmp	r3, #15
 800879e:	d909      	bls.n	80087b4 <UART_SetConfig+0xc9c>
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a6:	d205      	bcs.n	80087b4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60da      	str	r2, [r3, #12]
 80087b2:	e002      	b.n	80087ba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2201      	movs	r2, #1
 80087be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2200      	movs	r2, #0
 80087d4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80087d6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3748      	adds	r7, #72	; 0x48
 80087de:	46bd      	mov	sp, r7
 80087e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087e4:	03d09000 	.word	0x03d09000
 80087e8:	003d0900 	.word	0x003d0900
 80087ec:	0800f2d8 	.word	0x0800f2d8

080087f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00a      	beq.n	800881a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	430a      	orrs	r2, r1
 8008818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	430a      	orrs	r2, r1
 800887e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008884:	f003 0310 	and.w	r3, r3, #16
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	430a      	orrs	r2, r1
 80088a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d01a      	beq.n	8008906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ee:	d10a      	bne.n	8008906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	605a      	str	r2, [r3, #4]
  }
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af02      	add	r7, sp, #8
 800893a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008944:	f7fa f982 	bl	8002c4c <HAL_GetTick>
 8008948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0308 	and.w	r3, r3, #8
 8008954:	2b08      	cmp	r3, #8
 8008956:	d10e      	bne.n	8008976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f82f 	bl	80089ca <UART_WaitOnFlagUntilTimeout>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e025      	b.n	80089c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0304 	and.w	r3, r3, #4
 8008980:	2b04      	cmp	r3, #4
 8008982:	d10e      	bne.n	80089a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008984:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f819 	bl	80089ca <UART_WaitOnFlagUntilTimeout>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e00f      	b.n	80089c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b09c      	sub	sp, #112	; 0x70
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	60b9      	str	r1, [r7, #8]
 80089d4:	603b      	str	r3, [r7, #0]
 80089d6:	4613      	mov	r3, r2
 80089d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089da:	e0a9      	b.n	8008b30 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e2:	f000 80a5 	beq.w	8008b30 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e6:	f7fa f931 	bl	8002c4c <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d302      	bcc.n	80089fc <UART_WaitOnFlagUntilTimeout+0x32>
 80089f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d140      	bne.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a10:	667b      	str	r3, [r7, #100]	; 0x64
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a1c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e6      	bne.n	80089fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3308      	adds	r3, #8
 8008a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a40:	f023 0301 	bic.w	r3, r3, #1
 8008a44:	663b      	str	r3, [r7, #96]	; 0x60
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e5      	bne.n	8008a2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e069      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d051      	beq.n	8008b30 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a9a:	d149      	bne.n	8008b30 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aa4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3308      	adds	r3, #8
 8008ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f023 0301 	bic.w	r3, r3, #1
 8008aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3308      	adds	r3, #8
 8008af6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008af8:	623a      	str	r2, [r7, #32]
 8008afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	69f9      	ldr	r1, [r7, #28]
 8008afe:	6a3a      	ldr	r2, [r7, #32]
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e5      	bne.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e010      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	69da      	ldr	r2, [r3, #28]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	bf0c      	ite	eq
 8008b40:	2301      	moveq	r3, #1
 8008b42:	2300      	movne	r3, #0
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	461a      	mov	r2, r3
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	f43f af46 	beq.w	80089dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3770      	adds	r7, #112	; 0x70
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b0a3      	sub	sp, #140	; 0x8c
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	88fa      	ldrh	r2, [r7, #6]
 8008b74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	88fa      	ldrh	r2, [r7, #6]
 8008b7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8e:	d10e      	bne.n	8008bae <UART_Start_Receive_IT+0x52>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d105      	bne.n	8008ba4 <UART_Start_Receive_IT+0x48>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ba2:	e02d      	b.n	8008c00 <UART_Start_Receive_IT+0xa4>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	22ff      	movs	r2, #255	; 0xff
 8008ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bac:	e028      	b.n	8008c00 <UART_Start_Receive_IT+0xa4>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10d      	bne.n	8008bd2 <UART_Start_Receive_IT+0x76>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d104      	bne.n	8008bc8 <UART_Start_Receive_IT+0x6c>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	22ff      	movs	r2, #255	; 0xff
 8008bc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bc6:	e01b      	b.n	8008c00 <UART_Start_Receive_IT+0xa4>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	227f      	movs	r2, #127	; 0x7f
 8008bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bd0:	e016      	b.n	8008c00 <UART_Start_Receive_IT+0xa4>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bda:	d10d      	bne.n	8008bf8 <UART_Start_Receive_IT+0x9c>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <UART_Start_Receive_IT+0x92>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	227f      	movs	r2, #127	; 0x7f
 8008be8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bec:	e008      	b.n	8008c00 <UART_Start_Receive_IT+0xa4>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	223f      	movs	r2, #63	; 0x3f
 8008bf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bf6:	e003      	b.n	8008c00 <UART_Start_Receive_IT+0xa4>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2222      	movs	r2, #34	; 0x22
 8008c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3308      	adds	r3, #8
 8008c16:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1a:	e853 3f00 	ldrex	r3, [r3]
 8008c1e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c22:	f043 0301 	orr.w	r3, r3, #1
 8008c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	3308      	adds	r3, #8
 8008c30:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c34:	673a      	str	r2, [r7, #112]	; 0x70
 8008c36:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c38:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008c3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c3c:	e841 2300 	strex	r3, r2, [r1]
 8008c40:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e3      	bne.n	8008c10 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c50:	d153      	bne.n	8008cfa <UART_Start_Receive_IT+0x19e>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c58:	88fa      	ldrh	r2, [r7, #6]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d34d      	bcc.n	8008cfa <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c66:	d107      	bne.n	8008c78 <UART_Start_Receive_IT+0x11c>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d103      	bne.n	8008c78 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a4b      	ldr	r2, [pc, #300]	; (8008da0 <UART_Start_Receive_IT+0x244>)
 8008c74:	671a      	str	r2, [r3, #112]	; 0x70
 8008c76:	e002      	b.n	8008c7e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	4a4a      	ldr	r2, [pc, #296]	; (8008da4 <UART_Start_Receive_IT+0x248>)
 8008c7c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d01a      	beq.n	8008cc4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	461a      	mov	r2, r3
 8008cac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cb2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cb8:	e841 2300 	strex	r3, r2, [r1]
 8008cbc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e4      	bne.n	8008c8e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ce4:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ce6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e5      	bne.n	8008cc4 <UART_Start_Receive_IT+0x168>
 8008cf8:	e04a      	b.n	8008d90 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d02:	d107      	bne.n	8008d14 <UART_Start_Receive_IT+0x1b8>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d103      	bne.n	8008d14 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4a26      	ldr	r2, [pc, #152]	; (8008da8 <UART_Start_Receive_IT+0x24c>)
 8008d10:	671a      	str	r2, [r3, #112]	; 0x70
 8008d12:	e002      	b.n	8008d1a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4a25      	ldr	r2, [pc, #148]	; (8008dac <UART_Start_Receive_IT+0x250>)
 8008d18:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d019      	beq.n	8008d5e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008d3e:	677b      	str	r3, [r7, #116]	; 0x74
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
 8008d4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e6      	bne.n	8008d2a <UART_Start_Receive_IT+0x1ce>
 8008d5c:	e018      	b.n	8008d90 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f043 0320 	orr.w	r3, r3, #32
 8008d72:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d7c:	623b      	str	r3, [r7, #32]
 8008d7e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	69f9      	ldr	r1, [r7, #28]
 8008d82:	6a3a      	ldr	r2, [r7, #32]
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e6      	bne.n	8008d5e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	378c      	adds	r7, #140	; 0x8c
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	080094b9 	.word	0x080094b9
 8008da4:	080091c1 	.word	0x080091c1
 8008da8:	0800905f 	.word	0x0800905f
 8008dac:	08008eff 	.word	0x08008eff

08008db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b095      	sub	sp, #84	; 0x54
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8008dd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e6      	bne.n	8008db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3308      	adds	r3, #8
 8008df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <UART_EndRxTransfer+0xc8>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3308      	adds	r3, #8
 8008e08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d118      	bne.n	8008e58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f023 0310 	bic.w	r3, r3, #16
 8008e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	461a      	mov	r2, r3
 8008e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e44:	61bb      	str	r3, [r7, #24]
 8008e46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6979      	ldr	r1, [r7, #20]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	613b      	str	r3, [r7, #16]
   return(result);
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e6      	bne.n	8008e26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008e6c:	bf00      	nop
 8008e6e:	3754      	adds	r7, #84	; 0x54
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	effffffe 	.word	0xeffffffe

08008e7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7fe fe26 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea0:	bf00      	nop
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec4:	61fb      	str	r3, [r7, #28]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6979      	ldr	r1, [r7, #20]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	613b      	str	r3, [r7, #16]
   return(result);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e6      	bne.n	8008eb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7fe fdf1 	bl	8007ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef6:	bf00      	nop
 8008ef8:	3720      	adds	r7, #32
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b096      	sub	sp, #88	; 0x58
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f16:	2b22      	cmp	r3, #34	; 0x22
 8008f18:	f040 8095 	bne.w	8009046 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f26:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008f2a:	b2d9      	uxtb	r1, r3
 8008f2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f36:	400a      	ands	r2, r1
 8008f38:	b2d2      	uxtb	r2, r2
 8008f3a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d178      	bne.n	8009056 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	e853 3f00 	ldrex	r3, [r3]
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f78:	653b      	str	r3, [r7, #80]	; 0x50
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f82:	647b      	str	r3, [r7, #68]	; 0x44
 8008f84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f8a:	e841 2300 	strex	r3, r2, [r1]
 8008f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d1e6      	bne.n	8008f64 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	f023 0301 	bic.w	r3, r3, #1
 8008fac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fb6:	633a      	str	r2, [r7, #48]	; 0x30
 8008fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e5      	bne.n	8008f96 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d12e      	bne.n	800903e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0310 	bic.w	r3, r3, #16
 8008ffa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009004:	61fb      	str	r3, [r7, #28]
 8009006:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	69b9      	ldr	r1, [r7, #24]
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	617b      	str	r3, [r7, #20]
   return(result);
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	f003 0310 	and.w	r3, r3, #16
 8009022:	2b10      	cmp	r3, #16
 8009024:	d103      	bne.n	800902e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2210      	movs	r2, #16
 800902c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f7fe fd62 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800903c:	e00b      	b.n	8009056 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7f8 fef0 	bl	8001e24 <HAL_UART_RxCpltCallback>
}
 8009044:	e007      	b.n	8009056 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0208 	orr.w	r2, r2, #8
 8009054:	619a      	str	r2, [r3, #24]
}
 8009056:	bf00      	nop
 8009058:	3758      	adds	r7, #88	; 0x58
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b096      	sub	sp, #88	; 0x58
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800906c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009076:	2b22      	cmp	r3, #34	; 0x22
 8009078:	f040 8095 	bne.w	80091a6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800908c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009090:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009094:	4013      	ands	r3, r2
 8009096:	b29a      	uxth	r2, r3
 8009098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800909a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a0:	1c9a      	adds	r2, r3, #2
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d178      	bne.n	80091b6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e2:	643b      	str	r3, [r7, #64]	; 0x40
 80090e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e6      	bne.n	80090c4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	61fb      	str	r3, [r7, #28]
   return(result);
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	f023 0301 	bic.w	r3, r3, #1
 800910c:	64bb      	str	r3, [r7, #72]	; 0x48
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3308      	adds	r3, #8
 8009114:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009118:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800911c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e5      	bne.n	80090f6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913c:	2b01      	cmp	r3, #1
 800913e:	d12e      	bne.n	800919e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	e853 3f00 	ldrex	r3, [r3]
 8009152:	60bb      	str	r3, [r7, #8]
   return(result);
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	f023 0310 	bic.w	r3, r3, #16
 800915a:	647b      	str	r3, [r7, #68]	; 0x44
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	461a      	mov	r2, r3
 8009162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	613b      	str	r3, [r7, #16]
   return(result);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e6      	bne.n	8009146 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	69db      	ldr	r3, [r3, #28]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b10      	cmp	r3, #16
 8009184:	d103      	bne.n	800918e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2210      	movs	r2, #16
 800918c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7fe fcb2 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800919c:	e00b      	b.n	80091b6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7f8 fe40 	bl	8001e24 <HAL_UART_RxCpltCallback>
}
 80091a4:	e007      	b.n	80091b6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	699a      	ldr	r2, [r3, #24]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0208 	orr.w	r2, r2, #8
 80091b4:	619a      	str	r2, [r3, #24]
}
 80091b6:	bf00      	nop
 80091b8:	3758      	adds	r7, #88	; 0x58
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b0a6      	sub	sp, #152	; 0x98
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091ce:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69db      	ldr	r3, [r3, #28]
 80091d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091f6:	2b22      	cmp	r3, #34	; 0x22
 80091f8:	f040 814d 	bne.w	8009496 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009202:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009206:	e0f4      	b.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009212:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009216:	b2d9      	uxtb	r1, r3
 8009218:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800921c:	b2da      	uxtb	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009222:	400a      	ands	r2, r1
 8009224:	b2d2      	uxtb	r2, r2
 8009226:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b01      	subs	r3, #1
 800923c:	b29a      	uxth	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800924e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	2b00      	cmp	r3, #0
 8009258:	d053      	beq.n	8009302 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800925a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d011      	beq.n	800928a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800926a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00b      	beq.n	800928a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2201      	movs	r2, #1
 8009278:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009280:	f043 0201 	orr.w	r2, r3, #1
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800928a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d011      	beq.n	80092ba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009296:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00b      	beq.n	80092ba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2202      	movs	r2, #2
 80092a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092b0:	f043 0204 	orr.w	r2, r3, #4
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092be:	f003 0304 	and.w	r3, r3, #4
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d011      	beq.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x12a>
 80092c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00b      	beq.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2204      	movs	r2, #4
 80092d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092e0:	f043 0202 	orr.w	r2, r3, #2
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d006      	beq.n	8009302 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7fe fbf9 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d171      	bne.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009316:	e853 3f00 	ldrex	r3, [r3]
 800931a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800931c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800931e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009322:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009330:	66bb      	str	r3, [r7, #104]	; 0x68
 8009332:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009334:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009336:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009338:	e841 2300 	strex	r3, r2, [r1]
 800933c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800933e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e4      	bne.n	800930e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3308      	adds	r3, #8
 800934a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934e:	e853 3f00 	ldrex	r3, [r3]
 8009352:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009356:	4b56      	ldr	r3, [pc, #344]	; (80094b0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009358:	4013      	ands	r3, r2
 800935a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3308      	adds	r3, #8
 8009362:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009364:	657a      	str	r2, [r7, #84]	; 0x54
 8009366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800936a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800936c:	e841 2300 	strex	r3, r2, [r1]
 8009370:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1e5      	bne.n	8009344 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2220      	movs	r2, #32
 800937c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938a:	2b01      	cmp	r3, #1
 800938c:	d12e      	bne.n	80093ec <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	f023 0310 	bic.w	r3, r3, #16
 80093a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093b2:	643b      	str	r3, [r7, #64]	; 0x40
 80093b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093ba:	e841 2300 	strex	r3, r2, [r1]
 80093be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e6      	bne.n	8009394 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	f003 0310 	and.w	r3, r3, #16
 80093d0:	2b10      	cmp	r3, #16
 80093d2:	d103      	bne.n	80093dc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2210      	movs	r2, #16
 80093da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7fe fb8b 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
 80093ea:	e002      	b.n	80093f2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7f8 fd19 	bl	8001e24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d006      	beq.n	8009408 <UART_RxISR_8BIT_FIFOEN+0x248>
 80093fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	f47f af00 	bne.w	8009208 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800940e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009412:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009416:	2b00      	cmp	r3, #0
 8009418:	d045      	beq.n	80094a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009420:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009424:	429a      	cmp	r2, r3
 8009426:	d23e      	bcs.n	80094a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	e853 3f00 	ldrex	r3, [r3]
 8009436:	61fb      	str	r3, [r7, #28]
   return(result);
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800943e:	673b      	str	r3, [r7, #112]	; 0x70
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009448:	62fa      	str	r2, [r7, #44]	; 0x2c
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800944e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009450:	e841 2300 	strex	r3, r2, [r1]
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e5      	bne.n	8009428 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a15      	ldr	r2, [pc, #84]	; (80094b4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009460:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f043 0320 	orr.w	r3, r3, #32
 8009476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	461a      	mov	r2, r3
 800947e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009480:	61bb      	str	r3, [r7, #24]
 8009482:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6979      	ldr	r1, [r7, #20]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	613b      	str	r3, [r7, #16]
   return(result);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e6      	bne.n	8009462 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009494:	e007      	b.n	80094a6 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f042 0208 	orr.w	r2, r2, #8
 80094a4:	619a      	str	r2, [r3, #24]
}
 80094a6:	bf00      	nop
 80094a8:	3798      	adds	r7, #152	; 0x98
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	effffffe 	.word	0xeffffffe
 80094b4:	08008eff 	.word	0x08008eff

080094b8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b0a8      	sub	sp, #160	; 0xa0
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094c6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ee:	2b22      	cmp	r3, #34	; 0x22
 80094f0:	f040 8151 	bne.w	8009796 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094fe:	e0f8      	b.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800950e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009512:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009516:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800951a:	4013      	ands	r3, r2
 800951c:	b29a      	uxth	r2, r3
 800951e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009522:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009528:	1c9a      	adds	r2, r3, #2
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009534:	b29b      	uxth	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	b29a      	uxth	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800954a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800954e:	f003 0307 	and.w	r3, r3, #7
 8009552:	2b00      	cmp	r3, #0
 8009554:	d053      	beq.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009556:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d011      	beq.n	8009586 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00b      	beq.n	8009586 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2201      	movs	r2, #1
 8009574:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800957c:	f043 0201 	orr.w	r2, r3, #1
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009586:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d011      	beq.n	80095b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2202      	movs	r2, #2
 80095a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ac:	f043 0204 	orr.w	r2, r3, #4
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095ba:	f003 0304 	and.w	r3, r3, #4
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d011      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2204      	movs	r2, #4
 80095d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095dc:	f043 0202 	orr.w	r2, r3, #2
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d006      	beq.n	80095fe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7fe fa7b 	bl	8007aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009604:	b29b      	uxth	r3, r3
 8009606:	2b00      	cmp	r3, #0
 8009608:	d173      	bne.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009612:	e853 3f00 	ldrex	r3, [r3]
 8009616:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800961a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800961e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800962c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800962e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009632:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800963a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e4      	bne.n	800960a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3308      	adds	r3, #8
 8009646:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009652:	4b57      	ldr	r3, [pc, #348]	; (80097b0 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8009654:	4013      	ands	r3, r2
 8009656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3308      	adds	r3, #8
 8009660:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009664:	65ba      	str	r2, [r7, #88]	; 0x58
 8009666:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009668:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800966a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800966c:	e841 2300 	strex	r3, r2, [r1]
 8009670:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1e3      	bne.n	8009640 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2220      	movs	r2, #32
 800967c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968a:	2b01      	cmp	r3, #1
 800968c:	d12e      	bne.n	80096ec <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096b2:	647b      	str	r3, [r7, #68]	; 0x44
 80096b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e6      	bne.n	8009694 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d103      	bne.n	80096dc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2210      	movs	r2, #16
 80096da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7fe fa0b 	bl	8007b00 <HAL_UARTEx_RxEventCallback>
 80096ea:	e002      	b.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7f8 fb99 	bl	8001e24 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d006      	beq.n	8009708 <UART_RxISR_16BIT_FIFOEN+0x250>
 80096fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	f47f aefc 	bne.w	8009500 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800970e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009712:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009716:	2b00      	cmp	r3, #0
 8009718:	d045      	beq.n	80097a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009720:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009724:	429a      	cmp	r2, r3
 8009726:	d23e      	bcs.n	80097a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3308      	adds	r3, #8
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	623b      	str	r3, [r7, #32]
   return(result);
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800973e:	677b      	str	r3, [r7, #116]	; 0x74
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3308      	adds	r3, #8
 8009746:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009748:	633a      	str	r2, [r7, #48]	; 0x30
 800974a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800974e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e5      	bne.n	8009728 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a15      	ldr	r2, [pc, #84]	; (80097b4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009760:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f043 0320 	orr.w	r3, r3, #32
 8009776:	673b      	str	r3, [r7, #112]	; 0x70
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	69b9      	ldr	r1, [r7, #24]
 8009786:	69fa      	ldr	r2, [r7, #28]
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	617b      	str	r3, [r7, #20]
   return(result);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e6      	bne.n	8009762 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009794:	e007      	b.n	80097a6 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	699a      	ldr	r2, [r3, #24]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f042 0208 	orr.w	r2, r2, #8
 80097a4:	619a      	str	r2, [r3, #24]
}
 80097a6:	bf00      	nop
 80097a8:	37a0      	adds	r7, #160	; 0xa0
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	effffffe 	.word	0xeffffffe
 80097b4:	0800905f 	.word	0x0800905f

080097b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <HAL_UARTEx_DisableFifoMode+0x16>
 8009806:	2302      	movs	r3, #2
 8009808:	e027      	b.n	800985a <HAL_UARTEx_DisableFifoMode+0x66>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2224      	movs	r2, #36	; 0x24
 8009816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0201 	bic.w	r2, r2, #1
 8009830:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009838:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2220      	movs	r2, #32
 800984c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009876:	2b01      	cmp	r3, #1
 8009878:	d101      	bne.n	800987e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800987a:	2302      	movs	r3, #2
 800987c:	e02d      	b.n	80098da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2224      	movs	r2, #36	; 0x24
 800988a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 0201 	bic.w	r2, r2, #1
 80098a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f850 	bl	8009960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b084      	sub	sp, #16
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098f6:	2302      	movs	r3, #2
 80098f8:	e02d      	b.n	8009956 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2224      	movs	r2, #36	; 0x24
 8009906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0201 	bic.w	r2, r2, #1
 8009920:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	430a      	orrs	r2, r1
 8009934:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f812 	bl	8009960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2220      	movs	r2, #32
 8009948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800996c:	2b00      	cmp	r3, #0
 800996e:	d108      	bne.n	8009982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009980:	e031      	b.n	80099e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009982:	2310      	movs	r3, #16
 8009984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009986:	2310      	movs	r3, #16
 8009988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	0e5b      	lsrs	r3, r3, #25
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0307 	and.w	r3, r3, #7
 8009998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	0f5b      	lsrs	r3, r3, #29
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 0307 	and.w	r3, r3, #7
 80099a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	7b3a      	ldrb	r2, [r7, #12]
 80099ae:	4911      	ldr	r1, [pc, #68]	; (80099f4 <UARTEx_SetNbDataToProcess+0x94>)
 80099b0:	5c8a      	ldrb	r2, [r1, r2]
 80099b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099b6:	7b3a      	ldrb	r2, [r7, #12]
 80099b8:	490f      	ldr	r1, [pc, #60]	; (80099f8 <UARTEx_SetNbDataToProcess+0x98>)
 80099ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	7b7a      	ldrb	r2, [r7, #13]
 80099cc:	4909      	ldr	r1, [pc, #36]	; (80099f4 <UARTEx_SetNbDataToProcess+0x94>)
 80099ce:	5c8a      	ldrb	r2, [r1, r2]
 80099d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099d4:	7b7a      	ldrb	r2, [r7, #13]
 80099d6:	4908      	ldr	r1, [pc, #32]	; (80099f8 <UARTEx_SetNbDataToProcess+0x98>)
 80099d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099da:	fb93 f3f2 	sdiv	r3, r3, r2
 80099de:	b29a      	uxth	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	0800f2f0 	.word	0x0800f2f0
 80099f8:	0800f2f8 	.word	0x0800f2f8

080099fc <atof>:
 80099fc:	2100      	movs	r1, #0
 80099fe:	f001 baa9 	b.w	800af54 <strtod>
	...

08009a04 <__errno>:
 8009a04:	4b01      	ldr	r3, [pc, #4]	; (8009a0c <__errno+0x8>)
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	24000bd4 	.word	0x24000bd4

08009a10 <__libc_init_array>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	4d0d      	ldr	r5, [pc, #52]	; (8009a48 <__libc_init_array+0x38>)
 8009a14:	4c0d      	ldr	r4, [pc, #52]	; (8009a4c <__libc_init_array+0x3c>)
 8009a16:	1b64      	subs	r4, r4, r5
 8009a18:	10a4      	asrs	r4, r4, #2
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	42a6      	cmp	r6, r4
 8009a1e:	d109      	bne.n	8009a34 <__libc_init_array+0x24>
 8009a20:	4d0b      	ldr	r5, [pc, #44]	; (8009a50 <__libc_init_array+0x40>)
 8009a22:	4c0c      	ldr	r4, [pc, #48]	; (8009a54 <__libc_init_array+0x44>)
 8009a24:	f005 fbba 	bl	800f19c <_init>
 8009a28:	1b64      	subs	r4, r4, r5
 8009a2a:	10a4      	asrs	r4, r4, #2
 8009a2c:	2600      	movs	r6, #0
 8009a2e:	42a6      	cmp	r6, r4
 8009a30:	d105      	bne.n	8009a3e <__libc_init_array+0x2e>
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a38:	4798      	blx	r3
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7ee      	b.n	8009a1c <__libc_init_array+0xc>
 8009a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a42:	4798      	blx	r3
 8009a44:	3601      	adds	r6, #1
 8009a46:	e7f2      	b.n	8009a2e <__libc_init_array+0x1e>
 8009a48:	080112a0 	.word	0x080112a0
 8009a4c:	080112a0 	.word	0x080112a0
 8009a50:	080112a0 	.word	0x080112a0
 8009a54:	080112a4 	.word	0x080112a4

08009a58 <__itoa>:
 8009a58:	1e93      	subs	r3, r2, #2
 8009a5a:	2b22      	cmp	r3, #34	; 0x22
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	460c      	mov	r4, r1
 8009a60:	d904      	bls.n	8009a6c <__itoa+0x14>
 8009a62:	2300      	movs	r3, #0
 8009a64:	700b      	strb	r3, [r1, #0]
 8009a66:	461c      	mov	r4, r3
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bd10      	pop	{r4, pc}
 8009a6c:	2a0a      	cmp	r2, #10
 8009a6e:	d109      	bne.n	8009a84 <__itoa+0x2c>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	da07      	bge.n	8009a84 <__itoa+0x2c>
 8009a74:	232d      	movs	r3, #45	; 0x2d
 8009a76:	700b      	strb	r3, [r1, #0]
 8009a78:	4240      	negs	r0, r0
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	4421      	add	r1, r4
 8009a7e:	f001 fa75 	bl	800af6c <__utoa>
 8009a82:	e7f1      	b.n	8009a68 <__itoa+0x10>
 8009a84:	2100      	movs	r1, #0
 8009a86:	e7f9      	b.n	8009a7c <__itoa+0x24>

08009a88 <itoa>:
 8009a88:	f7ff bfe6 	b.w	8009a58 <__itoa>

08009a8c <memset>:
 8009a8c:	4402      	add	r2, r0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d100      	bne.n	8009a96 <memset+0xa>
 8009a94:	4770      	bx	lr
 8009a96:	f803 1b01 	strb.w	r1, [r3], #1
 8009a9a:	e7f9      	b.n	8009a90 <memset+0x4>

08009a9c <__cvt>:
 8009a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a9e:	ed2d 8b02 	vpush	{d8}
 8009aa2:	eeb0 8b40 	vmov.f64	d8, d0
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	4617      	mov	r7, r2
 8009aaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009aac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009aae:	ee18 2a90 	vmov	r2, s17
 8009ab2:	f025 0520 	bic.w	r5, r5, #32
 8009ab6:	2a00      	cmp	r2, #0
 8009ab8:	bfb6      	itet	lt
 8009aba:	222d      	movlt	r2, #45	; 0x2d
 8009abc:	2200      	movge	r2, #0
 8009abe:	eeb1 8b40 	vneglt.f64	d8, d0
 8009ac2:	2d46      	cmp	r5, #70	; 0x46
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	d004      	beq.n	8009ad4 <__cvt+0x38>
 8009aca:	2d45      	cmp	r5, #69	; 0x45
 8009acc:	d100      	bne.n	8009ad0 <__cvt+0x34>
 8009ace:	3401      	adds	r4, #1
 8009ad0:	2102      	movs	r1, #2
 8009ad2:	e000      	b.n	8009ad6 <__cvt+0x3a>
 8009ad4:	2103      	movs	r1, #3
 8009ad6:	ab03      	add	r3, sp, #12
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	ab02      	add	r3, sp, #8
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	4622      	mov	r2, r4
 8009ae0:	4633      	mov	r3, r6
 8009ae2:	eeb0 0b48 	vmov.f64	d0, d8
 8009ae6:	f001 fb0f 	bl	800b108 <_dtoa_r>
 8009aea:	2d47      	cmp	r5, #71	; 0x47
 8009aec:	d101      	bne.n	8009af2 <__cvt+0x56>
 8009aee:	07fb      	lsls	r3, r7, #31
 8009af0:	d51a      	bpl.n	8009b28 <__cvt+0x8c>
 8009af2:	2d46      	cmp	r5, #70	; 0x46
 8009af4:	eb00 0204 	add.w	r2, r0, r4
 8009af8:	d10c      	bne.n	8009b14 <__cvt+0x78>
 8009afa:	7803      	ldrb	r3, [r0, #0]
 8009afc:	2b30      	cmp	r3, #48	; 0x30
 8009afe:	d107      	bne.n	8009b10 <__cvt+0x74>
 8009b00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b08:	bf1c      	itt	ne
 8009b0a:	f1c4 0401 	rsbne	r4, r4, #1
 8009b0e:	6034      	strne	r4, [r6, #0]
 8009b10:	6833      	ldr	r3, [r6, #0]
 8009b12:	441a      	add	r2, r3
 8009b14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1c:	bf08      	it	eq
 8009b1e:	9203      	streq	r2, [sp, #12]
 8009b20:	2130      	movs	r1, #48	; 0x30
 8009b22:	9b03      	ldr	r3, [sp, #12]
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d307      	bcc.n	8009b38 <__cvt+0x9c>
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b2c:	1a1b      	subs	r3, r3, r0
 8009b2e:	6013      	str	r3, [r2, #0]
 8009b30:	b005      	add	sp, #20
 8009b32:	ecbd 8b02 	vpop	{d8}
 8009b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b38:	1c5c      	adds	r4, r3, #1
 8009b3a:	9403      	str	r4, [sp, #12]
 8009b3c:	7019      	strb	r1, [r3, #0]
 8009b3e:	e7f0      	b.n	8009b22 <__cvt+0x86>

08009b40 <__exponent>:
 8009b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b42:	4603      	mov	r3, r0
 8009b44:	2900      	cmp	r1, #0
 8009b46:	bfb8      	it	lt
 8009b48:	4249      	neglt	r1, r1
 8009b4a:	f803 2b02 	strb.w	r2, [r3], #2
 8009b4e:	bfb4      	ite	lt
 8009b50:	222d      	movlt	r2, #45	; 0x2d
 8009b52:	222b      	movge	r2, #43	; 0x2b
 8009b54:	2909      	cmp	r1, #9
 8009b56:	7042      	strb	r2, [r0, #1]
 8009b58:	dd2a      	ble.n	8009bb0 <__exponent+0x70>
 8009b5a:	f10d 0407 	add.w	r4, sp, #7
 8009b5e:	46a4      	mov	ip, r4
 8009b60:	270a      	movs	r7, #10
 8009b62:	46a6      	mov	lr, r4
 8009b64:	460a      	mov	r2, r1
 8009b66:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b6a:	fb07 1516 	mls	r5, r7, r6, r1
 8009b6e:	3530      	adds	r5, #48	; 0x30
 8009b70:	2a63      	cmp	r2, #99	; 0x63
 8009b72:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	dcf1      	bgt.n	8009b62 <__exponent+0x22>
 8009b7e:	3130      	adds	r1, #48	; 0x30
 8009b80:	f1ae 0502 	sub.w	r5, lr, #2
 8009b84:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b88:	1c44      	adds	r4, r0, #1
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	4561      	cmp	r1, ip
 8009b8e:	d30a      	bcc.n	8009ba6 <__exponent+0x66>
 8009b90:	f10d 0209 	add.w	r2, sp, #9
 8009b94:	eba2 020e 	sub.w	r2, r2, lr
 8009b98:	4565      	cmp	r5, ip
 8009b9a:	bf88      	it	hi
 8009b9c:	2200      	movhi	r2, #0
 8009b9e:	4413      	add	r3, r2
 8009ba0:	1a18      	subs	r0, r3, r0
 8009ba2:	b003      	add	sp, #12
 8009ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009baa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009bae:	e7ed      	b.n	8009b8c <__exponent+0x4c>
 8009bb0:	2330      	movs	r3, #48	; 0x30
 8009bb2:	3130      	adds	r1, #48	; 0x30
 8009bb4:	7083      	strb	r3, [r0, #2]
 8009bb6:	70c1      	strb	r1, [r0, #3]
 8009bb8:	1d03      	adds	r3, r0, #4
 8009bba:	e7f1      	b.n	8009ba0 <__exponent+0x60>
 8009bbc:	0000      	movs	r0, r0
	...

08009bc0 <_printf_float>:
 8009bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc4:	b08b      	sub	sp, #44	; 0x2c
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009bcc:	4616      	mov	r6, r2
 8009bce:	461f      	mov	r7, r3
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	f002 fb77 	bl	800c2c4 <_localeconv_r>
 8009bd6:	f8d0 b000 	ldr.w	fp, [r0]
 8009bda:	4658      	mov	r0, fp
 8009bdc:	f7f6 fb98 	bl	8000310 <strlen>
 8009be0:	2300      	movs	r3, #0
 8009be2:	9308      	str	r3, [sp, #32]
 8009be4:	f8d8 3000 	ldr.w	r3, [r8]
 8009be8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	3307      	adds	r3, #7
 8009bf0:	f023 0307 	bic.w	r3, r3, #7
 8009bf4:	f103 0108 	add.w	r1, r3, #8
 8009bf8:	f8c8 1000 	str.w	r1, [r8]
 8009bfc:	4682      	mov	sl, r0
 8009bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009c02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009c06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009e68 <_printf_float+0x2a8>
 8009c0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009c0e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009c12:	eeb4 6b47 	vcmp.f64	d6, d7
 8009c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c1a:	dd24      	ble.n	8009c66 <_printf_float+0xa6>
 8009c1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c24:	d502      	bpl.n	8009c2c <_printf_float+0x6c>
 8009c26:	232d      	movs	r3, #45	; 0x2d
 8009c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c2c:	4b90      	ldr	r3, [pc, #576]	; (8009e70 <_printf_float+0x2b0>)
 8009c2e:	4891      	ldr	r0, [pc, #580]	; (8009e74 <_printf_float+0x2b4>)
 8009c30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009c34:	bf94      	ite	ls
 8009c36:	4698      	movls	r8, r3
 8009c38:	4680      	movhi	r8, r0
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	6123      	str	r3, [r4, #16]
 8009c3e:	f022 0204 	bic.w	r2, r2, #4
 8009c42:	2300      	movs	r3, #0
 8009c44:	6022      	str	r2, [r4, #0]
 8009c46:	9304      	str	r3, [sp, #16]
 8009c48:	9700      	str	r7, [sp, #0]
 8009c4a:	4633      	mov	r3, r6
 8009c4c:	aa09      	add	r2, sp, #36	; 0x24
 8009c4e:	4621      	mov	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 f9d3 	bl	8009ffc <_printf_common>
 8009c56:	3001      	adds	r0, #1
 8009c58:	f040 808a 	bne.w	8009d70 <_printf_float+0x1b0>
 8009c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c60:	b00b      	add	sp, #44	; 0x2c
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c66:	eeb4 0b40 	vcmp.f64	d0, d0
 8009c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c6e:	d709      	bvc.n	8009c84 <_printf_float+0xc4>
 8009c70:	ee10 3a90 	vmov	r3, s1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	bfbc      	itt	lt
 8009c78:	232d      	movlt	r3, #45	; 0x2d
 8009c7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c7e:	487e      	ldr	r0, [pc, #504]	; (8009e78 <_printf_float+0x2b8>)
 8009c80:	4b7e      	ldr	r3, [pc, #504]	; (8009e7c <_printf_float+0x2bc>)
 8009c82:	e7d5      	b.n	8009c30 <_printf_float+0x70>
 8009c84:	6863      	ldr	r3, [r4, #4]
 8009c86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009c8a:	9104      	str	r1, [sp, #16]
 8009c8c:	1c59      	adds	r1, r3, #1
 8009c8e:	d13c      	bne.n	8009d0a <_printf_float+0x14a>
 8009c90:	2306      	movs	r3, #6
 8009c92:	6063      	str	r3, [r4, #4]
 8009c94:	2300      	movs	r3, #0
 8009c96:	9303      	str	r3, [sp, #12]
 8009c98:	ab08      	add	r3, sp, #32
 8009c9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ca2:	ab07      	add	r3, sp, #28
 8009ca4:	6861      	ldr	r1, [r4, #4]
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	6022      	str	r2, [r4, #0]
 8009caa:	f10d 031b 	add.w	r3, sp, #27
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f7ff fef4 	bl	8009a9c <__cvt>
 8009cb4:	9b04      	ldr	r3, [sp, #16]
 8009cb6:	9907      	ldr	r1, [sp, #28]
 8009cb8:	2b47      	cmp	r3, #71	; 0x47
 8009cba:	4680      	mov	r8, r0
 8009cbc:	d108      	bne.n	8009cd0 <_printf_float+0x110>
 8009cbe:	1cc8      	adds	r0, r1, #3
 8009cc0:	db02      	blt.n	8009cc8 <_printf_float+0x108>
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	4299      	cmp	r1, r3
 8009cc6:	dd41      	ble.n	8009d4c <_printf_float+0x18c>
 8009cc8:	f1a9 0902 	sub.w	r9, r9, #2
 8009ccc:	fa5f f989 	uxtb.w	r9, r9
 8009cd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cd4:	d820      	bhi.n	8009d18 <_printf_float+0x158>
 8009cd6:	3901      	subs	r1, #1
 8009cd8:	464a      	mov	r2, r9
 8009cda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cde:	9107      	str	r1, [sp, #28]
 8009ce0:	f7ff ff2e 	bl	8009b40 <__exponent>
 8009ce4:	9a08      	ldr	r2, [sp, #32]
 8009ce6:	9004      	str	r0, [sp, #16]
 8009ce8:	1813      	adds	r3, r2, r0
 8009cea:	2a01      	cmp	r2, #1
 8009cec:	6123      	str	r3, [r4, #16]
 8009cee:	dc02      	bgt.n	8009cf6 <_printf_float+0x136>
 8009cf0:	6822      	ldr	r2, [r4, #0]
 8009cf2:	07d2      	lsls	r2, r2, #31
 8009cf4:	d501      	bpl.n	8009cfa <_printf_float+0x13a>
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	6123      	str	r3, [r4, #16]
 8009cfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0a2      	beq.n	8009c48 <_printf_float+0x88>
 8009d02:	232d      	movs	r3, #45	; 0x2d
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d08:	e79e      	b.n	8009c48 <_printf_float+0x88>
 8009d0a:	9904      	ldr	r1, [sp, #16]
 8009d0c:	2947      	cmp	r1, #71	; 0x47
 8009d0e:	d1c1      	bne.n	8009c94 <_printf_float+0xd4>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1bf      	bne.n	8009c94 <_printf_float+0xd4>
 8009d14:	2301      	movs	r3, #1
 8009d16:	e7bc      	b.n	8009c92 <_printf_float+0xd2>
 8009d18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009d1c:	d118      	bne.n	8009d50 <_printf_float+0x190>
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	6863      	ldr	r3, [r4, #4]
 8009d22:	dd0b      	ble.n	8009d3c <_printf_float+0x17c>
 8009d24:	6121      	str	r1, [r4, #16]
 8009d26:	b913      	cbnz	r3, 8009d2e <_printf_float+0x16e>
 8009d28:	6822      	ldr	r2, [r4, #0]
 8009d2a:	07d0      	lsls	r0, r2, #31
 8009d2c:	d502      	bpl.n	8009d34 <_printf_float+0x174>
 8009d2e:	3301      	adds	r3, #1
 8009d30:	440b      	add	r3, r1
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	2300      	movs	r3, #0
 8009d36:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d38:	9304      	str	r3, [sp, #16]
 8009d3a:	e7de      	b.n	8009cfa <_printf_float+0x13a>
 8009d3c:	b913      	cbnz	r3, 8009d44 <_printf_float+0x184>
 8009d3e:	6822      	ldr	r2, [r4, #0]
 8009d40:	07d2      	lsls	r2, r2, #31
 8009d42:	d501      	bpl.n	8009d48 <_printf_float+0x188>
 8009d44:	3302      	adds	r3, #2
 8009d46:	e7f4      	b.n	8009d32 <_printf_float+0x172>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e7f2      	b.n	8009d32 <_printf_float+0x172>
 8009d4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009d50:	9b08      	ldr	r3, [sp, #32]
 8009d52:	4299      	cmp	r1, r3
 8009d54:	db05      	blt.n	8009d62 <_printf_float+0x1a2>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	6121      	str	r1, [r4, #16]
 8009d5a:	07d8      	lsls	r0, r3, #31
 8009d5c:	d5ea      	bpl.n	8009d34 <_printf_float+0x174>
 8009d5e:	1c4b      	adds	r3, r1, #1
 8009d60:	e7e7      	b.n	8009d32 <_printf_float+0x172>
 8009d62:	2900      	cmp	r1, #0
 8009d64:	bfd4      	ite	le
 8009d66:	f1c1 0202 	rsble	r2, r1, #2
 8009d6a:	2201      	movgt	r2, #1
 8009d6c:	4413      	add	r3, r2
 8009d6e:	e7e0      	b.n	8009d32 <_printf_float+0x172>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	055a      	lsls	r2, r3, #21
 8009d74:	d407      	bmi.n	8009d86 <_printf_float+0x1c6>
 8009d76:	6923      	ldr	r3, [r4, #16]
 8009d78:	4642      	mov	r2, r8
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b8      	blx	r7
 8009d80:	3001      	adds	r0, #1
 8009d82:	d12a      	bne.n	8009dda <_printf_float+0x21a>
 8009d84:	e76a      	b.n	8009c5c <_printf_float+0x9c>
 8009d86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d8a:	f240 80e2 	bls.w	8009f52 <_printf_float+0x392>
 8009d8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009d92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9a:	d133      	bne.n	8009e04 <_printf_float+0x244>
 8009d9c:	4a38      	ldr	r2, [pc, #224]	; (8009e80 <_printf_float+0x2c0>)
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4631      	mov	r1, r6
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f af58 	beq.w	8009c5c <_printf_float+0x9c>
 8009dac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	db02      	blt.n	8009dba <_printf_float+0x1fa>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	07d8      	lsls	r0, r3, #31
 8009db8:	d50f      	bpl.n	8009dda <_printf_float+0x21a>
 8009dba:	4653      	mov	r3, sl
 8009dbc:	465a      	mov	r2, fp
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b8      	blx	r7
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f43f af49 	beq.w	8009c5c <_printf_float+0x9c>
 8009dca:	f04f 0800 	mov.w	r8, #0
 8009dce:	f104 091a 	add.w	r9, r4, #26
 8009dd2:	9b08      	ldr	r3, [sp, #32]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	4543      	cmp	r3, r8
 8009dd8:	dc09      	bgt.n	8009dee <_printf_float+0x22e>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	079b      	lsls	r3, r3, #30
 8009dde:	f100 8108 	bmi.w	8009ff2 <_printf_float+0x432>
 8009de2:	68e0      	ldr	r0, [r4, #12]
 8009de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de6:	4298      	cmp	r0, r3
 8009de8:	bfb8      	it	lt
 8009dea:	4618      	movlt	r0, r3
 8009dec:	e738      	b.n	8009c60 <_printf_float+0xa0>
 8009dee:	2301      	movs	r3, #1
 8009df0:	464a      	mov	r2, r9
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f af2f 	beq.w	8009c5c <_printf_float+0x9c>
 8009dfe:	f108 0801 	add.w	r8, r8, #1
 8009e02:	e7e6      	b.n	8009dd2 <_printf_float+0x212>
 8009e04:	9b07      	ldr	r3, [sp, #28]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	dc3c      	bgt.n	8009e84 <_printf_float+0x2c4>
 8009e0a:	4a1d      	ldr	r2, [pc, #116]	; (8009e80 <_printf_float+0x2c0>)
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	f43f af21 	beq.w	8009c5c <_printf_float+0x9c>
 8009e1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	d102      	bne.n	8009e28 <_printf_float+0x268>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	07d9      	lsls	r1, r3, #31
 8009e26:	d5d8      	bpl.n	8009dda <_printf_float+0x21a>
 8009e28:	4653      	mov	r3, sl
 8009e2a:	465a      	mov	r2, fp
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f af12 	beq.w	8009c5c <_printf_float+0x9c>
 8009e38:	f04f 0900 	mov.w	r9, #0
 8009e3c:	f104 0a1a 	add.w	sl, r4, #26
 8009e40:	9b07      	ldr	r3, [sp, #28]
 8009e42:	425b      	negs	r3, r3
 8009e44:	454b      	cmp	r3, r9
 8009e46:	dc01      	bgt.n	8009e4c <_printf_float+0x28c>
 8009e48:	9b08      	ldr	r3, [sp, #32]
 8009e4a:	e795      	b.n	8009d78 <_printf_float+0x1b8>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4652      	mov	r2, sl
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f af00 	beq.w	8009c5c <_printf_float+0x9c>
 8009e5c:	f109 0901 	add.w	r9, r9, #1
 8009e60:	e7ee      	b.n	8009e40 <_printf_float+0x280>
 8009e62:	bf00      	nop
 8009e64:	f3af 8000 	nop.w
 8009e68:	ffffffff 	.word	0xffffffff
 8009e6c:	7fefffff 	.word	0x7fefffff
 8009e70:	0800f304 	.word	0x0800f304
 8009e74:	0800f308 	.word	0x0800f308
 8009e78:	0800f310 	.word	0x0800f310
 8009e7c:	0800f30c 	.word	0x0800f30c
 8009e80:	0800f314 	.word	0x0800f314
 8009e84:	9a08      	ldr	r2, [sp, #32]
 8009e86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	bfa8      	it	ge
 8009e8c:	461a      	movge	r2, r3
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	4691      	mov	r9, r2
 8009e92:	dc38      	bgt.n	8009f06 <_printf_float+0x346>
 8009e94:	2300      	movs	r3, #0
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e9c:	f104 021a 	add.w	r2, r4, #26
 8009ea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ea2:	9905      	ldr	r1, [sp, #20]
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	eba3 0309 	sub.w	r3, r3, r9
 8009eaa:	428b      	cmp	r3, r1
 8009eac:	dc33      	bgt.n	8009f16 <_printf_float+0x356>
 8009eae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	db3c      	blt.n	8009f30 <_printf_float+0x370>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	07da      	lsls	r2, r3, #31
 8009eba:	d439      	bmi.n	8009f30 <_printf_float+0x370>
 8009ebc:	9b08      	ldr	r3, [sp, #32]
 8009ebe:	9a04      	ldr	r2, [sp, #16]
 8009ec0:	9907      	ldr	r1, [sp, #28]
 8009ec2:	1a9a      	subs	r2, r3, r2
 8009ec4:	eba3 0901 	sub.w	r9, r3, r1
 8009ec8:	4591      	cmp	r9, r2
 8009eca:	bfa8      	it	ge
 8009ecc:	4691      	movge	r9, r2
 8009ece:	f1b9 0f00 	cmp.w	r9, #0
 8009ed2:	dc35      	bgt.n	8009f40 <_printf_float+0x380>
 8009ed4:	f04f 0800 	mov.w	r8, #0
 8009ed8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009edc:	f104 0a1a 	add.w	sl, r4, #26
 8009ee0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	eba3 0309 	sub.w	r3, r3, r9
 8009eea:	4543      	cmp	r3, r8
 8009eec:	f77f af75 	ble.w	8009dda <_printf_float+0x21a>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	4652      	mov	r2, sl
 8009ef4:	4631      	mov	r1, r6
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	47b8      	blx	r7
 8009efa:	3001      	adds	r0, #1
 8009efc:	f43f aeae 	beq.w	8009c5c <_printf_float+0x9c>
 8009f00:	f108 0801 	add.w	r8, r8, #1
 8009f04:	e7ec      	b.n	8009ee0 <_printf_float+0x320>
 8009f06:	4613      	mov	r3, r2
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4642      	mov	r2, r8
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	d1bf      	bne.n	8009e94 <_printf_float+0x2d4>
 8009f14:	e6a2      	b.n	8009c5c <_printf_float+0x9c>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	9204      	str	r2, [sp, #16]
 8009f1e:	47b8      	blx	r7
 8009f20:	3001      	adds	r0, #1
 8009f22:	f43f ae9b 	beq.w	8009c5c <_printf_float+0x9c>
 8009f26:	9b05      	ldr	r3, [sp, #20]
 8009f28:	9a04      	ldr	r2, [sp, #16]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	9305      	str	r3, [sp, #20]
 8009f2e:	e7b7      	b.n	8009ea0 <_printf_float+0x2e0>
 8009f30:	4653      	mov	r3, sl
 8009f32:	465a      	mov	r2, fp
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d1be      	bne.n	8009ebc <_printf_float+0x2fc>
 8009f3e:	e68d      	b.n	8009c5c <_printf_float+0x9c>
 8009f40:	9a04      	ldr	r2, [sp, #16]
 8009f42:	464b      	mov	r3, r9
 8009f44:	4442      	add	r2, r8
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d1c1      	bne.n	8009ed4 <_printf_float+0x314>
 8009f50:	e684      	b.n	8009c5c <_printf_float+0x9c>
 8009f52:	9a08      	ldr	r2, [sp, #32]
 8009f54:	2a01      	cmp	r2, #1
 8009f56:	dc01      	bgt.n	8009f5c <_printf_float+0x39c>
 8009f58:	07db      	lsls	r3, r3, #31
 8009f5a:	d537      	bpl.n	8009fcc <_printf_float+0x40c>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	4642      	mov	r2, r8
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f ae78 	beq.w	8009c5c <_printf_float+0x9c>
 8009f6c:	4653      	mov	r3, sl
 8009f6e:	465a      	mov	r2, fp
 8009f70:	4631      	mov	r1, r6
 8009f72:	4628      	mov	r0, r5
 8009f74:	47b8      	blx	r7
 8009f76:	3001      	adds	r0, #1
 8009f78:	f43f ae70 	beq.w	8009c5c <_printf_float+0x9c>
 8009f7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009f80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f88:	d01b      	beq.n	8009fc2 <_printf_float+0x402>
 8009f8a:	9b08      	ldr	r3, [sp, #32]
 8009f8c:	f108 0201 	add.w	r2, r8, #1
 8009f90:	3b01      	subs	r3, #1
 8009f92:	4631      	mov	r1, r6
 8009f94:	4628      	mov	r0, r5
 8009f96:	47b8      	blx	r7
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d10e      	bne.n	8009fba <_printf_float+0x3fa>
 8009f9c:	e65e      	b.n	8009c5c <_printf_float+0x9c>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	464a      	mov	r2, r9
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	f43f ae57 	beq.w	8009c5c <_printf_float+0x9c>
 8009fae:	f108 0801 	add.w	r8, r8, #1
 8009fb2:	9b08      	ldr	r3, [sp, #32]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	4543      	cmp	r3, r8
 8009fb8:	dcf1      	bgt.n	8009f9e <_printf_float+0x3de>
 8009fba:	9b04      	ldr	r3, [sp, #16]
 8009fbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fc0:	e6db      	b.n	8009d7a <_printf_float+0x1ba>
 8009fc2:	f04f 0800 	mov.w	r8, #0
 8009fc6:	f104 091a 	add.w	r9, r4, #26
 8009fca:	e7f2      	b.n	8009fb2 <_printf_float+0x3f2>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4642      	mov	r2, r8
 8009fd0:	e7df      	b.n	8009f92 <_printf_float+0x3d2>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	464a      	mov	r2, r9
 8009fd6:	4631      	mov	r1, r6
 8009fd8:	4628      	mov	r0, r5
 8009fda:	47b8      	blx	r7
 8009fdc:	3001      	adds	r0, #1
 8009fde:	f43f ae3d 	beq.w	8009c5c <_printf_float+0x9c>
 8009fe2:	f108 0801 	add.w	r8, r8, #1
 8009fe6:	68e3      	ldr	r3, [r4, #12]
 8009fe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fea:	1a5b      	subs	r3, r3, r1
 8009fec:	4543      	cmp	r3, r8
 8009fee:	dcf0      	bgt.n	8009fd2 <_printf_float+0x412>
 8009ff0:	e6f7      	b.n	8009de2 <_printf_float+0x222>
 8009ff2:	f04f 0800 	mov.w	r8, #0
 8009ff6:	f104 0919 	add.w	r9, r4, #25
 8009ffa:	e7f4      	b.n	8009fe6 <_printf_float+0x426>

08009ffc <_printf_common>:
 8009ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a000:	4616      	mov	r6, r2
 800a002:	4699      	mov	r9, r3
 800a004:	688a      	ldr	r2, [r1, #8]
 800a006:	690b      	ldr	r3, [r1, #16]
 800a008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	bfb8      	it	lt
 800a010:	4613      	movlt	r3, r2
 800a012:	6033      	str	r3, [r6, #0]
 800a014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a018:	4607      	mov	r7, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	b10a      	cbz	r2, 800a022 <_printf_common+0x26>
 800a01e:	3301      	adds	r3, #1
 800a020:	6033      	str	r3, [r6, #0]
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	0699      	lsls	r1, r3, #26
 800a026:	bf42      	ittt	mi
 800a028:	6833      	ldrmi	r3, [r6, #0]
 800a02a:	3302      	addmi	r3, #2
 800a02c:	6033      	strmi	r3, [r6, #0]
 800a02e:	6825      	ldr	r5, [r4, #0]
 800a030:	f015 0506 	ands.w	r5, r5, #6
 800a034:	d106      	bne.n	800a044 <_printf_common+0x48>
 800a036:	f104 0a19 	add.w	sl, r4, #25
 800a03a:	68e3      	ldr	r3, [r4, #12]
 800a03c:	6832      	ldr	r2, [r6, #0]
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	42ab      	cmp	r3, r5
 800a042:	dc26      	bgt.n	800a092 <_printf_common+0x96>
 800a044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a048:	1e13      	subs	r3, r2, #0
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	bf18      	it	ne
 800a04e:	2301      	movne	r3, #1
 800a050:	0692      	lsls	r2, r2, #26
 800a052:	d42b      	bmi.n	800a0ac <_printf_common+0xb0>
 800a054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a058:	4649      	mov	r1, r9
 800a05a:	4638      	mov	r0, r7
 800a05c:	47c0      	blx	r8
 800a05e:	3001      	adds	r0, #1
 800a060:	d01e      	beq.n	800a0a0 <_printf_common+0xa4>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	68e5      	ldr	r5, [r4, #12]
 800a066:	6832      	ldr	r2, [r6, #0]
 800a068:	f003 0306 	and.w	r3, r3, #6
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	bf08      	it	eq
 800a070:	1aad      	subeq	r5, r5, r2
 800a072:	68a3      	ldr	r3, [r4, #8]
 800a074:	6922      	ldr	r2, [r4, #16]
 800a076:	bf0c      	ite	eq
 800a078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a07c:	2500      	movne	r5, #0
 800a07e:	4293      	cmp	r3, r2
 800a080:	bfc4      	itt	gt
 800a082:	1a9b      	subgt	r3, r3, r2
 800a084:	18ed      	addgt	r5, r5, r3
 800a086:	2600      	movs	r6, #0
 800a088:	341a      	adds	r4, #26
 800a08a:	42b5      	cmp	r5, r6
 800a08c:	d11a      	bne.n	800a0c4 <_printf_common+0xc8>
 800a08e:	2000      	movs	r0, #0
 800a090:	e008      	b.n	800a0a4 <_printf_common+0xa8>
 800a092:	2301      	movs	r3, #1
 800a094:	4652      	mov	r2, sl
 800a096:	4649      	mov	r1, r9
 800a098:	4638      	mov	r0, r7
 800a09a:	47c0      	blx	r8
 800a09c:	3001      	adds	r0, #1
 800a09e:	d103      	bne.n	800a0a8 <_printf_common+0xac>
 800a0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a8:	3501      	adds	r5, #1
 800a0aa:	e7c6      	b.n	800a03a <_printf_common+0x3e>
 800a0ac:	18e1      	adds	r1, r4, r3
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	2030      	movs	r0, #48	; 0x30
 800a0b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0b6:	4422      	add	r2, r4
 800a0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0c0:	3302      	adds	r3, #2
 800a0c2:	e7c7      	b.n	800a054 <_printf_common+0x58>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4622      	mov	r2, r4
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	47c0      	blx	r8
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d0e6      	beq.n	800a0a0 <_printf_common+0xa4>
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	e7d9      	b.n	800a08a <_printf_common+0x8e>
	...

0800a0d8 <_printf_i>:
 800a0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0dc:	7e0f      	ldrb	r7, [r1, #24]
 800a0de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0e0:	2f78      	cmp	r7, #120	; 0x78
 800a0e2:	4691      	mov	r9, r2
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	469a      	mov	sl, r3
 800a0ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0ee:	d807      	bhi.n	800a100 <_printf_i+0x28>
 800a0f0:	2f62      	cmp	r7, #98	; 0x62
 800a0f2:	d80a      	bhi.n	800a10a <_printf_i+0x32>
 800a0f4:	2f00      	cmp	r7, #0
 800a0f6:	f000 80d8 	beq.w	800a2aa <_printf_i+0x1d2>
 800a0fa:	2f58      	cmp	r7, #88	; 0x58
 800a0fc:	f000 80a3 	beq.w	800a246 <_printf_i+0x16e>
 800a100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a108:	e03a      	b.n	800a180 <_printf_i+0xa8>
 800a10a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a10e:	2b15      	cmp	r3, #21
 800a110:	d8f6      	bhi.n	800a100 <_printf_i+0x28>
 800a112:	a101      	add	r1, pc, #4	; (adr r1, 800a118 <_printf_i+0x40>)
 800a114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a118:	0800a171 	.word	0x0800a171
 800a11c:	0800a185 	.word	0x0800a185
 800a120:	0800a101 	.word	0x0800a101
 800a124:	0800a101 	.word	0x0800a101
 800a128:	0800a101 	.word	0x0800a101
 800a12c:	0800a101 	.word	0x0800a101
 800a130:	0800a185 	.word	0x0800a185
 800a134:	0800a101 	.word	0x0800a101
 800a138:	0800a101 	.word	0x0800a101
 800a13c:	0800a101 	.word	0x0800a101
 800a140:	0800a101 	.word	0x0800a101
 800a144:	0800a291 	.word	0x0800a291
 800a148:	0800a1b5 	.word	0x0800a1b5
 800a14c:	0800a273 	.word	0x0800a273
 800a150:	0800a101 	.word	0x0800a101
 800a154:	0800a101 	.word	0x0800a101
 800a158:	0800a2b3 	.word	0x0800a2b3
 800a15c:	0800a101 	.word	0x0800a101
 800a160:	0800a1b5 	.word	0x0800a1b5
 800a164:	0800a101 	.word	0x0800a101
 800a168:	0800a101 	.word	0x0800a101
 800a16c:	0800a27b 	.word	0x0800a27b
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	1d1a      	adds	r2, r3, #4
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	602a      	str	r2, [r5, #0]
 800a178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a17c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a180:	2301      	movs	r3, #1
 800a182:	e0a3      	b.n	800a2cc <_printf_i+0x1f4>
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	6829      	ldr	r1, [r5, #0]
 800a188:	0606      	lsls	r6, r0, #24
 800a18a:	f101 0304 	add.w	r3, r1, #4
 800a18e:	d50a      	bpl.n	800a1a6 <_printf_i+0xce>
 800a190:	680e      	ldr	r6, [r1, #0]
 800a192:	602b      	str	r3, [r5, #0]
 800a194:	2e00      	cmp	r6, #0
 800a196:	da03      	bge.n	800a1a0 <_printf_i+0xc8>
 800a198:	232d      	movs	r3, #45	; 0x2d
 800a19a:	4276      	negs	r6, r6
 800a19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a0:	485e      	ldr	r0, [pc, #376]	; (800a31c <_printf_i+0x244>)
 800a1a2:	230a      	movs	r3, #10
 800a1a4:	e019      	b.n	800a1da <_printf_i+0x102>
 800a1a6:	680e      	ldr	r6, [r1, #0]
 800a1a8:	602b      	str	r3, [r5, #0]
 800a1aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a1ae:	bf18      	it	ne
 800a1b0:	b236      	sxthne	r6, r6
 800a1b2:	e7ef      	b.n	800a194 <_printf_i+0xbc>
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	6820      	ldr	r0, [r4, #0]
 800a1b8:	1d19      	adds	r1, r3, #4
 800a1ba:	6029      	str	r1, [r5, #0]
 800a1bc:	0601      	lsls	r1, r0, #24
 800a1be:	d501      	bpl.n	800a1c4 <_printf_i+0xec>
 800a1c0:	681e      	ldr	r6, [r3, #0]
 800a1c2:	e002      	b.n	800a1ca <_printf_i+0xf2>
 800a1c4:	0646      	lsls	r6, r0, #25
 800a1c6:	d5fb      	bpl.n	800a1c0 <_printf_i+0xe8>
 800a1c8:	881e      	ldrh	r6, [r3, #0]
 800a1ca:	4854      	ldr	r0, [pc, #336]	; (800a31c <_printf_i+0x244>)
 800a1cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a1ce:	bf0c      	ite	eq
 800a1d0:	2308      	moveq	r3, #8
 800a1d2:	230a      	movne	r3, #10
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1da:	6865      	ldr	r5, [r4, #4]
 800a1dc:	60a5      	str	r5, [r4, #8]
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	bfa2      	ittt	ge
 800a1e2:	6821      	ldrge	r1, [r4, #0]
 800a1e4:	f021 0104 	bicge.w	r1, r1, #4
 800a1e8:	6021      	strge	r1, [r4, #0]
 800a1ea:	b90e      	cbnz	r6, 800a1f0 <_printf_i+0x118>
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	d04d      	beq.n	800a28c <_printf_i+0x1b4>
 800a1f0:	4615      	mov	r5, r2
 800a1f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a1fa:	5dc7      	ldrb	r7, [r0, r7]
 800a1fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a200:	4637      	mov	r7, r6
 800a202:	42bb      	cmp	r3, r7
 800a204:	460e      	mov	r6, r1
 800a206:	d9f4      	bls.n	800a1f2 <_printf_i+0x11a>
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d10b      	bne.n	800a224 <_printf_i+0x14c>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	07de      	lsls	r6, r3, #31
 800a210:	d508      	bpl.n	800a224 <_printf_i+0x14c>
 800a212:	6923      	ldr	r3, [r4, #16]
 800a214:	6861      	ldr	r1, [r4, #4]
 800a216:	4299      	cmp	r1, r3
 800a218:	bfde      	ittt	le
 800a21a:	2330      	movle	r3, #48	; 0x30
 800a21c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a220:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a224:	1b52      	subs	r2, r2, r5
 800a226:	6122      	str	r2, [r4, #16]
 800a228:	f8cd a000 	str.w	sl, [sp]
 800a22c:	464b      	mov	r3, r9
 800a22e:	aa03      	add	r2, sp, #12
 800a230:	4621      	mov	r1, r4
 800a232:	4640      	mov	r0, r8
 800a234:	f7ff fee2 	bl	8009ffc <_printf_common>
 800a238:	3001      	adds	r0, #1
 800a23a:	d14c      	bne.n	800a2d6 <_printf_i+0x1fe>
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	b004      	add	sp, #16
 800a242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a246:	4835      	ldr	r0, [pc, #212]	; (800a31c <_printf_i+0x244>)
 800a248:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a24c:	6829      	ldr	r1, [r5, #0]
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	f851 6b04 	ldr.w	r6, [r1], #4
 800a254:	6029      	str	r1, [r5, #0]
 800a256:	061d      	lsls	r5, r3, #24
 800a258:	d514      	bpl.n	800a284 <_printf_i+0x1ac>
 800a25a:	07df      	lsls	r7, r3, #31
 800a25c:	bf44      	itt	mi
 800a25e:	f043 0320 	orrmi.w	r3, r3, #32
 800a262:	6023      	strmi	r3, [r4, #0]
 800a264:	b91e      	cbnz	r6, 800a26e <_printf_i+0x196>
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	f023 0320 	bic.w	r3, r3, #32
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	2310      	movs	r3, #16
 800a270:	e7b0      	b.n	800a1d4 <_printf_i+0xfc>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	f043 0320 	orr.w	r3, r3, #32
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	2378      	movs	r3, #120	; 0x78
 800a27c:	4828      	ldr	r0, [pc, #160]	; (800a320 <_printf_i+0x248>)
 800a27e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a282:	e7e3      	b.n	800a24c <_printf_i+0x174>
 800a284:	0659      	lsls	r1, r3, #25
 800a286:	bf48      	it	mi
 800a288:	b2b6      	uxthmi	r6, r6
 800a28a:	e7e6      	b.n	800a25a <_printf_i+0x182>
 800a28c:	4615      	mov	r5, r2
 800a28e:	e7bb      	b.n	800a208 <_printf_i+0x130>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	6826      	ldr	r6, [r4, #0]
 800a294:	6961      	ldr	r1, [r4, #20]
 800a296:	1d18      	adds	r0, r3, #4
 800a298:	6028      	str	r0, [r5, #0]
 800a29a:	0635      	lsls	r5, r6, #24
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	d501      	bpl.n	800a2a4 <_printf_i+0x1cc>
 800a2a0:	6019      	str	r1, [r3, #0]
 800a2a2:	e002      	b.n	800a2aa <_printf_i+0x1d2>
 800a2a4:	0670      	lsls	r0, r6, #25
 800a2a6:	d5fb      	bpl.n	800a2a0 <_printf_i+0x1c8>
 800a2a8:	8019      	strh	r1, [r3, #0]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6123      	str	r3, [r4, #16]
 800a2ae:	4615      	mov	r5, r2
 800a2b0:	e7ba      	b.n	800a228 <_printf_i+0x150>
 800a2b2:	682b      	ldr	r3, [r5, #0]
 800a2b4:	1d1a      	adds	r2, r3, #4
 800a2b6:	602a      	str	r2, [r5, #0]
 800a2b8:	681d      	ldr	r5, [r3, #0]
 800a2ba:	6862      	ldr	r2, [r4, #4]
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f7f6 f82e 	bl	8000320 <memchr>
 800a2c4:	b108      	cbz	r0, 800a2ca <_printf_i+0x1f2>
 800a2c6:	1b40      	subs	r0, r0, r5
 800a2c8:	6060      	str	r0, [r4, #4]
 800a2ca:	6863      	ldr	r3, [r4, #4]
 800a2cc:	6123      	str	r3, [r4, #16]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d4:	e7a8      	b.n	800a228 <_printf_i+0x150>
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4649      	mov	r1, r9
 800a2dc:	4640      	mov	r0, r8
 800a2de:	47d0      	blx	sl
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d0ab      	beq.n	800a23c <_printf_i+0x164>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	079b      	lsls	r3, r3, #30
 800a2e8:	d413      	bmi.n	800a312 <_printf_i+0x23a>
 800a2ea:	68e0      	ldr	r0, [r4, #12]
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	4298      	cmp	r0, r3
 800a2f0:	bfb8      	it	lt
 800a2f2:	4618      	movlt	r0, r3
 800a2f4:	e7a4      	b.n	800a240 <_printf_i+0x168>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4632      	mov	r2, r6
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	47d0      	blx	sl
 800a300:	3001      	adds	r0, #1
 800a302:	d09b      	beq.n	800a23c <_printf_i+0x164>
 800a304:	3501      	adds	r5, #1
 800a306:	68e3      	ldr	r3, [r4, #12]
 800a308:	9903      	ldr	r1, [sp, #12]
 800a30a:	1a5b      	subs	r3, r3, r1
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dcf2      	bgt.n	800a2f6 <_printf_i+0x21e>
 800a310:	e7eb      	b.n	800a2ea <_printf_i+0x212>
 800a312:	2500      	movs	r5, #0
 800a314:	f104 0619 	add.w	r6, r4, #25
 800a318:	e7f5      	b.n	800a306 <_printf_i+0x22e>
 800a31a:	bf00      	nop
 800a31c:	0800f316 	.word	0x0800f316
 800a320:	0800f327 	.word	0x0800f327

0800a324 <siprintf>:
 800a324:	b40e      	push	{r1, r2, r3}
 800a326:	b500      	push	{lr}
 800a328:	b09c      	sub	sp, #112	; 0x70
 800a32a:	ab1d      	add	r3, sp, #116	; 0x74
 800a32c:	9002      	str	r0, [sp, #8]
 800a32e:	9006      	str	r0, [sp, #24]
 800a330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a334:	4809      	ldr	r0, [pc, #36]	; (800a35c <siprintf+0x38>)
 800a336:	9107      	str	r1, [sp, #28]
 800a338:	9104      	str	r1, [sp, #16]
 800a33a:	4909      	ldr	r1, [pc, #36]	; (800a360 <siprintf+0x3c>)
 800a33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a340:	9105      	str	r1, [sp, #20]
 800a342:	6800      	ldr	r0, [r0, #0]
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	a902      	add	r1, sp, #8
 800a348:	f002 fdf8 	bl	800cf3c <_svfiprintf_r>
 800a34c:	9b02      	ldr	r3, [sp, #8]
 800a34e:	2200      	movs	r2, #0
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	b01c      	add	sp, #112	; 0x70
 800a354:	f85d eb04 	ldr.w	lr, [sp], #4
 800a358:	b003      	add	sp, #12
 800a35a:	4770      	bx	lr
 800a35c:	24000bd4 	.word	0x24000bd4
 800a360:	ffff0208 	.word	0xffff0208

0800a364 <strchr>:
 800a364:	b2c9      	uxtb	r1, r1
 800a366:	4603      	mov	r3, r0
 800a368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a36c:	b11a      	cbz	r2, 800a376 <strchr+0x12>
 800a36e:	428a      	cmp	r2, r1
 800a370:	d1f9      	bne.n	800a366 <strchr+0x2>
 800a372:	4618      	mov	r0, r3
 800a374:	4770      	bx	lr
 800a376:	2900      	cmp	r1, #0
 800a378:	bf18      	it	ne
 800a37a:	2300      	movne	r3, #0
 800a37c:	e7f9      	b.n	800a372 <strchr+0xe>

0800a37e <strcpy>:
 800a37e:	4603      	mov	r3, r0
 800a380:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a384:	f803 2b01 	strb.w	r2, [r3], #1
 800a388:	2a00      	cmp	r2, #0
 800a38a:	d1f9      	bne.n	800a380 <strcpy+0x2>
 800a38c:	4770      	bx	lr

0800a38e <strncpy>:
 800a38e:	b510      	push	{r4, lr}
 800a390:	3901      	subs	r1, #1
 800a392:	4603      	mov	r3, r0
 800a394:	b132      	cbz	r2, 800a3a4 <strncpy+0x16>
 800a396:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a39a:	f803 4b01 	strb.w	r4, [r3], #1
 800a39e:	3a01      	subs	r2, #1
 800a3a0:	2c00      	cmp	r4, #0
 800a3a2:	d1f7      	bne.n	800a394 <strncpy+0x6>
 800a3a4:	441a      	add	r2, r3
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d100      	bne.n	800a3ae <strncpy+0x20>
 800a3ac:	bd10      	pop	{r4, pc}
 800a3ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a3b2:	e7f9      	b.n	800a3a8 <strncpy+0x1a>

0800a3b4 <sulp>:
 800a3b4:	b570      	push	{r4, r5, r6, lr}
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	4616      	mov	r6, r2
 800a3bc:	ec45 4b10 	vmov	d0, r4, r5
 800a3c0:	f002 fb1e 	bl	800ca00 <__ulp>
 800a3c4:	b17e      	cbz	r6, 800a3e6 <sulp+0x32>
 800a3c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a3ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dd09      	ble.n	800a3e6 <sulp+0x32>
 800a3d2:	051b      	lsls	r3, r3, #20
 800a3d4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a3d8:	2000      	movs	r0, #0
 800a3da:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a3de:	ec41 0b17 	vmov	d7, r0, r1
 800a3e2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}

0800a3e8 <_strtod_l>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	ed2d 8b0e 	vpush	{d8-d14}
 800a3f0:	b097      	sub	sp, #92	; 0x5c
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	9312      	str	r3, [sp, #72]	; 0x48
 800a3f8:	4ba1      	ldr	r3, [pc, #644]	; (800a680 <_strtod_l+0x298>)
 800a3fa:	920d      	str	r2, [sp, #52]	; 0x34
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	4604      	mov	r4, r0
 800a402:	4618      	mov	r0, r3
 800a404:	468b      	mov	fp, r1
 800a406:	f7f5 ff83 	bl	8000310 <strlen>
 800a40a:	f04f 0800 	mov.w	r8, #0
 800a40e:	4605      	mov	r5, r0
 800a410:	f04f 0900 	mov.w	r9, #0
 800a414:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a418:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a41a:	7813      	ldrb	r3, [r2, #0]
 800a41c:	2b2b      	cmp	r3, #43	; 0x2b
 800a41e:	d04d      	beq.n	800a4bc <_strtod_l+0xd4>
 800a420:	d83a      	bhi.n	800a498 <_strtod_l+0xb0>
 800a422:	2b0d      	cmp	r3, #13
 800a424:	d833      	bhi.n	800a48e <_strtod_l+0xa6>
 800a426:	2b08      	cmp	r3, #8
 800a428:	d833      	bhi.n	800a492 <_strtod_l+0xaa>
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d03d      	beq.n	800a4aa <_strtod_l+0xc2>
 800a42e:	2300      	movs	r3, #0
 800a430:	9308      	str	r3, [sp, #32]
 800a432:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a434:	7833      	ldrb	r3, [r6, #0]
 800a436:	2b30      	cmp	r3, #48	; 0x30
 800a438:	f040 80b0 	bne.w	800a59c <_strtod_l+0x1b4>
 800a43c:	7873      	ldrb	r3, [r6, #1]
 800a43e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a442:	2b58      	cmp	r3, #88	; 0x58
 800a444:	d167      	bne.n	800a516 <_strtod_l+0x12e>
 800a446:	9b08      	ldr	r3, [sp, #32]
 800a448:	9301      	str	r3, [sp, #4]
 800a44a:	ab12      	add	r3, sp, #72	; 0x48
 800a44c:	9702      	str	r7, [sp, #8]
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	4a8c      	ldr	r2, [pc, #560]	; (800a684 <_strtod_l+0x29c>)
 800a452:	ab13      	add	r3, sp, #76	; 0x4c
 800a454:	a911      	add	r1, sp, #68	; 0x44
 800a456:	4620      	mov	r0, r4
 800a458:	f001 fc2c 	bl	800bcb4 <__gethex>
 800a45c:	f010 0507 	ands.w	r5, r0, #7
 800a460:	4607      	mov	r7, r0
 800a462:	d005      	beq.n	800a470 <_strtod_l+0x88>
 800a464:	2d06      	cmp	r5, #6
 800a466:	d12b      	bne.n	800a4c0 <_strtod_l+0xd8>
 800a468:	3601      	adds	r6, #1
 800a46a:	2300      	movs	r3, #0
 800a46c:	9611      	str	r6, [sp, #68]	; 0x44
 800a46e:	9308      	str	r3, [sp, #32]
 800a470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a472:	2b00      	cmp	r3, #0
 800a474:	f040 854e 	bne.w	800af14 <_strtod_l+0xb2c>
 800a478:	9b08      	ldr	r3, [sp, #32]
 800a47a:	b1e3      	cbz	r3, 800a4b6 <_strtod_l+0xce>
 800a47c:	ec49 8b17 	vmov	d7, r8, r9
 800a480:	eeb1 0b47 	vneg.f64	d0, d7
 800a484:	b017      	add	sp, #92	; 0x5c
 800a486:	ecbd 8b0e 	vpop	{d8-d14}
 800a48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48e:	2b20      	cmp	r3, #32
 800a490:	d1cd      	bne.n	800a42e <_strtod_l+0x46>
 800a492:	3201      	adds	r2, #1
 800a494:	9211      	str	r2, [sp, #68]	; 0x44
 800a496:	e7bf      	b.n	800a418 <_strtod_l+0x30>
 800a498:	2b2d      	cmp	r3, #45	; 0x2d
 800a49a:	d1c8      	bne.n	800a42e <_strtod_l+0x46>
 800a49c:	2301      	movs	r3, #1
 800a49e:	9308      	str	r3, [sp, #32]
 800a4a0:	1c53      	adds	r3, r2, #1
 800a4a2:	9311      	str	r3, [sp, #68]	; 0x44
 800a4a4:	7853      	ldrb	r3, [r2, #1]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1c3      	bne.n	800a432 <_strtod_l+0x4a>
 800a4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f040 852d 	bne.w	800af10 <_strtod_l+0xb28>
 800a4b6:	ec49 8b10 	vmov	d0, r8, r9
 800a4ba:	e7e3      	b.n	800a484 <_strtod_l+0x9c>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e7ee      	b.n	800a49e <_strtod_l+0xb6>
 800a4c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4c2:	b13a      	cbz	r2, 800a4d4 <_strtod_l+0xec>
 800a4c4:	2135      	movs	r1, #53	; 0x35
 800a4c6:	a814      	add	r0, sp, #80	; 0x50
 800a4c8:	f002 fba2 	bl	800cc10 <__copybits>
 800a4cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f001 ff64 	bl	800c39c <_Bfree>
 800a4d4:	3d01      	subs	r5, #1
 800a4d6:	2d04      	cmp	r5, #4
 800a4d8:	d806      	bhi.n	800a4e8 <_strtod_l+0x100>
 800a4da:	e8df f005 	tbb	[pc, r5]
 800a4de:	030a      	.short	0x030a
 800a4e0:	1714      	.short	0x1714
 800a4e2:	0a          	.byte	0x0a
 800a4e3:	00          	.byte	0x00
 800a4e4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a4e8:	073f      	lsls	r7, r7, #28
 800a4ea:	d5c1      	bpl.n	800a470 <_strtod_l+0x88>
 800a4ec:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a4f0:	e7be      	b.n	800a470 <_strtod_l+0x88>
 800a4f2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a4f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a500:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a504:	e7f0      	b.n	800a4e8 <_strtod_l+0x100>
 800a506:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800a688 <_strtod_l+0x2a0>
 800a50a:	e7ed      	b.n	800a4e8 <_strtod_l+0x100>
 800a50c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a510:	f04f 38ff 	mov.w	r8, #4294967295
 800a514:	e7e8      	b.n	800a4e8 <_strtod_l+0x100>
 800a516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	9211      	str	r2, [sp, #68]	; 0x44
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	2b30      	cmp	r3, #48	; 0x30
 800a520:	d0f9      	beq.n	800a516 <_strtod_l+0x12e>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0a4      	beq.n	800a470 <_strtod_l+0x88>
 800a526:	2301      	movs	r3, #1
 800a528:	f04f 0a00 	mov.w	sl, #0
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a530:	930a      	str	r3, [sp, #40]	; 0x28
 800a532:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a536:	f8cd a018 	str.w	sl, [sp, #24]
 800a53a:	220a      	movs	r2, #10
 800a53c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a53e:	7807      	ldrb	r7, [r0, #0]
 800a540:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a544:	b2d9      	uxtb	r1, r3
 800a546:	2909      	cmp	r1, #9
 800a548:	d92a      	bls.n	800a5a0 <_strtod_l+0x1b8>
 800a54a:	9907      	ldr	r1, [sp, #28]
 800a54c:	462a      	mov	r2, r5
 800a54e:	f002 fe0f 	bl	800d170 <strncmp>
 800a552:	2800      	cmp	r0, #0
 800a554:	d033      	beq.n	800a5be <_strtod_l+0x1d6>
 800a556:	2000      	movs	r0, #0
 800a558:	9b06      	ldr	r3, [sp, #24]
 800a55a:	463a      	mov	r2, r7
 800a55c:	4601      	mov	r1, r0
 800a55e:	4607      	mov	r7, r0
 800a560:	2a65      	cmp	r2, #101	; 0x65
 800a562:	d001      	beq.n	800a568 <_strtod_l+0x180>
 800a564:	2a45      	cmp	r2, #69	; 0x45
 800a566:	d117      	bne.n	800a598 <_strtod_l+0x1b0>
 800a568:	b91b      	cbnz	r3, 800a572 <_strtod_l+0x18a>
 800a56a:	9b04      	ldr	r3, [sp, #16]
 800a56c:	4303      	orrs	r3, r0
 800a56e:	d09c      	beq.n	800a4aa <_strtod_l+0xc2>
 800a570:	2300      	movs	r3, #0
 800a572:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a576:	f10b 0201 	add.w	r2, fp, #1
 800a57a:	9211      	str	r2, [sp, #68]	; 0x44
 800a57c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a580:	2a2b      	cmp	r2, #43	; 0x2b
 800a582:	d071      	beq.n	800a668 <_strtod_l+0x280>
 800a584:	2a2d      	cmp	r2, #45	; 0x2d
 800a586:	d077      	beq.n	800a678 <_strtod_l+0x290>
 800a588:	f04f 0e00 	mov.w	lr, #0
 800a58c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a590:	2d09      	cmp	r5, #9
 800a592:	d97f      	bls.n	800a694 <_strtod_l+0x2ac>
 800a594:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a598:	2500      	movs	r5, #0
 800a59a:	e09b      	b.n	800a6d4 <_strtod_l+0x2ec>
 800a59c:	2300      	movs	r3, #0
 800a59e:	e7c3      	b.n	800a528 <_strtod_l+0x140>
 800a5a0:	9906      	ldr	r1, [sp, #24]
 800a5a2:	2908      	cmp	r1, #8
 800a5a4:	bfdd      	ittte	le
 800a5a6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a5a8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5ac:	9309      	strle	r3, [sp, #36]	; 0x24
 800a5ae:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a5b2:	9b06      	ldr	r3, [sp, #24]
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	9306      	str	r3, [sp, #24]
 800a5ba:	9011      	str	r0, [sp, #68]	; 0x44
 800a5bc:	e7be      	b.n	800a53c <_strtod_l+0x154>
 800a5be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5c0:	195a      	adds	r2, r3, r5
 800a5c2:	9211      	str	r2, [sp, #68]	; 0x44
 800a5c4:	5d5a      	ldrb	r2, [r3, r5]
 800a5c6:	9b06      	ldr	r3, [sp, #24]
 800a5c8:	b3a3      	cbz	r3, 800a634 <_strtod_l+0x24c>
 800a5ca:	4607      	mov	r7, r0
 800a5cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a5d0:	2909      	cmp	r1, #9
 800a5d2:	d912      	bls.n	800a5fa <_strtod_l+0x212>
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	e7c3      	b.n	800a560 <_strtod_l+0x178>
 800a5d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	9211      	str	r2, [sp, #68]	; 0x44
 800a5de:	785a      	ldrb	r2, [r3, #1]
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	2a30      	cmp	r2, #48	; 0x30
 800a5e4:	d0f8      	beq.n	800a5d8 <_strtod_l+0x1f0>
 800a5e6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	f200 8497 	bhi.w	800af1e <_strtod_l+0xb36>
 800a5f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f4:	4607      	mov	r7, r0
 800a5f6:	2000      	movs	r0, #0
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	3a30      	subs	r2, #48	; 0x30
 800a5fc:	f100 0101 	add.w	r1, r0, #1
 800a600:	d012      	beq.n	800a628 <_strtod_l+0x240>
 800a602:	440f      	add	r7, r1
 800a604:	eb00 0c03 	add.w	ip, r0, r3
 800a608:	4619      	mov	r1, r3
 800a60a:	250a      	movs	r5, #10
 800a60c:	4561      	cmp	r1, ip
 800a60e:	d113      	bne.n	800a638 <_strtod_l+0x250>
 800a610:	1819      	adds	r1, r3, r0
 800a612:	2908      	cmp	r1, #8
 800a614:	f103 0301 	add.w	r3, r3, #1
 800a618:	4403      	add	r3, r0
 800a61a:	dc1c      	bgt.n	800a656 <_strtod_l+0x26e>
 800a61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a61e:	210a      	movs	r1, #10
 800a620:	fb01 2200 	mla	r2, r1, r0, r2
 800a624:	9209      	str	r2, [sp, #36]	; 0x24
 800a626:	2100      	movs	r1, #0
 800a628:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a62a:	1c50      	adds	r0, r2, #1
 800a62c:	9011      	str	r0, [sp, #68]	; 0x44
 800a62e:	7852      	ldrb	r2, [r2, #1]
 800a630:	4608      	mov	r0, r1
 800a632:	e7cb      	b.n	800a5cc <_strtod_l+0x1e4>
 800a634:	9806      	ldr	r0, [sp, #24]
 800a636:	e7d4      	b.n	800a5e2 <_strtod_l+0x1fa>
 800a638:	2908      	cmp	r1, #8
 800a63a:	dc04      	bgt.n	800a646 <_strtod_l+0x25e>
 800a63c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a63e:	436e      	muls	r6, r5
 800a640:	9609      	str	r6, [sp, #36]	; 0x24
 800a642:	3101      	adds	r1, #1
 800a644:	e7e2      	b.n	800a60c <_strtod_l+0x224>
 800a646:	f101 0e01 	add.w	lr, r1, #1
 800a64a:	f1be 0f10 	cmp.w	lr, #16
 800a64e:	bfd8      	it	le
 800a650:	fb05 fa0a 	mulle.w	sl, r5, sl
 800a654:	e7f5      	b.n	800a642 <_strtod_l+0x25a>
 800a656:	2b10      	cmp	r3, #16
 800a658:	bfdc      	itt	le
 800a65a:	210a      	movle	r1, #10
 800a65c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800a660:	e7e1      	b.n	800a626 <_strtod_l+0x23e>
 800a662:	2700      	movs	r7, #0
 800a664:	2101      	movs	r1, #1
 800a666:	e780      	b.n	800a56a <_strtod_l+0x182>
 800a668:	f04f 0e00 	mov.w	lr, #0
 800a66c:	f10b 0202 	add.w	r2, fp, #2
 800a670:	9211      	str	r2, [sp, #68]	; 0x44
 800a672:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800a676:	e789      	b.n	800a58c <_strtod_l+0x1a4>
 800a678:	f04f 0e01 	mov.w	lr, #1
 800a67c:	e7f6      	b.n	800a66c <_strtod_l+0x284>
 800a67e:	bf00      	nop
 800a680:	0800f4a4 	.word	0x0800f4a4
 800a684:	0800f338 	.word	0x0800f338
 800a688:	7ff00000 	.word	0x7ff00000
 800a68c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a68e:	1c55      	adds	r5, r2, #1
 800a690:	9511      	str	r5, [sp, #68]	; 0x44
 800a692:	7852      	ldrb	r2, [r2, #1]
 800a694:	2a30      	cmp	r2, #48	; 0x30
 800a696:	d0f9      	beq.n	800a68c <_strtod_l+0x2a4>
 800a698:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800a69c:	2d08      	cmp	r5, #8
 800a69e:	f63f af7b 	bhi.w	800a598 <_strtod_l+0x1b0>
 800a6a2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a6a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6a8:	9207      	str	r2, [sp, #28]
 800a6aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6ac:	1c55      	adds	r5, r2, #1
 800a6ae:	9511      	str	r5, [sp, #68]	; 0x44
 800a6b0:	7852      	ldrb	r2, [r2, #1]
 800a6b2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a6b6:	2e09      	cmp	r6, #9
 800a6b8:	d937      	bls.n	800a72a <_strtod_l+0x342>
 800a6ba:	9e07      	ldr	r6, [sp, #28]
 800a6bc:	1bad      	subs	r5, r5, r6
 800a6be:	2d08      	cmp	r5, #8
 800a6c0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a6c4:	dc02      	bgt.n	800a6cc <_strtod_l+0x2e4>
 800a6c6:	4565      	cmp	r5, ip
 800a6c8:	bfa8      	it	ge
 800a6ca:	4665      	movge	r5, ip
 800a6cc:	f1be 0f00 	cmp.w	lr, #0
 800a6d0:	d000      	beq.n	800a6d4 <_strtod_l+0x2ec>
 800a6d2:	426d      	negs	r5, r5
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d14d      	bne.n	800a774 <_strtod_l+0x38c>
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	4303      	orrs	r3, r0
 800a6dc:	f47f aec8 	bne.w	800a470 <_strtod_l+0x88>
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	f47f aee2 	bne.w	800a4aa <_strtod_l+0xc2>
 800a6e6:	2a69      	cmp	r2, #105	; 0x69
 800a6e8:	d027      	beq.n	800a73a <_strtod_l+0x352>
 800a6ea:	dc24      	bgt.n	800a736 <_strtod_l+0x34e>
 800a6ec:	2a49      	cmp	r2, #73	; 0x49
 800a6ee:	d024      	beq.n	800a73a <_strtod_l+0x352>
 800a6f0:	2a4e      	cmp	r2, #78	; 0x4e
 800a6f2:	f47f aeda 	bne.w	800a4aa <_strtod_l+0xc2>
 800a6f6:	4996      	ldr	r1, [pc, #600]	; (800a950 <_strtod_l+0x568>)
 800a6f8:	a811      	add	r0, sp, #68	; 0x44
 800a6fa:	f001 fd33 	bl	800c164 <__match>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f43f aed3 	beq.w	800a4aa <_strtod_l+0xc2>
 800a704:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	2b28      	cmp	r3, #40	; 0x28
 800a70a:	d12d      	bne.n	800a768 <_strtod_l+0x380>
 800a70c:	4991      	ldr	r1, [pc, #580]	; (800a954 <_strtod_l+0x56c>)
 800a70e:	aa14      	add	r2, sp, #80	; 0x50
 800a710:	a811      	add	r0, sp, #68	; 0x44
 800a712:	f001 fd3b 	bl	800c18c <__hexnan>
 800a716:	2805      	cmp	r0, #5
 800a718:	d126      	bne.n	800a768 <_strtod_l+0x380>
 800a71a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a71c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a720:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a724:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a728:	e6a2      	b.n	800a470 <_strtod_l+0x88>
 800a72a:	250a      	movs	r5, #10
 800a72c:	fb05 250c 	mla	r5, r5, ip, r2
 800a730:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800a734:	e7b9      	b.n	800a6aa <_strtod_l+0x2c2>
 800a736:	2a6e      	cmp	r2, #110	; 0x6e
 800a738:	e7db      	b.n	800a6f2 <_strtod_l+0x30a>
 800a73a:	4987      	ldr	r1, [pc, #540]	; (800a958 <_strtod_l+0x570>)
 800a73c:	a811      	add	r0, sp, #68	; 0x44
 800a73e:	f001 fd11 	bl	800c164 <__match>
 800a742:	2800      	cmp	r0, #0
 800a744:	f43f aeb1 	beq.w	800a4aa <_strtod_l+0xc2>
 800a748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a74a:	4984      	ldr	r1, [pc, #528]	; (800a95c <_strtod_l+0x574>)
 800a74c:	3b01      	subs	r3, #1
 800a74e:	a811      	add	r0, sp, #68	; 0x44
 800a750:	9311      	str	r3, [sp, #68]	; 0x44
 800a752:	f001 fd07 	bl	800c164 <__match>
 800a756:	b910      	cbnz	r0, 800a75e <_strtod_l+0x376>
 800a758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a75a:	3301      	adds	r3, #1
 800a75c:	9311      	str	r3, [sp, #68]	; 0x44
 800a75e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800a970 <_strtod_l+0x588>
 800a762:	f04f 0800 	mov.w	r8, #0
 800a766:	e683      	b.n	800a470 <_strtod_l+0x88>
 800a768:	487d      	ldr	r0, [pc, #500]	; (800a960 <_strtod_l+0x578>)
 800a76a:	f002 fce9 	bl	800d140 <nan>
 800a76e:	ec59 8b10 	vmov	r8, r9, d0
 800a772:	e67d      	b.n	800a470 <_strtod_l+0x88>
 800a774:	1bea      	subs	r2, r5, r7
 800a776:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800a77a:	9207      	str	r2, [sp, #28]
 800a77c:	9a06      	ldr	r2, [sp, #24]
 800a77e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a782:	2a00      	cmp	r2, #0
 800a784:	bf08      	it	eq
 800a786:	461a      	moveq	r2, r3
 800a788:	2b10      	cmp	r3, #16
 800a78a:	9206      	str	r2, [sp, #24]
 800a78c:	461a      	mov	r2, r3
 800a78e:	bfa8      	it	ge
 800a790:	2210      	movge	r2, #16
 800a792:	2b09      	cmp	r3, #9
 800a794:	ec59 8b17 	vmov	r8, r9, d7
 800a798:	dd0c      	ble.n	800a7b4 <_strtod_l+0x3cc>
 800a79a:	4972      	ldr	r1, [pc, #456]	; (800a964 <_strtod_l+0x57c>)
 800a79c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a7a0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800a7a4:	ee06 aa90 	vmov	s13, sl
 800a7a8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a7ac:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a7b0:	ec59 8b16 	vmov	r8, r9, d6
 800a7b4:	2b0f      	cmp	r3, #15
 800a7b6:	dc36      	bgt.n	800a826 <_strtod_l+0x43e>
 800a7b8:	9907      	ldr	r1, [sp, #28]
 800a7ba:	2900      	cmp	r1, #0
 800a7bc:	f43f ae58 	beq.w	800a470 <_strtod_l+0x88>
 800a7c0:	dd23      	ble.n	800a80a <_strtod_l+0x422>
 800a7c2:	2916      	cmp	r1, #22
 800a7c4:	dc0b      	bgt.n	800a7de <_strtod_l+0x3f6>
 800a7c6:	4b67      	ldr	r3, [pc, #412]	; (800a964 <_strtod_l+0x57c>)
 800a7c8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a7cc:	ed93 7b00 	vldr	d7, [r3]
 800a7d0:	ec49 8b16 	vmov	d6, r8, r9
 800a7d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7d8:	ec59 8b17 	vmov	r8, r9, d7
 800a7dc:	e648      	b.n	800a470 <_strtod_l+0x88>
 800a7de:	9807      	ldr	r0, [sp, #28]
 800a7e0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800a7e4:	4281      	cmp	r1, r0
 800a7e6:	db1e      	blt.n	800a826 <_strtod_l+0x43e>
 800a7e8:	4a5e      	ldr	r2, [pc, #376]	; (800a964 <_strtod_l+0x57c>)
 800a7ea:	f1c3 030f 	rsb	r3, r3, #15
 800a7ee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a7f2:	ed91 7b00 	vldr	d7, [r1]
 800a7f6:	ec49 8b16 	vmov	d6, r8, r9
 800a7fa:	1ac3      	subs	r3, r0, r3
 800a7fc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a800:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a804:	ed92 6b00 	vldr	d6, [r2]
 800a808:	e7e4      	b.n	800a7d4 <_strtod_l+0x3ec>
 800a80a:	9907      	ldr	r1, [sp, #28]
 800a80c:	3116      	adds	r1, #22
 800a80e:	db0a      	blt.n	800a826 <_strtod_l+0x43e>
 800a810:	4b54      	ldr	r3, [pc, #336]	; (800a964 <_strtod_l+0x57c>)
 800a812:	1b7d      	subs	r5, r7, r5
 800a814:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a818:	ed95 7b00 	vldr	d7, [r5]
 800a81c:	ec49 8b16 	vmov	d6, r8, r9
 800a820:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a824:	e7d8      	b.n	800a7d8 <_strtod_l+0x3f0>
 800a826:	9907      	ldr	r1, [sp, #28]
 800a828:	1a9a      	subs	r2, r3, r2
 800a82a:	440a      	add	r2, r1
 800a82c:	2a00      	cmp	r2, #0
 800a82e:	dd6f      	ble.n	800a910 <_strtod_l+0x528>
 800a830:	f012 000f 	ands.w	r0, r2, #15
 800a834:	d00a      	beq.n	800a84c <_strtod_l+0x464>
 800a836:	494b      	ldr	r1, [pc, #300]	; (800a964 <_strtod_l+0x57c>)
 800a838:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a83c:	ed91 7b00 	vldr	d7, [r1]
 800a840:	ec49 8b16 	vmov	d6, r8, r9
 800a844:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a848:	ec59 8b17 	vmov	r8, r9, d7
 800a84c:	f032 020f 	bics.w	r2, r2, #15
 800a850:	d04f      	beq.n	800a8f2 <_strtod_l+0x50a>
 800a852:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800a856:	dd22      	ble.n	800a89e <_strtod_l+0x4b6>
 800a858:	2500      	movs	r5, #0
 800a85a:	462e      	mov	r6, r5
 800a85c:	9506      	str	r5, [sp, #24]
 800a85e:	462f      	mov	r7, r5
 800a860:	2322      	movs	r3, #34	; 0x22
 800a862:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800a970 <_strtod_l+0x588>
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	f04f 0800 	mov.w	r8, #0
 800a86c:	9b06      	ldr	r3, [sp, #24]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f43f adfe 	beq.w	800a470 <_strtod_l+0x88>
 800a874:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a876:	4620      	mov	r0, r4
 800a878:	f001 fd90 	bl	800c39c <_Bfree>
 800a87c:	4639      	mov	r1, r7
 800a87e:	4620      	mov	r0, r4
 800a880:	f001 fd8c 	bl	800c39c <_Bfree>
 800a884:	4631      	mov	r1, r6
 800a886:	4620      	mov	r0, r4
 800a888:	f001 fd88 	bl	800c39c <_Bfree>
 800a88c:	9906      	ldr	r1, [sp, #24]
 800a88e:	4620      	mov	r0, r4
 800a890:	f001 fd84 	bl	800c39c <_Bfree>
 800a894:	4629      	mov	r1, r5
 800a896:	4620      	mov	r0, r4
 800a898:	f001 fd80 	bl	800c39c <_Bfree>
 800a89c:	e5e8      	b.n	800a470 <_strtod_l+0x88>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	ec49 8b17 	vmov	d7, r8, r9
 800a8a4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800a968 <_strtod_l+0x580>
 800a8a8:	1112      	asrs	r2, r2, #4
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	2a01      	cmp	r2, #1
 800a8ae:	dc23      	bgt.n	800a8f8 <_strtod_l+0x510>
 800a8b0:	b108      	cbz	r0, 800a8b6 <_strtod_l+0x4ce>
 800a8b2:	ec59 8b17 	vmov	r8, r9, d7
 800a8b6:	4a2c      	ldr	r2, [pc, #176]	; (800a968 <_strtod_l+0x580>)
 800a8b8:	482c      	ldr	r0, [pc, #176]	; (800a96c <_strtod_l+0x584>)
 800a8ba:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a8be:	ed92 7b00 	vldr	d7, [r2]
 800a8c2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a8c6:	ec49 8b16 	vmov	d6, r8, r9
 800a8ca:	4a29      	ldr	r2, [pc, #164]	; (800a970 <_strtod_l+0x588>)
 800a8cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8d0:	ee17 1a90 	vmov	r1, s15
 800a8d4:	400a      	ands	r2, r1
 800a8d6:	4282      	cmp	r2, r0
 800a8d8:	ec59 8b17 	vmov	r8, r9, d7
 800a8dc:	d8bc      	bhi.n	800a858 <_strtod_l+0x470>
 800a8de:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800a8e2:	4282      	cmp	r2, r0
 800a8e4:	bf86      	itte	hi
 800a8e6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a974 <_strtod_l+0x58c>
 800a8ea:	f04f 38ff 	movhi.w	r8, #4294967295
 800a8ee:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	9204      	str	r2, [sp, #16]
 800a8f6:	e078      	b.n	800a9ea <_strtod_l+0x602>
 800a8f8:	07d6      	lsls	r6, r2, #31
 800a8fa:	d504      	bpl.n	800a906 <_strtod_l+0x51e>
 800a8fc:	ed9c 6b00 	vldr	d6, [ip]
 800a900:	2001      	movs	r0, #1
 800a902:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a906:	3101      	adds	r1, #1
 800a908:	1052      	asrs	r2, r2, #1
 800a90a:	f10c 0c08 	add.w	ip, ip, #8
 800a90e:	e7cd      	b.n	800a8ac <_strtod_l+0x4c4>
 800a910:	d0ef      	beq.n	800a8f2 <_strtod_l+0x50a>
 800a912:	4252      	negs	r2, r2
 800a914:	f012 000f 	ands.w	r0, r2, #15
 800a918:	d00a      	beq.n	800a930 <_strtod_l+0x548>
 800a91a:	4912      	ldr	r1, [pc, #72]	; (800a964 <_strtod_l+0x57c>)
 800a91c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a920:	ed91 7b00 	vldr	d7, [r1]
 800a924:	ec49 8b16 	vmov	d6, r8, r9
 800a928:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a92c:	ec59 8b17 	vmov	r8, r9, d7
 800a930:	1112      	asrs	r2, r2, #4
 800a932:	d0de      	beq.n	800a8f2 <_strtod_l+0x50a>
 800a934:	2a1f      	cmp	r2, #31
 800a936:	dd1f      	ble.n	800a978 <_strtod_l+0x590>
 800a938:	2500      	movs	r5, #0
 800a93a:	462e      	mov	r6, r5
 800a93c:	9506      	str	r5, [sp, #24]
 800a93e:	462f      	mov	r7, r5
 800a940:	2322      	movs	r3, #34	; 0x22
 800a942:	f04f 0800 	mov.w	r8, #0
 800a946:	f04f 0900 	mov.w	r9, #0
 800a94a:	6023      	str	r3, [r4, #0]
 800a94c:	e78e      	b.n	800a86c <_strtod_l+0x484>
 800a94e:	bf00      	nop
 800a950:	0800f311 	.word	0x0800f311
 800a954:	0800f34c 	.word	0x0800f34c
 800a958:	0800f309 	.word	0x0800f309
 800a95c:	0800f3b0 	.word	0x0800f3b0
 800a960:	0800f660 	.word	0x0800f660
 800a964:	0800f540 	.word	0x0800f540
 800a968:	0800f518 	.word	0x0800f518
 800a96c:	7ca00000 	.word	0x7ca00000
 800a970:	7ff00000 	.word	0x7ff00000
 800a974:	7fefffff 	.word	0x7fefffff
 800a978:	f012 0110 	ands.w	r1, r2, #16
 800a97c:	bf18      	it	ne
 800a97e:	216a      	movne	r1, #106	; 0x6a
 800a980:	9104      	str	r1, [sp, #16]
 800a982:	ec49 8b17 	vmov	d7, r8, r9
 800a986:	49be      	ldr	r1, [pc, #760]	; (800ac80 <_strtod_l+0x898>)
 800a988:	2000      	movs	r0, #0
 800a98a:	07d6      	lsls	r6, r2, #31
 800a98c:	d504      	bpl.n	800a998 <_strtod_l+0x5b0>
 800a98e:	ed91 6b00 	vldr	d6, [r1]
 800a992:	2001      	movs	r0, #1
 800a994:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a998:	1052      	asrs	r2, r2, #1
 800a99a:	f101 0108 	add.w	r1, r1, #8
 800a99e:	d1f4      	bne.n	800a98a <_strtod_l+0x5a2>
 800a9a0:	b108      	cbz	r0, 800a9a6 <_strtod_l+0x5be>
 800a9a2:	ec59 8b17 	vmov	r8, r9, d7
 800a9a6:	9a04      	ldr	r2, [sp, #16]
 800a9a8:	b1c2      	cbz	r2, 800a9dc <_strtod_l+0x5f4>
 800a9aa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800a9ae:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800a9b2:	2a00      	cmp	r2, #0
 800a9b4:	4648      	mov	r0, r9
 800a9b6:	dd11      	ble.n	800a9dc <_strtod_l+0x5f4>
 800a9b8:	2a1f      	cmp	r2, #31
 800a9ba:	f340 812e 	ble.w	800ac1a <_strtod_l+0x832>
 800a9be:	2a34      	cmp	r2, #52	; 0x34
 800a9c0:	bfde      	ittt	le
 800a9c2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800a9c6:	f04f 32ff 	movle.w	r2, #4294967295
 800a9ca:	fa02 f101 	lslle.w	r1, r2, r1
 800a9ce:	f04f 0800 	mov.w	r8, #0
 800a9d2:	bfcc      	ite	gt
 800a9d4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a9d8:	ea01 0900 	andle.w	r9, r1, r0
 800a9dc:	ec49 8b17 	vmov	d7, r8, r9
 800a9e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e8:	d0a6      	beq.n	800a938 <_strtod_l+0x550>
 800a9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9ec:	9200      	str	r2, [sp, #0]
 800a9ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9f0:	9a06      	ldr	r2, [sp, #24]
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f001 fd3a 	bl	800c46c <__s2b>
 800a9f8:	9006      	str	r0, [sp, #24]
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	f43f af2c 	beq.w	800a858 <_strtod_l+0x470>
 800aa00:	9b07      	ldr	r3, [sp, #28]
 800aa02:	1b7d      	subs	r5, r7, r5
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfb4      	ite	lt
 800aa08:	462b      	movlt	r3, r5
 800aa0a:	2300      	movge	r3, #0
 800aa0c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0e:	9b07      	ldr	r3, [sp, #28]
 800aa10:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ac60 <_strtod_l+0x878>
 800aa14:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ac68 <_strtod_l+0x880>
 800aa18:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ac70 <_strtod_l+0x888>
 800aa1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa20:	2500      	movs	r5, #0
 800aa22:	930c      	str	r3, [sp, #48]	; 0x30
 800aa24:	462e      	mov	r6, r5
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	4620      	mov	r0, r4
 800aa2a:	6859      	ldr	r1, [r3, #4]
 800aa2c:	f001 fc76 	bl	800c31c <_Balloc>
 800aa30:	4607      	mov	r7, r0
 800aa32:	2800      	cmp	r0, #0
 800aa34:	f43f af14 	beq.w	800a860 <_strtod_l+0x478>
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	691a      	ldr	r2, [r3, #16]
 800aa3c:	3202      	adds	r2, #2
 800aa3e:	f103 010c 	add.w	r1, r3, #12
 800aa42:	0092      	lsls	r2, r2, #2
 800aa44:	300c      	adds	r0, #12
 800aa46:	f001 fc5b 	bl	800c300 <memcpy>
 800aa4a:	ec49 8b10 	vmov	d0, r8, r9
 800aa4e:	aa14      	add	r2, sp, #80	; 0x50
 800aa50:	a913      	add	r1, sp, #76	; 0x4c
 800aa52:	4620      	mov	r0, r4
 800aa54:	f002 f850 	bl	800caf8 <__d2b>
 800aa58:	ec49 8b18 	vmov	d8, r8, r9
 800aa5c:	9012      	str	r0, [sp, #72]	; 0x48
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f aefe 	beq.w	800a860 <_strtod_l+0x478>
 800aa64:	2101      	movs	r1, #1
 800aa66:	4620      	mov	r0, r4
 800aa68:	f001 fd9a 	bl	800c5a0 <__i2b>
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	f43f aef6 	beq.w	800a860 <_strtod_l+0x478>
 800aa74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aa76:	9914      	ldr	r1, [sp, #80]	; 0x50
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bfab      	itete	ge
 800aa7c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800aa7e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800aa80:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800aa84:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800aa88:	bfac      	ite	ge
 800aa8a:	eb03 0b02 	addge.w	fp, r3, r2
 800aa8e:	eba2 0a03 	sublt.w	sl, r2, r3
 800aa92:	9a04      	ldr	r2, [sp, #16]
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	440b      	add	r3, r1
 800aa98:	4a7a      	ldr	r2, [pc, #488]	; (800ac84 <_strtod_l+0x89c>)
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800aaa2:	f280 80cd 	bge.w	800ac40 <_strtod_l+0x858>
 800aaa6:	1ad2      	subs	r2, r2, r3
 800aaa8:	2a1f      	cmp	r2, #31
 800aaaa:	eba1 0102 	sub.w	r1, r1, r2
 800aaae:	f04f 0001 	mov.w	r0, #1
 800aab2:	f300 80b9 	bgt.w	800ac28 <_strtod_l+0x840>
 800aab6:	fa00 f302 	lsl.w	r3, r0, r2
 800aaba:	930b      	str	r3, [sp, #44]	; 0x2c
 800aabc:	2300      	movs	r3, #0
 800aabe:	930a      	str	r3, [sp, #40]	; 0x28
 800aac0:	eb0b 0301 	add.w	r3, fp, r1
 800aac4:	9a04      	ldr	r2, [sp, #16]
 800aac6:	459b      	cmp	fp, r3
 800aac8:	448a      	add	sl, r1
 800aaca:	4492      	add	sl, r2
 800aacc:	465a      	mov	r2, fp
 800aace:	bfa8      	it	ge
 800aad0:	461a      	movge	r2, r3
 800aad2:	4552      	cmp	r2, sl
 800aad4:	bfa8      	it	ge
 800aad6:	4652      	movge	r2, sl
 800aad8:	2a00      	cmp	r2, #0
 800aada:	bfc2      	ittt	gt
 800aadc:	1a9b      	subgt	r3, r3, r2
 800aade:	ebaa 0a02 	subgt.w	sl, sl, r2
 800aae2:	ebab 0b02 	subgt.w	fp, fp, r2
 800aae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	dd18      	ble.n	800ab1e <_strtod_l+0x736>
 800aaec:	4631      	mov	r1, r6
 800aaee:	4620      	mov	r0, r4
 800aaf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaf2:	f001 fe15 	bl	800c720 <__pow5mult>
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	f43f aeb1 	beq.w	800a860 <_strtod_l+0x478>
 800aafe:	4601      	mov	r1, r0
 800ab00:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab02:	4620      	mov	r0, r4
 800ab04:	f001 fd62 	bl	800c5cc <__multiply>
 800ab08:	900e      	str	r0, [sp, #56]	; 0x38
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	f43f aea8 	beq.w	800a860 <_strtod_l+0x478>
 800ab10:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ab12:	4620      	mov	r0, r4
 800ab14:	f001 fc42 	bl	800c39c <_Bfree>
 800ab18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab1c:	9212      	str	r2, [sp, #72]	; 0x48
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f300 8093 	bgt.w	800ac4a <_strtod_l+0x862>
 800ab24:	9b07      	ldr	r3, [sp, #28]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	dd08      	ble.n	800ab3c <_strtod_l+0x754>
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f001 fdf6 	bl	800c720 <__pow5mult>
 800ab34:	4607      	mov	r7, r0
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f43f ae92 	beq.w	800a860 <_strtod_l+0x478>
 800ab3c:	f1ba 0f00 	cmp.w	sl, #0
 800ab40:	dd08      	ble.n	800ab54 <_strtod_l+0x76c>
 800ab42:	4639      	mov	r1, r7
 800ab44:	4652      	mov	r2, sl
 800ab46:	4620      	mov	r0, r4
 800ab48:	f001 fe44 	bl	800c7d4 <__lshift>
 800ab4c:	4607      	mov	r7, r0
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f43f ae86 	beq.w	800a860 <_strtod_l+0x478>
 800ab54:	f1bb 0f00 	cmp.w	fp, #0
 800ab58:	dd08      	ble.n	800ab6c <_strtod_l+0x784>
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	465a      	mov	r2, fp
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f001 fe38 	bl	800c7d4 <__lshift>
 800ab64:	4606      	mov	r6, r0
 800ab66:	2800      	cmp	r0, #0
 800ab68:	f43f ae7a 	beq.w	800a860 <_strtod_l+0x478>
 800ab6c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ab6e:	463a      	mov	r2, r7
 800ab70:	4620      	mov	r0, r4
 800ab72:	f001 febb 	bl	800c8ec <__mdiff>
 800ab76:	4605      	mov	r5, r0
 800ab78:	2800      	cmp	r0, #0
 800ab7a:	f43f ae71 	beq.w	800a860 <_strtod_l+0x478>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ab84:	60c3      	str	r3, [r0, #12]
 800ab86:	4631      	mov	r1, r6
 800ab88:	f001 fe94 	bl	800c8b4 <__mcmp>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	da7d      	bge.n	800ac8c <_strtod_l+0x8a4>
 800ab90:	ea5a 0308 	orrs.w	r3, sl, r8
 800ab94:	f040 80a3 	bne.w	800acde <_strtod_l+0x8f6>
 800ab98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f040 809e 	bne.w	800acde <_strtod_l+0x8f6>
 800aba2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aba6:	0d1b      	lsrs	r3, r3, #20
 800aba8:	051b      	lsls	r3, r3, #20
 800abaa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800abae:	f240 8096 	bls.w	800acde <_strtod_l+0x8f6>
 800abb2:	696b      	ldr	r3, [r5, #20]
 800abb4:	b91b      	cbnz	r3, 800abbe <_strtod_l+0x7d6>
 800abb6:	692b      	ldr	r3, [r5, #16]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	f340 8090 	ble.w	800acde <_strtod_l+0x8f6>
 800abbe:	4629      	mov	r1, r5
 800abc0:	2201      	movs	r2, #1
 800abc2:	4620      	mov	r0, r4
 800abc4:	f001 fe06 	bl	800c7d4 <__lshift>
 800abc8:	4631      	mov	r1, r6
 800abca:	4605      	mov	r5, r0
 800abcc:	f001 fe72 	bl	800c8b4 <__mcmp>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	f340 8084 	ble.w	800acde <_strtod_l+0x8f6>
 800abd6:	9904      	ldr	r1, [sp, #16]
 800abd8:	4a2b      	ldr	r2, [pc, #172]	; (800ac88 <_strtod_l+0x8a0>)
 800abda:	464b      	mov	r3, r9
 800abdc:	2900      	cmp	r1, #0
 800abde:	f000 809d 	beq.w	800ad1c <_strtod_l+0x934>
 800abe2:	ea02 0109 	and.w	r1, r2, r9
 800abe6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800abea:	f300 8097 	bgt.w	800ad1c <_strtod_l+0x934>
 800abee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800abf2:	f77f aea5 	ble.w	800a940 <_strtod_l+0x558>
 800abf6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ac78 <_strtod_l+0x890>
 800abfa:	ec49 8b16 	vmov	d6, r8, r9
 800abfe:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ac02:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac06:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	bf08      	it	eq
 800ac0e:	2322      	moveq	r3, #34	; 0x22
 800ac10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ac14:	bf08      	it	eq
 800ac16:	6023      	streq	r3, [r4, #0]
 800ac18:	e62c      	b.n	800a874 <_strtod_l+0x48c>
 800ac1a:	f04f 31ff 	mov.w	r1, #4294967295
 800ac1e:	fa01 f202 	lsl.w	r2, r1, r2
 800ac22:	ea02 0808 	and.w	r8, r2, r8
 800ac26:	e6d9      	b.n	800a9dc <_strtod_l+0x5f4>
 800ac28:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ac2c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ac30:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ac34:	33e2      	adds	r3, #226	; 0xe2
 800ac36:	fa00 f303 	lsl.w	r3, r0, r3
 800ac3a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ac3e:	e73f      	b.n	800aac0 <_strtod_l+0x6d8>
 800ac40:	2200      	movs	r2, #0
 800ac42:	2301      	movs	r3, #1
 800ac44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac48:	e73a      	b.n	800aac0 <_strtod_l+0x6d8>
 800ac4a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f001 fdc0 	bl	800c7d4 <__lshift>
 800ac54:	9012      	str	r0, [sp, #72]	; 0x48
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f47f af64 	bne.w	800ab24 <_strtod_l+0x73c>
 800ac5c:	e600      	b.n	800a860 <_strtod_l+0x478>
 800ac5e:	bf00      	nop
 800ac60:	94a03595 	.word	0x94a03595
 800ac64:	3fcfffff 	.word	0x3fcfffff
 800ac68:	94a03595 	.word	0x94a03595
 800ac6c:	3fdfffff 	.word	0x3fdfffff
 800ac70:	35afe535 	.word	0x35afe535
 800ac74:	3fe00000 	.word	0x3fe00000
 800ac78:	00000000 	.word	0x00000000
 800ac7c:	39500000 	.word	0x39500000
 800ac80:	0800f360 	.word	0x0800f360
 800ac84:	fffffc02 	.word	0xfffffc02
 800ac88:	7ff00000 	.word	0x7ff00000
 800ac8c:	46cb      	mov	fp, r9
 800ac8e:	d15f      	bne.n	800ad50 <_strtod_l+0x968>
 800ac90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac94:	f1ba 0f00 	cmp.w	sl, #0
 800ac98:	d02a      	beq.n	800acf0 <_strtod_l+0x908>
 800ac9a:	4aa7      	ldr	r2, [pc, #668]	; (800af38 <_strtod_l+0xb50>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d12b      	bne.n	800acf8 <_strtod_l+0x910>
 800aca0:	9b04      	ldr	r3, [sp, #16]
 800aca2:	4642      	mov	r2, r8
 800aca4:	b1fb      	cbz	r3, 800ace6 <_strtod_l+0x8fe>
 800aca6:	4ba5      	ldr	r3, [pc, #660]	; (800af3c <_strtod_l+0xb54>)
 800aca8:	ea09 0303 	and.w	r3, r9, r3
 800acac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acb0:	f04f 31ff 	mov.w	r1, #4294967295
 800acb4:	d81a      	bhi.n	800acec <_strtod_l+0x904>
 800acb6:	0d1b      	lsrs	r3, r3, #20
 800acb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acbc:	fa01 f303 	lsl.w	r3, r1, r3
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d119      	bne.n	800acf8 <_strtod_l+0x910>
 800acc4:	4b9e      	ldr	r3, [pc, #632]	; (800af40 <_strtod_l+0xb58>)
 800acc6:	459b      	cmp	fp, r3
 800acc8:	d102      	bne.n	800acd0 <_strtod_l+0x8e8>
 800acca:	3201      	adds	r2, #1
 800accc:	f43f adc8 	beq.w	800a860 <_strtod_l+0x478>
 800acd0:	4b9a      	ldr	r3, [pc, #616]	; (800af3c <_strtod_l+0xb54>)
 800acd2:	ea0b 0303 	and.w	r3, fp, r3
 800acd6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800acda:	f04f 0800 	mov.w	r8, #0
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d188      	bne.n	800abf6 <_strtod_l+0x80e>
 800ace4:	e5c6      	b.n	800a874 <_strtod_l+0x48c>
 800ace6:	f04f 33ff 	mov.w	r3, #4294967295
 800acea:	e7e9      	b.n	800acc0 <_strtod_l+0x8d8>
 800acec:	460b      	mov	r3, r1
 800acee:	e7e7      	b.n	800acc0 <_strtod_l+0x8d8>
 800acf0:	ea53 0308 	orrs.w	r3, r3, r8
 800acf4:	f43f af6f 	beq.w	800abd6 <_strtod_l+0x7ee>
 800acf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfa:	b1cb      	cbz	r3, 800ad30 <_strtod_l+0x948>
 800acfc:	ea13 0f0b 	tst.w	r3, fp
 800ad00:	d0ed      	beq.n	800acde <_strtod_l+0x8f6>
 800ad02:	9a04      	ldr	r2, [sp, #16]
 800ad04:	4640      	mov	r0, r8
 800ad06:	4649      	mov	r1, r9
 800ad08:	f1ba 0f00 	cmp.w	sl, #0
 800ad0c:	d014      	beq.n	800ad38 <_strtod_l+0x950>
 800ad0e:	f7ff fb51 	bl	800a3b4 <sulp>
 800ad12:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ad16:	ec59 8b17 	vmov	r8, r9, d7
 800ad1a:	e7e0      	b.n	800acde <_strtod_l+0x8f6>
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad22:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ad26:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ad2a:	f04f 38ff 	mov.w	r8, #4294967295
 800ad2e:	e7d6      	b.n	800acde <_strtod_l+0x8f6>
 800ad30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad32:	ea13 0f08 	tst.w	r3, r8
 800ad36:	e7e3      	b.n	800ad00 <_strtod_l+0x918>
 800ad38:	f7ff fb3c 	bl	800a3b4 <sulp>
 800ad3c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800ad40:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ad44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad48:	ec59 8b10 	vmov	r8, r9, d0
 800ad4c:	d1c7      	bne.n	800acde <_strtod_l+0x8f6>
 800ad4e:	e5f7      	b.n	800a940 <_strtod_l+0x558>
 800ad50:	4631      	mov	r1, r6
 800ad52:	4628      	mov	r0, r5
 800ad54:	f001 ff2c 	bl	800cbb0 <__ratio>
 800ad58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ad5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ad60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad64:	d865      	bhi.n	800ae32 <_strtod_l+0xa4a>
 800ad66:	f1ba 0f00 	cmp.w	sl, #0
 800ad6a:	d042      	beq.n	800adf2 <_strtod_l+0xa0a>
 800ad6c:	4b75      	ldr	r3, [pc, #468]	; (800af44 <_strtod_l+0xb5c>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ad74:	4871      	ldr	r0, [pc, #452]	; (800af3c <_strtod_l+0xb54>)
 800ad76:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800af50 <_strtod_l+0xb68>
 800ad7a:	ea0b 0100 	and.w	r1, fp, r0
 800ad7e:	4561      	cmp	r1, ip
 800ad80:	f040 808e 	bne.w	800aea0 <_strtod_l+0xab8>
 800ad84:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800ad88:	ec49 8b10 	vmov	d0, r8, r9
 800ad8c:	ec43 2b1c 	vmov	d12, r2, r3
 800ad90:	910a      	str	r1, [sp, #40]	; 0x28
 800ad92:	f001 fe35 	bl	800ca00 <__ulp>
 800ad96:	ec49 8b1e 	vmov	d14, r8, r9
 800ad9a:	4868      	ldr	r0, [pc, #416]	; (800af3c <_strtod_l+0xb54>)
 800ad9c:	eeac eb00 	vfma.f64	d14, d12, d0
 800ada0:	ee1e 3a90 	vmov	r3, s29
 800ada4:	4a68      	ldr	r2, [pc, #416]	; (800af48 <_strtod_l+0xb60>)
 800ada6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ada8:	4018      	ands	r0, r3
 800adaa:	4290      	cmp	r0, r2
 800adac:	ec59 8b1e 	vmov	r8, r9, d14
 800adb0:	d94e      	bls.n	800ae50 <_strtod_l+0xa68>
 800adb2:	ee18 3a90 	vmov	r3, s17
 800adb6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800adba:	4293      	cmp	r3, r2
 800adbc:	d104      	bne.n	800adc8 <_strtod_l+0x9e0>
 800adbe:	ee18 3a10 	vmov	r3, s16
 800adc2:	3301      	adds	r3, #1
 800adc4:	f43f ad4c 	beq.w	800a860 <_strtod_l+0x478>
 800adc8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800af40 <_strtod_l+0xb58>
 800adcc:	f04f 38ff 	mov.w	r8, #4294967295
 800add0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800add2:	4620      	mov	r0, r4
 800add4:	f001 fae2 	bl	800c39c <_Bfree>
 800add8:	4639      	mov	r1, r7
 800adda:	4620      	mov	r0, r4
 800addc:	f001 fade 	bl	800c39c <_Bfree>
 800ade0:	4631      	mov	r1, r6
 800ade2:	4620      	mov	r0, r4
 800ade4:	f001 fada 	bl	800c39c <_Bfree>
 800ade8:	4629      	mov	r1, r5
 800adea:	4620      	mov	r0, r4
 800adec:	f001 fad6 	bl	800c39c <_Bfree>
 800adf0:	e619      	b.n	800aa26 <_strtod_l+0x63e>
 800adf2:	f1b8 0f00 	cmp.w	r8, #0
 800adf6:	d112      	bne.n	800ae1e <_strtod_l+0xa36>
 800adf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adfc:	b9b3      	cbnz	r3, 800ae2c <_strtod_l+0xa44>
 800adfe:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ae02:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ae06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ae0e:	bf58      	it	pl
 800ae10:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800ae14:	eeb1 7b4d 	vneg.f64	d7, d13
 800ae18:	ec53 2b17 	vmov	r2, r3, d7
 800ae1c:	e7aa      	b.n	800ad74 <_strtod_l+0x98c>
 800ae1e:	f1b8 0f01 	cmp.w	r8, #1
 800ae22:	d103      	bne.n	800ae2c <_strtod_l+0xa44>
 800ae24:	f1b9 0f00 	cmp.w	r9, #0
 800ae28:	f43f ad8a 	beq.w	800a940 <_strtod_l+0x558>
 800ae2c:	4b47      	ldr	r3, [pc, #284]	; (800af4c <_strtod_l+0xb64>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	e79e      	b.n	800ad70 <_strtod_l+0x988>
 800ae32:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ae36:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ae3a:	f1ba 0f00 	cmp.w	sl, #0
 800ae3e:	d104      	bne.n	800ae4a <_strtod_l+0xa62>
 800ae40:	eeb1 7b4d 	vneg.f64	d7, d13
 800ae44:	ec53 2b17 	vmov	r2, r3, d7
 800ae48:	e794      	b.n	800ad74 <_strtod_l+0x98c>
 800ae4a:	eeb0 7b4d 	vmov.f64	d7, d13
 800ae4e:	e7f9      	b.n	800ae44 <_strtod_l+0xa5c>
 800ae50:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1ba      	bne.n	800add0 <_strtod_l+0x9e8>
 800ae5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae5e:	0d1b      	lsrs	r3, r3, #20
 800ae60:	051b      	lsls	r3, r3, #20
 800ae62:	4299      	cmp	r1, r3
 800ae64:	d1b4      	bne.n	800add0 <_strtod_l+0x9e8>
 800ae66:	ec51 0b1d 	vmov	r0, r1, d13
 800ae6a:	f7f5 fc7d 	bl	8000768 <__aeabi_d2lz>
 800ae6e:	f7f5 fc35 	bl	80006dc <__aeabi_l2d>
 800ae72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae76:	ec41 0b17 	vmov	d7, r0, r1
 800ae7a:	ea43 0308 	orr.w	r3, r3, r8
 800ae7e:	ea53 030a 	orrs.w	r3, r3, sl
 800ae82:	ee3d db47 	vsub.f64	d13, d13, d7
 800ae86:	d03c      	beq.n	800af02 <_strtod_l+0xb1a>
 800ae88:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ae8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae90:	f53f acf0 	bmi.w	800a874 <_strtod_l+0x48c>
 800ae94:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ae98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae9c:	dd98      	ble.n	800add0 <_strtod_l+0x9e8>
 800ae9e:	e4e9      	b.n	800a874 <_strtod_l+0x48c>
 800aea0:	9804      	ldr	r0, [sp, #16]
 800aea2:	b1f0      	cbz	r0, 800aee2 <_strtod_l+0xafa>
 800aea4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800aea8:	d81b      	bhi.n	800aee2 <_strtod_l+0xafa>
 800aeaa:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800af30 <_strtod_l+0xb48>
 800aeae:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800aeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb6:	d811      	bhi.n	800aedc <_strtod_l+0xaf4>
 800aeb8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800aebc:	ee1d 3a10 	vmov	r3, s26
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	bf38      	it	cc
 800aec4:	2301      	movcc	r3, #1
 800aec6:	ee0d 3a10 	vmov	s26, r3
 800aeca:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800aece:	f1ba 0f00 	cmp.w	sl, #0
 800aed2:	d113      	bne.n	800aefc <_strtod_l+0xb14>
 800aed4:	eeb1 7b4d 	vneg.f64	d7, d13
 800aed8:	ec53 2b17 	vmov	r2, r3, d7
 800aedc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800aee0:	1a43      	subs	r3, r0, r1
 800aee2:	eeb0 0b48 	vmov.f64	d0, d8
 800aee6:	ec43 2b1c 	vmov	d12, r2, r3
 800aeea:	910a      	str	r1, [sp, #40]	; 0x28
 800aeec:	f001 fd88 	bl	800ca00 <__ulp>
 800aef0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aef2:	eeac 8b00 	vfma.f64	d8, d12, d0
 800aef6:	ec59 8b18 	vmov	r8, r9, d8
 800aefa:	e7ab      	b.n	800ae54 <_strtod_l+0xa6c>
 800aefc:	eeb0 7b4d 	vmov.f64	d7, d13
 800af00:	e7ea      	b.n	800aed8 <_strtod_l+0xaf0>
 800af02:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800af06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0a:	f57f af61 	bpl.w	800add0 <_strtod_l+0x9e8>
 800af0e:	e4b1      	b.n	800a874 <_strtod_l+0x48c>
 800af10:	2300      	movs	r3, #0
 800af12:	9308      	str	r3, [sp, #32]
 800af14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af18:	6013      	str	r3, [r2, #0]
 800af1a:	f7ff baad 	b.w	800a478 <_strtod_l+0x90>
 800af1e:	2a65      	cmp	r2, #101	; 0x65
 800af20:	f43f ab9f 	beq.w	800a662 <_strtod_l+0x27a>
 800af24:	2a45      	cmp	r2, #69	; 0x45
 800af26:	f43f ab9c 	beq.w	800a662 <_strtod_l+0x27a>
 800af2a:	2101      	movs	r1, #1
 800af2c:	f7ff bbd4 	b.w	800a6d8 <_strtod_l+0x2f0>
 800af30:	ffc00000 	.word	0xffc00000
 800af34:	41dfffff 	.word	0x41dfffff
 800af38:	000fffff 	.word	0x000fffff
 800af3c:	7ff00000 	.word	0x7ff00000
 800af40:	7fefffff 	.word	0x7fefffff
 800af44:	3ff00000 	.word	0x3ff00000
 800af48:	7c9fffff 	.word	0x7c9fffff
 800af4c:	bff00000 	.word	0xbff00000
 800af50:	7fe00000 	.word	0x7fe00000

0800af54 <strtod>:
 800af54:	460a      	mov	r2, r1
 800af56:	4601      	mov	r1, r0
 800af58:	4802      	ldr	r0, [pc, #8]	; (800af64 <strtod+0x10>)
 800af5a:	4b03      	ldr	r3, [pc, #12]	; (800af68 <strtod+0x14>)
 800af5c:	6800      	ldr	r0, [r0, #0]
 800af5e:	f7ff ba43 	b.w	800a3e8 <_strtod_l>
 800af62:	bf00      	nop
 800af64:	24000bd4 	.word	0x24000bd4
 800af68:	24000c3c 	.word	0x24000c3c

0800af6c <__utoa>:
 800af6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af6e:	4c1f      	ldr	r4, [pc, #124]	; (800afec <__utoa+0x80>)
 800af70:	b08b      	sub	sp, #44	; 0x2c
 800af72:	4605      	mov	r5, r0
 800af74:	460b      	mov	r3, r1
 800af76:	466e      	mov	r6, sp
 800af78:	f104 0c20 	add.w	ip, r4, #32
 800af7c:	6820      	ldr	r0, [r4, #0]
 800af7e:	6861      	ldr	r1, [r4, #4]
 800af80:	4637      	mov	r7, r6
 800af82:	c703      	stmia	r7!, {r0, r1}
 800af84:	3408      	adds	r4, #8
 800af86:	4564      	cmp	r4, ip
 800af88:	463e      	mov	r6, r7
 800af8a:	d1f7      	bne.n	800af7c <__utoa+0x10>
 800af8c:	7921      	ldrb	r1, [r4, #4]
 800af8e:	7139      	strb	r1, [r7, #4]
 800af90:	1e91      	subs	r1, r2, #2
 800af92:	6820      	ldr	r0, [r4, #0]
 800af94:	6038      	str	r0, [r7, #0]
 800af96:	2922      	cmp	r1, #34	; 0x22
 800af98:	f04f 0100 	mov.w	r1, #0
 800af9c:	d904      	bls.n	800afa8 <__utoa+0x3c>
 800af9e:	7019      	strb	r1, [r3, #0]
 800afa0:	460b      	mov	r3, r1
 800afa2:	4618      	mov	r0, r3
 800afa4:	b00b      	add	sp, #44	; 0x2c
 800afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa8:	1e58      	subs	r0, r3, #1
 800afaa:	4684      	mov	ip, r0
 800afac:	fbb5 f7f2 	udiv	r7, r5, r2
 800afb0:	fb02 5617 	mls	r6, r2, r7, r5
 800afb4:	3628      	adds	r6, #40	; 0x28
 800afb6:	446e      	add	r6, sp
 800afb8:	460c      	mov	r4, r1
 800afba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800afbe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800afc2:	462e      	mov	r6, r5
 800afc4:	42b2      	cmp	r2, r6
 800afc6:	f101 0101 	add.w	r1, r1, #1
 800afca:	463d      	mov	r5, r7
 800afcc:	d9ee      	bls.n	800afac <__utoa+0x40>
 800afce:	2200      	movs	r2, #0
 800afd0:	545a      	strb	r2, [r3, r1]
 800afd2:	1919      	adds	r1, r3, r4
 800afd4:	1aa5      	subs	r5, r4, r2
 800afd6:	42aa      	cmp	r2, r5
 800afd8:	dae3      	bge.n	800afa2 <__utoa+0x36>
 800afda:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800afde:	780e      	ldrb	r6, [r1, #0]
 800afe0:	7006      	strb	r6, [r0, #0]
 800afe2:	3201      	adds	r2, #1
 800afe4:	f801 5901 	strb.w	r5, [r1], #-1
 800afe8:	e7f4      	b.n	800afd4 <__utoa+0x68>
 800afea:	bf00      	nop
 800afec:	0800f388 	.word	0x0800f388

0800aff0 <quorem>:
 800aff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	6903      	ldr	r3, [r0, #16]
 800aff6:	690c      	ldr	r4, [r1, #16]
 800aff8:	42a3      	cmp	r3, r4
 800affa:	4607      	mov	r7, r0
 800affc:	f2c0 8081 	blt.w	800b102 <quorem+0x112>
 800b000:	3c01      	subs	r4, #1
 800b002:	f101 0814 	add.w	r8, r1, #20
 800b006:	f100 0514 	add.w	r5, r0, #20
 800b00a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b014:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b018:	3301      	adds	r3, #1
 800b01a:	429a      	cmp	r2, r3
 800b01c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b020:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b024:	fbb2 f6f3 	udiv	r6, r2, r3
 800b028:	d331      	bcc.n	800b08e <quorem+0x9e>
 800b02a:	f04f 0e00 	mov.w	lr, #0
 800b02e:	4640      	mov	r0, r8
 800b030:	46ac      	mov	ip, r5
 800b032:	46f2      	mov	sl, lr
 800b034:	f850 2b04 	ldr.w	r2, [r0], #4
 800b038:	b293      	uxth	r3, r2
 800b03a:	fb06 e303 	mla	r3, r6, r3, lr
 800b03e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b042:	b29b      	uxth	r3, r3
 800b044:	ebaa 0303 	sub.w	r3, sl, r3
 800b048:	f8dc a000 	ldr.w	sl, [ip]
 800b04c:	0c12      	lsrs	r2, r2, #16
 800b04e:	fa13 f38a 	uxtah	r3, r3, sl
 800b052:	fb06 e202 	mla	r2, r6, r2, lr
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	9b00      	ldr	r3, [sp, #0]
 800b05a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b05e:	b292      	uxth	r2, r2
 800b060:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b068:	f8bd 3000 	ldrh.w	r3, [sp]
 800b06c:	4581      	cmp	r9, r0
 800b06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b072:	f84c 3b04 	str.w	r3, [ip], #4
 800b076:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b07a:	d2db      	bcs.n	800b034 <quorem+0x44>
 800b07c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b080:	b92b      	cbnz	r3, 800b08e <quorem+0x9e>
 800b082:	9b01      	ldr	r3, [sp, #4]
 800b084:	3b04      	subs	r3, #4
 800b086:	429d      	cmp	r5, r3
 800b088:	461a      	mov	r2, r3
 800b08a:	d32e      	bcc.n	800b0ea <quorem+0xfa>
 800b08c:	613c      	str	r4, [r7, #16]
 800b08e:	4638      	mov	r0, r7
 800b090:	f001 fc10 	bl	800c8b4 <__mcmp>
 800b094:	2800      	cmp	r0, #0
 800b096:	db24      	blt.n	800b0e2 <quorem+0xf2>
 800b098:	3601      	adds	r6, #1
 800b09a:	4628      	mov	r0, r5
 800b09c:	f04f 0c00 	mov.w	ip, #0
 800b0a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0a4:	f8d0 e000 	ldr.w	lr, [r0]
 800b0a8:	b293      	uxth	r3, r2
 800b0aa:	ebac 0303 	sub.w	r3, ip, r3
 800b0ae:	0c12      	lsrs	r2, r2, #16
 800b0b0:	fa13 f38e 	uxtah	r3, r3, lr
 800b0b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0c2:	45c1      	cmp	r9, r8
 800b0c4:	f840 3b04 	str.w	r3, [r0], #4
 800b0c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0cc:	d2e8      	bcs.n	800b0a0 <quorem+0xb0>
 800b0ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0d6:	b922      	cbnz	r2, 800b0e2 <quorem+0xf2>
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	461a      	mov	r2, r3
 800b0de:	d30a      	bcc.n	800b0f6 <quorem+0x106>
 800b0e0:	613c      	str	r4, [r7, #16]
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	b003      	add	sp, #12
 800b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ea:	6812      	ldr	r2, [r2, #0]
 800b0ec:	3b04      	subs	r3, #4
 800b0ee:	2a00      	cmp	r2, #0
 800b0f0:	d1cc      	bne.n	800b08c <quorem+0x9c>
 800b0f2:	3c01      	subs	r4, #1
 800b0f4:	e7c7      	b.n	800b086 <quorem+0x96>
 800b0f6:	6812      	ldr	r2, [r2, #0]
 800b0f8:	3b04      	subs	r3, #4
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	d1f0      	bne.n	800b0e0 <quorem+0xf0>
 800b0fe:	3c01      	subs	r4, #1
 800b100:	e7eb      	b.n	800b0da <quorem+0xea>
 800b102:	2000      	movs	r0, #0
 800b104:	e7ee      	b.n	800b0e4 <quorem+0xf4>
	...

0800b108 <_dtoa_r>:
 800b108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10c:	ed2d 8b02 	vpush	{d8}
 800b110:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b112:	b091      	sub	sp, #68	; 0x44
 800b114:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b118:	ec59 8b10 	vmov	r8, r9, d0
 800b11c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b11e:	9106      	str	r1, [sp, #24]
 800b120:	4606      	mov	r6, r0
 800b122:	9208      	str	r2, [sp, #32]
 800b124:	930c      	str	r3, [sp, #48]	; 0x30
 800b126:	b975      	cbnz	r5, 800b146 <_dtoa_r+0x3e>
 800b128:	2010      	movs	r0, #16
 800b12a:	f001 f8cf 	bl	800c2cc <malloc>
 800b12e:	4602      	mov	r2, r0
 800b130:	6270      	str	r0, [r6, #36]	; 0x24
 800b132:	b920      	cbnz	r0, 800b13e <_dtoa_r+0x36>
 800b134:	4baa      	ldr	r3, [pc, #680]	; (800b3e0 <_dtoa_r+0x2d8>)
 800b136:	21ea      	movs	r1, #234	; 0xea
 800b138:	48aa      	ldr	r0, [pc, #680]	; (800b3e4 <_dtoa_r+0x2dc>)
 800b13a:	f002 f83b 	bl	800d1b4 <__assert_func>
 800b13e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b142:	6005      	str	r5, [r0, #0]
 800b144:	60c5      	str	r5, [r0, #12]
 800b146:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b148:	6819      	ldr	r1, [r3, #0]
 800b14a:	b151      	cbz	r1, 800b162 <_dtoa_r+0x5a>
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	604a      	str	r2, [r1, #4]
 800b150:	2301      	movs	r3, #1
 800b152:	4093      	lsls	r3, r2
 800b154:	608b      	str	r3, [r1, #8]
 800b156:	4630      	mov	r0, r6
 800b158:	f001 f920 	bl	800c39c <_Bfree>
 800b15c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	f1b9 0300 	subs.w	r3, r9, #0
 800b166:	bfbb      	ittet	lt
 800b168:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b16c:	9303      	strlt	r3, [sp, #12]
 800b16e:	2300      	movge	r3, #0
 800b170:	2201      	movlt	r2, #1
 800b172:	bfac      	ite	ge
 800b174:	6023      	strge	r3, [r4, #0]
 800b176:	6022      	strlt	r2, [r4, #0]
 800b178:	4b9b      	ldr	r3, [pc, #620]	; (800b3e8 <_dtoa_r+0x2e0>)
 800b17a:	9c03      	ldr	r4, [sp, #12]
 800b17c:	43a3      	bics	r3, r4
 800b17e:	d11c      	bne.n	800b1ba <_dtoa_r+0xb2>
 800b180:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b182:	f242 730f 	movw	r3, #9999	; 0x270f
 800b186:	6013      	str	r3, [r2, #0]
 800b188:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b18c:	ea53 0308 	orrs.w	r3, r3, r8
 800b190:	f000 84fd 	beq.w	800bb8e <_dtoa_r+0xa86>
 800b194:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b196:	b963      	cbnz	r3, 800b1b2 <_dtoa_r+0xaa>
 800b198:	4b94      	ldr	r3, [pc, #592]	; (800b3ec <_dtoa_r+0x2e4>)
 800b19a:	e01f      	b.n	800b1dc <_dtoa_r+0xd4>
 800b19c:	4b94      	ldr	r3, [pc, #592]	; (800b3f0 <_dtoa_r+0x2e8>)
 800b19e:	9301      	str	r3, [sp, #4]
 800b1a0:	3308      	adds	r3, #8
 800b1a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	9801      	ldr	r0, [sp, #4]
 800b1a8:	b011      	add	sp, #68	; 0x44
 800b1aa:	ecbd 8b02 	vpop	{d8}
 800b1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b2:	4b8e      	ldr	r3, [pc, #568]	; (800b3ec <_dtoa_r+0x2e4>)
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	3303      	adds	r3, #3
 800b1b8:	e7f3      	b.n	800b1a2 <_dtoa_r+0x9a>
 800b1ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b1be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c6:	d10b      	bne.n	800b1e0 <_dtoa_r+0xd8>
 800b1c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 84d9 	beq.w	800bb88 <_dtoa_r+0xa80>
 800b1d6:	4887      	ldr	r0, [pc, #540]	; (800b3f4 <_dtoa_r+0x2ec>)
 800b1d8:	6018      	str	r0, [r3, #0]
 800b1da:	1e43      	subs	r3, r0, #1
 800b1dc:	9301      	str	r3, [sp, #4]
 800b1de:	e7e2      	b.n	800b1a6 <_dtoa_r+0x9e>
 800b1e0:	a90f      	add	r1, sp, #60	; 0x3c
 800b1e2:	aa0e      	add	r2, sp, #56	; 0x38
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	eeb0 0b48 	vmov.f64	d0, d8
 800b1ea:	f001 fc85 	bl	800caf8 <__d2b>
 800b1ee:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b1f6:	2900      	cmp	r1, #0
 800b1f8:	d046      	beq.n	800b288 <_dtoa_r+0x180>
 800b1fa:	ee18 4a90 	vmov	r4, s17
 800b1fe:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b202:	ec53 2b18 	vmov	r2, r3, d8
 800b206:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b20a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b20e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b212:	2400      	movs	r4, #0
 800b214:	ec43 2b16 	vmov	d6, r2, r3
 800b218:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b21c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b3c8 <_dtoa_r+0x2c0>
 800b220:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b224:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b3d0 <_dtoa_r+0x2c8>
 800b228:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b22c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b3d8 <_dtoa_r+0x2d0>
 800b230:	ee07 1a90 	vmov	s15, r1
 800b234:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b238:	eeb0 7b46 	vmov.f64	d7, d6
 800b23c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b240:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b244:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24c:	ee16 ba90 	vmov	fp, s13
 800b250:	940a      	str	r4, [sp, #40]	; 0x28
 800b252:	d508      	bpl.n	800b266 <_dtoa_r+0x15e>
 800b254:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b258:	eeb4 6b47 	vcmp.f64	d6, d7
 800b25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b260:	bf18      	it	ne
 800b262:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b266:	f1bb 0f16 	cmp.w	fp, #22
 800b26a:	d82f      	bhi.n	800b2cc <_dtoa_r+0x1c4>
 800b26c:	4b62      	ldr	r3, [pc, #392]	; (800b3f8 <_dtoa_r+0x2f0>)
 800b26e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b272:	ed93 7b00 	vldr	d7, [r3]
 800b276:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27e:	d501      	bpl.n	800b284 <_dtoa_r+0x17c>
 800b280:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b284:	2300      	movs	r3, #0
 800b286:	e022      	b.n	800b2ce <_dtoa_r+0x1c6>
 800b288:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b28a:	4401      	add	r1, r0
 800b28c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b290:	2b20      	cmp	r3, #32
 800b292:	bfc1      	itttt	gt
 800b294:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b298:	fa04 f303 	lslgt.w	r3, r4, r3
 800b29c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b2a0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b2a4:	bfd6      	itet	le
 800b2a6:	f1c3 0320 	rsble	r3, r3, #32
 800b2aa:	ea43 0808 	orrgt.w	r8, r3, r8
 800b2ae:	fa08 f803 	lslle.w	r8, r8, r3
 800b2b2:	ee07 8a90 	vmov	s15, r8
 800b2b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b2ba:	3901      	subs	r1, #1
 800b2bc:	ee17 4a90 	vmov	r4, s15
 800b2c0:	ec53 2b17 	vmov	r2, r3, d7
 800b2c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b2c8:	2401      	movs	r4, #1
 800b2ca:	e7a3      	b.n	800b214 <_dtoa_r+0x10c>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2d0:	1a43      	subs	r3, r0, r1
 800b2d2:	1e5a      	subs	r2, r3, #1
 800b2d4:	bf45      	ittet	mi
 800b2d6:	f1c3 0301 	rsbmi	r3, r3, #1
 800b2da:	9304      	strmi	r3, [sp, #16]
 800b2dc:	2300      	movpl	r3, #0
 800b2de:	2300      	movmi	r3, #0
 800b2e0:	9205      	str	r2, [sp, #20]
 800b2e2:	bf54      	ite	pl
 800b2e4:	9304      	strpl	r3, [sp, #16]
 800b2e6:	9305      	strmi	r3, [sp, #20]
 800b2e8:	f1bb 0f00 	cmp.w	fp, #0
 800b2ec:	db18      	blt.n	800b320 <_dtoa_r+0x218>
 800b2ee:	9b05      	ldr	r3, [sp, #20]
 800b2f0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b2f4:	445b      	add	r3, fp
 800b2f6:	9305      	str	r3, [sp, #20]
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	9a06      	ldr	r2, [sp, #24]
 800b2fc:	2a09      	cmp	r2, #9
 800b2fe:	d849      	bhi.n	800b394 <_dtoa_r+0x28c>
 800b300:	2a05      	cmp	r2, #5
 800b302:	bfc4      	itt	gt
 800b304:	3a04      	subgt	r2, #4
 800b306:	9206      	strgt	r2, [sp, #24]
 800b308:	9a06      	ldr	r2, [sp, #24]
 800b30a:	f1a2 0202 	sub.w	r2, r2, #2
 800b30e:	bfcc      	ite	gt
 800b310:	2400      	movgt	r4, #0
 800b312:	2401      	movle	r4, #1
 800b314:	2a03      	cmp	r2, #3
 800b316:	d848      	bhi.n	800b3aa <_dtoa_r+0x2a2>
 800b318:	e8df f002 	tbb	[pc, r2]
 800b31c:	3a2c2e0b 	.word	0x3a2c2e0b
 800b320:	9b04      	ldr	r3, [sp, #16]
 800b322:	2200      	movs	r2, #0
 800b324:	eba3 030b 	sub.w	r3, r3, fp
 800b328:	9304      	str	r3, [sp, #16]
 800b32a:	9209      	str	r2, [sp, #36]	; 0x24
 800b32c:	f1cb 0300 	rsb	r3, fp, #0
 800b330:	e7e3      	b.n	800b2fa <_dtoa_r+0x1f2>
 800b332:	2200      	movs	r2, #0
 800b334:	9207      	str	r2, [sp, #28]
 800b336:	9a08      	ldr	r2, [sp, #32]
 800b338:	2a00      	cmp	r2, #0
 800b33a:	dc39      	bgt.n	800b3b0 <_dtoa_r+0x2a8>
 800b33c:	f04f 0a01 	mov.w	sl, #1
 800b340:	46d1      	mov	r9, sl
 800b342:	4652      	mov	r2, sl
 800b344:	f8cd a020 	str.w	sl, [sp, #32]
 800b348:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b34a:	2100      	movs	r1, #0
 800b34c:	6079      	str	r1, [r7, #4]
 800b34e:	2004      	movs	r0, #4
 800b350:	f100 0c14 	add.w	ip, r0, #20
 800b354:	4594      	cmp	ip, r2
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	d92f      	bls.n	800b3ba <_dtoa_r+0x2b2>
 800b35a:	4630      	mov	r0, r6
 800b35c:	930d      	str	r3, [sp, #52]	; 0x34
 800b35e:	f000 ffdd 	bl	800c31c <_Balloc>
 800b362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b364:	9001      	str	r0, [sp, #4]
 800b366:	4602      	mov	r2, r0
 800b368:	2800      	cmp	r0, #0
 800b36a:	d149      	bne.n	800b400 <_dtoa_r+0x2f8>
 800b36c:	4b23      	ldr	r3, [pc, #140]	; (800b3fc <_dtoa_r+0x2f4>)
 800b36e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b372:	e6e1      	b.n	800b138 <_dtoa_r+0x30>
 800b374:	2201      	movs	r2, #1
 800b376:	e7dd      	b.n	800b334 <_dtoa_r+0x22c>
 800b378:	2200      	movs	r2, #0
 800b37a:	9207      	str	r2, [sp, #28]
 800b37c:	9a08      	ldr	r2, [sp, #32]
 800b37e:	eb0b 0a02 	add.w	sl, fp, r2
 800b382:	f10a 0901 	add.w	r9, sl, #1
 800b386:	464a      	mov	r2, r9
 800b388:	2a01      	cmp	r2, #1
 800b38a:	bfb8      	it	lt
 800b38c:	2201      	movlt	r2, #1
 800b38e:	e7db      	b.n	800b348 <_dtoa_r+0x240>
 800b390:	2201      	movs	r2, #1
 800b392:	e7f2      	b.n	800b37a <_dtoa_r+0x272>
 800b394:	2401      	movs	r4, #1
 800b396:	2200      	movs	r2, #0
 800b398:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b39c:	f04f 3aff 	mov.w	sl, #4294967295
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	46d1      	mov	r9, sl
 800b3a4:	2212      	movs	r2, #18
 800b3a6:	9108      	str	r1, [sp, #32]
 800b3a8:	e7ce      	b.n	800b348 <_dtoa_r+0x240>
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	9207      	str	r2, [sp, #28]
 800b3ae:	e7f5      	b.n	800b39c <_dtoa_r+0x294>
 800b3b0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b3b4:	46d1      	mov	r9, sl
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	e7c6      	b.n	800b348 <_dtoa_r+0x240>
 800b3ba:	3101      	adds	r1, #1
 800b3bc:	6079      	str	r1, [r7, #4]
 800b3be:	0040      	lsls	r0, r0, #1
 800b3c0:	e7c6      	b.n	800b350 <_dtoa_r+0x248>
 800b3c2:	bf00      	nop
 800b3c4:	f3af 8000 	nop.w
 800b3c8:	636f4361 	.word	0x636f4361
 800b3cc:	3fd287a7 	.word	0x3fd287a7
 800b3d0:	8b60c8b3 	.word	0x8b60c8b3
 800b3d4:	3fc68a28 	.word	0x3fc68a28
 800b3d8:	509f79fb 	.word	0x509f79fb
 800b3dc:	3fd34413 	.word	0x3fd34413
 800b3e0:	0800f3ba 	.word	0x0800f3ba
 800b3e4:	0800f3d1 	.word	0x0800f3d1
 800b3e8:	7ff00000 	.word	0x7ff00000
 800b3ec:	0800f3b6 	.word	0x0800f3b6
 800b3f0:	0800f3ad 	.word	0x0800f3ad
 800b3f4:	0800f315 	.word	0x0800f315
 800b3f8:	0800f540 	.word	0x0800f540
 800b3fc:	0800f42c 	.word	0x0800f42c
 800b400:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b402:	9901      	ldr	r1, [sp, #4]
 800b404:	6011      	str	r1, [r2, #0]
 800b406:	f1b9 0f0e 	cmp.w	r9, #14
 800b40a:	d86c      	bhi.n	800b4e6 <_dtoa_r+0x3de>
 800b40c:	2c00      	cmp	r4, #0
 800b40e:	d06a      	beq.n	800b4e6 <_dtoa_r+0x3de>
 800b410:	f1bb 0f00 	cmp.w	fp, #0
 800b414:	f340 80a0 	ble.w	800b558 <_dtoa_r+0x450>
 800b418:	49c1      	ldr	r1, [pc, #772]	; (800b720 <_dtoa_r+0x618>)
 800b41a:	f00b 020f 	and.w	r2, fp, #15
 800b41e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b422:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b426:	ed92 7b00 	vldr	d7, [r2]
 800b42a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b42e:	f000 8087 	beq.w	800b540 <_dtoa_r+0x438>
 800b432:	4abc      	ldr	r2, [pc, #752]	; (800b724 <_dtoa_r+0x61c>)
 800b434:	ed92 6b08 	vldr	d6, [r2, #32]
 800b438:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b43c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b440:	f001 010f 	and.w	r1, r1, #15
 800b444:	2203      	movs	r2, #3
 800b446:	48b7      	ldr	r0, [pc, #732]	; (800b724 <_dtoa_r+0x61c>)
 800b448:	2900      	cmp	r1, #0
 800b44a:	d17b      	bne.n	800b544 <_dtoa_r+0x43c>
 800b44c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b450:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b454:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b45a:	2900      	cmp	r1, #0
 800b45c:	f000 80a2 	beq.w	800b5a4 <_dtoa_r+0x49c>
 800b460:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b464:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b468:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b470:	f140 8098 	bpl.w	800b5a4 <_dtoa_r+0x49c>
 800b474:	f1b9 0f00 	cmp.w	r9, #0
 800b478:	f000 8094 	beq.w	800b5a4 <_dtoa_r+0x49c>
 800b47c:	f1ba 0f00 	cmp.w	sl, #0
 800b480:	dd2f      	ble.n	800b4e2 <_dtoa_r+0x3da>
 800b482:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b486:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b48a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b48e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b492:	3201      	adds	r2, #1
 800b494:	4650      	mov	r0, sl
 800b496:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b49a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b49e:	ee07 2a90 	vmov	s15, r2
 800b4a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b4a6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b4aa:	ee15 4a90 	vmov	r4, s11
 800b4ae:	ec52 1b15 	vmov	r1, r2, d5
 800b4b2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d177      	bne.n	800b5aa <_dtoa_r+0x4a2>
 800b4ba:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b4be:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b4c2:	ec42 1b17 	vmov	d7, r1, r2
 800b4c6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ce:	f300 8263 	bgt.w	800b998 <_dtoa_r+0x890>
 800b4d2:	eeb1 7b47 	vneg.f64	d7, d7
 800b4d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4de:	f100 8258 	bmi.w	800b992 <_dtoa_r+0x88a>
 800b4e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b4e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4e8:	2a00      	cmp	r2, #0
 800b4ea:	f2c0 811d 	blt.w	800b728 <_dtoa_r+0x620>
 800b4ee:	f1bb 0f0e 	cmp.w	fp, #14
 800b4f2:	f300 8119 	bgt.w	800b728 <_dtoa_r+0x620>
 800b4f6:	4b8a      	ldr	r3, [pc, #552]	; (800b720 <_dtoa_r+0x618>)
 800b4f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b4fc:	ed93 6b00 	vldr	d6, [r3]
 800b500:	9b08      	ldr	r3, [sp, #32]
 800b502:	2b00      	cmp	r3, #0
 800b504:	f280 80b7 	bge.w	800b676 <_dtoa_r+0x56e>
 800b508:	f1b9 0f00 	cmp.w	r9, #0
 800b50c:	f300 80b3 	bgt.w	800b676 <_dtoa_r+0x56e>
 800b510:	f040 823f 	bne.w	800b992 <_dtoa_r+0x88a>
 800b514:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b518:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b51c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b520:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b528:	464c      	mov	r4, r9
 800b52a:	464f      	mov	r7, r9
 800b52c:	f280 8215 	bge.w	800b95a <_dtoa_r+0x852>
 800b530:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b534:	2331      	movs	r3, #49	; 0x31
 800b536:	f808 3b01 	strb.w	r3, [r8], #1
 800b53a:	f10b 0b01 	add.w	fp, fp, #1
 800b53e:	e211      	b.n	800b964 <_dtoa_r+0x85c>
 800b540:	2202      	movs	r2, #2
 800b542:	e780      	b.n	800b446 <_dtoa_r+0x33e>
 800b544:	07cc      	lsls	r4, r1, #31
 800b546:	d504      	bpl.n	800b552 <_dtoa_r+0x44a>
 800b548:	ed90 6b00 	vldr	d6, [r0]
 800b54c:	3201      	adds	r2, #1
 800b54e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b552:	1049      	asrs	r1, r1, #1
 800b554:	3008      	adds	r0, #8
 800b556:	e777      	b.n	800b448 <_dtoa_r+0x340>
 800b558:	d022      	beq.n	800b5a0 <_dtoa_r+0x498>
 800b55a:	f1cb 0100 	rsb	r1, fp, #0
 800b55e:	4a70      	ldr	r2, [pc, #448]	; (800b720 <_dtoa_r+0x618>)
 800b560:	f001 000f 	and.w	r0, r1, #15
 800b564:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b568:	ed92 7b00 	vldr	d7, [r2]
 800b56c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b570:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b574:	486b      	ldr	r0, [pc, #428]	; (800b724 <_dtoa_r+0x61c>)
 800b576:	1109      	asrs	r1, r1, #4
 800b578:	2400      	movs	r4, #0
 800b57a:	2202      	movs	r2, #2
 800b57c:	b929      	cbnz	r1, 800b58a <_dtoa_r+0x482>
 800b57e:	2c00      	cmp	r4, #0
 800b580:	f43f af6a 	beq.w	800b458 <_dtoa_r+0x350>
 800b584:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b588:	e766      	b.n	800b458 <_dtoa_r+0x350>
 800b58a:	07cf      	lsls	r7, r1, #31
 800b58c:	d505      	bpl.n	800b59a <_dtoa_r+0x492>
 800b58e:	ed90 6b00 	vldr	d6, [r0]
 800b592:	3201      	adds	r2, #1
 800b594:	2401      	movs	r4, #1
 800b596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b59a:	1049      	asrs	r1, r1, #1
 800b59c:	3008      	adds	r0, #8
 800b59e:	e7ed      	b.n	800b57c <_dtoa_r+0x474>
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	e759      	b.n	800b458 <_dtoa_r+0x350>
 800b5a4:	465f      	mov	r7, fp
 800b5a6:	4648      	mov	r0, r9
 800b5a8:	e775      	b.n	800b496 <_dtoa_r+0x38e>
 800b5aa:	ec42 1b17 	vmov	d7, r1, r2
 800b5ae:	4a5c      	ldr	r2, [pc, #368]	; (800b720 <_dtoa_r+0x618>)
 800b5b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b5b4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b5b8:	9a01      	ldr	r2, [sp, #4]
 800b5ba:	1814      	adds	r4, r2, r0
 800b5bc:	9a07      	ldr	r2, [sp, #28]
 800b5be:	b352      	cbz	r2, 800b616 <_dtoa_r+0x50e>
 800b5c0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b5c4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b5c8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b5cc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b5d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b5d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b5d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b5dc:	ee14 2a90 	vmov	r2, s9
 800b5e0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b5e4:	3230      	adds	r2, #48	; 0x30
 800b5e6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f2:	f808 2b01 	strb.w	r2, [r8], #1
 800b5f6:	d439      	bmi.n	800b66c <_dtoa_r+0x564>
 800b5f8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b5fc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b604:	d472      	bmi.n	800b6ec <_dtoa_r+0x5e4>
 800b606:	45a0      	cmp	r8, r4
 800b608:	f43f af6b 	beq.w	800b4e2 <_dtoa_r+0x3da>
 800b60c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b610:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b614:	e7e0      	b.n	800b5d8 <_dtoa_r+0x4d0>
 800b616:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b61a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b61e:	4621      	mov	r1, r4
 800b620:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b624:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b628:	ee14 2a90 	vmov	r2, s9
 800b62c:	3230      	adds	r2, #48	; 0x30
 800b62e:	f808 2b01 	strb.w	r2, [r8], #1
 800b632:	45a0      	cmp	r8, r4
 800b634:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b638:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b63c:	d118      	bne.n	800b670 <_dtoa_r+0x568>
 800b63e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b642:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b646:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64e:	dc4d      	bgt.n	800b6ec <_dtoa_r+0x5e4>
 800b650:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b654:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65c:	f57f af41 	bpl.w	800b4e2 <_dtoa_r+0x3da>
 800b660:	4688      	mov	r8, r1
 800b662:	3901      	subs	r1, #1
 800b664:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b668:	2b30      	cmp	r3, #48	; 0x30
 800b66a:	d0f9      	beq.n	800b660 <_dtoa_r+0x558>
 800b66c:	46bb      	mov	fp, r7
 800b66e:	e02a      	b.n	800b6c6 <_dtoa_r+0x5be>
 800b670:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b674:	e7d6      	b.n	800b624 <_dtoa_r+0x51c>
 800b676:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b67a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b67e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b682:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b686:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b68a:	ee15 3a10 	vmov	r3, s10
 800b68e:	3330      	adds	r3, #48	; 0x30
 800b690:	f808 3b01 	strb.w	r3, [r8], #1
 800b694:	9b01      	ldr	r3, [sp, #4]
 800b696:	eba8 0303 	sub.w	r3, r8, r3
 800b69a:	4599      	cmp	r9, r3
 800b69c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b6a0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b6a4:	d133      	bne.n	800b70e <_dtoa_r+0x606>
 800b6a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b6aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b6ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b2:	dc1a      	bgt.n	800b6ea <_dtoa_r+0x5e2>
 800b6b4:	eeb4 7b46 	vcmp.f64	d7, d6
 800b6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6bc:	d103      	bne.n	800b6c6 <_dtoa_r+0x5be>
 800b6be:	ee15 3a10 	vmov	r3, s10
 800b6c2:	07d9      	lsls	r1, r3, #31
 800b6c4:	d411      	bmi.n	800b6ea <_dtoa_r+0x5e2>
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f000 fe67 	bl	800c39c <_Bfree>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6d2:	f888 3000 	strb.w	r3, [r8]
 800b6d6:	f10b 0301 	add.w	r3, fp, #1
 800b6da:	6013      	str	r3, [r2, #0]
 800b6dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	f43f ad61 	beq.w	800b1a6 <_dtoa_r+0x9e>
 800b6e4:	f8c3 8000 	str.w	r8, [r3]
 800b6e8:	e55d      	b.n	800b1a6 <_dtoa_r+0x9e>
 800b6ea:	465f      	mov	r7, fp
 800b6ec:	4643      	mov	r3, r8
 800b6ee:	4698      	mov	r8, r3
 800b6f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6f4:	2a39      	cmp	r2, #57	; 0x39
 800b6f6:	d106      	bne.n	800b706 <_dtoa_r+0x5fe>
 800b6f8:	9a01      	ldr	r2, [sp, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d1f7      	bne.n	800b6ee <_dtoa_r+0x5e6>
 800b6fe:	9901      	ldr	r1, [sp, #4]
 800b700:	2230      	movs	r2, #48	; 0x30
 800b702:	3701      	adds	r7, #1
 800b704:	700a      	strb	r2, [r1, #0]
 800b706:	781a      	ldrb	r2, [r3, #0]
 800b708:	3201      	adds	r2, #1
 800b70a:	701a      	strb	r2, [r3, #0]
 800b70c:	e7ae      	b.n	800b66c <_dtoa_r+0x564>
 800b70e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b712:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b71a:	d1b2      	bne.n	800b682 <_dtoa_r+0x57a>
 800b71c:	e7d3      	b.n	800b6c6 <_dtoa_r+0x5be>
 800b71e:	bf00      	nop
 800b720:	0800f540 	.word	0x0800f540
 800b724:	0800f518 	.word	0x0800f518
 800b728:	9907      	ldr	r1, [sp, #28]
 800b72a:	2900      	cmp	r1, #0
 800b72c:	f000 80d0 	beq.w	800b8d0 <_dtoa_r+0x7c8>
 800b730:	9906      	ldr	r1, [sp, #24]
 800b732:	2901      	cmp	r1, #1
 800b734:	f300 80b4 	bgt.w	800b8a0 <_dtoa_r+0x798>
 800b738:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b73a:	2900      	cmp	r1, #0
 800b73c:	f000 80ac 	beq.w	800b898 <_dtoa_r+0x790>
 800b740:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b744:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b748:	461c      	mov	r4, r3
 800b74a:	930a      	str	r3, [sp, #40]	; 0x28
 800b74c:	9b04      	ldr	r3, [sp, #16]
 800b74e:	4413      	add	r3, r2
 800b750:	9304      	str	r3, [sp, #16]
 800b752:	9b05      	ldr	r3, [sp, #20]
 800b754:	2101      	movs	r1, #1
 800b756:	4413      	add	r3, r2
 800b758:	4630      	mov	r0, r6
 800b75a:	9305      	str	r3, [sp, #20]
 800b75c:	f000 ff20 	bl	800c5a0 <__i2b>
 800b760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b762:	4607      	mov	r7, r0
 800b764:	f1b8 0f00 	cmp.w	r8, #0
 800b768:	dd0d      	ble.n	800b786 <_dtoa_r+0x67e>
 800b76a:	9a05      	ldr	r2, [sp, #20]
 800b76c:	2a00      	cmp	r2, #0
 800b76e:	dd0a      	ble.n	800b786 <_dtoa_r+0x67e>
 800b770:	4542      	cmp	r2, r8
 800b772:	9904      	ldr	r1, [sp, #16]
 800b774:	bfa8      	it	ge
 800b776:	4642      	movge	r2, r8
 800b778:	1a89      	subs	r1, r1, r2
 800b77a:	9104      	str	r1, [sp, #16]
 800b77c:	9905      	ldr	r1, [sp, #20]
 800b77e:	eba8 0802 	sub.w	r8, r8, r2
 800b782:	1a8a      	subs	r2, r1, r2
 800b784:	9205      	str	r2, [sp, #20]
 800b786:	b303      	cbz	r3, 800b7ca <_dtoa_r+0x6c2>
 800b788:	9a07      	ldr	r2, [sp, #28]
 800b78a:	2a00      	cmp	r2, #0
 800b78c:	f000 80a5 	beq.w	800b8da <_dtoa_r+0x7d2>
 800b790:	2c00      	cmp	r4, #0
 800b792:	dd13      	ble.n	800b7bc <_dtoa_r+0x6b4>
 800b794:	4639      	mov	r1, r7
 800b796:	4622      	mov	r2, r4
 800b798:	4630      	mov	r0, r6
 800b79a:	930d      	str	r3, [sp, #52]	; 0x34
 800b79c:	f000 ffc0 	bl	800c720 <__pow5mult>
 800b7a0:	462a      	mov	r2, r5
 800b7a2:	4601      	mov	r1, r0
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f000 ff10 	bl	800c5cc <__multiply>
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	900a      	str	r0, [sp, #40]	; 0x28
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f000 fdf3 	bl	800c39c <_Bfree>
 800b7b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7ba:	4615      	mov	r5, r2
 800b7bc:	1b1a      	subs	r2, r3, r4
 800b7be:	d004      	beq.n	800b7ca <_dtoa_r+0x6c2>
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f000 ffac 	bl	800c720 <__pow5mult>
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	2101      	movs	r1, #1
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f000 fee7 	bl	800c5a0 <__i2b>
 800b7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	f340 8081 	ble.w	800b8de <_dtoa_r+0x7d6>
 800b7dc:	461a      	mov	r2, r3
 800b7de:	4601      	mov	r1, r0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 ff9d 	bl	800c720 <__pow5mult>
 800b7e6:	9b06      	ldr	r3, [sp, #24]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	dd7a      	ble.n	800b8e4 <_dtoa_r+0x7dc>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	930a      	str	r3, [sp, #40]	; 0x28
 800b7f2:	6922      	ldr	r2, [r4, #16]
 800b7f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b7f8:	6910      	ldr	r0, [r2, #16]
 800b7fa:	f000 fe81 	bl	800c500 <__hi0bits>
 800b7fe:	f1c0 0020 	rsb	r0, r0, #32
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	4418      	add	r0, r3
 800b806:	f010 001f 	ands.w	r0, r0, #31
 800b80a:	f000 808c 	beq.w	800b926 <_dtoa_r+0x81e>
 800b80e:	f1c0 0220 	rsb	r2, r0, #32
 800b812:	2a04      	cmp	r2, #4
 800b814:	f340 8085 	ble.w	800b922 <_dtoa_r+0x81a>
 800b818:	f1c0 001c 	rsb	r0, r0, #28
 800b81c:	9b04      	ldr	r3, [sp, #16]
 800b81e:	4403      	add	r3, r0
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	9b05      	ldr	r3, [sp, #20]
 800b824:	4403      	add	r3, r0
 800b826:	4480      	add	r8, r0
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dd05      	ble.n	800b83c <_dtoa_r+0x734>
 800b830:	4629      	mov	r1, r5
 800b832:	461a      	mov	r2, r3
 800b834:	4630      	mov	r0, r6
 800b836:	f000 ffcd 	bl	800c7d4 <__lshift>
 800b83a:	4605      	mov	r5, r0
 800b83c:	9b05      	ldr	r3, [sp, #20]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dd05      	ble.n	800b84e <_dtoa_r+0x746>
 800b842:	4621      	mov	r1, r4
 800b844:	461a      	mov	r2, r3
 800b846:	4630      	mov	r0, r6
 800b848:	f000 ffc4 	bl	800c7d4 <__lshift>
 800b84c:	4604      	mov	r4, r0
 800b84e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b850:	2b00      	cmp	r3, #0
 800b852:	d06a      	beq.n	800b92a <_dtoa_r+0x822>
 800b854:	4621      	mov	r1, r4
 800b856:	4628      	mov	r0, r5
 800b858:	f001 f82c 	bl	800c8b4 <__mcmp>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	da64      	bge.n	800b92a <_dtoa_r+0x822>
 800b860:	2300      	movs	r3, #0
 800b862:	4629      	mov	r1, r5
 800b864:	220a      	movs	r2, #10
 800b866:	4630      	mov	r0, r6
 800b868:	f000 fdba 	bl	800c3e0 <__multadd>
 800b86c:	9b07      	ldr	r3, [sp, #28]
 800b86e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b872:	4605      	mov	r5, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 8191 	beq.w	800bb9c <_dtoa_r+0xa94>
 800b87a:	4639      	mov	r1, r7
 800b87c:	2300      	movs	r3, #0
 800b87e:	220a      	movs	r2, #10
 800b880:	4630      	mov	r0, r6
 800b882:	f000 fdad 	bl	800c3e0 <__multadd>
 800b886:	f1ba 0f00 	cmp.w	sl, #0
 800b88a:	4607      	mov	r7, r0
 800b88c:	f300 808d 	bgt.w	800b9aa <_dtoa_r+0x8a2>
 800b890:	9b06      	ldr	r3, [sp, #24]
 800b892:	2b02      	cmp	r3, #2
 800b894:	dc50      	bgt.n	800b938 <_dtoa_r+0x830>
 800b896:	e088      	b.n	800b9aa <_dtoa_r+0x8a2>
 800b898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b89a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b89e:	e751      	b.n	800b744 <_dtoa_r+0x63c>
 800b8a0:	f109 34ff 	add.w	r4, r9, #4294967295
 800b8a4:	42a3      	cmp	r3, r4
 800b8a6:	bfbf      	itttt	lt
 800b8a8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800b8aa:	1ae3      	sublt	r3, r4, r3
 800b8ac:	18d2      	addlt	r2, r2, r3
 800b8ae:	9209      	strlt	r2, [sp, #36]	; 0x24
 800b8b0:	bfb6      	itet	lt
 800b8b2:	4623      	movlt	r3, r4
 800b8b4:	1b1c      	subge	r4, r3, r4
 800b8b6:	2400      	movlt	r4, #0
 800b8b8:	f1b9 0f00 	cmp.w	r9, #0
 800b8bc:	bfb5      	itete	lt
 800b8be:	9a04      	ldrlt	r2, [sp, #16]
 800b8c0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b8c4:	eba2 0809 	sublt.w	r8, r2, r9
 800b8c8:	464a      	movge	r2, r9
 800b8ca:	bfb8      	it	lt
 800b8cc:	2200      	movlt	r2, #0
 800b8ce:	e73c      	b.n	800b74a <_dtoa_r+0x642>
 800b8d0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b8d4:	9f07      	ldr	r7, [sp, #28]
 800b8d6:	461c      	mov	r4, r3
 800b8d8:	e744      	b.n	800b764 <_dtoa_r+0x65c>
 800b8da:	461a      	mov	r2, r3
 800b8dc:	e770      	b.n	800b7c0 <_dtoa_r+0x6b8>
 800b8de:	9b06      	ldr	r3, [sp, #24]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	dc18      	bgt.n	800b916 <_dtoa_r+0x80e>
 800b8e4:	9b02      	ldr	r3, [sp, #8]
 800b8e6:	b9b3      	cbnz	r3, 800b916 <_dtoa_r+0x80e>
 800b8e8:	9b03      	ldr	r3, [sp, #12]
 800b8ea:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b8ee:	b9a2      	cbnz	r2, 800b91a <_dtoa_r+0x812>
 800b8f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b8f4:	0d12      	lsrs	r2, r2, #20
 800b8f6:	0512      	lsls	r2, r2, #20
 800b8f8:	b18a      	cbz	r2, 800b91e <_dtoa_r+0x816>
 800b8fa:	9b04      	ldr	r3, [sp, #16]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	9304      	str	r3, [sp, #16]
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	3301      	adds	r3, #1
 800b904:	9305      	str	r3, [sp, #20]
 800b906:	2301      	movs	r3, #1
 800b908:	930a      	str	r3, [sp, #40]	; 0x28
 800b90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f47f af70 	bne.w	800b7f2 <_dtoa_r+0x6ea>
 800b912:	2001      	movs	r0, #1
 800b914:	e775      	b.n	800b802 <_dtoa_r+0x6fa>
 800b916:	2300      	movs	r3, #0
 800b918:	e7f6      	b.n	800b908 <_dtoa_r+0x800>
 800b91a:	9b02      	ldr	r3, [sp, #8]
 800b91c:	e7f4      	b.n	800b908 <_dtoa_r+0x800>
 800b91e:	920a      	str	r2, [sp, #40]	; 0x28
 800b920:	e7f3      	b.n	800b90a <_dtoa_r+0x802>
 800b922:	d082      	beq.n	800b82a <_dtoa_r+0x722>
 800b924:	4610      	mov	r0, r2
 800b926:	301c      	adds	r0, #28
 800b928:	e778      	b.n	800b81c <_dtoa_r+0x714>
 800b92a:	f1b9 0f00 	cmp.w	r9, #0
 800b92e:	dc37      	bgt.n	800b9a0 <_dtoa_r+0x898>
 800b930:	9b06      	ldr	r3, [sp, #24]
 800b932:	2b02      	cmp	r3, #2
 800b934:	dd34      	ble.n	800b9a0 <_dtoa_r+0x898>
 800b936:	46ca      	mov	sl, r9
 800b938:	f1ba 0f00 	cmp.w	sl, #0
 800b93c:	d10d      	bne.n	800b95a <_dtoa_r+0x852>
 800b93e:	4621      	mov	r1, r4
 800b940:	4653      	mov	r3, sl
 800b942:	2205      	movs	r2, #5
 800b944:	4630      	mov	r0, r6
 800b946:	f000 fd4b 	bl	800c3e0 <__multadd>
 800b94a:	4601      	mov	r1, r0
 800b94c:	4604      	mov	r4, r0
 800b94e:	4628      	mov	r0, r5
 800b950:	f000 ffb0 	bl	800c8b4 <__mcmp>
 800b954:	2800      	cmp	r0, #0
 800b956:	f73f adeb 	bgt.w	800b530 <_dtoa_r+0x428>
 800b95a:	9b08      	ldr	r3, [sp, #32]
 800b95c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b960:	ea6f 0b03 	mvn.w	fp, r3
 800b964:	f04f 0900 	mov.w	r9, #0
 800b968:	4621      	mov	r1, r4
 800b96a:	4630      	mov	r0, r6
 800b96c:	f000 fd16 	bl	800c39c <_Bfree>
 800b970:	2f00      	cmp	r7, #0
 800b972:	f43f aea8 	beq.w	800b6c6 <_dtoa_r+0x5be>
 800b976:	f1b9 0f00 	cmp.w	r9, #0
 800b97a:	d005      	beq.n	800b988 <_dtoa_r+0x880>
 800b97c:	45b9      	cmp	r9, r7
 800b97e:	d003      	beq.n	800b988 <_dtoa_r+0x880>
 800b980:	4649      	mov	r1, r9
 800b982:	4630      	mov	r0, r6
 800b984:	f000 fd0a 	bl	800c39c <_Bfree>
 800b988:	4639      	mov	r1, r7
 800b98a:	4630      	mov	r0, r6
 800b98c:	f000 fd06 	bl	800c39c <_Bfree>
 800b990:	e699      	b.n	800b6c6 <_dtoa_r+0x5be>
 800b992:	2400      	movs	r4, #0
 800b994:	4627      	mov	r7, r4
 800b996:	e7e0      	b.n	800b95a <_dtoa_r+0x852>
 800b998:	46bb      	mov	fp, r7
 800b99a:	4604      	mov	r4, r0
 800b99c:	4607      	mov	r7, r0
 800b99e:	e5c7      	b.n	800b530 <_dtoa_r+0x428>
 800b9a0:	9b07      	ldr	r3, [sp, #28]
 800b9a2:	46ca      	mov	sl, r9
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 8100 	beq.w	800bbaa <_dtoa_r+0xaa2>
 800b9aa:	f1b8 0f00 	cmp.w	r8, #0
 800b9ae:	dd05      	ble.n	800b9bc <_dtoa_r+0x8b4>
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	4642      	mov	r2, r8
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f000 ff0d 	bl	800c7d4 <__lshift>
 800b9ba:	4607      	mov	r7, r0
 800b9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d05d      	beq.n	800ba7e <_dtoa_r+0x976>
 800b9c2:	6879      	ldr	r1, [r7, #4]
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	f000 fca9 	bl	800c31c <_Balloc>
 800b9ca:	4680      	mov	r8, r0
 800b9cc:	b928      	cbnz	r0, 800b9da <_dtoa_r+0x8d2>
 800b9ce:	4b82      	ldr	r3, [pc, #520]	; (800bbd8 <_dtoa_r+0xad0>)
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9d6:	f7ff bbaf 	b.w	800b138 <_dtoa_r+0x30>
 800b9da:	693a      	ldr	r2, [r7, #16]
 800b9dc:	3202      	adds	r2, #2
 800b9de:	0092      	lsls	r2, r2, #2
 800b9e0:	f107 010c 	add.w	r1, r7, #12
 800b9e4:	300c      	adds	r0, #12
 800b9e6:	f000 fc8b 	bl	800c300 <memcpy>
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	4641      	mov	r1, r8
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f000 fef0 	bl	800c7d4 <__lshift>
 800b9f4:	9b01      	ldr	r3, [sp, #4]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	9b01      	ldr	r3, [sp, #4]
 800b9fc:	4453      	add	r3, sl
 800b9fe:	9308      	str	r3, [sp, #32]
 800ba00:	9b02      	ldr	r3, [sp, #8]
 800ba02:	f003 0301 	and.w	r3, r3, #1
 800ba06:	46b9      	mov	r9, r7
 800ba08:	9307      	str	r3, [sp, #28]
 800ba0a:	4607      	mov	r7, r0
 800ba0c:	9b04      	ldr	r3, [sp, #16]
 800ba0e:	4621      	mov	r1, r4
 800ba10:	3b01      	subs	r3, #1
 800ba12:	4628      	mov	r0, r5
 800ba14:	9302      	str	r3, [sp, #8]
 800ba16:	f7ff faeb 	bl	800aff0 <quorem>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	3330      	adds	r3, #48	; 0x30
 800ba1e:	9005      	str	r0, [sp, #20]
 800ba20:	4649      	mov	r1, r9
 800ba22:	4628      	mov	r0, r5
 800ba24:	9309      	str	r3, [sp, #36]	; 0x24
 800ba26:	f000 ff45 	bl	800c8b4 <__mcmp>
 800ba2a:	463a      	mov	r2, r7
 800ba2c:	4682      	mov	sl, r0
 800ba2e:	4621      	mov	r1, r4
 800ba30:	4630      	mov	r0, r6
 800ba32:	f000 ff5b 	bl	800c8ec <__mdiff>
 800ba36:	68c2      	ldr	r2, [r0, #12]
 800ba38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	bb0a      	cbnz	r2, 800ba82 <_dtoa_r+0x97a>
 800ba3e:	4601      	mov	r1, r0
 800ba40:	4628      	mov	r0, r5
 800ba42:	f000 ff37 	bl	800c8b4 <__mcmp>
 800ba46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba48:	4602      	mov	r2, r0
 800ba4a:	4641      	mov	r1, r8
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ba52:	f000 fca3 	bl	800c39c <_Bfree>
 800ba56:	9b06      	ldr	r3, [sp, #24]
 800ba58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba5a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba5e:	ea43 0102 	orr.w	r1, r3, r2
 800ba62:	9b07      	ldr	r3, [sp, #28]
 800ba64:	430b      	orrs	r3, r1
 800ba66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba68:	d10d      	bne.n	800ba86 <_dtoa_r+0x97e>
 800ba6a:	2b39      	cmp	r3, #57	; 0x39
 800ba6c:	d029      	beq.n	800bac2 <_dtoa_r+0x9ba>
 800ba6e:	f1ba 0f00 	cmp.w	sl, #0
 800ba72:	dd01      	ble.n	800ba78 <_dtoa_r+0x970>
 800ba74:	9b05      	ldr	r3, [sp, #20]
 800ba76:	3331      	adds	r3, #49	; 0x31
 800ba78:	9a02      	ldr	r2, [sp, #8]
 800ba7a:	7013      	strb	r3, [r2, #0]
 800ba7c:	e774      	b.n	800b968 <_dtoa_r+0x860>
 800ba7e:	4638      	mov	r0, r7
 800ba80:	e7b8      	b.n	800b9f4 <_dtoa_r+0x8ec>
 800ba82:	2201      	movs	r2, #1
 800ba84:	e7e1      	b.n	800ba4a <_dtoa_r+0x942>
 800ba86:	f1ba 0f00 	cmp.w	sl, #0
 800ba8a:	db06      	blt.n	800ba9a <_dtoa_r+0x992>
 800ba8c:	9906      	ldr	r1, [sp, #24]
 800ba8e:	ea41 0a0a 	orr.w	sl, r1, sl
 800ba92:	9907      	ldr	r1, [sp, #28]
 800ba94:	ea5a 0101 	orrs.w	r1, sl, r1
 800ba98:	d120      	bne.n	800badc <_dtoa_r+0x9d4>
 800ba9a:	2a00      	cmp	r2, #0
 800ba9c:	ddec      	ble.n	800ba78 <_dtoa_r+0x970>
 800ba9e:	4629      	mov	r1, r5
 800baa0:	2201      	movs	r2, #1
 800baa2:	4630      	mov	r0, r6
 800baa4:	9304      	str	r3, [sp, #16]
 800baa6:	f000 fe95 	bl	800c7d4 <__lshift>
 800baaa:	4621      	mov	r1, r4
 800baac:	4605      	mov	r5, r0
 800baae:	f000 ff01 	bl	800c8b4 <__mcmp>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	9b04      	ldr	r3, [sp, #16]
 800bab6:	dc02      	bgt.n	800babe <_dtoa_r+0x9b6>
 800bab8:	d1de      	bne.n	800ba78 <_dtoa_r+0x970>
 800baba:	07da      	lsls	r2, r3, #31
 800babc:	d5dc      	bpl.n	800ba78 <_dtoa_r+0x970>
 800babe:	2b39      	cmp	r3, #57	; 0x39
 800bac0:	d1d8      	bne.n	800ba74 <_dtoa_r+0x96c>
 800bac2:	9a02      	ldr	r2, [sp, #8]
 800bac4:	2339      	movs	r3, #57	; 0x39
 800bac6:	7013      	strb	r3, [r2, #0]
 800bac8:	4643      	mov	r3, r8
 800baca:	4698      	mov	r8, r3
 800bacc:	3b01      	subs	r3, #1
 800bace:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800bad2:	2a39      	cmp	r2, #57	; 0x39
 800bad4:	d051      	beq.n	800bb7a <_dtoa_r+0xa72>
 800bad6:	3201      	adds	r2, #1
 800bad8:	701a      	strb	r2, [r3, #0]
 800bada:	e745      	b.n	800b968 <_dtoa_r+0x860>
 800badc:	2a00      	cmp	r2, #0
 800bade:	dd03      	ble.n	800bae8 <_dtoa_r+0x9e0>
 800bae0:	2b39      	cmp	r3, #57	; 0x39
 800bae2:	d0ee      	beq.n	800bac2 <_dtoa_r+0x9ba>
 800bae4:	3301      	adds	r3, #1
 800bae6:	e7c7      	b.n	800ba78 <_dtoa_r+0x970>
 800bae8:	9a04      	ldr	r2, [sp, #16]
 800baea:	9908      	ldr	r1, [sp, #32]
 800baec:	f802 3c01 	strb.w	r3, [r2, #-1]
 800baf0:	428a      	cmp	r2, r1
 800baf2:	d02b      	beq.n	800bb4c <_dtoa_r+0xa44>
 800baf4:	4629      	mov	r1, r5
 800baf6:	2300      	movs	r3, #0
 800baf8:	220a      	movs	r2, #10
 800bafa:	4630      	mov	r0, r6
 800bafc:	f000 fc70 	bl	800c3e0 <__multadd>
 800bb00:	45b9      	cmp	r9, r7
 800bb02:	4605      	mov	r5, r0
 800bb04:	f04f 0300 	mov.w	r3, #0
 800bb08:	f04f 020a 	mov.w	r2, #10
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	4630      	mov	r0, r6
 800bb10:	d107      	bne.n	800bb22 <_dtoa_r+0xa1a>
 800bb12:	f000 fc65 	bl	800c3e0 <__multadd>
 800bb16:	4681      	mov	r9, r0
 800bb18:	4607      	mov	r7, r0
 800bb1a:	9b04      	ldr	r3, [sp, #16]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	9304      	str	r3, [sp, #16]
 800bb20:	e774      	b.n	800ba0c <_dtoa_r+0x904>
 800bb22:	f000 fc5d 	bl	800c3e0 <__multadd>
 800bb26:	4639      	mov	r1, r7
 800bb28:	4681      	mov	r9, r0
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	220a      	movs	r2, #10
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f000 fc56 	bl	800c3e0 <__multadd>
 800bb34:	4607      	mov	r7, r0
 800bb36:	e7f0      	b.n	800bb1a <_dtoa_r+0xa12>
 800bb38:	f1ba 0f00 	cmp.w	sl, #0
 800bb3c:	9a01      	ldr	r2, [sp, #4]
 800bb3e:	bfcc      	ite	gt
 800bb40:	46d0      	movgt	r8, sl
 800bb42:	f04f 0801 	movle.w	r8, #1
 800bb46:	4490      	add	r8, r2
 800bb48:	f04f 0900 	mov.w	r9, #0
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	2201      	movs	r2, #1
 800bb50:	4630      	mov	r0, r6
 800bb52:	9302      	str	r3, [sp, #8]
 800bb54:	f000 fe3e 	bl	800c7d4 <__lshift>
 800bb58:	4621      	mov	r1, r4
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	f000 feaa 	bl	800c8b4 <__mcmp>
 800bb60:	2800      	cmp	r0, #0
 800bb62:	dcb1      	bgt.n	800bac8 <_dtoa_r+0x9c0>
 800bb64:	d102      	bne.n	800bb6c <_dtoa_r+0xa64>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	07db      	lsls	r3, r3, #31
 800bb6a:	d4ad      	bmi.n	800bac8 <_dtoa_r+0x9c0>
 800bb6c:	4643      	mov	r3, r8
 800bb6e:	4698      	mov	r8, r3
 800bb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb74:	2a30      	cmp	r2, #48	; 0x30
 800bb76:	d0fa      	beq.n	800bb6e <_dtoa_r+0xa66>
 800bb78:	e6f6      	b.n	800b968 <_dtoa_r+0x860>
 800bb7a:	9a01      	ldr	r2, [sp, #4]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d1a4      	bne.n	800baca <_dtoa_r+0x9c2>
 800bb80:	f10b 0b01 	add.w	fp, fp, #1
 800bb84:	2331      	movs	r3, #49	; 0x31
 800bb86:	e778      	b.n	800ba7a <_dtoa_r+0x972>
 800bb88:	4b14      	ldr	r3, [pc, #80]	; (800bbdc <_dtoa_r+0xad4>)
 800bb8a:	f7ff bb27 	b.w	800b1dc <_dtoa_r+0xd4>
 800bb8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f47f ab03 	bne.w	800b19c <_dtoa_r+0x94>
 800bb96:	4b12      	ldr	r3, [pc, #72]	; (800bbe0 <_dtoa_r+0xad8>)
 800bb98:	f7ff bb20 	b.w	800b1dc <_dtoa_r+0xd4>
 800bb9c:	f1ba 0f00 	cmp.w	sl, #0
 800bba0:	dc03      	bgt.n	800bbaa <_dtoa_r+0xaa2>
 800bba2:	9b06      	ldr	r3, [sp, #24]
 800bba4:	2b02      	cmp	r3, #2
 800bba6:	f73f aec7 	bgt.w	800b938 <_dtoa_r+0x830>
 800bbaa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bbae:	4621      	mov	r1, r4
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f7ff fa1d 	bl	800aff0 <quorem>
 800bbb6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bbba:	f808 3b01 	strb.w	r3, [r8], #1
 800bbbe:	9a01      	ldr	r2, [sp, #4]
 800bbc0:	eba8 0202 	sub.w	r2, r8, r2
 800bbc4:	4592      	cmp	sl, r2
 800bbc6:	ddb7      	ble.n	800bb38 <_dtoa_r+0xa30>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	2300      	movs	r3, #0
 800bbcc:	220a      	movs	r2, #10
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f000 fc06 	bl	800c3e0 <__multadd>
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	e7ea      	b.n	800bbae <_dtoa_r+0xaa6>
 800bbd8:	0800f42c 	.word	0x0800f42c
 800bbdc:	0800f314 	.word	0x0800f314
 800bbe0:	0800f3ad 	.word	0x0800f3ad

0800bbe4 <rshift>:
 800bbe4:	6903      	ldr	r3, [r0, #16]
 800bbe6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbf2:	f100 0414 	add.w	r4, r0, #20
 800bbf6:	dd45      	ble.n	800bc84 <rshift+0xa0>
 800bbf8:	f011 011f 	ands.w	r1, r1, #31
 800bbfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc04:	d10c      	bne.n	800bc20 <rshift+0x3c>
 800bc06:	f100 0710 	add.w	r7, r0, #16
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	42b1      	cmp	r1, r6
 800bc0e:	d334      	bcc.n	800bc7a <rshift+0x96>
 800bc10:	1a9b      	subs	r3, r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	1eea      	subs	r2, r5, #3
 800bc16:	4296      	cmp	r6, r2
 800bc18:	bf38      	it	cc
 800bc1a:	2300      	movcc	r3, #0
 800bc1c:	4423      	add	r3, r4
 800bc1e:	e015      	b.n	800bc4c <rshift+0x68>
 800bc20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc24:	f1c1 0820 	rsb	r8, r1, #32
 800bc28:	40cf      	lsrs	r7, r1
 800bc2a:	f105 0e04 	add.w	lr, r5, #4
 800bc2e:	46a1      	mov	r9, r4
 800bc30:	4576      	cmp	r6, lr
 800bc32:	46f4      	mov	ip, lr
 800bc34:	d815      	bhi.n	800bc62 <rshift+0x7e>
 800bc36:	1a9a      	subs	r2, r3, r2
 800bc38:	0092      	lsls	r2, r2, #2
 800bc3a:	3a04      	subs	r2, #4
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	42ae      	cmp	r6, r5
 800bc40:	bf38      	it	cc
 800bc42:	2200      	movcc	r2, #0
 800bc44:	18a3      	adds	r3, r4, r2
 800bc46:	50a7      	str	r7, [r4, r2]
 800bc48:	b107      	cbz	r7, 800bc4c <rshift+0x68>
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	1b1a      	subs	r2, r3, r4
 800bc4e:	42a3      	cmp	r3, r4
 800bc50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc54:	bf08      	it	eq
 800bc56:	2300      	moveq	r3, #0
 800bc58:	6102      	str	r2, [r0, #16]
 800bc5a:	bf08      	it	eq
 800bc5c:	6143      	streq	r3, [r0, #20]
 800bc5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc62:	f8dc c000 	ldr.w	ip, [ip]
 800bc66:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc6a:	ea4c 0707 	orr.w	r7, ip, r7
 800bc6e:	f849 7b04 	str.w	r7, [r9], #4
 800bc72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc76:	40cf      	lsrs	r7, r1
 800bc78:	e7da      	b.n	800bc30 <rshift+0x4c>
 800bc7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc82:	e7c3      	b.n	800bc0c <rshift+0x28>
 800bc84:	4623      	mov	r3, r4
 800bc86:	e7e1      	b.n	800bc4c <rshift+0x68>

0800bc88 <__hexdig_fun>:
 800bc88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc8c:	2b09      	cmp	r3, #9
 800bc8e:	d802      	bhi.n	800bc96 <__hexdig_fun+0xe>
 800bc90:	3820      	subs	r0, #32
 800bc92:	b2c0      	uxtb	r0, r0
 800bc94:	4770      	bx	lr
 800bc96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc9a:	2b05      	cmp	r3, #5
 800bc9c:	d801      	bhi.n	800bca2 <__hexdig_fun+0x1a>
 800bc9e:	3847      	subs	r0, #71	; 0x47
 800bca0:	e7f7      	b.n	800bc92 <__hexdig_fun+0xa>
 800bca2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bca6:	2b05      	cmp	r3, #5
 800bca8:	d801      	bhi.n	800bcae <__hexdig_fun+0x26>
 800bcaa:	3827      	subs	r0, #39	; 0x27
 800bcac:	e7f1      	b.n	800bc92 <__hexdig_fun+0xa>
 800bcae:	2000      	movs	r0, #0
 800bcb0:	4770      	bx	lr
	...

0800bcb4 <__gethex>:
 800bcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb8:	ed2d 8b02 	vpush	{d8}
 800bcbc:	b089      	sub	sp, #36	; 0x24
 800bcbe:	ee08 0a10 	vmov	s16, r0
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	4bb4      	ldr	r3, [pc, #720]	; (800bf98 <__gethex+0x2e4>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	4618      	mov	r0, r3
 800bccc:	468b      	mov	fp, r1
 800bcce:	4690      	mov	r8, r2
 800bcd0:	f7f4 fb1e 	bl	8000310 <strlen>
 800bcd4:	9b01      	ldr	r3, [sp, #4]
 800bcd6:	f8db 2000 	ldr.w	r2, [fp]
 800bcda:	4403      	add	r3, r0
 800bcdc:	4682      	mov	sl, r0
 800bcde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bce2:	9305      	str	r3, [sp, #20]
 800bce4:	1c93      	adds	r3, r2, #2
 800bce6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bcea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bcee:	32fe      	adds	r2, #254	; 0xfe
 800bcf0:	18d1      	adds	r1, r2, r3
 800bcf2:	461f      	mov	r7, r3
 800bcf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bcf8:	9100      	str	r1, [sp, #0]
 800bcfa:	2830      	cmp	r0, #48	; 0x30
 800bcfc:	d0f8      	beq.n	800bcf0 <__gethex+0x3c>
 800bcfe:	f7ff ffc3 	bl	800bc88 <__hexdig_fun>
 800bd02:	4604      	mov	r4, r0
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d13a      	bne.n	800bd7e <__gethex+0xca>
 800bd08:	9901      	ldr	r1, [sp, #4]
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	f001 fa2f 	bl	800d170 <strncmp>
 800bd12:	4605      	mov	r5, r0
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d168      	bne.n	800bdea <__gethex+0x136>
 800bd18:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd1c:	eb07 060a 	add.w	r6, r7, sl
 800bd20:	f7ff ffb2 	bl	800bc88 <__hexdig_fun>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d062      	beq.n	800bdee <__gethex+0x13a>
 800bd28:	4633      	mov	r3, r6
 800bd2a:	7818      	ldrb	r0, [r3, #0]
 800bd2c:	2830      	cmp	r0, #48	; 0x30
 800bd2e:	461f      	mov	r7, r3
 800bd30:	f103 0301 	add.w	r3, r3, #1
 800bd34:	d0f9      	beq.n	800bd2a <__gethex+0x76>
 800bd36:	f7ff ffa7 	bl	800bc88 <__hexdig_fun>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	fab0 f480 	clz	r4, r0
 800bd40:	0964      	lsrs	r4, r4, #5
 800bd42:	4635      	mov	r5, r6
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	463a      	mov	r2, r7
 800bd48:	4616      	mov	r6, r2
 800bd4a:	3201      	adds	r2, #1
 800bd4c:	7830      	ldrb	r0, [r6, #0]
 800bd4e:	f7ff ff9b 	bl	800bc88 <__hexdig_fun>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d1f8      	bne.n	800bd48 <__gethex+0x94>
 800bd56:	9901      	ldr	r1, [sp, #4]
 800bd58:	4652      	mov	r2, sl
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f001 fa08 	bl	800d170 <strncmp>
 800bd60:	b980      	cbnz	r0, 800bd84 <__gethex+0xd0>
 800bd62:	b94d      	cbnz	r5, 800bd78 <__gethex+0xc4>
 800bd64:	eb06 050a 	add.w	r5, r6, sl
 800bd68:	462a      	mov	r2, r5
 800bd6a:	4616      	mov	r6, r2
 800bd6c:	3201      	adds	r2, #1
 800bd6e:	7830      	ldrb	r0, [r6, #0]
 800bd70:	f7ff ff8a 	bl	800bc88 <__hexdig_fun>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d1f8      	bne.n	800bd6a <__gethex+0xb6>
 800bd78:	1bad      	subs	r5, r5, r6
 800bd7a:	00ad      	lsls	r5, r5, #2
 800bd7c:	e004      	b.n	800bd88 <__gethex+0xd4>
 800bd7e:	2400      	movs	r4, #0
 800bd80:	4625      	mov	r5, r4
 800bd82:	e7e0      	b.n	800bd46 <__gethex+0x92>
 800bd84:	2d00      	cmp	r5, #0
 800bd86:	d1f7      	bne.n	800bd78 <__gethex+0xc4>
 800bd88:	7833      	ldrb	r3, [r6, #0]
 800bd8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd8e:	2b50      	cmp	r3, #80	; 0x50
 800bd90:	d13b      	bne.n	800be0a <__gethex+0x156>
 800bd92:	7873      	ldrb	r3, [r6, #1]
 800bd94:	2b2b      	cmp	r3, #43	; 0x2b
 800bd96:	d02c      	beq.n	800bdf2 <__gethex+0x13e>
 800bd98:	2b2d      	cmp	r3, #45	; 0x2d
 800bd9a:	d02e      	beq.n	800bdfa <__gethex+0x146>
 800bd9c:	1c71      	adds	r1, r6, #1
 800bd9e:	f04f 0900 	mov.w	r9, #0
 800bda2:	7808      	ldrb	r0, [r1, #0]
 800bda4:	f7ff ff70 	bl	800bc88 <__hexdig_fun>
 800bda8:	1e43      	subs	r3, r0, #1
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b18      	cmp	r3, #24
 800bdae:	d82c      	bhi.n	800be0a <__gethex+0x156>
 800bdb0:	f1a0 0210 	sub.w	r2, r0, #16
 800bdb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bdb8:	f7ff ff66 	bl	800bc88 <__hexdig_fun>
 800bdbc:	1e43      	subs	r3, r0, #1
 800bdbe:	b2db      	uxtb	r3, r3
 800bdc0:	2b18      	cmp	r3, #24
 800bdc2:	d91d      	bls.n	800be00 <__gethex+0x14c>
 800bdc4:	f1b9 0f00 	cmp.w	r9, #0
 800bdc8:	d000      	beq.n	800bdcc <__gethex+0x118>
 800bdca:	4252      	negs	r2, r2
 800bdcc:	4415      	add	r5, r2
 800bdce:	f8cb 1000 	str.w	r1, [fp]
 800bdd2:	b1e4      	cbz	r4, 800be0e <__gethex+0x15a>
 800bdd4:	9b00      	ldr	r3, [sp, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	bf14      	ite	ne
 800bdda:	2700      	movne	r7, #0
 800bddc:	2706      	moveq	r7, #6
 800bdde:	4638      	mov	r0, r7
 800bde0:	b009      	add	sp, #36	; 0x24
 800bde2:	ecbd 8b02 	vpop	{d8}
 800bde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdea:	463e      	mov	r6, r7
 800bdec:	4625      	mov	r5, r4
 800bdee:	2401      	movs	r4, #1
 800bdf0:	e7ca      	b.n	800bd88 <__gethex+0xd4>
 800bdf2:	f04f 0900 	mov.w	r9, #0
 800bdf6:	1cb1      	adds	r1, r6, #2
 800bdf8:	e7d3      	b.n	800bda2 <__gethex+0xee>
 800bdfa:	f04f 0901 	mov.w	r9, #1
 800bdfe:	e7fa      	b.n	800bdf6 <__gethex+0x142>
 800be00:	230a      	movs	r3, #10
 800be02:	fb03 0202 	mla	r2, r3, r2, r0
 800be06:	3a10      	subs	r2, #16
 800be08:	e7d4      	b.n	800bdb4 <__gethex+0x100>
 800be0a:	4631      	mov	r1, r6
 800be0c:	e7df      	b.n	800bdce <__gethex+0x11a>
 800be0e:	1bf3      	subs	r3, r6, r7
 800be10:	3b01      	subs	r3, #1
 800be12:	4621      	mov	r1, r4
 800be14:	2b07      	cmp	r3, #7
 800be16:	dc0b      	bgt.n	800be30 <__gethex+0x17c>
 800be18:	ee18 0a10 	vmov	r0, s16
 800be1c:	f000 fa7e 	bl	800c31c <_Balloc>
 800be20:	4604      	mov	r4, r0
 800be22:	b940      	cbnz	r0, 800be36 <__gethex+0x182>
 800be24:	4b5d      	ldr	r3, [pc, #372]	; (800bf9c <__gethex+0x2e8>)
 800be26:	4602      	mov	r2, r0
 800be28:	21de      	movs	r1, #222	; 0xde
 800be2a:	485d      	ldr	r0, [pc, #372]	; (800bfa0 <__gethex+0x2ec>)
 800be2c:	f001 f9c2 	bl	800d1b4 <__assert_func>
 800be30:	3101      	adds	r1, #1
 800be32:	105b      	asrs	r3, r3, #1
 800be34:	e7ee      	b.n	800be14 <__gethex+0x160>
 800be36:	f100 0914 	add.w	r9, r0, #20
 800be3a:	f04f 0b00 	mov.w	fp, #0
 800be3e:	f1ca 0301 	rsb	r3, sl, #1
 800be42:	f8cd 9008 	str.w	r9, [sp, #8]
 800be46:	f8cd b000 	str.w	fp, [sp]
 800be4a:	9306      	str	r3, [sp, #24]
 800be4c:	42b7      	cmp	r7, r6
 800be4e:	d340      	bcc.n	800bed2 <__gethex+0x21e>
 800be50:	9802      	ldr	r0, [sp, #8]
 800be52:	9b00      	ldr	r3, [sp, #0]
 800be54:	f840 3b04 	str.w	r3, [r0], #4
 800be58:	eba0 0009 	sub.w	r0, r0, r9
 800be5c:	1080      	asrs	r0, r0, #2
 800be5e:	0146      	lsls	r6, r0, #5
 800be60:	6120      	str	r0, [r4, #16]
 800be62:	4618      	mov	r0, r3
 800be64:	f000 fb4c 	bl	800c500 <__hi0bits>
 800be68:	1a30      	subs	r0, r6, r0
 800be6a:	f8d8 6000 	ldr.w	r6, [r8]
 800be6e:	42b0      	cmp	r0, r6
 800be70:	dd63      	ble.n	800bf3a <__gethex+0x286>
 800be72:	1b87      	subs	r7, r0, r6
 800be74:	4639      	mov	r1, r7
 800be76:	4620      	mov	r0, r4
 800be78:	f000 feed 	bl	800cc56 <__any_on>
 800be7c:	4682      	mov	sl, r0
 800be7e:	b1a8      	cbz	r0, 800beac <__gethex+0x1f8>
 800be80:	1e7b      	subs	r3, r7, #1
 800be82:	1159      	asrs	r1, r3, #5
 800be84:	f003 021f 	and.w	r2, r3, #31
 800be88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800be8c:	f04f 0a01 	mov.w	sl, #1
 800be90:	fa0a f202 	lsl.w	r2, sl, r2
 800be94:	420a      	tst	r2, r1
 800be96:	d009      	beq.n	800beac <__gethex+0x1f8>
 800be98:	4553      	cmp	r3, sl
 800be9a:	dd05      	ble.n	800bea8 <__gethex+0x1f4>
 800be9c:	1eb9      	subs	r1, r7, #2
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 fed9 	bl	800cc56 <__any_on>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	d145      	bne.n	800bf34 <__gethex+0x280>
 800bea8:	f04f 0a02 	mov.w	sl, #2
 800beac:	4639      	mov	r1, r7
 800beae:	4620      	mov	r0, r4
 800beb0:	f7ff fe98 	bl	800bbe4 <rshift>
 800beb4:	443d      	add	r5, r7
 800beb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800beba:	42ab      	cmp	r3, r5
 800bebc:	da4c      	bge.n	800bf58 <__gethex+0x2a4>
 800bebe:	ee18 0a10 	vmov	r0, s16
 800bec2:	4621      	mov	r1, r4
 800bec4:	f000 fa6a 	bl	800c39c <_Bfree>
 800bec8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800beca:	2300      	movs	r3, #0
 800becc:	6013      	str	r3, [r2, #0]
 800bece:	27a3      	movs	r7, #163	; 0xa3
 800bed0:	e785      	b.n	800bdde <__gethex+0x12a>
 800bed2:	1e73      	subs	r3, r6, #1
 800bed4:	9a05      	ldr	r2, [sp, #20]
 800bed6:	9303      	str	r3, [sp, #12]
 800bed8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bedc:	4293      	cmp	r3, r2
 800bede:	d019      	beq.n	800bf14 <__gethex+0x260>
 800bee0:	f1bb 0f20 	cmp.w	fp, #32
 800bee4:	d107      	bne.n	800bef6 <__gethex+0x242>
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	9a00      	ldr	r2, [sp, #0]
 800beea:	f843 2b04 	str.w	r2, [r3], #4
 800beee:	9302      	str	r3, [sp, #8]
 800bef0:	2300      	movs	r3, #0
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	469b      	mov	fp, r3
 800bef6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800befa:	f7ff fec5 	bl	800bc88 <__hexdig_fun>
 800befe:	9b00      	ldr	r3, [sp, #0]
 800bf00:	f000 000f 	and.w	r0, r0, #15
 800bf04:	fa00 f00b 	lsl.w	r0, r0, fp
 800bf08:	4303      	orrs	r3, r0
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	f10b 0b04 	add.w	fp, fp, #4
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	e00d      	b.n	800bf30 <__gethex+0x27c>
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	9a06      	ldr	r2, [sp, #24]
 800bf18:	4413      	add	r3, r2
 800bf1a:	42bb      	cmp	r3, r7
 800bf1c:	d3e0      	bcc.n	800bee0 <__gethex+0x22c>
 800bf1e:	4618      	mov	r0, r3
 800bf20:	9901      	ldr	r1, [sp, #4]
 800bf22:	9307      	str	r3, [sp, #28]
 800bf24:	4652      	mov	r2, sl
 800bf26:	f001 f923 	bl	800d170 <strncmp>
 800bf2a:	9b07      	ldr	r3, [sp, #28]
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d1d7      	bne.n	800bee0 <__gethex+0x22c>
 800bf30:	461e      	mov	r6, r3
 800bf32:	e78b      	b.n	800be4c <__gethex+0x198>
 800bf34:	f04f 0a03 	mov.w	sl, #3
 800bf38:	e7b8      	b.n	800beac <__gethex+0x1f8>
 800bf3a:	da0a      	bge.n	800bf52 <__gethex+0x29e>
 800bf3c:	1a37      	subs	r7, r6, r0
 800bf3e:	4621      	mov	r1, r4
 800bf40:	ee18 0a10 	vmov	r0, s16
 800bf44:	463a      	mov	r2, r7
 800bf46:	f000 fc45 	bl	800c7d4 <__lshift>
 800bf4a:	1bed      	subs	r5, r5, r7
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	f100 0914 	add.w	r9, r0, #20
 800bf52:	f04f 0a00 	mov.w	sl, #0
 800bf56:	e7ae      	b.n	800beb6 <__gethex+0x202>
 800bf58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bf5c:	42a8      	cmp	r0, r5
 800bf5e:	dd72      	ble.n	800c046 <__gethex+0x392>
 800bf60:	1b45      	subs	r5, r0, r5
 800bf62:	42ae      	cmp	r6, r5
 800bf64:	dc36      	bgt.n	800bfd4 <__gethex+0x320>
 800bf66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d02a      	beq.n	800bfc4 <__gethex+0x310>
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d02c      	beq.n	800bfcc <__gethex+0x318>
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d11c      	bne.n	800bfb0 <__gethex+0x2fc>
 800bf76:	42ae      	cmp	r6, r5
 800bf78:	d11a      	bne.n	800bfb0 <__gethex+0x2fc>
 800bf7a:	2e01      	cmp	r6, #1
 800bf7c:	d112      	bne.n	800bfa4 <__gethex+0x2f0>
 800bf7e:	9a04      	ldr	r2, [sp, #16]
 800bf80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	2301      	movs	r3, #1
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	f8c9 3000 	str.w	r3, [r9]
 800bf8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf90:	2762      	movs	r7, #98	; 0x62
 800bf92:	601c      	str	r4, [r3, #0]
 800bf94:	e723      	b.n	800bdde <__gethex+0x12a>
 800bf96:	bf00      	nop
 800bf98:	0800f4a4 	.word	0x0800f4a4
 800bf9c:	0800f42c 	.word	0x0800f42c
 800bfa0:	0800f43d 	.word	0x0800f43d
 800bfa4:	1e71      	subs	r1, r6, #1
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 fe55 	bl	800cc56 <__any_on>
 800bfac:	2800      	cmp	r0, #0
 800bfae:	d1e6      	bne.n	800bf7e <__gethex+0x2ca>
 800bfb0:	ee18 0a10 	vmov	r0, s16
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	f000 f9f1 	bl	800c39c <_Bfree>
 800bfba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6013      	str	r3, [r2, #0]
 800bfc0:	2750      	movs	r7, #80	; 0x50
 800bfc2:	e70c      	b.n	800bdde <__gethex+0x12a>
 800bfc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1f2      	bne.n	800bfb0 <__gethex+0x2fc>
 800bfca:	e7d8      	b.n	800bf7e <__gethex+0x2ca>
 800bfcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1d5      	bne.n	800bf7e <__gethex+0x2ca>
 800bfd2:	e7ed      	b.n	800bfb0 <__gethex+0x2fc>
 800bfd4:	1e6f      	subs	r7, r5, #1
 800bfd6:	f1ba 0f00 	cmp.w	sl, #0
 800bfda:	d131      	bne.n	800c040 <__gethex+0x38c>
 800bfdc:	b127      	cbz	r7, 800bfe8 <__gethex+0x334>
 800bfde:	4639      	mov	r1, r7
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f000 fe38 	bl	800cc56 <__any_on>
 800bfe6:	4682      	mov	sl, r0
 800bfe8:	117b      	asrs	r3, r7, #5
 800bfea:	2101      	movs	r1, #1
 800bfec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bff0:	f007 071f 	and.w	r7, r7, #31
 800bff4:	fa01 f707 	lsl.w	r7, r1, r7
 800bff8:	421f      	tst	r7, r3
 800bffa:	4629      	mov	r1, r5
 800bffc:	4620      	mov	r0, r4
 800bffe:	bf18      	it	ne
 800c000:	f04a 0a02 	orrne.w	sl, sl, #2
 800c004:	1b76      	subs	r6, r6, r5
 800c006:	f7ff fded 	bl	800bbe4 <rshift>
 800c00a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c00e:	2702      	movs	r7, #2
 800c010:	f1ba 0f00 	cmp.w	sl, #0
 800c014:	d048      	beq.n	800c0a8 <__gethex+0x3f4>
 800c016:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d015      	beq.n	800c04a <__gethex+0x396>
 800c01e:	2b03      	cmp	r3, #3
 800c020:	d017      	beq.n	800c052 <__gethex+0x39e>
 800c022:	2b01      	cmp	r3, #1
 800c024:	d109      	bne.n	800c03a <__gethex+0x386>
 800c026:	f01a 0f02 	tst.w	sl, #2
 800c02a:	d006      	beq.n	800c03a <__gethex+0x386>
 800c02c:	f8d9 0000 	ldr.w	r0, [r9]
 800c030:	ea4a 0a00 	orr.w	sl, sl, r0
 800c034:	f01a 0f01 	tst.w	sl, #1
 800c038:	d10e      	bne.n	800c058 <__gethex+0x3a4>
 800c03a:	f047 0710 	orr.w	r7, r7, #16
 800c03e:	e033      	b.n	800c0a8 <__gethex+0x3f4>
 800c040:	f04f 0a01 	mov.w	sl, #1
 800c044:	e7d0      	b.n	800bfe8 <__gethex+0x334>
 800c046:	2701      	movs	r7, #1
 800c048:	e7e2      	b.n	800c010 <__gethex+0x35c>
 800c04a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c04c:	f1c3 0301 	rsb	r3, r3, #1
 800c050:	9315      	str	r3, [sp, #84]	; 0x54
 800c052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c054:	2b00      	cmp	r3, #0
 800c056:	d0f0      	beq.n	800c03a <__gethex+0x386>
 800c058:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c05c:	f104 0314 	add.w	r3, r4, #20
 800c060:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c064:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c068:	f04f 0c00 	mov.w	ip, #0
 800c06c:	4618      	mov	r0, r3
 800c06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c072:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c076:	d01c      	beq.n	800c0b2 <__gethex+0x3fe>
 800c078:	3201      	adds	r2, #1
 800c07a:	6002      	str	r2, [r0, #0]
 800c07c:	2f02      	cmp	r7, #2
 800c07e:	f104 0314 	add.w	r3, r4, #20
 800c082:	d13f      	bne.n	800c104 <__gethex+0x450>
 800c084:	f8d8 2000 	ldr.w	r2, [r8]
 800c088:	3a01      	subs	r2, #1
 800c08a:	42b2      	cmp	r2, r6
 800c08c:	d10a      	bne.n	800c0a4 <__gethex+0x3f0>
 800c08e:	1171      	asrs	r1, r6, #5
 800c090:	2201      	movs	r2, #1
 800c092:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c096:	f006 061f 	and.w	r6, r6, #31
 800c09a:	fa02 f606 	lsl.w	r6, r2, r6
 800c09e:	421e      	tst	r6, r3
 800c0a0:	bf18      	it	ne
 800c0a2:	4617      	movne	r7, r2
 800c0a4:	f047 0720 	orr.w	r7, r7, #32
 800c0a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c0aa:	601c      	str	r4, [r3, #0]
 800c0ac:	9b04      	ldr	r3, [sp, #16]
 800c0ae:	601d      	str	r5, [r3, #0]
 800c0b0:	e695      	b.n	800bdde <__gethex+0x12a>
 800c0b2:	4299      	cmp	r1, r3
 800c0b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c0b8:	d8d8      	bhi.n	800c06c <__gethex+0x3b8>
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	459b      	cmp	fp, r3
 800c0be:	db19      	blt.n	800c0f4 <__gethex+0x440>
 800c0c0:	6861      	ldr	r1, [r4, #4]
 800c0c2:	ee18 0a10 	vmov	r0, s16
 800c0c6:	3101      	adds	r1, #1
 800c0c8:	f000 f928 	bl	800c31c <_Balloc>
 800c0cc:	4681      	mov	r9, r0
 800c0ce:	b918      	cbnz	r0, 800c0d8 <__gethex+0x424>
 800c0d0:	4b1a      	ldr	r3, [pc, #104]	; (800c13c <__gethex+0x488>)
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	2184      	movs	r1, #132	; 0x84
 800c0d6:	e6a8      	b.n	800be2a <__gethex+0x176>
 800c0d8:	6922      	ldr	r2, [r4, #16]
 800c0da:	3202      	adds	r2, #2
 800c0dc:	f104 010c 	add.w	r1, r4, #12
 800c0e0:	0092      	lsls	r2, r2, #2
 800c0e2:	300c      	adds	r0, #12
 800c0e4:	f000 f90c 	bl	800c300 <memcpy>
 800c0e8:	4621      	mov	r1, r4
 800c0ea:	ee18 0a10 	vmov	r0, s16
 800c0ee:	f000 f955 	bl	800c39c <_Bfree>
 800c0f2:	464c      	mov	r4, r9
 800c0f4:	6923      	ldr	r3, [r4, #16]
 800c0f6:	1c5a      	adds	r2, r3, #1
 800c0f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0fc:	6122      	str	r2, [r4, #16]
 800c0fe:	2201      	movs	r2, #1
 800c100:	615a      	str	r2, [r3, #20]
 800c102:	e7bb      	b.n	800c07c <__gethex+0x3c8>
 800c104:	6922      	ldr	r2, [r4, #16]
 800c106:	455a      	cmp	r2, fp
 800c108:	dd0b      	ble.n	800c122 <__gethex+0x46e>
 800c10a:	2101      	movs	r1, #1
 800c10c:	4620      	mov	r0, r4
 800c10e:	f7ff fd69 	bl	800bbe4 <rshift>
 800c112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c116:	3501      	adds	r5, #1
 800c118:	42ab      	cmp	r3, r5
 800c11a:	f6ff aed0 	blt.w	800bebe <__gethex+0x20a>
 800c11e:	2701      	movs	r7, #1
 800c120:	e7c0      	b.n	800c0a4 <__gethex+0x3f0>
 800c122:	f016 061f 	ands.w	r6, r6, #31
 800c126:	d0fa      	beq.n	800c11e <__gethex+0x46a>
 800c128:	4453      	add	r3, sl
 800c12a:	f1c6 0620 	rsb	r6, r6, #32
 800c12e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c132:	f000 f9e5 	bl	800c500 <__hi0bits>
 800c136:	42b0      	cmp	r0, r6
 800c138:	dbe7      	blt.n	800c10a <__gethex+0x456>
 800c13a:	e7f0      	b.n	800c11e <__gethex+0x46a>
 800c13c:	0800f42c 	.word	0x0800f42c

0800c140 <L_shift>:
 800c140:	f1c2 0208 	rsb	r2, r2, #8
 800c144:	0092      	lsls	r2, r2, #2
 800c146:	b570      	push	{r4, r5, r6, lr}
 800c148:	f1c2 0620 	rsb	r6, r2, #32
 800c14c:	6843      	ldr	r3, [r0, #4]
 800c14e:	6804      	ldr	r4, [r0, #0]
 800c150:	fa03 f506 	lsl.w	r5, r3, r6
 800c154:	432c      	orrs	r4, r5
 800c156:	40d3      	lsrs	r3, r2
 800c158:	6004      	str	r4, [r0, #0]
 800c15a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c15e:	4288      	cmp	r0, r1
 800c160:	d3f4      	bcc.n	800c14c <L_shift+0xc>
 800c162:	bd70      	pop	{r4, r5, r6, pc}

0800c164 <__match>:
 800c164:	b530      	push	{r4, r5, lr}
 800c166:	6803      	ldr	r3, [r0, #0]
 800c168:	3301      	adds	r3, #1
 800c16a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c16e:	b914      	cbnz	r4, 800c176 <__match+0x12>
 800c170:	6003      	str	r3, [r0, #0]
 800c172:	2001      	movs	r0, #1
 800c174:	bd30      	pop	{r4, r5, pc}
 800c176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c17a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c17e:	2d19      	cmp	r5, #25
 800c180:	bf98      	it	ls
 800c182:	3220      	addls	r2, #32
 800c184:	42a2      	cmp	r2, r4
 800c186:	d0f0      	beq.n	800c16a <__match+0x6>
 800c188:	2000      	movs	r0, #0
 800c18a:	e7f3      	b.n	800c174 <__match+0x10>

0800c18c <__hexnan>:
 800c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	680b      	ldr	r3, [r1, #0]
 800c192:	115e      	asrs	r6, r3, #5
 800c194:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c198:	f013 031f 	ands.w	r3, r3, #31
 800c19c:	b087      	sub	sp, #28
 800c19e:	bf18      	it	ne
 800c1a0:	3604      	addne	r6, #4
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	1f37      	subs	r7, r6, #4
 800c1a6:	4690      	mov	r8, r2
 800c1a8:	6802      	ldr	r2, [r0, #0]
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	4682      	mov	sl, r0
 800c1ae:	f846 5c04 	str.w	r5, [r6, #-4]
 800c1b2:	46b9      	mov	r9, r7
 800c1b4:	463c      	mov	r4, r7
 800c1b6:	9502      	str	r5, [sp, #8]
 800c1b8:	46ab      	mov	fp, r5
 800c1ba:	7851      	ldrb	r1, [r2, #1]
 800c1bc:	1c53      	adds	r3, r2, #1
 800c1be:	9303      	str	r3, [sp, #12]
 800c1c0:	b341      	cbz	r1, 800c214 <__hexnan+0x88>
 800c1c2:	4608      	mov	r0, r1
 800c1c4:	9205      	str	r2, [sp, #20]
 800c1c6:	9104      	str	r1, [sp, #16]
 800c1c8:	f7ff fd5e 	bl	800bc88 <__hexdig_fun>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d14f      	bne.n	800c270 <__hexnan+0xe4>
 800c1d0:	9904      	ldr	r1, [sp, #16]
 800c1d2:	9a05      	ldr	r2, [sp, #20]
 800c1d4:	2920      	cmp	r1, #32
 800c1d6:	d818      	bhi.n	800c20a <__hexnan+0x7e>
 800c1d8:	9b02      	ldr	r3, [sp, #8]
 800c1da:	459b      	cmp	fp, r3
 800c1dc:	dd13      	ble.n	800c206 <__hexnan+0x7a>
 800c1de:	454c      	cmp	r4, r9
 800c1e0:	d206      	bcs.n	800c1f0 <__hexnan+0x64>
 800c1e2:	2d07      	cmp	r5, #7
 800c1e4:	dc04      	bgt.n	800c1f0 <__hexnan+0x64>
 800c1e6:	462a      	mov	r2, r5
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f7ff ffa8 	bl	800c140 <L_shift>
 800c1f0:	4544      	cmp	r4, r8
 800c1f2:	d950      	bls.n	800c296 <__hexnan+0x10a>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f1a4 0904 	sub.w	r9, r4, #4
 800c1fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1fe:	f8cd b008 	str.w	fp, [sp, #8]
 800c202:	464c      	mov	r4, r9
 800c204:	461d      	mov	r5, r3
 800c206:	9a03      	ldr	r2, [sp, #12]
 800c208:	e7d7      	b.n	800c1ba <__hexnan+0x2e>
 800c20a:	2929      	cmp	r1, #41	; 0x29
 800c20c:	d156      	bne.n	800c2bc <__hexnan+0x130>
 800c20e:	3202      	adds	r2, #2
 800c210:	f8ca 2000 	str.w	r2, [sl]
 800c214:	f1bb 0f00 	cmp.w	fp, #0
 800c218:	d050      	beq.n	800c2bc <__hexnan+0x130>
 800c21a:	454c      	cmp	r4, r9
 800c21c:	d206      	bcs.n	800c22c <__hexnan+0xa0>
 800c21e:	2d07      	cmp	r5, #7
 800c220:	dc04      	bgt.n	800c22c <__hexnan+0xa0>
 800c222:	462a      	mov	r2, r5
 800c224:	4649      	mov	r1, r9
 800c226:	4620      	mov	r0, r4
 800c228:	f7ff ff8a 	bl	800c140 <L_shift>
 800c22c:	4544      	cmp	r4, r8
 800c22e:	d934      	bls.n	800c29a <__hexnan+0x10e>
 800c230:	f1a8 0204 	sub.w	r2, r8, #4
 800c234:	4623      	mov	r3, r4
 800c236:	f853 1b04 	ldr.w	r1, [r3], #4
 800c23a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c23e:	429f      	cmp	r7, r3
 800c240:	d2f9      	bcs.n	800c236 <__hexnan+0xaa>
 800c242:	1b3b      	subs	r3, r7, r4
 800c244:	f023 0303 	bic.w	r3, r3, #3
 800c248:	3304      	adds	r3, #4
 800c24a:	3401      	adds	r4, #1
 800c24c:	3e03      	subs	r6, #3
 800c24e:	42b4      	cmp	r4, r6
 800c250:	bf88      	it	hi
 800c252:	2304      	movhi	r3, #4
 800c254:	4443      	add	r3, r8
 800c256:	2200      	movs	r2, #0
 800c258:	f843 2b04 	str.w	r2, [r3], #4
 800c25c:	429f      	cmp	r7, r3
 800c25e:	d2fb      	bcs.n	800c258 <__hexnan+0xcc>
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	b91b      	cbnz	r3, 800c26c <__hexnan+0xe0>
 800c264:	4547      	cmp	r7, r8
 800c266:	d127      	bne.n	800c2b8 <__hexnan+0x12c>
 800c268:	2301      	movs	r3, #1
 800c26a:	603b      	str	r3, [r7, #0]
 800c26c:	2005      	movs	r0, #5
 800c26e:	e026      	b.n	800c2be <__hexnan+0x132>
 800c270:	3501      	adds	r5, #1
 800c272:	2d08      	cmp	r5, #8
 800c274:	f10b 0b01 	add.w	fp, fp, #1
 800c278:	dd06      	ble.n	800c288 <__hexnan+0xfc>
 800c27a:	4544      	cmp	r4, r8
 800c27c:	d9c3      	bls.n	800c206 <__hexnan+0x7a>
 800c27e:	2300      	movs	r3, #0
 800c280:	f844 3c04 	str.w	r3, [r4, #-4]
 800c284:	2501      	movs	r5, #1
 800c286:	3c04      	subs	r4, #4
 800c288:	6822      	ldr	r2, [r4, #0]
 800c28a:	f000 000f 	and.w	r0, r0, #15
 800c28e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c292:	6022      	str	r2, [r4, #0]
 800c294:	e7b7      	b.n	800c206 <__hexnan+0x7a>
 800c296:	2508      	movs	r5, #8
 800c298:	e7b5      	b.n	800c206 <__hexnan+0x7a>
 800c29a:	9b01      	ldr	r3, [sp, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0df      	beq.n	800c260 <__hexnan+0xd4>
 800c2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c2a4:	f1c3 0320 	rsb	r3, r3, #32
 800c2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c2b0:	401a      	ands	r2, r3
 800c2b2:	f846 2c04 	str.w	r2, [r6, #-4]
 800c2b6:	e7d3      	b.n	800c260 <__hexnan+0xd4>
 800c2b8:	3f04      	subs	r7, #4
 800c2ba:	e7d1      	b.n	800c260 <__hexnan+0xd4>
 800c2bc:	2004      	movs	r0, #4
 800c2be:	b007      	add	sp, #28
 800c2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2c4 <_localeconv_r>:
 800c2c4:	4800      	ldr	r0, [pc, #0]	; (800c2c8 <_localeconv_r+0x4>)
 800c2c6:	4770      	bx	lr
 800c2c8:	24000d2c 	.word	0x24000d2c

0800c2cc <malloc>:
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <malloc+0xc>)
 800c2ce:	4601      	mov	r1, r0
 800c2d0:	6818      	ldr	r0, [r3, #0]
 800c2d2:	f000 bd63 	b.w	800cd9c <_malloc_r>
 800c2d6:	bf00      	nop
 800c2d8:	24000bd4 	.word	0x24000bd4

0800c2dc <__ascii_mbtowc>:
 800c2dc:	b082      	sub	sp, #8
 800c2de:	b901      	cbnz	r1, 800c2e2 <__ascii_mbtowc+0x6>
 800c2e0:	a901      	add	r1, sp, #4
 800c2e2:	b142      	cbz	r2, 800c2f6 <__ascii_mbtowc+0x1a>
 800c2e4:	b14b      	cbz	r3, 800c2fa <__ascii_mbtowc+0x1e>
 800c2e6:	7813      	ldrb	r3, [r2, #0]
 800c2e8:	600b      	str	r3, [r1, #0]
 800c2ea:	7812      	ldrb	r2, [r2, #0]
 800c2ec:	1e10      	subs	r0, r2, #0
 800c2ee:	bf18      	it	ne
 800c2f0:	2001      	movne	r0, #1
 800c2f2:	b002      	add	sp, #8
 800c2f4:	4770      	bx	lr
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	e7fb      	b.n	800c2f2 <__ascii_mbtowc+0x16>
 800c2fa:	f06f 0001 	mvn.w	r0, #1
 800c2fe:	e7f8      	b.n	800c2f2 <__ascii_mbtowc+0x16>

0800c300 <memcpy>:
 800c300:	440a      	add	r2, r1
 800c302:	4291      	cmp	r1, r2
 800c304:	f100 33ff 	add.w	r3, r0, #4294967295
 800c308:	d100      	bne.n	800c30c <memcpy+0xc>
 800c30a:	4770      	bx	lr
 800c30c:	b510      	push	{r4, lr}
 800c30e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c312:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c316:	4291      	cmp	r1, r2
 800c318:	d1f9      	bne.n	800c30e <memcpy+0xe>
 800c31a:	bd10      	pop	{r4, pc}

0800c31c <_Balloc>:
 800c31c:	b570      	push	{r4, r5, r6, lr}
 800c31e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c320:	4604      	mov	r4, r0
 800c322:	460d      	mov	r5, r1
 800c324:	b976      	cbnz	r6, 800c344 <_Balloc+0x28>
 800c326:	2010      	movs	r0, #16
 800c328:	f7ff ffd0 	bl	800c2cc <malloc>
 800c32c:	4602      	mov	r2, r0
 800c32e:	6260      	str	r0, [r4, #36]	; 0x24
 800c330:	b920      	cbnz	r0, 800c33c <_Balloc+0x20>
 800c332:	4b18      	ldr	r3, [pc, #96]	; (800c394 <_Balloc+0x78>)
 800c334:	4818      	ldr	r0, [pc, #96]	; (800c398 <_Balloc+0x7c>)
 800c336:	2166      	movs	r1, #102	; 0x66
 800c338:	f000 ff3c 	bl	800d1b4 <__assert_func>
 800c33c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c340:	6006      	str	r6, [r0, #0]
 800c342:	60c6      	str	r6, [r0, #12]
 800c344:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c346:	68f3      	ldr	r3, [r6, #12]
 800c348:	b183      	cbz	r3, 800c36c <_Balloc+0x50>
 800c34a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c352:	b9b8      	cbnz	r0, 800c384 <_Balloc+0x68>
 800c354:	2101      	movs	r1, #1
 800c356:	fa01 f605 	lsl.w	r6, r1, r5
 800c35a:	1d72      	adds	r2, r6, #5
 800c35c:	0092      	lsls	r2, r2, #2
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 fc9a 	bl	800cc98 <_calloc_r>
 800c364:	b160      	cbz	r0, 800c380 <_Balloc+0x64>
 800c366:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c36a:	e00e      	b.n	800c38a <_Balloc+0x6e>
 800c36c:	2221      	movs	r2, #33	; 0x21
 800c36e:	2104      	movs	r1, #4
 800c370:	4620      	mov	r0, r4
 800c372:	f000 fc91 	bl	800cc98 <_calloc_r>
 800c376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c378:	60f0      	str	r0, [r6, #12]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e4      	bne.n	800c34a <_Balloc+0x2e>
 800c380:	2000      	movs	r0, #0
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	6802      	ldr	r2, [r0, #0]
 800c386:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c38a:	2300      	movs	r3, #0
 800c38c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c390:	e7f7      	b.n	800c382 <_Balloc+0x66>
 800c392:	bf00      	nop
 800c394:	0800f3ba 	.word	0x0800f3ba
 800c398:	0800f4b8 	.word	0x0800f4b8

0800c39c <_Bfree>:
 800c39c:	b570      	push	{r4, r5, r6, lr}
 800c39e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c3a0:	4605      	mov	r5, r0
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	b976      	cbnz	r6, 800c3c4 <_Bfree+0x28>
 800c3a6:	2010      	movs	r0, #16
 800c3a8:	f7ff ff90 	bl	800c2cc <malloc>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	6268      	str	r0, [r5, #36]	; 0x24
 800c3b0:	b920      	cbnz	r0, 800c3bc <_Bfree+0x20>
 800c3b2:	4b09      	ldr	r3, [pc, #36]	; (800c3d8 <_Bfree+0x3c>)
 800c3b4:	4809      	ldr	r0, [pc, #36]	; (800c3dc <_Bfree+0x40>)
 800c3b6:	218a      	movs	r1, #138	; 0x8a
 800c3b8:	f000 fefc 	bl	800d1b4 <__assert_func>
 800c3bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3c0:	6006      	str	r6, [r0, #0]
 800c3c2:	60c6      	str	r6, [r0, #12]
 800c3c4:	b13c      	cbz	r4, 800c3d6 <_Bfree+0x3a>
 800c3c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3c8:	6862      	ldr	r2, [r4, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3d0:	6021      	str	r1, [r4, #0]
 800c3d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	0800f3ba 	.word	0x0800f3ba
 800c3dc:	0800f4b8 	.word	0x0800f4b8

0800c3e0 <__multadd>:
 800c3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3e4:	690d      	ldr	r5, [r1, #16]
 800c3e6:	4607      	mov	r7, r0
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	461e      	mov	r6, r3
 800c3ec:	f101 0c14 	add.w	ip, r1, #20
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	f8dc 3000 	ldr.w	r3, [ip]
 800c3f6:	b299      	uxth	r1, r3
 800c3f8:	fb02 6101 	mla	r1, r2, r1, r6
 800c3fc:	0c1e      	lsrs	r6, r3, #16
 800c3fe:	0c0b      	lsrs	r3, r1, #16
 800c400:	fb02 3306 	mla	r3, r2, r6, r3
 800c404:	b289      	uxth	r1, r1
 800c406:	3001      	adds	r0, #1
 800c408:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c40c:	4285      	cmp	r5, r0
 800c40e:	f84c 1b04 	str.w	r1, [ip], #4
 800c412:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c416:	dcec      	bgt.n	800c3f2 <__multadd+0x12>
 800c418:	b30e      	cbz	r6, 800c45e <__multadd+0x7e>
 800c41a:	68a3      	ldr	r3, [r4, #8]
 800c41c:	42ab      	cmp	r3, r5
 800c41e:	dc19      	bgt.n	800c454 <__multadd+0x74>
 800c420:	6861      	ldr	r1, [r4, #4]
 800c422:	4638      	mov	r0, r7
 800c424:	3101      	adds	r1, #1
 800c426:	f7ff ff79 	bl	800c31c <_Balloc>
 800c42a:	4680      	mov	r8, r0
 800c42c:	b928      	cbnz	r0, 800c43a <__multadd+0x5a>
 800c42e:	4602      	mov	r2, r0
 800c430:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <__multadd+0x84>)
 800c432:	480d      	ldr	r0, [pc, #52]	; (800c468 <__multadd+0x88>)
 800c434:	21b5      	movs	r1, #181	; 0xb5
 800c436:	f000 febd 	bl	800d1b4 <__assert_func>
 800c43a:	6922      	ldr	r2, [r4, #16]
 800c43c:	3202      	adds	r2, #2
 800c43e:	f104 010c 	add.w	r1, r4, #12
 800c442:	0092      	lsls	r2, r2, #2
 800c444:	300c      	adds	r0, #12
 800c446:	f7ff ff5b 	bl	800c300 <memcpy>
 800c44a:	4621      	mov	r1, r4
 800c44c:	4638      	mov	r0, r7
 800c44e:	f7ff ffa5 	bl	800c39c <_Bfree>
 800c452:	4644      	mov	r4, r8
 800c454:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c458:	3501      	adds	r5, #1
 800c45a:	615e      	str	r6, [r3, #20]
 800c45c:	6125      	str	r5, [r4, #16]
 800c45e:	4620      	mov	r0, r4
 800c460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c464:	0800f42c 	.word	0x0800f42c
 800c468:	0800f4b8 	.word	0x0800f4b8

0800c46c <__s2b>:
 800c46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c470:	460c      	mov	r4, r1
 800c472:	4615      	mov	r5, r2
 800c474:	461f      	mov	r7, r3
 800c476:	2209      	movs	r2, #9
 800c478:	3308      	adds	r3, #8
 800c47a:	4606      	mov	r6, r0
 800c47c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c480:	2100      	movs	r1, #0
 800c482:	2201      	movs	r2, #1
 800c484:	429a      	cmp	r2, r3
 800c486:	db09      	blt.n	800c49c <__s2b+0x30>
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff ff47 	bl	800c31c <_Balloc>
 800c48e:	b940      	cbnz	r0, 800c4a2 <__s2b+0x36>
 800c490:	4602      	mov	r2, r0
 800c492:	4b19      	ldr	r3, [pc, #100]	; (800c4f8 <__s2b+0x8c>)
 800c494:	4819      	ldr	r0, [pc, #100]	; (800c4fc <__s2b+0x90>)
 800c496:	21ce      	movs	r1, #206	; 0xce
 800c498:	f000 fe8c 	bl	800d1b4 <__assert_func>
 800c49c:	0052      	lsls	r2, r2, #1
 800c49e:	3101      	adds	r1, #1
 800c4a0:	e7f0      	b.n	800c484 <__s2b+0x18>
 800c4a2:	9b08      	ldr	r3, [sp, #32]
 800c4a4:	6143      	str	r3, [r0, #20]
 800c4a6:	2d09      	cmp	r5, #9
 800c4a8:	f04f 0301 	mov.w	r3, #1
 800c4ac:	6103      	str	r3, [r0, #16]
 800c4ae:	dd16      	ble.n	800c4de <__s2b+0x72>
 800c4b0:	f104 0909 	add.w	r9, r4, #9
 800c4b4:	46c8      	mov	r8, r9
 800c4b6:	442c      	add	r4, r5
 800c4b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4bc:	4601      	mov	r1, r0
 800c4be:	3b30      	subs	r3, #48	; 0x30
 800c4c0:	220a      	movs	r2, #10
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7ff ff8c 	bl	800c3e0 <__multadd>
 800c4c8:	45a0      	cmp	r8, r4
 800c4ca:	d1f5      	bne.n	800c4b8 <__s2b+0x4c>
 800c4cc:	f1a5 0408 	sub.w	r4, r5, #8
 800c4d0:	444c      	add	r4, r9
 800c4d2:	1b2d      	subs	r5, r5, r4
 800c4d4:	1963      	adds	r3, r4, r5
 800c4d6:	42bb      	cmp	r3, r7
 800c4d8:	db04      	blt.n	800c4e4 <__s2b+0x78>
 800c4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4de:	340a      	adds	r4, #10
 800c4e0:	2509      	movs	r5, #9
 800c4e2:	e7f6      	b.n	800c4d2 <__s2b+0x66>
 800c4e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4e8:	4601      	mov	r1, r0
 800c4ea:	3b30      	subs	r3, #48	; 0x30
 800c4ec:	220a      	movs	r2, #10
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	f7ff ff76 	bl	800c3e0 <__multadd>
 800c4f4:	e7ee      	b.n	800c4d4 <__s2b+0x68>
 800c4f6:	bf00      	nop
 800c4f8:	0800f42c 	.word	0x0800f42c
 800c4fc:	0800f4b8 	.word	0x0800f4b8

0800c500 <__hi0bits>:
 800c500:	0c03      	lsrs	r3, r0, #16
 800c502:	041b      	lsls	r3, r3, #16
 800c504:	b9d3      	cbnz	r3, 800c53c <__hi0bits+0x3c>
 800c506:	0400      	lsls	r0, r0, #16
 800c508:	2310      	movs	r3, #16
 800c50a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c50e:	bf04      	itt	eq
 800c510:	0200      	lsleq	r0, r0, #8
 800c512:	3308      	addeq	r3, #8
 800c514:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c518:	bf04      	itt	eq
 800c51a:	0100      	lsleq	r0, r0, #4
 800c51c:	3304      	addeq	r3, #4
 800c51e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c522:	bf04      	itt	eq
 800c524:	0080      	lsleq	r0, r0, #2
 800c526:	3302      	addeq	r3, #2
 800c528:	2800      	cmp	r0, #0
 800c52a:	db05      	blt.n	800c538 <__hi0bits+0x38>
 800c52c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c530:	f103 0301 	add.w	r3, r3, #1
 800c534:	bf08      	it	eq
 800c536:	2320      	moveq	r3, #32
 800c538:	4618      	mov	r0, r3
 800c53a:	4770      	bx	lr
 800c53c:	2300      	movs	r3, #0
 800c53e:	e7e4      	b.n	800c50a <__hi0bits+0xa>

0800c540 <__lo0bits>:
 800c540:	6803      	ldr	r3, [r0, #0]
 800c542:	f013 0207 	ands.w	r2, r3, #7
 800c546:	4601      	mov	r1, r0
 800c548:	d00b      	beq.n	800c562 <__lo0bits+0x22>
 800c54a:	07da      	lsls	r2, r3, #31
 800c54c:	d423      	bmi.n	800c596 <__lo0bits+0x56>
 800c54e:	0798      	lsls	r0, r3, #30
 800c550:	bf49      	itett	mi
 800c552:	085b      	lsrmi	r3, r3, #1
 800c554:	089b      	lsrpl	r3, r3, #2
 800c556:	2001      	movmi	r0, #1
 800c558:	600b      	strmi	r3, [r1, #0]
 800c55a:	bf5c      	itt	pl
 800c55c:	600b      	strpl	r3, [r1, #0]
 800c55e:	2002      	movpl	r0, #2
 800c560:	4770      	bx	lr
 800c562:	b298      	uxth	r0, r3
 800c564:	b9a8      	cbnz	r0, 800c592 <__lo0bits+0x52>
 800c566:	0c1b      	lsrs	r3, r3, #16
 800c568:	2010      	movs	r0, #16
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	b90a      	cbnz	r2, 800c572 <__lo0bits+0x32>
 800c56e:	3008      	adds	r0, #8
 800c570:	0a1b      	lsrs	r3, r3, #8
 800c572:	071a      	lsls	r2, r3, #28
 800c574:	bf04      	itt	eq
 800c576:	091b      	lsreq	r3, r3, #4
 800c578:	3004      	addeq	r0, #4
 800c57a:	079a      	lsls	r2, r3, #30
 800c57c:	bf04      	itt	eq
 800c57e:	089b      	lsreq	r3, r3, #2
 800c580:	3002      	addeq	r0, #2
 800c582:	07da      	lsls	r2, r3, #31
 800c584:	d403      	bmi.n	800c58e <__lo0bits+0x4e>
 800c586:	085b      	lsrs	r3, r3, #1
 800c588:	f100 0001 	add.w	r0, r0, #1
 800c58c:	d005      	beq.n	800c59a <__lo0bits+0x5a>
 800c58e:	600b      	str	r3, [r1, #0]
 800c590:	4770      	bx	lr
 800c592:	4610      	mov	r0, r2
 800c594:	e7e9      	b.n	800c56a <__lo0bits+0x2a>
 800c596:	2000      	movs	r0, #0
 800c598:	4770      	bx	lr
 800c59a:	2020      	movs	r0, #32
 800c59c:	4770      	bx	lr
	...

0800c5a0 <__i2b>:
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	f7ff feb9 	bl	800c31c <_Balloc>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	b928      	cbnz	r0, 800c5ba <__i2b+0x1a>
 800c5ae:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <__i2b+0x24>)
 800c5b0:	4805      	ldr	r0, [pc, #20]	; (800c5c8 <__i2b+0x28>)
 800c5b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c5b6:	f000 fdfd 	bl	800d1b4 <__assert_func>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	6144      	str	r4, [r0, #20]
 800c5be:	6103      	str	r3, [r0, #16]
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800f42c 	.word	0x0800f42c
 800c5c8:	0800f4b8 	.word	0x0800f4b8

0800c5cc <__multiply>:
 800c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d0:	4691      	mov	r9, r2
 800c5d2:	690a      	ldr	r2, [r1, #16]
 800c5d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	bfb8      	it	lt
 800c5dc:	460b      	movlt	r3, r1
 800c5de:	460c      	mov	r4, r1
 800c5e0:	bfbc      	itt	lt
 800c5e2:	464c      	movlt	r4, r9
 800c5e4:	4699      	movlt	r9, r3
 800c5e6:	6927      	ldr	r7, [r4, #16]
 800c5e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5ec:	68a3      	ldr	r3, [r4, #8]
 800c5ee:	6861      	ldr	r1, [r4, #4]
 800c5f0:	eb07 060a 	add.w	r6, r7, sl
 800c5f4:	42b3      	cmp	r3, r6
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	bfb8      	it	lt
 800c5fa:	3101      	addlt	r1, #1
 800c5fc:	f7ff fe8e 	bl	800c31c <_Balloc>
 800c600:	b930      	cbnz	r0, 800c610 <__multiply+0x44>
 800c602:	4602      	mov	r2, r0
 800c604:	4b44      	ldr	r3, [pc, #272]	; (800c718 <__multiply+0x14c>)
 800c606:	4845      	ldr	r0, [pc, #276]	; (800c71c <__multiply+0x150>)
 800c608:	f240 115d 	movw	r1, #349	; 0x15d
 800c60c:	f000 fdd2 	bl	800d1b4 <__assert_func>
 800c610:	f100 0514 	add.w	r5, r0, #20
 800c614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c618:	462b      	mov	r3, r5
 800c61a:	2200      	movs	r2, #0
 800c61c:	4543      	cmp	r3, r8
 800c61e:	d321      	bcc.n	800c664 <__multiply+0x98>
 800c620:	f104 0314 	add.w	r3, r4, #20
 800c624:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c628:	f109 0314 	add.w	r3, r9, #20
 800c62c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c630:	9202      	str	r2, [sp, #8]
 800c632:	1b3a      	subs	r2, r7, r4
 800c634:	3a15      	subs	r2, #21
 800c636:	f022 0203 	bic.w	r2, r2, #3
 800c63a:	3204      	adds	r2, #4
 800c63c:	f104 0115 	add.w	r1, r4, #21
 800c640:	428f      	cmp	r7, r1
 800c642:	bf38      	it	cc
 800c644:	2204      	movcc	r2, #4
 800c646:	9201      	str	r2, [sp, #4]
 800c648:	9a02      	ldr	r2, [sp, #8]
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d80c      	bhi.n	800c66a <__multiply+0x9e>
 800c650:	2e00      	cmp	r6, #0
 800c652:	dd03      	ble.n	800c65c <__multiply+0x90>
 800c654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d05a      	beq.n	800c712 <__multiply+0x146>
 800c65c:	6106      	str	r6, [r0, #16]
 800c65e:	b005      	add	sp, #20
 800c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c664:	f843 2b04 	str.w	r2, [r3], #4
 800c668:	e7d8      	b.n	800c61c <__multiply+0x50>
 800c66a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c66e:	f1ba 0f00 	cmp.w	sl, #0
 800c672:	d024      	beq.n	800c6be <__multiply+0xf2>
 800c674:	f104 0e14 	add.w	lr, r4, #20
 800c678:	46a9      	mov	r9, r5
 800c67a:	f04f 0c00 	mov.w	ip, #0
 800c67e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c682:	f8d9 1000 	ldr.w	r1, [r9]
 800c686:	fa1f fb82 	uxth.w	fp, r2
 800c68a:	b289      	uxth	r1, r1
 800c68c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c690:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c694:	f8d9 2000 	ldr.w	r2, [r9]
 800c698:	4461      	add	r1, ip
 800c69a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c69e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c6a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6a6:	b289      	uxth	r1, r1
 800c6a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6ac:	4577      	cmp	r7, lr
 800c6ae:	f849 1b04 	str.w	r1, [r9], #4
 800c6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6b6:	d8e2      	bhi.n	800c67e <__multiply+0xb2>
 800c6b8:	9a01      	ldr	r2, [sp, #4]
 800c6ba:	f845 c002 	str.w	ip, [r5, r2]
 800c6be:	9a03      	ldr	r2, [sp, #12]
 800c6c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ca:	d020      	beq.n	800c70e <__multiply+0x142>
 800c6cc:	6829      	ldr	r1, [r5, #0]
 800c6ce:	f104 0c14 	add.w	ip, r4, #20
 800c6d2:	46ae      	mov	lr, r5
 800c6d4:	f04f 0a00 	mov.w	sl, #0
 800c6d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c6dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6e0:	fb09 220b 	mla	r2, r9, fp, r2
 800c6e4:	4492      	add	sl, r2
 800c6e6:	b289      	uxth	r1, r1
 800c6e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c6ec:	f84e 1b04 	str.w	r1, [lr], #4
 800c6f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6f4:	f8be 1000 	ldrh.w	r1, [lr]
 800c6f8:	0c12      	lsrs	r2, r2, #16
 800c6fa:	fb09 1102 	mla	r1, r9, r2, r1
 800c6fe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c702:	4567      	cmp	r7, ip
 800c704:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c708:	d8e6      	bhi.n	800c6d8 <__multiply+0x10c>
 800c70a:	9a01      	ldr	r2, [sp, #4]
 800c70c:	50a9      	str	r1, [r5, r2]
 800c70e:	3504      	adds	r5, #4
 800c710:	e79a      	b.n	800c648 <__multiply+0x7c>
 800c712:	3e01      	subs	r6, #1
 800c714:	e79c      	b.n	800c650 <__multiply+0x84>
 800c716:	bf00      	nop
 800c718:	0800f42c 	.word	0x0800f42c
 800c71c:	0800f4b8 	.word	0x0800f4b8

0800c720 <__pow5mult>:
 800c720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c724:	4615      	mov	r5, r2
 800c726:	f012 0203 	ands.w	r2, r2, #3
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	d007      	beq.n	800c740 <__pow5mult+0x20>
 800c730:	4c25      	ldr	r4, [pc, #148]	; (800c7c8 <__pow5mult+0xa8>)
 800c732:	3a01      	subs	r2, #1
 800c734:	2300      	movs	r3, #0
 800c736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c73a:	f7ff fe51 	bl	800c3e0 <__multadd>
 800c73e:	4607      	mov	r7, r0
 800c740:	10ad      	asrs	r5, r5, #2
 800c742:	d03d      	beq.n	800c7c0 <__pow5mult+0xa0>
 800c744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c746:	b97c      	cbnz	r4, 800c768 <__pow5mult+0x48>
 800c748:	2010      	movs	r0, #16
 800c74a:	f7ff fdbf 	bl	800c2cc <malloc>
 800c74e:	4602      	mov	r2, r0
 800c750:	6270      	str	r0, [r6, #36]	; 0x24
 800c752:	b928      	cbnz	r0, 800c760 <__pow5mult+0x40>
 800c754:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <__pow5mult+0xac>)
 800c756:	481e      	ldr	r0, [pc, #120]	; (800c7d0 <__pow5mult+0xb0>)
 800c758:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c75c:	f000 fd2a 	bl	800d1b4 <__assert_func>
 800c760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c764:	6004      	str	r4, [r0, #0]
 800c766:	60c4      	str	r4, [r0, #12]
 800c768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c770:	b94c      	cbnz	r4, 800c786 <__pow5mult+0x66>
 800c772:	f240 2171 	movw	r1, #625	; 0x271
 800c776:	4630      	mov	r0, r6
 800c778:	f7ff ff12 	bl	800c5a0 <__i2b>
 800c77c:	2300      	movs	r3, #0
 800c77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c782:	4604      	mov	r4, r0
 800c784:	6003      	str	r3, [r0, #0]
 800c786:	f04f 0900 	mov.w	r9, #0
 800c78a:	07eb      	lsls	r3, r5, #31
 800c78c:	d50a      	bpl.n	800c7a4 <__pow5mult+0x84>
 800c78e:	4639      	mov	r1, r7
 800c790:	4622      	mov	r2, r4
 800c792:	4630      	mov	r0, r6
 800c794:	f7ff ff1a 	bl	800c5cc <__multiply>
 800c798:	4639      	mov	r1, r7
 800c79a:	4680      	mov	r8, r0
 800c79c:	4630      	mov	r0, r6
 800c79e:	f7ff fdfd 	bl	800c39c <_Bfree>
 800c7a2:	4647      	mov	r7, r8
 800c7a4:	106d      	asrs	r5, r5, #1
 800c7a6:	d00b      	beq.n	800c7c0 <__pow5mult+0xa0>
 800c7a8:	6820      	ldr	r0, [r4, #0]
 800c7aa:	b938      	cbnz	r0, 800c7bc <__pow5mult+0x9c>
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7ff ff0b 	bl	800c5cc <__multiply>
 800c7b6:	6020      	str	r0, [r4, #0]
 800c7b8:	f8c0 9000 	str.w	r9, [r0]
 800c7bc:	4604      	mov	r4, r0
 800c7be:	e7e4      	b.n	800c78a <__pow5mult+0x6a>
 800c7c0:	4638      	mov	r0, r7
 800c7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c6:	bf00      	nop
 800c7c8:	0800f608 	.word	0x0800f608
 800c7cc:	0800f3ba 	.word	0x0800f3ba
 800c7d0:	0800f4b8 	.word	0x0800f4b8

0800c7d4 <__lshift>:
 800c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d8:	460c      	mov	r4, r1
 800c7da:	6849      	ldr	r1, [r1, #4]
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	4691      	mov	r9, r2
 800c7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7ec:	f108 0601 	add.w	r6, r8, #1
 800c7f0:	42b3      	cmp	r3, r6
 800c7f2:	db0b      	blt.n	800c80c <__lshift+0x38>
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	f7ff fd91 	bl	800c31c <_Balloc>
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	b948      	cbnz	r0, 800c812 <__lshift+0x3e>
 800c7fe:	4602      	mov	r2, r0
 800c800:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <__lshift+0xd8>)
 800c802:	482b      	ldr	r0, [pc, #172]	; (800c8b0 <__lshift+0xdc>)
 800c804:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c808:	f000 fcd4 	bl	800d1b4 <__assert_func>
 800c80c:	3101      	adds	r1, #1
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	e7ee      	b.n	800c7f0 <__lshift+0x1c>
 800c812:	2300      	movs	r3, #0
 800c814:	f100 0114 	add.w	r1, r0, #20
 800c818:	f100 0210 	add.w	r2, r0, #16
 800c81c:	4618      	mov	r0, r3
 800c81e:	4553      	cmp	r3, sl
 800c820:	db37      	blt.n	800c892 <__lshift+0xbe>
 800c822:	6920      	ldr	r0, [r4, #16]
 800c824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c828:	f104 0314 	add.w	r3, r4, #20
 800c82c:	f019 091f 	ands.w	r9, r9, #31
 800c830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c834:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c838:	d02f      	beq.n	800c89a <__lshift+0xc6>
 800c83a:	f1c9 0e20 	rsb	lr, r9, #32
 800c83e:	468a      	mov	sl, r1
 800c840:	f04f 0c00 	mov.w	ip, #0
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	fa02 f209 	lsl.w	r2, r2, r9
 800c84a:	ea42 020c 	orr.w	r2, r2, ip
 800c84e:	f84a 2b04 	str.w	r2, [sl], #4
 800c852:	f853 2b04 	ldr.w	r2, [r3], #4
 800c856:	4298      	cmp	r0, r3
 800c858:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c85c:	d8f2      	bhi.n	800c844 <__lshift+0x70>
 800c85e:	1b03      	subs	r3, r0, r4
 800c860:	3b15      	subs	r3, #21
 800c862:	f023 0303 	bic.w	r3, r3, #3
 800c866:	3304      	adds	r3, #4
 800c868:	f104 0215 	add.w	r2, r4, #21
 800c86c:	4290      	cmp	r0, r2
 800c86e:	bf38      	it	cc
 800c870:	2304      	movcc	r3, #4
 800c872:	f841 c003 	str.w	ip, [r1, r3]
 800c876:	f1bc 0f00 	cmp.w	ip, #0
 800c87a:	d001      	beq.n	800c880 <__lshift+0xac>
 800c87c:	f108 0602 	add.w	r6, r8, #2
 800c880:	3e01      	subs	r6, #1
 800c882:	4638      	mov	r0, r7
 800c884:	612e      	str	r6, [r5, #16]
 800c886:	4621      	mov	r1, r4
 800c888:	f7ff fd88 	bl	800c39c <_Bfree>
 800c88c:	4628      	mov	r0, r5
 800c88e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c892:	f842 0f04 	str.w	r0, [r2, #4]!
 800c896:	3301      	adds	r3, #1
 800c898:	e7c1      	b.n	800c81e <__lshift+0x4a>
 800c89a:	3904      	subs	r1, #4
 800c89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8a4:	4298      	cmp	r0, r3
 800c8a6:	d8f9      	bhi.n	800c89c <__lshift+0xc8>
 800c8a8:	e7ea      	b.n	800c880 <__lshift+0xac>
 800c8aa:	bf00      	nop
 800c8ac:	0800f42c 	.word	0x0800f42c
 800c8b0:	0800f4b8 	.word	0x0800f4b8

0800c8b4 <__mcmp>:
 800c8b4:	b530      	push	{r4, r5, lr}
 800c8b6:	6902      	ldr	r2, [r0, #16]
 800c8b8:	690c      	ldr	r4, [r1, #16]
 800c8ba:	1b12      	subs	r2, r2, r4
 800c8bc:	d10e      	bne.n	800c8dc <__mcmp+0x28>
 800c8be:	f100 0314 	add.w	r3, r0, #20
 800c8c2:	3114      	adds	r1, #20
 800c8c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c8cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c8d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c8d4:	42a5      	cmp	r5, r4
 800c8d6:	d003      	beq.n	800c8e0 <__mcmp+0x2c>
 800c8d8:	d305      	bcc.n	800c8e6 <__mcmp+0x32>
 800c8da:	2201      	movs	r2, #1
 800c8dc:	4610      	mov	r0, r2
 800c8de:	bd30      	pop	{r4, r5, pc}
 800c8e0:	4283      	cmp	r3, r0
 800c8e2:	d3f3      	bcc.n	800c8cc <__mcmp+0x18>
 800c8e4:	e7fa      	b.n	800c8dc <__mcmp+0x28>
 800c8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ea:	e7f7      	b.n	800c8dc <__mcmp+0x28>

0800c8ec <__mdiff>:
 800c8ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	4690      	mov	r8, r2
 800c8fa:	f7ff ffdb 	bl	800c8b4 <__mcmp>
 800c8fe:	1e05      	subs	r5, r0, #0
 800c900:	d110      	bne.n	800c924 <__mdiff+0x38>
 800c902:	4629      	mov	r1, r5
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff fd09 	bl	800c31c <_Balloc>
 800c90a:	b930      	cbnz	r0, 800c91a <__mdiff+0x2e>
 800c90c:	4b3a      	ldr	r3, [pc, #232]	; (800c9f8 <__mdiff+0x10c>)
 800c90e:	4602      	mov	r2, r0
 800c910:	f240 2132 	movw	r1, #562	; 0x232
 800c914:	4839      	ldr	r0, [pc, #228]	; (800c9fc <__mdiff+0x110>)
 800c916:	f000 fc4d 	bl	800d1b4 <__assert_func>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c924:	bfa4      	itt	ge
 800c926:	4643      	movge	r3, r8
 800c928:	46a0      	movge	r8, r4
 800c92a:	4630      	mov	r0, r6
 800c92c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c930:	bfa6      	itte	ge
 800c932:	461c      	movge	r4, r3
 800c934:	2500      	movge	r5, #0
 800c936:	2501      	movlt	r5, #1
 800c938:	f7ff fcf0 	bl	800c31c <_Balloc>
 800c93c:	b920      	cbnz	r0, 800c948 <__mdiff+0x5c>
 800c93e:	4b2e      	ldr	r3, [pc, #184]	; (800c9f8 <__mdiff+0x10c>)
 800c940:	4602      	mov	r2, r0
 800c942:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c946:	e7e5      	b.n	800c914 <__mdiff+0x28>
 800c948:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c94c:	6926      	ldr	r6, [r4, #16]
 800c94e:	60c5      	str	r5, [r0, #12]
 800c950:	f104 0914 	add.w	r9, r4, #20
 800c954:	f108 0514 	add.w	r5, r8, #20
 800c958:	f100 0e14 	add.w	lr, r0, #20
 800c95c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c960:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c964:	f108 0210 	add.w	r2, r8, #16
 800c968:	46f2      	mov	sl, lr
 800c96a:	2100      	movs	r1, #0
 800c96c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c970:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c974:	fa1f f883 	uxth.w	r8, r3
 800c978:	fa11 f18b 	uxtah	r1, r1, fp
 800c97c:	0c1b      	lsrs	r3, r3, #16
 800c97e:	eba1 0808 	sub.w	r8, r1, r8
 800c982:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c986:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c98a:	fa1f f888 	uxth.w	r8, r8
 800c98e:	1419      	asrs	r1, r3, #16
 800c990:	454e      	cmp	r6, r9
 800c992:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c996:	f84a 3b04 	str.w	r3, [sl], #4
 800c99a:	d8e7      	bhi.n	800c96c <__mdiff+0x80>
 800c99c:	1b33      	subs	r3, r6, r4
 800c99e:	3b15      	subs	r3, #21
 800c9a0:	f023 0303 	bic.w	r3, r3, #3
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	3415      	adds	r4, #21
 800c9a8:	42a6      	cmp	r6, r4
 800c9aa:	bf38      	it	cc
 800c9ac:	2304      	movcc	r3, #4
 800c9ae:	441d      	add	r5, r3
 800c9b0:	4473      	add	r3, lr
 800c9b2:	469e      	mov	lr, r3
 800c9b4:	462e      	mov	r6, r5
 800c9b6:	4566      	cmp	r6, ip
 800c9b8:	d30e      	bcc.n	800c9d8 <__mdiff+0xec>
 800c9ba:	f10c 0203 	add.w	r2, ip, #3
 800c9be:	1b52      	subs	r2, r2, r5
 800c9c0:	f022 0203 	bic.w	r2, r2, #3
 800c9c4:	3d03      	subs	r5, #3
 800c9c6:	45ac      	cmp	ip, r5
 800c9c8:	bf38      	it	cc
 800c9ca:	2200      	movcc	r2, #0
 800c9cc:	441a      	add	r2, r3
 800c9ce:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c9d2:	b17b      	cbz	r3, 800c9f4 <__mdiff+0x108>
 800c9d4:	6107      	str	r7, [r0, #16]
 800c9d6:	e7a3      	b.n	800c920 <__mdiff+0x34>
 800c9d8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c9dc:	fa11 f288 	uxtah	r2, r1, r8
 800c9e0:	1414      	asrs	r4, r2, #16
 800c9e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9e6:	b292      	uxth	r2, r2
 800c9e8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9ec:	f84e 2b04 	str.w	r2, [lr], #4
 800c9f0:	1421      	asrs	r1, r4, #16
 800c9f2:	e7e0      	b.n	800c9b6 <__mdiff+0xca>
 800c9f4:	3f01      	subs	r7, #1
 800c9f6:	e7ea      	b.n	800c9ce <__mdiff+0xe2>
 800c9f8:	0800f42c 	.word	0x0800f42c
 800c9fc:	0800f4b8 	.word	0x0800f4b8

0800ca00 <__ulp>:
 800ca00:	b082      	sub	sp, #8
 800ca02:	ed8d 0b00 	vstr	d0, [sp]
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	4912      	ldr	r1, [pc, #72]	; (800ca54 <__ulp+0x54>)
 800ca0a:	4019      	ands	r1, r3
 800ca0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ca10:	2900      	cmp	r1, #0
 800ca12:	dd05      	ble.n	800ca20 <__ulp+0x20>
 800ca14:	2200      	movs	r2, #0
 800ca16:	460b      	mov	r3, r1
 800ca18:	ec43 2b10 	vmov	d0, r2, r3
 800ca1c:	b002      	add	sp, #8
 800ca1e:	4770      	bx	lr
 800ca20:	4249      	negs	r1, r1
 800ca22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ca26:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ca2a:	f04f 0200 	mov.w	r2, #0
 800ca2e:	f04f 0300 	mov.w	r3, #0
 800ca32:	da04      	bge.n	800ca3e <__ulp+0x3e>
 800ca34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ca38:	fa41 f300 	asr.w	r3, r1, r0
 800ca3c:	e7ec      	b.n	800ca18 <__ulp+0x18>
 800ca3e:	f1a0 0114 	sub.w	r1, r0, #20
 800ca42:	291e      	cmp	r1, #30
 800ca44:	bfda      	itte	le
 800ca46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ca4a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ca4e:	2101      	movgt	r1, #1
 800ca50:	460a      	mov	r2, r1
 800ca52:	e7e1      	b.n	800ca18 <__ulp+0x18>
 800ca54:	7ff00000 	.word	0x7ff00000

0800ca58 <__b2d>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	6905      	ldr	r5, [r0, #16]
 800ca5c:	f100 0714 	add.w	r7, r0, #20
 800ca60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ca64:	1f2e      	subs	r6, r5, #4
 800ca66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f7ff fd48 	bl	800c500 <__hi0bits>
 800ca70:	f1c0 0320 	rsb	r3, r0, #32
 800ca74:	280a      	cmp	r0, #10
 800ca76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800caf4 <__b2d+0x9c>
 800ca7a:	600b      	str	r3, [r1, #0]
 800ca7c:	dc14      	bgt.n	800caa8 <__b2d+0x50>
 800ca7e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ca82:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca86:	42b7      	cmp	r7, r6
 800ca88:	ea41 030c 	orr.w	r3, r1, ip
 800ca8c:	bf34      	ite	cc
 800ca8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca92:	2100      	movcs	r1, #0
 800ca94:	3015      	adds	r0, #21
 800ca96:	fa04 f000 	lsl.w	r0, r4, r0
 800ca9a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca9e:	ea40 0201 	orr.w	r2, r0, r1
 800caa2:	ec43 2b10 	vmov	d0, r2, r3
 800caa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caa8:	42b7      	cmp	r7, r6
 800caaa:	bf3a      	itte	cc
 800caac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cab0:	f1a5 0608 	subcc.w	r6, r5, #8
 800cab4:	2100      	movcs	r1, #0
 800cab6:	380b      	subs	r0, #11
 800cab8:	d017      	beq.n	800caea <__b2d+0x92>
 800caba:	f1c0 0c20 	rsb	ip, r0, #32
 800cabe:	fa04 f500 	lsl.w	r5, r4, r0
 800cac2:	42be      	cmp	r6, r7
 800cac4:	fa21 f40c 	lsr.w	r4, r1, ip
 800cac8:	ea45 0504 	orr.w	r5, r5, r4
 800cacc:	bf8c      	ite	hi
 800cace:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cad2:	2400      	movls	r4, #0
 800cad4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cad8:	fa01 f000 	lsl.w	r0, r1, r0
 800cadc:	fa24 f40c 	lsr.w	r4, r4, ip
 800cae0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cae4:	ea40 0204 	orr.w	r2, r0, r4
 800cae8:	e7db      	b.n	800caa2 <__b2d+0x4a>
 800caea:	ea44 030c 	orr.w	r3, r4, ip
 800caee:	460a      	mov	r2, r1
 800caf0:	e7d7      	b.n	800caa2 <__b2d+0x4a>
 800caf2:	bf00      	nop
 800caf4:	3ff00000 	.word	0x3ff00000

0800caf8 <__d2b>:
 800caf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cafc:	4689      	mov	r9, r1
 800cafe:	2101      	movs	r1, #1
 800cb00:	ec57 6b10 	vmov	r6, r7, d0
 800cb04:	4690      	mov	r8, r2
 800cb06:	f7ff fc09 	bl	800c31c <_Balloc>
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	b930      	cbnz	r0, 800cb1c <__d2b+0x24>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	4b25      	ldr	r3, [pc, #148]	; (800cba8 <__d2b+0xb0>)
 800cb12:	4826      	ldr	r0, [pc, #152]	; (800cbac <__d2b+0xb4>)
 800cb14:	f240 310a 	movw	r1, #778	; 0x30a
 800cb18:	f000 fb4c 	bl	800d1b4 <__assert_func>
 800cb1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb24:	bb35      	cbnz	r5, 800cb74 <__d2b+0x7c>
 800cb26:	2e00      	cmp	r6, #0
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	d028      	beq.n	800cb7e <__d2b+0x86>
 800cb2c:	4668      	mov	r0, sp
 800cb2e:	9600      	str	r6, [sp, #0]
 800cb30:	f7ff fd06 	bl	800c540 <__lo0bits>
 800cb34:	9900      	ldr	r1, [sp, #0]
 800cb36:	b300      	cbz	r0, 800cb7a <__d2b+0x82>
 800cb38:	9a01      	ldr	r2, [sp, #4]
 800cb3a:	f1c0 0320 	rsb	r3, r0, #32
 800cb3e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb42:	430b      	orrs	r3, r1
 800cb44:	40c2      	lsrs	r2, r0
 800cb46:	6163      	str	r3, [r4, #20]
 800cb48:	9201      	str	r2, [sp, #4]
 800cb4a:	9b01      	ldr	r3, [sp, #4]
 800cb4c:	61a3      	str	r3, [r4, #24]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	bf14      	ite	ne
 800cb52:	2202      	movne	r2, #2
 800cb54:	2201      	moveq	r2, #1
 800cb56:	6122      	str	r2, [r4, #16]
 800cb58:	b1d5      	cbz	r5, 800cb90 <__d2b+0x98>
 800cb5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb5e:	4405      	add	r5, r0
 800cb60:	f8c9 5000 	str.w	r5, [r9]
 800cb64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb68:	f8c8 0000 	str.w	r0, [r8]
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	b003      	add	sp, #12
 800cb70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb78:	e7d5      	b.n	800cb26 <__d2b+0x2e>
 800cb7a:	6161      	str	r1, [r4, #20]
 800cb7c:	e7e5      	b.n	800cb4a <__d2b+0x52>
 800cb7e:	a801      	add	r0, sp, #4
 800cb80:	f7ff fcde 	bl	800c540 <__lo0bits>
 800cb84:	9b01      	ldr	r3, [sp, #4]
 800cb86:	6163      	str	r3, [r4, #20]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	6122      	str	r2, [r4, #16]
 800cb8c:	3020      	adds	r0, #32
 800cb8e:	e7e3      	b.n	800cb58 <__d2b+0x60>
 800cb90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb98:	f8c9 0000 	str.w	r0, [r9]
 800cb9c:	6918      	ldr	r0, [r3, #16]
 800cb9e:	f7ff fcaf 	bl	800c500 <__hi0bits>
 800cba2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cba6:	e7df      	b.n	800cb68 <__d2b+0x70>
 800cba8:	0800f42c 	.word	0x0800f42c
 800cbac:	0800f4b8 	.word	0x0800f4b8

0800cbb0 <__ratio>:
 800cbb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb4:	4688      	mov	r8, r1
 800cbb6:	4669      	mov	r1, sp
 800cbb8:	4681      	mov	r9, r0
 800cbba:	f7ff ff4d 	bl	800ca58 <__b2d>
 800cbbe:	a901      	add	r1, sp, #4
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	ec55 4b10 	vmov	r4, r5, d0
 800cbc6:	ee10 aa10 	vmov	sl, s0
 800cbca:	f7ff ff45 	bl	800ca58 <__b2d>
 800cbce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbd2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800cbd6:	1a59      	subs	r1, r3, r1
 800cbd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800cbe2:	ec57 6b10 	vmov	r6, r7, d0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	bfd6      	itet	le
 800cbea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbee:	462a      	movgt	r2, r5
 800cbf0:	463a      	movle	r2, r7
 800cbf2:	46ab      	mov	fp, r5
 800cbf4:	bfd6      	itet	le
 800cbf6:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800cbfa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cbfe:	ee00 3a90 	vmovle	s1, r3
 800cc02:	ec4b ab17 	vmov	d7, sl, fp
 800cc06:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800cc0a:	b003      	add	sp, #12
 800cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc10 <__copybits>:
 800cc10:	3901      	subs	r1, #1
 800cc12:	b570      	push	{r4, r5, r6, lr}
 800cc14:	1149      	asrs	r1, r1, #5
 800cc16:	6914      	ldr	r4, [r2, #16]
 800cc18:	3101      	adds	r1, #1
 800cc1a:	f102 0314 	add.w	r3, r2, #20
 800cc1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc26:	1f05      	subs	r5, r0, #4
 800cc28:	42a3      	cmp	r3, r4
 800cc2a:	d30c      	bcc.n	800cc46 <__copybits+0x36>
 800cc2c:	1aa3      	subs	r3, r4, r2
 800cc2e:	3b11      	subs	r3, #17
 800cc30:	f023 0303 	bic.w	r3, r3, #3
 800cc34:	3211      	adds	r2, #17
 800cc36:	42a2      	cmp	r2, r4
 800cc38:	bf88      	it	hi
 800cc3a:	2300      	movhi	r3, #0
 800cc3c:	4418      	add	r0, r3
 800cc3e:	2300      	movs	r3, #0
 800cc40:	4288      	cmp	r0, r1
 800cc42:	d305      	bcc.n	800cc50 <__copybits+0x40>
 800cc44:	bd70      	pop	{r4, r5, r6, pc}
 800cc46:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc4a:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc4e:	e7eb      	b.n	800cc28 <__copybits+0x18>
 800cc50:	f840 3b04 	str.w	r3, [r0], #4
 800cc54:	e7f4      	b.n	800cc40 <__copybits+0x30>

0800cc56 <__any_on>:
 800cc56:	f100 0214 	add.w	r2, r0, #20
 800cc5a:	6900      	ldr	r0, [r0, #16]
 800cc5c:	114b      	asrs	r3, r1, #5
 800cc5e:	4298      	cmp	r0, r3
 800cc60:	b510      	push	{r4, lr}
 800cc62:	db11      	blt.n	800cc88 <__any_on+0x32>
 800cc64:	dd0a      	ble.n	800cc7c <__any_on+0x26>
 800cc66:	f011 011f 	ands.w	r1, r1, #31
 800cc6a:	d007      	beq.n	800cc7c <__any_on+0x26>
 800cc6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc70:	fa24 f001 	lsr.w	r0, r4, r1
 800cc74:	fa00 f101 	lsl.w	r1, r0, r1
 800cc78:	428c      	cmp	r4, r1
 800cc7a:	d10b      	bne.n	800cc94 <__any_on+0x3e>
 800cc7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d803      	bhi.n	800cc8c <__any_on+0x36>
 800cc84:	2000      	movs	r0, #0
 800cc86:	bd10      	pop	{r4, pc}
 800cc88:	4603      	mov	r3, r0
 800cc8a:	e7f7      	b.n	800cc7c <__any_on+0x26>
 800cc8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc90:	2900      	cmp	r1, #0
 800cc92:	d0f5      	beq.n	800cc80 <__any_on+0x2a>
 800cc94:	2001      	movs	r0, #1
 800cc96:	e7f6      	b.n	800cc86 <__any_on+0x30>

0800cc98 <_calloc_r>:
 800cc98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc9a:	fba1 2402 	umull	r2, r4, r1, r2
 800cc9e:	b94c      	cbnz	r4, 800ccb4 <_calloc_r+0x1c>
 800cca0:	4611      	mov	r1, r2
 800cca2:	9201      	str	r2, [sp, #4]
 800cca4:	f000 f87a 	bl	800cd9c <_malloc_r>
 800cca8:	9a01      	ldr	r2, [sp, #4]
 800ccaa:	4605      	mov	r5, r0
 800ccac:	b930      	cbnz	r0, 800ccbc <_calloc_r+0x24>
 800ccae:	4628      	mov	r0, r5
 800ccb0:	b003      	add	sp, #12
 800ccb2:	bd30      	pop	{r4, r5, pc}
 800ccb4:	220c      	movs	r2, #12
 800ccb6:	6002      	str	r2, [r0, #0]
 800ccb8:	2500      	movs	r5, #0
 800ccba:	e7f8      	b.n	800ccae <_calloc_r+0x16>
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	f7fc fee5 	bl	8009a8c <memset>
 800ccc2:	e7f4      	b.n	800ccae <_calloc_r+0x16>

0800ccc4 <_free_r>:
 800ccc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccc6:	2900      	cmp	r1, #0
 800ccc8:	d044      	beq.n	800cd54 <_free_r+0x90>
 800ccca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccce:	9001      	str	r0, [sp, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f1a1 0404 	sub.w	r4, r1, #4
 800ccd6:	bfb8      	it	lt
 800ccd8:	18e4      	addlt	r4, r4, r3
 800ccda:	f000 fab5 	bl	800d248 <__malloc_lock>
 800ccde:	4a1e      	ldr	r2, [pc, #120]	; (800cd58 <_free_r+0x94>)
 800cce0:	9801      	ldr	r0, [sp, #4]
 800cce2:	6813      	ldr	r3, [r2, #0]
 800cce4:	b933      	cbnz	r3, 800ccf4 <_free_r+0x30>
 800cce6:	6063      	str	r3, [r4, #4]
 800cce8:	6014      	str	r4, [r2, #0]
 800ccea:	b003      	add	sp, #12
 800ccec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccf0:	f000 bab0 	b.w	800d254 <__malloc_unlock>
 800ccf4:	42a3      	cmp	r3, r4
 800ccf6:	d908      	bls.n	800cd0a <_free_r+0x46>
 800ccf8:	6825      	ldr	r5, [r4, #0]
 800ccfa:	1961      	adds	r1, r4, r5
 800ccfc:	428b      	cmp	r3, r1
 800ccfe:	bf01      	itttt	eq
 800cd00:	6819      	ldreq	r1, [r3, #0]
 800cd02:	685b      	ldreq	r3, [r3, #4]
 800cd04:	1949      	addeq	r1, r1, r5
 800cd06:	6021      	streq	r1, [r4, #0]
 800cd08:	e7ed      	b.n	800cce6 <_free_r+0x22>
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	b10b      	cbz	r3, 800cd14 <_free_r+0x50>
 800cd10:	42a3      	cmp	r3, r4
 800cd12:	d9fa      	bls.n	800cd0a <_free_r+0x46>
 800cd14:	6811      	ldr	r1, [r2, #0]
 800cd16:	1855      	adds	r5, r2, r1
 800cd18:	42a5      	cmp	r5, r4
 800cd1a:	d10b      	bne.n	800cd34 <_free_r+0x70>
 800cd1c:	6824      	ldr	r4, [r4, #0]
 800cd1e:	4421      	add	r1, r4
 800cd20:	1854      	adds	r4, r2, r1
 800cd22:	42a3      	cmp	r3, r4
 800cd24:	6011      	str	r1, [r2, #0]
 800cd26:	d1e0      	bne.n	800ccea <_free_r+0x26>
 800cd28:	681c      	ldr	r4, [r3, #0]
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	6053      	str	r3, [r2, #4]
 800cd2e:	4421      	add	r1, r4
 800cd30:	6011      	str	r1, [r2, #0]
 800cd32:	e7da      	b.n	800ccea <_free_r+0x26>
 800cd34:	d902      	bls.n	800cd3c <_free_r+0x78>
 800cd36:	230c      	movs	r3, #12
 800cd38:	6003      	str	r3, [r0, #0]
 800cd3a:	e7d6      	b.n	800ccea <_free_r+0x26>
 800cd3c:	6825      	ldr	r5, [r4, #0]
 800cd3e:	1961      	adds	r1, r4, r5
 800cd40:	428b      	cmp	r3, r1
 800cd42:	bf04      	itt	eq
 800cd44:	6819      	ldreq	r1, [r3, #0]
 800cd46:	685b      	ldreq	r3, [r3, #4]
 800cd48:	6063      	str	r3, [r4, #4]
 800cd4a:	bf04      	itt	eq
 800cd4c:	1949      	addeq	r1, r1, r5
 800cd4e:	6021      	streq	r1, [r4, #0]
 800cd50:	6054      	str	r4, [r2, #4]
 800cd52:	e7ca      	b.n	800ccea <_free_r+0x26>
 800cd54:	b003      	add	sp, #12
 800cd56:	bd30      	pop	{r4, r5, pc}
 800cd58:	2400f73c 	.word	0x2400f73c

0800cd5c <sbrk_aligned>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	4e0e      	ldr	r6, [pc, #56]	; (800cd98 <sbrk_aligned+0x3c>)
 800cd60:	460c      	mov	r4, r1
 800cd62:	6831      	ldr	r1, [r6, #0]
 800cd64:	4605      	mov	r5, r0
 800cd66:	b911      	cbnz	r1, 800cd6e <sbrk_aligned+0x12>
 800cd68:	f000 f9f2 	bl	800d150 <_sbrk_r>
 800cd6c:	6030      	str	r0, [r6, #0]
 800cd6e:	4621      	mov	r1, r4
 800cd70:	4628      	mov	r0, r5
 800cd72:	f000 f9ed 	bl	800d150 <_sbrk_r>
 800cd76:	1c43      	adds	r3, r0, #1
 800cd78:	d00a      	beq.n	800cd90 <sbrk_aligned+0x34>
 800cd7a:	1cc4      	adds	r4, r0, #3
 800cd7c:	f024 0403 	bic.w	r4, r4, #3
 800cd80:	42a0      	cmp	r0, r4
 800cd82:	d007      	beq.n	800cd94 <sbrk_aligned+0x38>
 800cd84:	1a21      	subs	r1, r4, r0
 800cd86:	4628      	mov	r0, r5
 800cd88:	f000 f9e2 	bl	800d150 <_sbrk_r>
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	d101      	bne.n	800cd94 <sbrk_aligned+0x38>
 800cd90:	f04f 34ff 	mov.w	r4, #4294967295
 800cd94:	4620      	mov	r0, r4
 800cd96:	bd70      	pop	{r4, r5, r6, pc}
 800cd98:	2400f740 	.word	0x2400f740

0800cd9c <_malloc_r>:
 800cd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cda0:	1ccd      	adds	r5, r1, #3
 800cda2:	f025 0503 	bic.w	r5, r5, #3
 800cda6:	3508      	adds	r5, #8
 800cda8:	2d0c      	cmp	r5, #12
 800cdaa:	bf38      	it	cc
 800cdac:	250c      	movcc	r5, #12
 800cdae:	2d00      	cmp	r5, #0
 800cdb0:	4607      	mov	r7, r0
 800cdb2:	db01      	blt.n	800cdb8 <_malloc_r+0x1c>
 800cdb4:	42a9      	cmp	r1, r5
 800cdb6:	d905      	bls.n	800cdc4 <_malloc_r+0x28>
 800cdb8:	230c      	movs	r3, #12
 800cdba:	603b      	str	r3, [r7, #0]
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdc4:	4e2e      	ldr	r6, [pc, #184]	; (800ce80 <_malloc_r+0xe4>)
 800cdc6:	f000 fa3f 	bl	800d248 <__malloc_lock>
 800cdca:	6833      	ldr	r3, [r6, #0]
 800cdcc:	461c      	mov	r4, r3
 800cdce:	bb34      	cbnz	r4, 800ce1e <_malloc_r+0x82>
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4638      	mov	r0, r7
 800cdd4:	f7ff ffc2 	bl	800cd5c <sbrk_aligned>
 800cdd8:	1c43      	adds	r3, r0, #1
 800cdda:	4604      	mov	r4, r0
 800cddc:	d14d      	bne.n	800ce7a <_malloc_r+0xde>
 800cdde:	6834      	ldr	r4, [r6, #0]
 800cde0:	4626      	mov	r6, r4
 800cde2:	2e00      	cmp	r6, #0
 800cde4:	d140      	bne.n	800ce68 <_malloc_r+0xcc>
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	4631      	mov	r1, r6
 800cdea:	4638      	mov	r0, r7
 800cdec:	eb04 0803 	add.w	r8, r4, r3
 800cdf0:	f000 f9ae 	bl	800d150 <_sbrk_r>
 800cdf4:	4580      	cmp	r8, r0
 800cdf6:	d13a      	bne.n	800ce6e <_malloc_r+0xd2>
 800cdf8:	6821      	ldr	r1, [r4, #0]
 800cdfa:	3503      	adds	r5, #3
 800cdfc:	1a6d      	subs	r5, r5, r1
 800cdfe:	f025 0503 	bic.w	r5, r5, #3
 800ce02:	3508      	adds	r5, #8
 800ce04:	2d0c      	cmp	r5, #12
 800ce06:	bf38      	it	cc
 800ce08:	250c      	movcc	r5, #12
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4638      	mov	r0, r7
 800ce0e:	f7ff ffa5 	bl	800cd5c <sbrk_aligned>
 800ce12:	3001      	adds	r0, #1
 800ce14:	d02b      	beq.n	800ce6e <_malloc_r+0xd2>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	442b      	add	r3, r5
 800ce1a:	6023      	str	r3, [r4, #0]
 800ce1c:	e00e      	b.n	800ce3c <_malloc_r+0xa0>
 800ce1e:	6822      	ldr	r2, [r4, #0]
 800ce20:	1b52      	subs	r2, r2, r5
 800ce22:	d41e      	bmi.n	800ce62 <_malloc_r+0xc6>
 800ce24:	2a0b      	cmp	r2, #11
 800ce26:	d916      	bls.n	800ce56 <_malloc_r+0xba>
 800ce28:	1961      	adds	r1, r4, r5
 800ce2a:	42a3      	cmp	r3, r4
 800ce2c:	6025      	str	r5, [r4, #0]
 800ce2e:	bf18      	it	ne
 800ce30:	6059      	strne	r1, [r3, #4]
 800ce32:	6863      	ldr	r3, [r4, #4]
 800ce34:	bf08      	it	eq
 800ce36:	6031      	streq	r1, [r6, #0]
 800ce38:	5162      	str	r2, [r4, r5]
 800ce3a:	604b      	str	r3, [r1, #4]
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f104 060b 	add.w	r6, r4, #11
 800ce42:	f000 fa07 	bl	800d254 <__malloc_unlock>
 800ce46:	f026 0607 	bic.w	r6, r6, #7
 800ce4a:	1d23      	adds	r3, r4, #4
 800ce4c:	1af2      	subs	r2, r6, r3
 800ce4e:	d0b6      	beq.n	800cdbe <_malloc_r+0x22>
 800ce50:	1b9b      	subs	r3, r3, r6
 800ce52:	50a3      	str	r3, [r4, r2]
 800ce54:	e7b3      	b.n	800cdbe <_malloc_r+0x22>
 800ce56:	6862      	ldr	r2, [r4, #4]
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	bf0c      	ite	eq
 800ce5c:	6032      	streq	r2, [r6, #0]
 800ce5e:	605a      	strne	r2, [r3, #4]
 800ce60:	e7ec      	b.n	800ce3c <_malloc_r+0xa0>
 800ce62:	4623      	mov	r3, r4
 800ce64:	6864      	ldr	r4, [r4, #4]
 800ce66:	e7b2      	b.n	800cdce <_malloc_r+0x32>
 800ce68:	4634      	mov	r4, r6
 800ce6a:	6876      	ldr	r6, [r6, #4]
 800ce6c:	e7b9      	b.n	800cde2 <_malloc_r+0x46>
 800ce6e:	230c      	movs	r3, #12
 800ce70:	603b      	str	r3, [r7, #0]
 800ce72:	4638      	mov	r0, r7
 800ce74:	f000 f9ee 	bl	800d254 <__malloc_unlock>
 800ce78:	e7a1      	b.n	800cdbe <_malloc_r+0x22>
 800ce7a:	6025      	str	r5, [r4, #0]
 800ce7c:	e7de      	b.n	800ce3c <_malloc_r+0xa0>
 800ce7e:	bf00      	nop
 800ce80:	2400f73c 	.word	0x2400f73c

0800ce84 <__ssputs_r>:
 800ce84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	688e      	ldr	r6, [r1, #8]
 800ce8a:	429e      	cmp	r6, r3
 800ce8c:	4682      	mov	sl, r0
 800ce8e:	460c      	mov	r4, r1
 800ce90:	4690      	mov	r8, r2
 800ce92:	461f      	mov	r7, r3
 800ce94:	d838      	bhi.n	800cf08 <__ssputs_r+0x84>
 800ce96:	898a      	ldrh	r2, [r1, #12]
 800ce98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce9c:	d032      	beq.n	800cf04 <__ssputs_r+0x80>
 800ce9e:	6825      	ldr	r5, [r4, #0]
 800cea0:	6909      	ldr	r1, [r1, #16]
 800cea2:	eba5 0901 	sub.w	r9, r5, r1
 800cea6:	6965      	ldr	r5, [r4, #20]
 800cea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ceac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	444b      	add	r3, r9
 800ceb4:	106d      	asrs	r5, r5, #1
 800ceb6:	429d      	cmp	r5, r3
 800ceb8:	bf38      	it	cc
 800ceba:	461d      	movcc	r5, r3
 800cebc:	0553      	lsls	r3, r2, #21
 800cebe:	d531      	bpl.n	800cf24 <__ssputs_r+0xa0>
 800cec0:	4629      	mov	r1, r5
 800cec2:	f7ff ff6b 	bl	800cd9c <_malloc_r>
 800cec6:	4606      	mov	r6, r0
 800cec8:	b950      	cbnz	r0, 800cee0 <__ssputs_r+0x5c>
 800ceca:	230c      	movs	r3, #12
 800cecc:	f8ca 3000 	str.w	r3, [sl]
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee0:	6921      	ldr	r1, [r4, #16]
 800cee2:	464a      	mov	r2, r9
 800cee4:	f7ff fa0c 	bl	800c300 <memcpy>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ceee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef2:	81a3      	strh	r3, [r4, #12]
 800cef4:	6126      	str	r6, [r4, #16]
 800cef6:	6165      	str	r5, [r4, #20]
 800cef8:	444e      	add	r6, r9
 800cefa:	eba5 0509 	sub.w	r5, r5, r9
 800cefe:	6026      	str	r6, [r4, #0]
 800cf00:	60a5      	str	r5, [r4, #8]
 800cf02:	463e      	mov	r6, r7
 800cf04:	42be      	cmp	r6, r7
 800cf06:	d900      	bls.n	800cf0a <__ssputs_r+0x86>
 800cf08:	463e      	mov	r6, r7
 800cf0a:	6820      	ldr	r0, [r4, #0]
 800cf0c:	4632      	mov	r2, r6
 800cf0e:	4641      	mov	r1, r8
 800cf10:	f000 f980 	bl	800d214 <memmove>
 800cf14:	68a3      	ldr	r3, [r4, #8]
 800cf16:	1b9b      	subs	r3, r3, r6
 800cf18:	60a3      	str	r3, [r4, #8]
 800cf1a:	6823      	ldr	r3, [r4, #0]
 800cf1c:	4433      	add	r3, r6
 800cf1e:	6023      	str	r3, [r4, #0]
 800cf20:	2000      	movs	r0, #0
 800cf22:	e7db      	b.n	800cedc <__ssputs_r+0x58>
 800cf24:	462a      	mov	r2, r5
 800cf26:	f000 f99b 	bl	800d260 <_realloc_r>
 800cf2a:	4606      	mov	r6, r0
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d1e1      	bne.n	800cef4 <__ssputs_r+0x70>
 800cf30:	6921      	ldr	r1, [r4, #16]
 800cf32:	4650      	mov	r0, sl
 800cf34:	f7ff fec6 	bl	800ccc4 <_free_r>
 800cf38:	e7c7      	b.n	800ceca <__ssputs_r+0x46>
	...

0800cf3c <_svfiprintf_r>:
 800cf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf40:	4698      	mov	r8, r3
 800cf42:	898b      	ldrh	r3, [r1, #12]
 800cf44:	061b      	lsls	r3, r3, #24
 800cf46:	b09d      	sub	sp, #116	; 0x74
 800cf48:	4607      	mov	r7, r0
 800cf4a:	460d      	mov	r5, r1
 800cf4c:	4614      	mov	r4, r2
 800cf4e:	d50e      	bpl.n	800cf6e <_svfiprintf_r+0x32>
 800cf50:	690b      	ldr	r3, [r1, #16]
 800cf52:	b963      	cbnz	r3, 800cf6e <_svfiprintf_r+0x32>
 800cf54:	2140      	movs	r1, #64	; 0x40
 800cf56:	f7ff ff21 	bl	800cd9c <_malloc_r>
 800cf5a:	6028      	str	r0, [r5, #0]
 800cf5c:	6128      	str	r0, [r5, #16]
 800cf5e:	b920      	cbnz	r0, 800cf6a <_svfiprintf_r+0x2e>
 800cf60:	230c      	movs	r3, #12
 800cf62:	603b      	str	r3, [r7, #0]
 800cf64:	f04f 30ff 	mov.w	r0, #4294967295
 800cf68:	e0d1      	b.n	800d10e <_svfiprintf_r+0x1d2>
 800cf6a:	2340      	movs	r3, #64	; 0x40
 800cf6c:	616b      	str	r3, [r5, #20]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	9309      	str	r3, [sp, #36]	; 0x24
 800cf72:	2320      	movs	r3, #32
 800cf74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf78:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf7c:	2330      	movs	r3, #48	; 0x30
 800cf7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d128 <_svfiprintf_r+0x1ec>
 800cf82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf86:	f04f 0901 	mov.w	r9, #1
 800cf8a:	4623      	mov	r3, r4
 800cf8c:	469a      	mov	sl, r3
 800cf8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf92:	b10a      	cbz	r2, 800cf98 <_svfiprintf_r+0x5c>
 800cf94:	2a25      	cmp	r2, #37	; 0x25
 800cf96:	d1f9      	bne.n	800cf8c <_svfiprintf_r+0x50>
 800cf98:	ebba 0b04 	subs.w	fp, sl, r4
 800cf9c:	d00b      	beq.n	800cfb6 <_svfiprintf_r+0x7a>
 800cf9e:	465b      	mov	r3, fp
 800cfa0:	4622      	mov	r2, r4
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f7ff ff6d 	bl	800ce84 <__ssputs_r>
 800cfaa:	3001      	adds	r0, #1
 800cfac:	f000 80aa 	beq.w	800d104 <_svfiprintf_r+0x1c8>
 800cfb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfb2:	445a      	add	r2, fp
 800cfb4:	9209      	str	r2, [sp, #36]	; 0x24
 800cfb6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 80a2 	beq.w	800d104 <_svfiprintf_r+0x1c8>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfca:	f10a 0a01 	add.w	sl, sl, #1
 800cfce:	9304      	str	r3, [sp, #16]
 800cfd0:	9307      	str	r3, [sp, #28]
 800cfd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfd6:	931a      	str	r3, [sp, #104]	; 0x68
 800cfd8:	4654      	mov	r4, sl
 800cfda:	2205      	movs	r2, #5
 800cfdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfe0:	4851      	ldr	r0, [pc, #324]	; (800d128 <_svfiprintf_r+0x1ec>)
 800cfe2:	f7f3 f99d 	bl	8000320 <memchr>
 800cfe6:	9a04      	ldr	r2, [sp, #16]
 800cfe8:	b9d8      	cbnz	r0, 800d022 <_svfiprintf_r+0xe6>
 800cfea:	06d0      	lsls	r0, r2, #27
 800cfec:	bf44      	itt	mi
 800cfee:	2320      	movmi	r3, #32
 800cff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cff4:	0711      	lsls	r1, r2, #28
 800cff6:	bf44      	itt	mi
 800cff8:	232b      	movmi	r3, #43	; 0x2b
 800cffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cffe:	f89a 3000 	ldrb.w	r3, [sl]
 800d002:	2b2a      	cmp	r3, #42	; 0x2a
 800d004:	d015      	beq.n	800d032 <_svfiprintf_r+0xf6>
 800d006:	9a07      	ldr	r2, [sp, #28]
 800d008:	4654      	mov	r4, sl
 800d00a:	2000      	movs	r0, #0
 800d00c:	f04f 0c0a 	mov.w	ip, #10
 800d010:	4621      	mov	r1, r4
 800d012:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d016:	3b30      	subs	r3, #48	; 0x30
 800d018:	2b09      	cmp	r3, #9
 800d01a:	d94e      	bls.n	800d0ba <_svfiprintf_r+0x17e>
 800d01c:	b1b0      	cbz	r0, 800d04c <_svfiprintf_r+0x110>
 800d01e:	9207      	str	r2, [sp, #28]
 800d020:	e014      	b.n	800d04c <_svfiprintf_r+0x110>
 800d022:	eba0 0308 	sub.w	r3, r0, r8
 800d026:	fa09 f303 	lsl.w	r3, r9, r3
 800d02a:	4313      	orrs	r3, r2
 800d02c:	9304      	str	r3, [sp, #16]
 800d02e:	46a2      	mov	sl, r4
 800d030:	e7d2      	b.n	800cfd8 <_svfiprintf_r+0x9c>
 800d032:	9b03      	ldr	r3, [sp, #12]
 800d034:	1d19      	adds	r1, r3, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	9103      	str	r1, [sp, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	bfbb      	ittet	lt
 800d03e:	425b      	neglt	r3, r3
 800d040:	f042 0202 	orrlt.w	r2, r2, #2
 800d044:	9307      	strge	r3, [sp, #28]
 800d046:	9307      	strlt	r3, [sp, #28]
 800d048:	bfb8      	it	lt
 800d04a:	9204      	strlt	r2, [sp, #16]
 800d04c:	7823      	ldrb	r3, [r4, #0]
 800d04e:	2b2e      	cmp	r3, #46	; 0x2e
 800d050:	d10c      	bne.n	800d06c <_svfiprintf_r+0x130>
 800d052:	7863      	ldrb	r3, [r4, #1]
 800d054:	2b2a      	cmp	r3, #42	; 0x2a
 800d056:	d135      	bne.n	800d0c4 <_svfiprintf_r+0x188>
 800d058:	9b03      	ldr	r3, [sp, #12]
 800d05a:	1d1a      	adds	r2, r3, #4
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	9203      	str	r2, [sp, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	bfb8      	it	lt
 800d064:	f04f 33ff 	movlt.w	r3, #4294967295
 800d068:	3402      	adds	r4, #2
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d138 <_svfiprintf_r+0x1fc>
 800d070:	7821      	ldrb	r1, [r4, #0]
 800d072:	2203      	movs	r2, #3
 800d074:	4650      	mov	r0, sl
 800d076:	f7f3 f953 	bl	8000320 <memchr>
 800d07a:	b140      	cbz	r0, 800d08e <_svfiprintf_r+0x152>
 800d07c:	2340      	movs	r3, #64	; 0x40
 800d07e:	eba0 000a 	sub.w	r0, r0, sl
 800d082:	fa03 f000 	lsl.w	r0, r3, r0
 800d086:	9b04      	ldr	r3, [sp, #16]
 800d088:	4303      	orrs	r3, r0
 800d08a:	3401      	adds	r4, #1
 800d08c:	9304      	str	r3, [sp, #16]
 800d08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d092:	4826      	ldr	r0, [pc, #152]	; (800d12c <_svfiprintf_r+0x1f0>)
 800d094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d098:	2206      	movs	r2, #6
 800d09a:	f7f3 f941 	bl	8000320 <memchr>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d038      	beq.n	800d114 <_svfiprintf_r+0x1d8>
 800d0a2:	4b23      	ldr	r3, [pc, #140]	; (800d130 <_svfiprintf_r+0x1f4>)
 800d0a4:	bb1b      	cbnz	r3, 800d0ee <_svfiprintf_r+0x1b2>
 800d0a6:	9b03      	ldr	r3, [sp, #12]
 800d0a8:	3307      	adds	r3, #7
 800d0aa:	f023 0307 	bic.w	r3, r3, #7
 800d0ae:	3308      	adds	r3, #8
 800d0b0:	9303      	str	r3, [sp, #12]
 800d0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b4:	4433      	add	r3, r6
 800d0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b8:	e767      	b.n	800cf8a <_svfiprintf_r+0x4e>
 800d0ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0be:	460c      	mov	r4, r1
 800d0c0:	2001      	movs	r0, #1
 800d0c2:	e7a5      	b.n	800d010 <_svfiprintf_r+0xd4>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	3401      	adds	r4, #1
 800d0c8:	9305      	str	r3, [sp, #20]
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	f04f 0c0a 	mov.w	ip, #10
 800d0d0:	4620      	mov	r0, r4
 800d0d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0d6:	3a30      	subs	r2, #48	; 0x30
 800d0d8:	2a09      	cmp	r2, #9
 800d0da:	d903      	bls.n	800d0e4 <_svfiprintf_r+0x1a8>
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d0c5      	beq.n	800d06c <_svfiprintf_r+0x130>
 800d0e0:	9105      	str	r1, [sp, #20]
 800d0e2:	e7c3      	b.n	800d06c <_svfiprintf_r+0x130>
 800d0e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e7f0      	b.n	800d0d0 <_svfiprintf_r+0x194>
 800d0ee:	ab03      	add	r3, sp, #12
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <_svfiprintf_r+0x1f8>)
 800d0f6:	a904      	add	r1, sp, #16
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7fc fd61 	bl	8009bc0 <_printf_float>
 800d0fe:	1c42      	adds	r2, r0, #1
 800d100:	4606      	mov	r6, r0
 800d102:	d1d6      	bne.n	800d0b2 <_svfiprintf_r+0x176>
 800d104:	89ab      	ldrh	r3, [r5, #12]
 800d106:	065b      	lsls	r3, r3, #25
 800d108:	f53f af2c 	bmi.w	800cf64 <_svfiprintf_r+0x28>
 800d10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d10e:	b01d      	add	sp, #116	; 0x74
 800d110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4b06      	ldr	r3, [pc, #24]	; (800d134 <_svfiprintf_r+0x1f8>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4638      	mov	r0, r7
 800d120:	f7fc ffda 	bl	800a0d8 <_printf_i>
 800d124:	e7eb      	b.n	800d0fe <_svfiprintf_r+0x1c2>
 800d126:	bf00      	nop
 800d128:	0800f614 	.word	0x0800f614
 800d12c:	0800f61e 	.word	0x0800f61e
 800d130:	08009bc1 	.word	0x08009bc1
 800d134:	0800ce85 	.word	0x0800ce85
 800d138:	0800f61a 	.word	0x0800f61a
 800d13c:	00000000 	.word	0x00000000

0800d140 <nan>:
 800d140:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d148 <nan+0x8>
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop
 800d148:	00000000 	.word	0x00000000
 800d14c:	7ff80000 	.word	0x7ff80000

0800d150 <_sbrk_r>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	4d06      	ldr	r5, [pc, #24]	; (800d16c <_sbrk_r+0x1c>)
 800d154:	2300      	movs	r3, #0
 800d156:	4604      	mov	r4, r0
 800d158:	4608      	mov	r0, r1
 800d15a:	602b      	str	r3, [r5, #0]
 800d15c:	f7f5 fc18 	bl	8002990 <_sbrk>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d102      	bne.n	800d16a <_sbrk_r+0x1a>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	b103      	cbz	r3, 800d16a <_sbrk_r+0x1a>
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	2400f744 	.word	0x2400f744

0800d170 <strncmp>:
 800d170:	b510      	push	{r4, lr}
 800d172:	b17a      	cbz	r2, 800d194 <strncmp+0x24>
 800d174:	4603      	mov	r3, r0
 800d176:	3901      	subs	r1, #1
 800d178:	1884      	adds	r4, r0, r2
 800d17a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d17e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d182:	4290      	cmp	r0, r2
 800d184:	d101      	bne.n	800d18a <strncmp+0x1a>
 800d186:	42a3      	cmp	r3, r4
 800d188:	d101      	bne.n	800d18e <strncmp+0x1e>
 800d18a:	1a80      	subs	r0, r0, r2
 800d18c:	bd10      	pop	{r4, pc}
 800d18e:	2800      	cmp	r0, #0
 800d190:	d1f3      	bne.n	800d17a <strncmp+0xa>
 800d192:	e7fa      	b.n	800d18a <strncmp+0x1a>
 800d194:	4610      	mov	r0, r2
 800d196:	e7f9      	b.n	800d18c <strncmp+0x1c>

0800d198 <__ascii_wctomb>:
 800d198:	b149      	cbz	r1, 800d1ae <__ascii_wctomb+0x16>
 800d19a:	2aff      	cmp	r2, #255	; 0xff
 800d19c:	bf85      	ittet	hi
 800d19e:	238a      	movhi	r3, #138	; 0x8a
 800d1a0:	6003      	strhi	r3, [r0, #0]
 800d1a2:	700a      	strbls	r2, [r1, #0]
 800d1a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d1a8:	bf98      	it	ls
 800d1aa:	2001      	movls	r0, #1
 800d1ac:	4770      	bx	lr
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4770      	bx	lr
	...

0800d1b4 <__assert_func>:
 800d1b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d1b6:	4614      	mov	r4, r2
 800d1b8:	461a      	mov	r2, r3
 800d1ba:	4b09      	ldr	r3, [pc, #36]	; (800d1e0 <__assert_func+0x2c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4605      	mov	r5, r0
 800d1c0:	68d8      	ldr	r0, [r3, #12]
 800d1c2:	b14c      	cbz	r4, 800d1d8 <__assert_func+0x24>
 800d1c4:	4b07      	ldr	r3, [pc, #28]	; (800d1e4 <__assert_func+0x30>)
 800d1c6:	9100      	str	r1, [sp, #0]
 800d1c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d1cc:	4906      	ldr	r1, [pc, #24]	; (800d1e8 <__assert_func+0x34>)
 800d1ce:	462b      	mov	r3, r5
 800d1d0:	f000 f80e 	bl	800d1f0 <fiprintf>
 800d1d4:	f000 fa8c 	bl	800d6f0 <abort>
 800d1d8:	4b04      	ldr	r3, [pc, #16]	; (800d1ec <__assert_func+0x38>)
 800d1da:	461c      	mov	r4, r3
 800d1dc:	e7f3      	b.n	800d1c6 <__assert_func+0x12>
 800d1de:	bf00      	nop
 800d1e0:	24000bd4 	.word	0x24000bd4
 800d1e4:	0800f625 	.word	0x0800f625
 800d1e8:	0800f632 	.word	0x0800f632
 800d1ec:	0800f660 	.word	0x0800f660

0800d1f0 <fiprintf>:
 800d1f0:	b40e      	push	{r1, r2, r3}
 800d1f2:	b503      	push	{r0, r1, lr}
 800d1f4:	4601      	mov	r1, r0
 800d1f6:	ab03      	add	r3, sp, #12
 800d1f8:	4805      	ldr	r0, [pc, #20]	; (800d210 <fiprintf+0x20>)
 800d1fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1fe:	6800      	ldr	r0, [r0, #0]
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	f000 f885 	bl	800d310 <_vfiprintf_r>
 800d206:	b002      	add	sp, #8
 800d208:	f85d eb04 	ldr.w	lr, [sp], #4
 800d20c:	b003      	add	sp, #12
 800d20e:	4770      	bx	lr
 800d210:	24000bd4 	.word	0x24000bd4

0800d214 <memmove>:
 800d214:	4288      	cmp	r0, r1
 800d216:	b510      	push	{r4, lr}
 800d218:	eb01 0402 	add.w	r4, r1, r2
 800d21c:	d902      	bls.n	800d224 <memmove+0x10>
 800d21e:	4284      	cmp	r4, r0
 800d220:	4623      	mov	r3, r4
 800d222:	d807      	bhi.n	800d234 <memmove+0x20>
 800d224:	1e43      	subs	r3, r0, #1
 800d226:	42a1      	cmp	r1, r4
 800d228:	d008      	beq.n	800d23c <memmove+0x28>
 800d22a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d22e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d232:	e7f8      	b.n	800d226 <memmove+0x12>
 800d234:	4402      	add	r2, r0
 800d236:	4601      	mov	r1, r0
 800d238:	428a      	cmp	r2, r1
 800d23a:	d100      	bne.n	800d23e <memmove+0x2a>
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d246:	e7f7      	b.n	800d238 <memmove+0x24>

0800d248 <__malloc_lock>:
 800d248:	4801      	ldr	r0, [pc, #4]	; (800d250 <__malloc_lock+0x8>)
 800d24a:	f000 bc11 	b.w	800da70 <__retarget_lock_acquire_recursive>
 800d24e:	bf00      	nop
 800d250:	2400f748 	.word	0x2400f748

0800d254 <__malloc_unlock>:
 800d254:	4801      	ldr	r0, [pc, #4]	; (800d25c <__malloc_unlock+0x8>)
 800d256:	f000 bc0c 	b.w	800da72 <__retarget_lock_release_recursive>
 800d25a:	bf00      	nop
 800d25c:	2400f748 	.word	0x2400f748

0800d260 <_realloc_r>:
 800d260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d264:	4680      	mov	r8, r0
 800d266:	4614      	mov	r4, r2
 800d268:	460e      	mov	r6, r1
 800d26a:	b921      	cbnz	r1, 800d276 <_realloc_r+0x16>
 800d26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	4611      	mov	r1, r2
 800d272:	f7ff bd93 	b.w	800cd9c <_malloc_r>
 800d276:	b92a      	cbnz	r2, 800d284 <_realloc_r+0x24>
 800d278:	f7ff fd24 	bl	800ccc4 <_free_r>
 800d27c:	4625      	mov	r5, r4
 800d27e:	4628      	mov	r0, r5
 800d280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d284:	f000 fc5c 	bl	800db40 <_malloc_usable_size_r>
 800d288:	4284      	cmp	r4, r0
 800d28a:	4607      	mov	r7, r0
 800d28c:	d802      	bhi.n	800d294 <_realloc_r+0x34>
 800d28e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d292:	d812      	bhi.n	800d2ba <_realloc_r+0x5a>
 800d294:	4621      	mov	r1, r4
 800d296:	4640      	mov	r0, r8
 800d298:	f7ff fd80 	bl	800cd9c <_malloc_r>
 800d29c:	4605      	mov	r5, r0
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d0ed      	beq.n	800d27e <_realloc_r+0x1e>
 800d2a2:	42bc      	cmp	r4, r7
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	bf28      	it	cs
 800d2aa:	463a      	movcs	r2, r7
 800d2ac:	f7ff f828 	bl	800c300 <memcpy>
 800d2b0:	4631      	mov	r1, r6
 800d2b2:	4640      	mov	r0, r8
 800d2b4:	f7ff fd06 	bl	800ccc4 <_free_r>
 800d2b8:	e7e1      	b.n	800d27e <_realloc_r+0x1e>
 800d2ba:	4635      	mov	r5, r6
 800d2bc:	e7df      	b.n	800d27e <_realloc_r+0x1e>

0800d2be <__sfputc_r>:
 800d2be:	6893      	ldr	r3, [r2, #8]
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	b410      	push	{r4}
 800d2c6:	6093      	str	r3, [r2, #8]
 800d2c8:	da08      	bge.n	800d2dc <__sfputc_r+0x1e>
 800d2ca:	6994      	ldr	r4, [r2, #24]
 800d2cc:	42a3      	cmp	r3, r4
 800d2ce:	db01      	blt.n	800d2d4 <__sfputc_r+0x16>
 800d2d0:	290a      	cmp	r1, #10
 800d2d2:	d103      	bne.n	800d2dc <__sfputc_r+0x1e>
 800d2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2d8:	f000 b94a 	b.w	800d570 <__swbuf_r>
 800d2dc:	6813      	ldr	r3, [r2, #0]
 800d2de:	1c58      	adds	r0, r3, #1
 800d2e0:	6010      	str	r0, [r2, #0]
 800d2e2:	7019      	strb	r1, [r3, #0]
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <__sfputs_r>:
 800d2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	460f      	mov	r7, r1
 800d2f2:	4614      	mov	r4, r2
 800d2f4:	18d5      	adds	r5, r2, r3
 800d2f6:	42ac      	cmp	r4, r5
 800d2f8:	d101      	bne.n	800d2fe <__sfputs_r+0x12>
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	e007      	b.n	800d30e <__sfputs_r+0x22>
 800d2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d302:	463a      	mov	r2, r7
 800d304:	4630      	mov	r0, r6
 800d306:	f7ff ffda 	bl	800d2be <__sfputc_r>
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	d1f3      	bne.n	800d2f6 <__sfputs_r+0xa>
 800d30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d310 <_vfiprintf_r>:
 800d310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d314:	460d      	mov	r5, r1
 800d316:	b09d      	sub	sp, #116	; 0x74
 800d318:	4614      	mov	r4, r2
 800d31a:	4698      	mov	r8, r3
 800d31c:	4606      	mov	r6, r0
 800d31e:	b118      	cbz	r0, 800d328 <_vfiprintf_r+0x18>
 800d320:	6983      	ldr	r3, [r0, #24]
 800d322:	b90b      	cbnz	r3, 800d328 <_vfiprintf_r+0x18>
 800d324:	f000 fb06 	bl	800d934 <__sinit>
 800d328:	4b89      	ldr	r3, [pc, #548]	; (800d550 <_vfiprintf_r+0x240>)
 800d32a:	429d      	cmp	r5, r3
 800d32c:	d11b      	bne.n	800d366 <_vfiprintf_r+0x56>
 800d32e:	6875      	ldr	r5, [r6, #4]
 800d330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d332:	07d9      	lsls	r1, r3, #31
 800d334:	d405      	bmi.n	800d342 <_vfiprintf_r+0x32>
 800d336:	89ab      	ldrh	r3, [r5, #12]
 800d338:	059a      	lsls	r2, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_vfiprintf_r+0x32>
 800d33c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d33e:	f000 fb97 	bl	800da70 <__retarget_lock_acquire_recursive>
 800d342:	89ab      	ldrh	r3, [r5, #12]
 800d344:	071b      	lsls	r3, r3, #28
 800d346:	d501      	bpl.n	800d34c <_vfiprintf_r+0x3c>
 800d348:	692b      	ldr	r3, [r5, #16]
 800d34a:	b9eb      	cbnz	r3, 800d388 <_vfiprintf_r+0x78>
 800d34c:	4629      	mov	r1, r5
 800d34e:	4630      	mov	r0, r6
 800d350:	f000 f960 	bl	800d614 <__swsetup_r>
 800d354:	b1c0      	cbz	r0, 800d388 <_vfiprintf_r+0x78>
 800d356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d358:	07dc      	lsls	r4, r3, #31
 800d35a:	d50e      	bpl.n	800d37a <_vfiprintf_r+0x6a>
 800d35c:	f04f 30ff 	mov.w	r0, #4294967295
 800d360:	b01d      	add	sp, #116	; 0x74
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	4b7b      	ldr	r3, [pc, #492]	; (800d554 <_vfiprintf_r+0x244>)
 800d368:	429d      	cmp	r5, r3
 800d36a:	d101      	bne.n	800d370 <_vfiprintf_r+0x60>
 800d36c:	68b5      	ldr	r5, [r6, #8]
 800d36e:	e7df      	b.n	800d330 <_vfiprintf_r+0x20>
 800d370:	4b79      	ldr	r3, [pc, #484]	; (800d558 <_vfiprintf_r+0x248>)
 800d372:	429d      	cmp	r5, r3
 800d374:	bf08      	it	eq
 800d376:	68f5      	ldreq	r5, [r6, #12]
 800d378:	e7da      	b.n	800d330 <_vfiprintf_r+0x20>
 800d37a:	89ab      	ldrh	r3, [r5, #12]
 800d37c:	0598      	lsls	r0, r3, #22
 800d37e:	d4ed      	bmi.n	800d35c <_vfiprintf_r+0x4c>
 800d380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d382:	f000 fb76 	bl	800da72 <__retarget_lock_release_recursive>
 800d386:	e7e9      	b.n	800d35c <_vfiprintf_r+0x4c>
 800d388:	2300      	movs	r3, #0
 800d38a:	9309      	str	r3, [sp, #36]	; 0x24
 800d38c:	2320      	movs	r3, #32
 800d38e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d392:	f8cd 800c 	str.w	r8, [sp, #12]
 800d396:	2330      	movs	r3, #48	; 0x30
 800d398:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d55c <_vfiprintf_r+0x24c>
 800d39c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3a0:	f04f 0901 	mov.w	r9, #1
 800d3a4:	4623      	mov	r3, r4
 800d3a6:	469a      	mov	sl, r3
 800d3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ac:	b10a      	cbz	r2, 800d3b2 <_vfiprintf_r+0xa2>
 800d3ae:	2a25      	cmp	r2, #37	; 0x25
 800d3b0:	d1f9      	bne.n	800d3a6 <_vfiprintf_r+0x96>
 800d3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d3b6:	d00b      	beq.n	800d3d0 <_vfiprintf_r+0xc0>
 800d3b8:	465b      	mov	r3, fp
 800d3ba:	4622      	mov	r2, r4
 800d3bc:	4629      	mov	r1, r5
 800d3be:	4630      	mov	r0, r6
 800d3c0:	f7ff ff94 	bl	800d2ec <__sfputs_r>
 800d3c4:	3001      	adds	r0, #1
 800d3c6:	f000 80aa 	beq.w	800d51e <_vfiprintf_r+0x20e>
 800d3ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3cc:	445a      	add	r2, fp
 800d3ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f000 80a2 	beq.w	800d51e <_vfiprintf_r+0x20e>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3e4:	f10a 0a01 	add.w	sl, sl, #1
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	9307      	str	r3, [sp, #28]
 800d3ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d3f2:	4654      	mov	r4, sl
 800d3f4:	2205      	movs	r2, #5
 800d3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fa:	4858      	ldr	r0, [pc, #352]	; (800d55c <_vfiprintf_r+0x24c>)
 800d3fc:	f7f2 ff90 	bl	8000320 <memchr>
 800d400:	9a04      	ldr	r2, [sp, #16]
 800d402:	b9d8      	cbnz	r0, 800d43c <_vfiprintf_r+0x12c>
 800d404:	06d1      	lsls	r1, r2, #27
 800d406:	bf44      	itt	mi
 800d408:	2320      	movmi	r3, #32
 800d40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d40e:	0713      	lsls	r3, r2, #28
 800d410:	bf44      	itt	mi
 800d412:	232b      	movmi	r3, #43	; 0x2b
 800d414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d418:	f89a 3000 	ldrb.w	r3, [sl]
 800d41c:	2b2a      	cmp	r3, #42	; 0x2a
 800d41e:	d015      	beq.n	800d44c <_vfiprintf_r+0x13c>
 800d420:	9a07      	ldr	r2, [sp, #28]
 800d422:	4654      	mov	r4, sl
 800d424:	2000      	movs	r0, #0
 800d426:	f04f 0c0a 	mov.w	ip, #10
 800d42a:	4621      	mov	r1, r4
 800d42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d430:	3b30      	subs	r3, #48	; 0x30
 800d432:	2b09      	cmp	r3, #9
 800d434:	d94e      	bls.n	800d4d4 <_vfiprintf_r+0x1c4>
 800d436:	b1b0      	cbz	r0, 800d466 <_vfiprintf_r+0x156>
 800d438:	9207      	str	r2, [sp, #28]
 800d43a:	e014      	b.n	800d466 <_vfiprintf_r+0x156>
 800d43c:	eba0 0308 	sub.w	r3, r0, r8
 800d440:	fa09 f303 	lsl.w	r3, r9, r3
 800d444:	4313      	orrs	r3, r2
 800d446:	9304      	str	r3, [sp, #16]
 800d448:	46a2      	mov	sl, r4
 800d44a:	e7d2      	b.n	800d3f2 <_vfiprintf_r+0xe2>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	1d19      	adds	r1, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	9103      	str	r1, [sp, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfbb      	ittet	lt
 800d458:	425b      	neglt	r3, r3
 800d45a:	f042 0202 	orrlt.w	r2, r2, #2
 800d45e:	9307      	strge	r3, [sp, #28]
 800d460:	9307      	strlt	r3, [sp, #28]
 800d462:	bfb8      	it	lt
 800d464:	9204      	strlt	r2, [sp, #16]
 800d466:	7823      	ldrb	r3, [r4, #0]
 800d468:	2b2e      	cmp	r3, #46	; 0x2e
 800d46a:	d10c      	bne.n	800d486 <_vfiprintf_r+0x176>
 800d46c:	7863      	ldrb	r3, [r4, #1]
 800d46e:	2b2a      	cmp	r3, #42	; 0x2a
 800d470:	d135      	bne.n	800d4de <_vfiprintf_r+0x1ce>
 800d472:	9b03      	ldr	r3, [sp, #12]
 800d474:	1d1a      	adds	r2, r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	9203      	str	r2, [sp, #12]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	bfb8      	it	lt
 800d47e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d482:	3402      	adds	r4, #2
 800d484:	9305      	str	r3, [sp, #20]
 800d486:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d56c <_vfiprintf_r+0x25c>
 800d48a:	7821      	ldrb	r1, [r4, #0]
 800d48c:	2203      	movs	r2, #3
 800d48e:	4650      	mov	r0, sl
 800d490:	f7f2 ff46 	bl	8000320 <memchr>
 800d494:	b140      	cbz	r0, 800d4a8 <_vfiprintf_r+0x198>
 800d496:	2340      	movs	r3, #64	; 0x40
 800d498:	eba0 000a 	sub.w	r0, r0, sl
 800d49c:	fa03 f000 	lsl.w	r0, r3, r0
 800d4a0:	9b04      	ldr	r3, [sp, #16]
 800d4a2:	4303      	orrs	r3, r0
 800d4a4:	3401      	adds	r4, #1
 800d4a6:	9304      	str	r3, [sp, #16]
 800d4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4ac:	482c      	ldr	r0, [pc, #176]	; (800d560 <_vfiprintf_r+0x250>)
 800d4ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4b2:	2206      	movs	r2, #6
 800d4b4:	f7f2 ff34 	bl	8000320 <memchr>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	d03f      	beq.n	800d53c <_vfiprintf_r+0x22c>
 800d4bc:	4b29      	ldr	r3, [pc, #164]	; (800d564 <_vfiprintf_r+0x254>)
 800d4be:	bb1b      	cbnz	r3, 800d508 <_vfiprintf_r+0x1f8>
 800d4c0:	9b03      	ldr	r3, [sp, #12]
 800d4c2:	3307      	adds	r3, #7
 800d4c4:	f023 0307 	bic.w	r3, r3, #7
 800d4c8:	3308      	adds	r3, #8
 800d4ca:	9303      	str	r3, [sp, #12]
 800d4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ce:	443b      	add	r3, r7
 800d4d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d2:	e767      	b.n	800d3a4 <_vfiprintf_r+0x94>
 800d4d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d8:	460c      	mov	r4, r1
 800d4da:	2001      	movs	r0, #1
 800d4dc:	e7a5      	b.n	800d42a <_vfiprintf_r+0x11a>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	3401      	adds	r4, #1
 800d4e2:	9305      	str	r3, [sp, #20]
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	f04f 0c0a 	mov.w	ip, #10
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4f0:	3a30      	subs	r2, #48	; 0x30
 800d4f2:	2a09      	cmp	r2, #9
 800d4f4:	d903      	bls.n	800d4fe <_vfiprintf_r+0x1ee>
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d0c5      	beq.n	800d486 <_vfiprintf_r+0x176>
 800d4fa:	9105      	str	r1, [sp, #20]
 800d4fc:	e7c3      	b.n	800d486 <_vfiprintf_r+0x176>
 800d4fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800d502:	4604      	mov	r4, r0
 800d504:	2301      	movs	r3, #1
 800d506:	e7f0      	b.n	800d4ea <_vfiprintf_r+0x1da>
 800d508:	ab03      	add	r3, sp, #12
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	462a      	mov	r2, r5
 800d50e:	4b16      	ldr	r3, [pc, #88]	; (800d568 <_vfiprintf_r+0x258>)
 800d510:	a904      	add	r1, sp, #16
 800d512:	4630      	mov	r0, r6
 800d514:	f7fc fb54 	bl	8009bc0 <_printf_float>
 800d518:	4607      	mov	r7, r0
 800d51a:	1c78      	adds	r0, r7, #1
 800d51c:	d1d6      	bne.n	800d4cc <_vfiprintf_r+0x1bc>
 800d51e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d520:	07d9      	lsls	r1, r3, #31
 800d522:	d405      	bmi.n	800d530 <_vfiprintf_r+0x220>
 800d524:	89ab      	ldrh	r3, [r5, #12]
 800d526:	059a      	lsls	r2, r3, #22
 800d528:	d402      	bmi.n	800d530 <_vfiprintf_r+0x220>
 800d52a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d52c:	f000 faa1 	bl	800da72 <__retarget_lock_release_recursive>
 800d530:	89ab      	ldrh	r3, [r5, #12]
 800d532:	065b      	lsls	r3, r3, #25
 800d534:	f53f af12 	bmi.w	800d35c <_vfiprintf_r+0x4c>
 800d538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d53a:	e711      	b.n	800d360 <_vfiprintf_r+0x50>
 800d53c:	ab03      	add	r3, sp, #12
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	462a      	mov	r2, r5
 800d542:	4b09      	ldr	r3, [pc, #36]	; (800d568 <_vfiprintf_r+0x258>)
 800d544:	a904      	add	r1, sp, #16
 800d546:	4630      	mov	r0, r6
 800d548:	f7fc fdc6 	bl	800a0d8 <_printf_i>
 800d54c:	e7e4      	b.n	800d518 <_vfiprintf_r+0x208>
 800d54e:	bf00      	nop
 800d550:	0800f784 	.word	0x0800f784
 800d554:	0800f7a4 	.word	0x0800f7a4
 800d558:	0800f764 	.word	0x0800f764
 800d55c:	0800f614 	.word	0x0800f614
 800d560:	0800f61e 	.word	0x0800f61e
 800d564:	08009bc1 	.word	0x08009bc1
 800d568:	0800d2ed 	.word	0x0800d2ed
 800d56c:	0800f61a 	.word	0x0800f61a

0800d570 <__swbuf_r>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	460e      	mov	r6, r1
 800d574:	4614      	mov	r4, r2
 800d576:	4605      	mov	r5, r0
 800d578:	b118      	cbz	r0, 800d582 <__swbuf_r+0x12>
 800d57a:	6983      	ldr	r3, [r0, #24]
 800d57c:	b90b      	cbnz	r3, 800d582 <__swbuf_r+0x12>
 800d57e:	f000 f9d9 	bl	800d934 <__sinit>
 800d582:	4b21      	ldr	r3, [pc, #132]	; (800d608 <__swbuf_r+0x98>)
 800d584:	429c      	cmp	r4, r3
 800d586:	d12b      	bne.n	800d5e0 <__swbuf_r+0x70>
 800d588:	686c      	ldr	r4, [r5, #4]
 800d58a:	69a3      	ldr	r3, [r4, #24]
 800d58c:	60a3      	str	r3, [r4, #8]
 800d58e:	89a3      	ldrh	r3, [r4, #12]
 800d590:	071a      	lsls	r2, r3, #28
 800d592:	d52f      	bpl.n	800d5f4 <__swbuf_r+0x84>
 800d594:	6923      	ldr	r3, [r4, #16]
 800d596:	b36b      	cbz	r3, 800d5f4 <__swbuf_r+0x84>
 800d598:	6923      	ldr	r3, [r4, #16]
 800d59a:	6820      	ldr	r0, [r4, #0]
 800d59c:	1ac0      	subs	r0, r0, r3
 800d59e:	6963      	ldr	r3, [r4, #20]
 800d5a0:	b2f6      	uxtb	r6, r6
 800d5a2:	4283      	cmp	r3, r0
 800d5a4:	4637      	mov	r7, r6
 800d5a6:	dc04      	bgt.n	800d5b2 <__swbuf_r+0x42>
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	4628      	mov	r0, r5
 800d5ac:	f000 f92e 	bl	800d80c <_fflush_r>
 800d5b0:	bb30      	cbnz	r0, 800d600 <__swbuf_r+0x90>
 800d5b2:	68a3      	ldr	r3, [r4, #8]
 800d5b4:	3b01      	subs	r3, #1
 800d5b6:	60a3      	str	r3, [r4, #8]
 800d5b8:	6823      	ldr	r3, [r4, #0]
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	6022      	str	r2, [r4, #0]
 800d5be:	701e      	strb	r6, [r3, #0]
 800d5c0:	6963      	ldr	r3, [r4, #20]
 800d5c2:	3001      	adds	r0, #1
 800d5c4:	4283      	cmp	r3, r0
 800d5c6:	d004      	beq.n	800d5d2 <__swbuf_r+0x62>
 800d5c8:	89a3      	ldrh	r3, [r4, #12]
 800d5ca:	07db      	lsls	r3, r3, #31
 800d5cc:	d506      	bpl.n	800d5dc <__swbuf_r+0x6c>
 800d5ce:	2e0a      	cmp	r6, #10
 800d5d0:	d104      	bne.n	800d5dc <__swbuf_r+0x6c>
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f000 f919 	bl	800d80c <_fflush_r>
 800d5da:	b988      	cbnz	r0, 800d600 <__swbuf_r+0x90>
 800d5dc:	4638      	mov	r0, r7
 800d5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5e0:	4b0a      	ldr	r3, [pc, #40]	; (800d60c <__swbuf_r+0x9c>)
 800d5e2:	429c      	cmp	r4, r3
 800d5e4:	d101      	bne.n	800d5ea <__swbuf_r+0x7a>
 800d5e6:	68ac      	ldr	r4, [r5, #8]
 800d5e8:	e7cf      	b.n	800d58a <__swbuf_r+0x1a>
 800d5ea:	4b09      	ldr	r3, [pc, #36]	; (800d610 <__swbuf_r+0xa0>)
 800d5ec:	429c      	cmp	r4, r3
 800d5ee:	bf08      	it	eq
 800d5f0:	68ec      	ldreq	r4, [r5, #12]
 800d5f2:	e7ca      	b.n	800d58a <__swbuf_r+0x1a>
 800d5f4:	4621      	mov	r1, r4
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 f80c 	bl	800d614 <__swsetup_r>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d0cb      	beq.n	800d598 <__swbuf_r+0x28>
 800d600:	f04f 37ff 	mov.w	r7, #4294967295
 800d604:	e7ea      	b.n	800d5dc <__swbuf_r+0x6c>
 800d606:	bf00      	nop
 800d608:	0800f784 	.word	0x0800f784
 800d60c:	0800f7a4 	.word	0x0800f7a4
 800d610:	0800f764 	.word	0x0800f764

0800d614 <__swsetup_r>:
 800d614:	4b32      	ldr	r3, [pc, #200]	; (800d6e0 <__swsetup_r+0xcc>)
 800d616:	b570      	push	{r4, r5, r6, lr}
 800d618:	681d      	ldr	r5, [r3, #0]
 800d61a:	4606      	mov	r6, r0
 800d61c:	460c      	mov	r4, r1
 800d61e:	b125      	cbz	r5, 800d62a <__swsetup_r+0x16>
 800d620:	69ab      	ldr	r3, [r5, #24]
 800d622:	b913      	cbnz	r3, 800d62a <__swsetup_r+0x16>
 800d624:	4628      	mov	r0, r5
 800d626:	f000 f985 	bl	800d934 <__sinit>
 800d62a:	4b2e      	ldr	r3, [pc, #184]	; (800d6e4 <__swsetup_r+0xd0>)
 800d62c:	429c      	cmp	r4, r3
 800d62e:	d10f      	bne.n	800d650 <__swsetup_r+0x3c>
 800d630:	686c      	ldr	r4, [r5, #4]
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d638:	0719      	lsls	r1, r3, #28
 800d63a:	d42c      	bmi.n	800d696 <__swsetup_r+0x82>
 800d63c:	06dd      	lsls	r5, r3, #27
 800d63e:	d411      	bmi.n	800d664 <__swsetup_r+0x50>
 800d640:	2309      	movs	r3, #9
 800d642:	6033      	str	r3, [r6, #0]
 800d644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d648:	81a3      	strh	r3, [r4, #12]
 800d64a:	f04f 30ff 	mov.w	r0, #4294967295
 800d64e:	e03e      	b.n	800d6ce <__swsetup_r+0xba>
 800d650:	4b25      	ldr	r3, [pc, #148]	; (800d6e8 <__swsetup_r+0xd4>)
 800d652:	429c      	cmp	r4, r3
 800d654:	d101      	bne.n	800d65a <__swsetup_r+0x46>
 800d656:	68ac      	ldr	r4, [r5, #8]
 800d658:	e7eb      	b.n	800d632 <__swsetup_r+0x1e>
 800d65a:	4b24      	ldr	r3, [pc, #144]	; (800d6ec <__swsetup_r+0xd8>)
 800d65c:	429c      	cmp	r4, r3
 800d65e:	bf08      	it	eq
 800d660:	68ec      	ldreq	r4, [r5, #12]
 800d662:	e7e6      	b.n	800d632 <__swsetup_r+0x1e>
 800d664:	0758      	lsls	r0, r3, #29
 800d666:	d512      	bpl.n	800d68e <__swsetup_r+0x7a>
 800d668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d66a:	b141      	cbz	r1, 800d67e <__swsetup_r+0x6a>
 800d66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d670:	4299      	cmp	r1, r3
 800d672:	d002      	beq.n	800d67a <__swsetup_r+0x66>
 800d674:	4630      	mov	r0, r6
 800d676:	f7ff fb25 	bl	800ccc4 <_free_r>
 800d67a:	2300      	movs	r3, #0
 800d67c:	6363      	str	r3, [r4, #52]	; 0x34
 800d67e:	89a3      	ldrh	r3, [r4, #12]
 800d680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d684:	81a3      	strh	r3, [r4, #12]
 800d686:	2300      	movs	r3, #0
 800d688:	6063      	str	r3, [r4, #4]
 800d68a:	6923      	ldr	r3, [r4, #16]
 800d68c:	6023      	str	r3, [r4, #0]
 800d68e:	89a3      	ldrh	r3, [r4, #12]
 800d690:	f043 0308 	orr.w	r3, r3, #8
 800d694:	81a3      	strh	r3, [r4, #12]
 800d696:	6923      	ldr	r3, [r4, #16]
 800d698:	b94b      	cbnz	r3, 800d6ae <__swsetup_r+0x9a>
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d6a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6a4:	d003      	beq.n	800d6ae <__swsetup_r+0x9a>
 800d6a6:	4621      	mov	r1, r4
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f000 fa09 	bl	800dac0 <__smakebuf_r>
 800d6ae:	89a0      	ldrh	r0, [r4, #12]
 800d6b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6b4:	f010 0301 	ands.w	r3, r0, #1
 800d6b8:	d00a      	beq.n	800d6d0 <__swsetup_r+0xbc>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	60a3      	str	r3, [r4, #8]
 800d6be:	6963      	ldr	r3, [r4, #20]
 800d6c0:	425b      	negs	r3, r3
 800d6c2:	61a3      	str	r3, [r4, #24]
 800d6c4:	6923      	ldr	r3, [r4, #16]
 800d6c6:	b943      	cbnz	r3, 800d6da <__swsetup_r+0xc6>
 800d6c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d6cc:	d1ba      	bne.n	800d644 <__swsetup_r+0x30>
 800d6ce:	bd70      	pop	{r4, r5, r6, pc}
 800d6d0:	0781      	lsls	r1, r0, #30
 800d6d2:	bf58      	it	pl
 800d6d4:	6963      	ldrpl	r3, [r4, #20]
 800d6d6:	60a3      	str	r3, [r4, #8]
 800d6d8:	e7f4      	b.n	800d6c4 <__swsetup_r+0xb0>
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e7f7      	b.n	800d6ce <__swsetup_r+0xba>
 800d6de:	bf00      	nop
 800d6e0:	24000bd4 	.word	0x24000bd4
 800d6e4:	0800f784 	.word	0x0800f784
 800d6e8:	0800f7a4 	.word	0x0800f7a4
 800d6ec:	0800f764 	.word	0x0800f764

0800d6f0 <abort>:
 800d6f0:	b508      	push	{r3, lr}
 800d6f2:	2006      	movs	r0, #6
 800d6f4:	f000 fa54 	bl	800dba0 <raise>
 800d6f8:	2001      	movs	r0, #1
 800d6fa:	f7f5 f8d1 	bl	80028a0 <_exit>
	...

0800d700 <__sflush_r>:
 800d700:	898a      	ldrh	r2, [r1, #12]
 800d702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d706:	4605      	mov	r5, r0
 800d708:	0710      	lsls	r0, r2, #28
 800d70a:	460c      	mov	r4, r1
 800d70c:	d458      	bmi.n	800d7c0 <__sflush_r+0xc0>
 800d70e:	684b      	ldr	r3, [r1, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	dc05      	bgt.n	800d720 <__sflush_r+0x20>
 800d714:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	dc02      	bgt.n	800d720 <__sflush_r+0x20>
 800d71a:	2000      	movs	r0, #0
 800d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d722:	2e00      	cmp	r6, #0
 800d724:	d0f9      	beq.n	800d71a <__sflush_r+0x1a>
 800d726:	2300      	movs	r3, #0
 800d728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d72c:	682f      	ldr	r7, [r5, #0]
 800d72e:	602b      	str	r3, [r5, #0]
 800d730:	d032      	beq.n	800d798 <__sflush_r+0x98>
 800d732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	075a      	lsls	r2, r3, #29
 800d738:	d505      	bpl.n	800d746 <__sflush_r+0x46>
 800d73a:	6863      	ldr	r3, [r4, #4]
 800d73c:	1ac0      	subs	r0, r0, r3
 800d73e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d740:	b10b      	cbz	r3, 800d746 <__sflush_r+0x46>
 800d742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d744:	1ac0      	subs	r0, r0, r3
 800d746:	2300      	movs	r3, #0
 800d748:	4602      	mov	r2, r0
 800d74a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d74c:	6a21      	ldr	r1, [r4, #32]
 800d74e:	4628      	mov	r0, r5
 800d750:	47b0      	blx	r6
 800d752:	1c43      	adds	r3, r0, #1
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	d106      	bne.n	800d766 <__sflush_r+0x66>
 800d758:	6829      	ldr	r1, [r5, #0]
 800d75a:	291d      	cmp	r1, #29
 800d75c:	d82c      	bhi.n	800d7b8 <__sflush_r+0xb8>
 800d75e:	4a2a      	ldr	r2, [pc, #168]	; (800d808 <__sflush_r+0x108>)
 800d760:	40ca      	lsrs	r2, r1
 800d762:	07d6      	lsls	r6, r2, #31
 800d764:	d528      	bpl.n	800d7b8 <__sflush_r+0xb8>
 800d766:	2200      	movs	r2, #0
 800d768:	6062      	str	r2, [r4, #4]
 800d76a:	04d9      	lsls	r1, r3, #19
 800d76c:	6922      	ldr	r2, [r4, #16]
 800d76e:	6022      	str	r2, [r4, #0]
 800d770:	d504      	bpl.n	800d77c <__sflush_r+0x7c>
 800d772:	1c42      	adds	r2, r0, #1
 800d774:	d101      	bne.n	800d77a <__sflush_r+0x7a>
 800d776:	682b      	ldr	r3, [r5, #0]
 800d778:	b903      	cbnz	r3, 800d77c <__sflush_r+0x7c>
 800d77a:	6560      	str	r0, [r4, #84]	; 0x54
 800d77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d77e:	602f      	str	r7, [r5, #0]
 800d780:	2900      	cmp	r1, #0
 800d782:	d0ca      	beq.n	800d71a <__sflush_r+0x1a>
 800d784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d788:	4299      	cmp	r1, r3
 800d78a:	d002      	beq.n	800d792 <__sflush_r+0x92>
 800d78c:	4628      	mov	r0, r5
 800d78e:	f7ff fa99 	bl	800ccc4 <_free_r>
 800d792:	2000      	movs	r0, #0
 800d794:	6360      	str	r0, [r4, #52]	; 0x34
 800d796:	e7c1      	b.n	800d71c <__sflush_r+0x1c>
 800d798:	6a21      	ldr	r1, [r4, #32]
 800d79a:	2301      	movs	r3, #1
 800d79c:	4628      	mov	r0, r5
 800d79e:	47b0      	blx	r6
 800d7a0:	1c41      	adds	r1, r0, #1
 800d7a2:	d1c7      	bne.n	800d734 <__sflush_r+0x34>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d0c4      	beq.n	800d734 <__sflush_r+0x34>
 800d7aa:	2b1d      	cmp	r3, #29
 800d7ac:	d001      	beq.n	800d7b2 <__sflush_r+0xb2>
 800d7ae:	2b16      	cmp	r3, #22
 800d7b0:	d101      	bne.n	800d7b6 <__sflush_r+0xb6>
 800d7b2:	602f      	str	r7, [r5, #0]
 800d7b4:	e7b1      	b.n	800d71a <__sflush_r+0x1a>
 800d7b6:	89a3      	ldrh	r3, [r4, #12]
 800d7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7bc:	81a3      	strh	r3, [r4, #12]
 800d7be:	e7ad      	b.n	800d71c <__sflush_r+0x1c>
 800d7c0:	690f      	ldr	r7, [r1, #16]
 800d7c2:	2f00      	cmp	r7, #0
 800d7c4:	d0a9      	beq.n	800d71a <__sflush_r+0x1a>
 800d7c6:	0793      	lsls	r3, r2, #30
 800d7c8:	680e      	ldr	r6, [r1, #0]
 800d7ca:	bf08      	it	eq
 800d7cc:	694b      	ldreq	r3, [r1, #20]
 800d7ce:	600f      	str	r7, [r1, #0]
 800d7d0:	bf18      	it	ne
 800d7d2:	2300      	movne	r3, #0
 800d7d4:	eba6 0807 	sub.w	r8, r6, r7
 800d7d8:	608b      	str	r3, [r1, #8]
 800d7da:	f1b8 0f00 	cmp.w	r8, #0
 800d7de:	dd9c      	ble.n	800d71a <__sflush_r+0x1a>
 800d7e0:	6a21      	ldr	r1, [r4, #32]
 800d7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7e4:	4643      	mov	r3, r8
 800d7e6:	463a      	mov	r2, r7
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	47b0      	blx	r6
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	dc06      	bgt.n	800d7fe <__sflush_r+0xfe>
 800d7f0:	89a3      	ldrh	r3, [r4, #12]
 800d7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f6:	81a3      	strh	r3, [r4, #12]
 800d7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fc:	e78e      	b.n	800d71c <__sflush_r+0x1c>
 800d7fe:	4407      	add	r7, r0
 800d800:	eba8 0800 	sub.w	r8, r8, r0
 800d804:	e7e9      	b.n	800d7da <__sflush_r+0xda>
 800d806:	bf00      	nop
 800d808:	20400001 	.word	0x20400001

0800d80c <_fflush_r>:
 800d80c:	b538      	push	{r3, r4, r5, lr}
 800d80e:	690b      	ldr	r3, [r1, #16]
 800d810:	4605      	mov	r5, r0
 800d812:	460c      	mov	r4, r1
 800d814:	b913      	cbnz	r3, 800d81c <_fflush_r+0x10>
 800d816:	2500      	movs	r5, #0
 800d818:	4628      	mov	r0, r5
 800d81a:	bd38      	pop	{r3, r4, r5, pc}
 800d81c:	b118      	cbz	r0, 800d826 <_fflush_r+0x1a>
 800d81e:	6983      	ldr	r3, [r0, #24]
 800d820:	b90b      	cbnz	r3, 800d826 <_fflush_r+0x1a>
 800d822:	f000 f887 	bl	800d934 <__sinit>
 800d826:	4b14      	ldr	r3, [pc, #80]	; (800d878 <_fflush_r+0x6c>)
 800d828:	429c      	cmp	r4, r3
 800d82a:	d11b      	bne.n	800d864 <_fflush_r+0x58>
 800d82c:	686c      	ldr	r4, [r5, #4]
 800d82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d0ef      	beq.n	800d816 <_fflush_r+0xa>
 800d836:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d838:	07d0      	lsls	r0, r2, #31
 800d83a:	d404      	bmi.n	800d846 <_fflush_r+0x3a>
 800d83c:	0599      	lsls	r1, r3, #22
 800d83e:	d402      	bmi.n	800d846 <_fflush_r+0x3a>
 800d840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d842:	f000 f915 	bl	800da70 <__retarget_lock_acquire_recursive>
 800d846:	4628      	mov	r0, r5
 800d848:	4621      	mov	r1, r4
 800d84a:	f7ff ff59 	bl	800d700 <__sflush_r>
 800d84e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d850:	07da      	lsls	r2, r3, #31
 800d852:	4605      	mov	r5, r0
 800d854:	d4e0      	bmi.n	800d818 <_fflush_r+0xc>
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	059b      	lsls	r3, r3, #22
 800d85a:	d4dd      	bmi.n	800d818 <_fflush_r+0xc>
 800d85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d85e:	f000 f908 	bl	800da72 <__retarget_lock_release_recursive>
 800d862:	e7d9      	b.n	800d818 <_fflush_r+0xc>
 800d864:	4b05      	ldr	r3, [pc, #20]	; (800d87c <_fflush_r+0x70>)
 800d866:	429c      	cmp	r4, r3
 800d868:	d101      	bne.n	800d86e <_fflush_r+0x62>
 800d86a:	68ac      	ldr	r4, [r5, #8]
 800d86c:	e7df      	b.n	800d82e <_fflush_r+0x22>
 800d86e:	4b04      	ldr	r3, [pc, #16]	; (800d880 <_fflush_r+0x74>)
 800d870:	429c      	cmp	r4, r3
 800d872:	bf08      	it	eq
 800d874:	68ec      	ldreq	r4, [r5, #12]
 800d876:	e7da      	b.n	800d82e <_fflush_r+0x22>
 800d878:	0800f784 	.word	0x0800f784
 800d87c:	0800f7a4 	.word	0x0800f7a4
 800d880:	0800f764 	.word	0x0800f764

0800d884 <std>:
 800d884:	2300      	movs	r3, #0
 800d886:	b510      	push	{r4, lr}
 800d888:	4604      	mov	r4, r0
 800d88a:	e9c0 3300 	strd	r3, r3, [r0]
 800d88e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d892:	6083      	str	r3, [r0, #8]
 800d894:	8181      	strh	r1, [r0, #12]
 800d896:	6643      	str	r3, [r0, #100]	; 0x64
 800d898:	81c2      	strh	r2, [r0, #14]
 800d89a:	6183      	str	r3, [r0, #24]
 800d89c:	4619      	mov	r1, r3
 800d89e:	2208      	movs	r2, #8
 800d8a0:	305c      	adds	r0, #92	; 0x5c
 800d8a2:	f7fc f8f3 	bl	8009a8c <memset>
 800d8a6:	4b05      	ldr	r3, [pc, #20]	; (800d8bc <std+0x38>)
 800d8a8:	6263      	str	r3, [r4, #36]	; 0x24
 800d8aa:	4b05      	ldr	r3, [pc, #20]	; (800d8c0 <std+0x3c>)
 800d8ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800d8ae:	4b05      	ldr	r3, [pc, #20]	; (800d8c4 <std+0x40>)
 800d8b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d8b2:	4b05      	ldr	r3, [pc, #20]	; (800d8c8 <std+0x44>)
 800d8b4:	6224      	str	r4, [r4, #32]
 800d8b6:	6323      	str	r3, [r4, #48]	; 0x30
 800d8b8:	bd10      	pop	{r4, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0800dbd9 	.word	0x0800dbd9
 800d8c0:	0800dbfb 	.word	0x0800dbfb
 800d8c4:	0800dc33 	.word	0x0800dc33
 800d8c8:	0800dc57 	.word	0x0800dc57

0800d8cc <_cleanup_r>:
 800d8cc:	4901      	ldr	r1, [pc, #4]	; (800d8d4 <_cleanup_r+0x8>)
 800d8ce:	f000 b8af 	b.w	800da30 <_fwalk_reent>
 800d8d2:	bf00      	nop
 800d8d4:	0800d80d 	.word	0x0800d80d

0800d8d8 <__sfmoreglue>:
 800d8d8:	b570      	push	{r4, r5, r6, lr}
 800d8da:	2268      	movs	r2, #104	; 0x68
 800d8dc:	1e4d      	subs	r5, r1, #1
 800d8de:	4355      	muls	r5, r2
 800d8e0:	460e      	mov	r6, r1
 800d8e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d8e6:	f7ff fa59 	bl	800cd9c <_malloc_r>
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	b140      	cbz	r0, 800d900 <__sfmoreglue+0x28>
 800d8ee:	2100      	movs	r1, #0
 800d8f0:	e9c0 1600 	strd	r1, r6, [r0]
 800d8f4:	300c      	adds	r0, #12
 800d8f6:	60a0      	str	r0, [r4, #8]
 800d8f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d8fc:	f7fc f8c6 	bl	8009a8c <memset>
 800d900:	4620      	mov	r0, r4
 800d902:	bd70      	pop	{r4, r5, r6, pc}

0800d904 <__sfp_lock_acquire>:
 800d904:	4801      	ldr	r0, [pc, #4]	; (800d90c <__sfp_lock_acquire+0x8>)
 800d906:	f000 b8b3 	b.w	800da70 <__retarget_lock_acquire_recursive>
 800d90a:	bf00      	nop
 800d90c:	2400f749 	.word	0x2400f749

0800d910 <__sfp_lock_release>:
 800d910:	4801      	ldr	r0, [pc, #4]	; (800d918 <__sfp_lock_release+0x8>)
 800d912:	f000 b8ae 	b.w	800da72 <__retarget_lock_release_recursive>
 800d916:	bf00      	nop
 800d918:	2400f749 	.word	0x2400f749

0800d91c <__sinit_lock_acquire>:
 800d91c:	4801      	ldr	r0, [pc, #4]	; (800d924 <__sinit_lock_acquire+0x8>)
 800d91e:	f000 b8a7 	b.w	800da70 <__retarget_lock_acquire_recursive>
 800d922:	bf00      	nop
 800d924:	2400f74a 	.word	0x2400f74a

0800d928 <__sinit_lock_release>:
 800d928:	4801      	ldr	r0, [pc, #4]	; (800d930 <__sinit_lock_release+0x8>)
 800d92a:	f000 b8a2 	b.w	800da72 <__retarget_lock_release_recursive>
 800d92e:	bf00      	nop
 800d930:	2400f74a 	.word	0x2400f74a

0800d934 <__sinit>:
 800d934:	b510      	push	{r4, lr}
 800d936:	4604      	mov	r4, r0
 800d938:	f7ff fff0 	bl	800d91c <__sinit_lock_acquire>
 800d93c:	69a3      	ldr	r3, [r4, #24]
 800d93e:	b11b      	cbz	r3, 800d948 <__sinit+0x14>
 800d940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d944:	f7ff bff0 	b.w	800d928 <__sinit_lock_release>
 800d948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d94c:	6523      	str	r3, [r4, #80]	; 0x50
 800d94e:	4b13      	ldr	r3, [pc, #76]	; (800d99c <__sinit+0x68>)
 800d950:	4a13      	ldr	r2, [pc, #76]	; (800d9a0 <__sinit+0x6c>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	62a2      	str	r2, [r4, #40]	; 0x28
 800d956:	42a3      	cmp	r3, r4
 800d958:	bf04      	itt	eq
 800d95a:	2301      	moveq	r3, #1
 800d95c:	61a3      	streq	r3, [r4, #24]
 800d95e:	4620      	mov	r0, r4
 800d960:	f000 f820 	bl	800d9a4 <__sfp>
 800d964:	6060      	str	r0, [r4, #4]
 800d966:	4620      	mov	r0, r4
 800d968:	f000 f81c 	bl	800d9a4 <__sfp>
 800d96c:	60a0      	str	r0, [r4, #8]
 800d96e:	4620      	mov	r0, r4
 800d970:	f000 f818 	bl	800d9a4 <__sfp>
 800d974:	2200      	movs	r2, #0
 800d976:	60e0      	str	r0, [r4, #12]
 800d978:	2104      	movs	r1, #4
 800d97a:	6860      	ldr	r0, [r4, #4]
 800d97c:	f7ff ff82 	bl	800d884 <std>
 800d980:	68a0      	ldr	r0, [r4, #8]
 800d982:	2201      	movs	r2, #1
 800d984:	2109      	movs	r1, #9
 800d986:	f7ff ff7d 	bl	800d884 <std>
 800d98a:	68e0      	ldr	r0, [r4, #12]
 800d98c:	2202      	movs	r2, #2
 800d98e:	2112      	movs	r1, #18
 800d990:	f7ff ff78 	bl	800d884 <std>
 800d994:	2301      	movs	r3, #1
 800d996:	61a3      	str	r3, [r4, #24]
 800d998:	e7d2      	b.n	800d940 <__sinit+0xc>
 800d99a:	bf00      	nop
 800d99c:	0800f300 	.word	0x0800f300
 800d9a0:	0800d8cd 	.word	0x0800d8cd

0800d9a4 <__sfp>:
 800d9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a6:	4607      	mov	r7, r0
 800d9a8:	f7ff ffac 	bl	800d904 <__sfp_lock_acquire>
 800d9ac:	4b1e      	ldr	r3, [pc, #120]	; (800da28 <__sfp+0x84>)
 800d9ae:	681e      	ldr	r6, [r3, #0]
 800d9b0:	69b3      	ldr	r3, [r6, #24]
 800d9b2:	b913      	cbnz	r3, 800d9ba <__sfp+0x16>
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f7ff ffbd 	bl	800d934 <__sinit>
 800d9ba:	3648      	adds	r6, #72	; 0x48
 800d9bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d9c0:	3b01      	subs	r3, #1
 800d9c2:	d503      	bpl.n	800d9cc <__sfp+0x28>
 800d9c4:	6833      	ldr	r3, [r6, #0]
 800d9c6:	b30b      	cbz	r3, 800da0c <__sfp+0x68>
 800d9c8:	6836      	ldr	r6, [r6, #0]
 800d9ca:	e7f7      	b.n	800d9bc <__sfp+0x18>
 800d9cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d9d0:	b9d5      	cbnz	r5, 800da08 <__sfp+0x64>
 800d9d2:	4b16      	ldr	r3, [pc, #88]	; (800da2c <__sfp+0x88>)
 800d9d4:	60e3      	str	r3, [r4, #12]
 800d9d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d9da:	6665      	str	r5, [r4, #100]	; 0x64
 800d9dc:	f000 f847 	bl	800da6e <__retarget_lock_init_recursive>
 800d9e0:	f7ff ff96 	bl	800d910 <__sfp_lock_release>
 800d9e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d9e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d9ec:	6025      	str	r5, [r4, #0]
 800d9ee:	61a5      	str	r5, [r4, #24]
 800d9f0:	2208      	movs	r2, #8
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d9f8:	f7fc f848 	bl	8009a8c <memset>
 800d9fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800da00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800da04:	4620      	mov	r0, r4
 800da06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da08:	3468      	adds	r4, #104	; 0x68
 800da0a:	e7d9      	b.n	800d9c0 <__sfp+0x1c>
 800da0c:	2104      	movs	r1, #4
 800da0e:	4638      	mov	r0, r7
 800da10:	f7ff ff62 	bl	800d8d8 <__sfmoreglue>
 800da14:	4604      	mov	r4, r0
 800da16:	6030      	str	r0, [r6, #0]
 800da18:	2800      	cmp	r0, #0
 800da1a:	d1d5      	bne.n	800d9c8 <__sfp+0x24>
 800da1c:	f7ff ff78 	bl	800d910 <__sfp_lock_release>
 800da20:	230c      	movs	r3, #12
 800da22:	603b      	str	r3, [r7, #0]
 800da24:	e7ee      	b.n	800da04 <__sfp+0x60>
 800da26:	bf00      	nop
 800da28:	0800f300 	.word	0x0800f300
 800da2c:	ffff0001 	.word	0xffff0001

0800da30 <_fwalk_reent>:
 800da30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da34:	4606      	mov	r6, r0
 800da36:	4688      	mov	r8, r1
 800da38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800da3c:	2700      	movs	r7, #0
 800da3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da42:	f1b9 0901 	subs.w	r9, r9, #1
 800da46:	d505      	bpl.n	800da54 <_fwalk_reent+0x24>
 800da48:	6824      	ldr	r4, [r4, #0]
 800da4a:	2c00      	cmp	r4, #0
 800da4c:	d1f7      	bne.n	800da3e <_fwalk_reent+0xe>
 800da4e:	4638      	mov	r0, r7
 800da50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da54:	89ab      	ldrh	r3, [r5, #12]
 800da56:	2b01      	cmp	r3, #1
 800da58:	d907      	bls.n	800da6a <_fwalk_reent+0x3a>
 800da5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da5e:	3301      	adds	r3, #1
 800da60:	d003      	beq.n	800da6a <_fwalk_reent+0x3a>
 800da62:	4629      	mov	r1, r5
 800da64:	4630      	mov	r0, r6
 800da66:	47c0      	blx	r8
 800da68:	4307      	orrs	r7, r0
 800da6a:	3568      	adds	r5, #104	; 0x68
 800da6c:	e7e9      	b.n	800da42 <_fwalk_reent+0x12>

0800da6e <__retarget_lock_init_recursive>:
 800da6e:	4770      	bx	lr

0800da70 <__retarget_lock_acquire_recursive>:
 800da70:	4770      	bx	lr

0800da72 <__retarget_lock_release_recursive>:
 800da72:	4770      	bx	lr

0800da74 <__swhatbuf_r>:
 800da74:	b570      	push	{r4, r5, r6, lr}
 800da76:	460e      	mov	r6, r1
 800da78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da7c:	2900      	cmp	r1, #0
 800da7e:	b096      	sub	sp, #88	; 0x58
 800da80:	4614      	mov	r4, r2
 800da82:	461d      	mov	r5, r3
 800da84:	da08      	bge.n	800da98 <__swhatbuf_r+0x24>
 800da86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da8a:	2200      	movs	r2, #0
 800da8c:	602a      	str	r2, [r5, #0]
 800da8e:	061a      	lsls	r2, r3, #24
 800da90:	d410      	bmi.n	800dab4 <__swhatbuf_r+0x40>
 800da92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da96:	e00e      	b.n	800dab6 <__swhatbuf_r+0x42>
 800da98:	466a      	mov	r2, sp
 800da9a:	f000 f903 	bl	800dca4 <_fstat_r>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	dbf1      	blt.n	800da86 <__swhatbuf_r+0x12>
 800daa2:	9a01      	ldr	r2, [sp, #4]
 800daa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800daa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800daac:	425a      	negs	r2, r3
 800daae:	415a      	adcs	r2, r3
 800dab0:	602a      	str	r2, [r5, #0]
 800dab2:	e7ee      	b.n	800da92 <__swhatbuf_r+0x1e>
 800dab4:	2340      	movs	r3, #64	; 0x40
 800dab6:	2000      	movs	r0, #0
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	b016      	add	sp, #88	; 0x58
 800dabc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dac0 <__smakebuf_r>:
 800dac0:	898b      	ldrh	r3, [r1, #12]
 800dac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dac4:	079d      	lsls	r5, r3, #30
 800dac6:	4606      	mov	r6, r0
 800dac8:	460c      	mov	r4, r1
 800daca:	d507      	bpl.n	800dadc <__smakebuf_r+0x1c>
 800dacc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dad0:	6023      	str	r3, [r4, #0]
 800dad2:	6123      	str	r3, [r4, #16]
 800dad4:	2301      	movs	r3, #1
 800dad6:	6163      	str	r3, [r4, #20]
 800dad8:	b002      	add	sp, #8
 800dada:	bd70      	pop	{r4, r5, r6, pc}
 800dadc:	ab01      	add	r3, sp, #4
 800dade:	466a      	mov	r2, sp
 800dae0:	f7ff ffc8 	bl	800da74 <__swhatbuf_r>
 800dae4:	9900      	ldr	r1, [sp, #0]
 800dae6:	4605      	mov	r5, r0
 800dae8:	4630      	mov	r0, r6
 800daea:	f7ff f957 	bl	800cd9c <_malloc_r>
 800daee:	b948      	cbnz	r0, 800db04 <__smakebuf_r+0x44>
 800daf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daf4:	059a      	lsls	r2, r3, #22
 800daf6:	d4ef      	bmi.n	800dad8 <__smakebuf_r+0x18>
 800daf8:	f023 0303 	bic.w	r3, r3, #3
 800dafc:	f043 0302 	orr.w	r3, r3, #2
 800db00:	81a3      	strh	r3, [r4, #12]
 800db02:	e7e3      	b.n	800dacc <__smakebuf_r+0xc>
 800db04:	4b0d      	ldr	r3, [pc, #52]	; (800db3c <__smakebuf_r+0x7c>)
 800db06:	62b3      	str	r3, [r6, #40]	; 0x28
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	6020      	str	r0, [r4, #0]
 800db0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db10:	81a3      	strh	r3, [r4, #12]
 800db12:	9b00      	ldr	r3, [sp, #0]
 800db14:	6163      	str	r3, [r4, #20]
 800db16:	9b01      	ldr	r3, [sp, #4]
 800db18:	6120      	str	r0, [r4, #16]
 800db1a:	b15b      	cbz	r3, 800db34 <__smakebuf_r+0x74>
 800db1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db20:	4630      	mov	r0, r6
 800db22:	f000 f8d1 	bl	800dcc8 <_isatty_r>
 800db26:	b128      	cbz	r0, 800db34 <__smakebuf_r+0x74>
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	f023 0303 	bic.w	r3, r3, #3
 800db2e:	f043 0301 	orr.w	r3, r3, #1
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	89a0      	ldrh	r0, [r4, #12]
 800db36:	4305      	orrs	r5, r0
 800db38:	81a5      	strh	r5, [r4, #12]
 800db3a:	e7cd      	b.n	800dad8 <__smakebuf_r+0x18>
 800db3c:	0800d8cd 	.word	0x0800d8cd

0800db40 <_malloc_usable_size_r>:
 800db40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db44:	1f18      	subs	r0, r3, #4
 800db46:	2b00      	cmp	r3, #0
 800db48:	bfbc      	itt	lt
 800db4a:	580b      	ldrlt	r3, [r1, r0]
 800db4c:	18c0      	addlt	r0, r0, r3
 800db4e:	4770      	bx	lr

0800db50 <_raise_r>:
 800db50:	291f      	cmp	r1, #31
 800db52:	b538      	push	{r3, r4, r5, lr}
 800db54:	4604      	mov	r4, r0
 800db56:	460d      	mov	r5, r1
 800db58:	d904      	bls.n	800db64 <_raise_r+0x14>
 800db5a:	2316      	movs	r3, #22
 800db5c:	6003      	str	r3, [r0, #0]
 800db5e:	f04f 30ff 	mov.w	r0, #4294967295
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db66:	b112      	cbz	r2, 800db6e <_raise_r+0x1e>
 800db68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db6c:	b94b      	cbnz	r3, 800db82 <_raise_r+0x32>
 800db6e:	4620      	mov	r0, r4
 800db70:	f000 f830 	bl	800dbd4 <_getpid_r>
 800db74:	462a      	mov	r2, r5
 800db76:	4601      	mov	r1, r0
 800db78:	4620      	mov	r0, r4
 800db7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db7e:	f000 b817 	b.w	800dbb0 <_kill_r>
 800db82:	2b01      	cmp	r3, #1
 800db84:	d00a      	beq.n	800db9c <_raise_r+0x4c>
 800db86:	1c59      	adds	r1, r3, #1
 800db88:	d103      	bne.n	800db92 <_raise_r+0x42>
 800db8a:	2316      	movs	r3, #22
 800db8c:	6003      	str	r3, [r0, #0]
 800db8e:	2001      	movs	r0, #1
 800db90:	e7e7      	b.n	800db62 <_raise_r+0x12>
 800db92:	2400      	movs	r4, #0
 800db94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db98:	4628      	mov	r0, r5
 800db9a:	4798      	blx	r3
 800db9c:	2000      	movs	r0, #0
 800db9e:	e7e0      	b.n	800db62 <_raise_r+0x12>

0800dba0 <raise>:
 800dba0:	4b02      	ldr	r3, [pc, #8]	; (800dbac <raise+0xc>)
 800dba2:	4601      	mov	r1, r0
 800dba4:	6818      	ldr	r0, [r3, #0]
 800dba6:	f7ff bfd3 	b.w	800db50 <_raise_r>
 800dbaa:	bf00      	nop
 800dbac:	24000bd4 	.word	0x24000bd4

0800dbb0 <_kill_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d07      	ldr	r5, [pc, #28]	; (800dbd0 <_kill_r+0x20>)
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	4604      	mov	r4, r0
 800dbb8:	4608      	mov	r0, r1
 800dbba:	4611      	mov	r1, r2
 800dbbc:	602b      	str	r3, [r5, #0]
 800dbbe:	f7f4 fe5f 	bl	8002880 <_kill>
 800dbc2:	1c43      	adds	r3, r0, #1
 800dbc4:	d102      	bne.n	800dbcc <_kill_r+0x1c>
 800dbc6:	682b      	ldr	r3, [r5, #0]
 800dbc8:	b103      	cbz	r3, 800dbcc <_kill_r+0x1c>
 800dbca:	6023      	str	r3, [r4, #0]
 800dbcc:	bd38      	pop	{r3, r4, r5, pc}
 800dbce:	bf00      	nop
 800dbd0:	2400f744 	.word	0x2400f744

0800dbd4 <_getpid_r>:
 800dbd4:	f7f4 be4c 	b.w	8002870 <_getpid>

0800dbd8 <__sread>:
 800dbd8:	b510      	push	{r4, lr}
 800dbda:	460c      	mov	r4, r1
 800dbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbe0:	f000 f894 	bl	800dd0c <_read_r>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	bfab      	itete	ge
 800dbe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dbea:	89a3      	ldrhlt	r3, [r4, #12]
 800dbec:	181b      	addge	r3, r3, r0
 800dbee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dbf2:	bfac      	ite	ge
 800dbf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dbf6:	81a3      	strhlt	r3, [r4, #12]
 800dbf8:	bd10      	pop	{r4, pc}

0800dbfa <__swrite>:
 800dbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbfe:	461f      	mov	r7, r3
 800dc00:	898b      	ldrh	r3, [r1, #12]
 800dc02:	05db      	lsls	r3, r3, #23
 800dc04:	4605      	mov	r5, r0
 800dc06:	460c      	mov	r4, r1
 800dc08:	4616      	mov	r6, r2
 800dc0a:	d505      	bpl.n	800dc18 <__swrite+0x1e>
 800dc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc10:	2302      	movs	r3, #2
 800dc12:	2200      	movs	r2, #0
 800dc14:	f000 f868 	bl	800dce8 <_lseek_r>
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc22:	81a3      	strh	r3, [r4, #12]
 800dc24:	4632      	mov	r2, r6
 800dc26:	463b      	mov	r3, r7
 800dc28:	4628      	mov	r0, r5
 800dc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc2e:	f000 b817 	b.w	800dc60 <_write_r>

0800dc32 <__sseek>:
 800dc32:	b510      	push	{r4, lr}
 800dc34:	460c      	mov	r4, r1
 800dc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc3a:	f000 f855 	bl	800dce8 <_lseek_r>
 800dc3e:	1c43      	adds	r3, r0, #1
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	bf15      	itete	ne
 800dc44:	6560      	strne	r0, [r4, #84]	; 0x54
 800dc46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dc4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dc4e:	81a3      	strheq	r3, [r4, #12]
 800dc50:	bf18      	it	ne
 800dc52:	81a3      	strhne	r3, [r4, #12]
 800dc54:	bd10      	pop	{r4, pc}

0800dc56 <__sclose>:
 800dc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc5a:	f000 b813 	b.w	800dc84 <_close_r>
	...

0800dc60 <_write_r>:
 800dc60:	b538      	push	{r3, r4, r5, lr}
 800dc62:	4d07      	ldr	r5, [pc, #28]	; (800dc80 <_write_r+0x20>)
 800dc64:	4604      	mov	r4, r0
 800dc66:	4608      	mov	r0, r1
 800dc68:	4611      	mov	r1, r2
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	602a      	str	r2, [r5, #0]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f7f4 fe3d 	bl	80028ee <_write>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	d102      	bne.n	800dc7e <_write_r+0x1e>
 800dc78:	682b      	ldr	r3, [r5, #0]
 800dc7a:	b103      	cbz	r3, 800dc7e <_write_r+0x1e>
 800dc7c:	6023      	str	r3, [r4, #0]
 800dc7e:	bd38      	pop	{r3, r4, r5, pc}
 800dc80:	2400f744 	.word	0x2400f744

0800dc84 <_close_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4d06      	ldr	r5, [pc, #24]	; (800dca0 <_close_r+0x1c>)
 800dc88:	2300      	movs	r3, #0
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	f7f4 fe49 	bl	8002926 <_close>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_close_r+0x1a>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_close_r+0x1a>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	2400f744 	.word	0x2400f744

0800dca4 <_fstat_r>:
 800dca4:	b538      	push	{r3, r4, r5, lr}
 800dca6:	4d07      	ldr	r5, [pc, #28]	; (800dcc4 <_fstat_r+0x20>)
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4604      	mov	r4, r0
 800dcac:	4608      	mov	r0, r1
 800dcae:	4611      	mov	r1, r2
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	f7f4 fe44 	bl	800293e <_fstat>
 800dcb6:	1c43      	adds	r3, r0, #1
 800dcb8:	d102      	bne.n	800dcc0 <_fstat_r+0x1c>
 800dcba:	682b      	ldr	r3, [r5, #0]
 800dcbc:	b103      	cbz	r3, 800dcc0 <_fstat_r+0x1c>
 800dcbe:	6023      	str	r3, [r4, #0]
 800dcc0:	bd38      	pop	{r3, r4, r5, pc}
 800dcc2:	bf00      	nop
 800dcc4:	2400f744 	.word	0x2400f744

0800dcc8 <_isatty_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4d06      	ldr	r5, [pc, #24]	; (800dce4 <_isatty_r+0x1c>)
 800dccc:	2300      	movs	r3, #0
 800dcce:	4604      	mov	r4, r0
 800dcd0:	4608      	mov	r0, r1
 800dcd2:	602b      	str	r3, [r5, #0]
 800dcd4:	f7f4 fe43 	bl	800295e <_isatty>
 800dcd8:	1c43      	adds	r3, r0, #1
 800dcda:	d102      	bne.n	800dce2 <_isatty_r+0x1a>
 800dcdc:	682b      	ldr	r3, [r5, #0]
 800dcde:	b103      	cbz	r3, 800dce2 <_isatty_r+0x1a>
 800dce0:	6023      	str	r3, [r4, #0]
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	2400f744 	.word	0x2400f744

0800dce8 <_lseek_r>:
 800dce8:	b538      	push	{r3, r4, r5, lr}
 800dcea:	4d07      	ldr	r5, [pc, #28]	; (800dd08 <_lseek_r+0x20>)
 800dcec:	4604      	mov	r4, r0
 800dcee:	4608      	mov	r0, r1
 800dcf0:	4611      	mov	r1, r2
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	602a      	str	r2, [r5, #0]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f7f4 fe3c 	bl	8002974 <_lseek>
 800dcfc:	1c43      	adds	r3, r0, #1
 800dcfe:	d102      	bne.n	800dd06 <_lseek_r+0x1e>
 800dd00:	682b      	ldr	r3, [r5, #0]
 800dd02:	b103      	cbz	r3, 800dd06 <_lseek_r+0x1e>
 800dd04:	6023      	str	r3, [r4, #0]
 800dd06:	bd38      	pop	{r3, r4, r5, pc}
 800dd08:	2400f744 	.word	0x2400f744

0800dd0c <_read_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4d07      	ldr	r5, [pc, #28]	; (800dd2c <_read_r+0x20>)
 800dd10:	4604      	mov	r4, r0
 800dd12:	4608      	mov	r0, r1
 800dd14:	4611      	mov	r1, r2
 800dd16:	2200      	movs	r2, #0
 800dd18:	602a      	str	r2, [r5, #0]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	f7f4 fdca 	bl	80028b4 <_read>
 800dd20:	1c43      	adds	r3, r0, #1
 800dd22:	d102      	bne.n	800dd2a <_read_r+0x1e>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	b103      	cbz	r3, 800dd2a <_read_r+0x1e>
 800dd28:	6023      	str	r3, [r4, #0]
 800dd2a:	bd38      	pop	{r3, r4, r5, pc}
 800dd2c:	2400f744 	.word	0x2400f744

0800dd30 <checkint>:
 800dd30:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dd34:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	b570      	push	{r4, r5, r6, lr}
 800dd3c:	dd2a      	ble.n	800dd94 <checkint+0x64>
 800dd3e:	f240 4333 	movw	r3, #1075	; 0x433
 800dd42:	429a      	cmp	r2, r3
 800dd44:	dc24      	bgt.n	800dd90 <checkint+0x60>
 800dd46:	1a9b      	subs	r3, r3, r2
 800dd48:	f1a3 0620 	sub.w	r6, r3, #32
 800dd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd50:	fa02 f403 	lsl.w	r4, r2, r3
 800dd54:	fa02 f606 	lsl.w	r6, r2, r6
 800dd58:	f1c3 0520 	rsb	r5, r3, #32
 800dd5c:	fa22 f505 	lsr.w	r5, r2, r5
 800dd60:	4334      	orrs	r4, r6
 800dd62:	432c      	orrs	r4, r5
 800dd64:	409a      	lsls	r2, r3
 800dd66:	ea20 0202 	bic.w	r2, r0, r2
 800dd6a:	ea21 0404 	bic.w	r4, r1, r4
 800dd6e:	4322      	orrs	r2, r4
 800dd70:	f1a3 0420 	sub.w	r4, r3, #32
 800dd74:	f1c3 0220 	rsb	r2, r3, #32
 800dd78:	d10c      	bne.n	800dd94 <checkint+0x64>
 800dd7a:	40d8      	lsrs	r0, r3
 800dd7c:	fa01 f302 	lsl.w	r3, r1, r2
 800dd80:	4318      	orrs	r0, r3
 800dd82:	40e1      	lsrs	r1, r4
 800dd84:	4308      	orrs	r0, r1
 800dd86:	f000 0001 	and.w	r0, r0, #1
 800dd8a:	f1d0 0002 	rsbs	r0, r0, #2
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	2002      	movs	r0, #2
 800dd92:	e7fc      	b.n	800dd8e <checkint+0x5e>
 800dd94:	2000      	movs	r0, #0
 800dd96:	e7fa      	b.n	800dd8e <checkint+0x5e>

0800dd98 <pow>:
 800dd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd9c:	ee10 4a90 	vmov	r4, s1
 800dda0:	ed2d 8b0a 	vpush	{d8-d12}
 800dda4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800dda8:	ee11 7a90 	vmov	r7, s3
 800ddac:	f10a 32ff 	add.w	r2, sl, #4294967295
 800ddb0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	ee10 6a10 	vmov	r6, s0
 800ddba:	ee11 0a10 	vmov	r0, s2
 800ddbe:	b086      	sub	sp, #24
 800ddc0:	46d4      	mov	ip, sl
 800ddc2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800ddc6:	d806      	bhi.n	800ddd6 <pow+0x3e>
 800ddc8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800ddcc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800ddd0:	2b7f      	cmp	r3, #127	; 0x7f
 800ddd2:	f240 8156 	bls.w	800e082 <pow+0x2ea>
 800ddd6:	1802      	adds	r2, r0, r0
 800ddd8:	eb47 0107 	adc.w	r1, r7, r7
 800dddc:	f06f 0e01 	mvn.w	lr, #1
 800dde0:	f112 39ff 	adds.w	r9, r2, #4294967295
 800dde4:	f141 38ff 	adc.w	r8, r1, #4294967295
 800dde8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800ddec:	45ce      	cmp	lr, r9
 800ddee:	eb73 0808 	sbcs.w	r8, r3, r8
 800ddf2:	d23f      	bcs.n	800de74 <pow+0xdc>
 800ddf4:	ea52 0301 	orrs.w	r3, r2, r1
 800ddf8:	f04f 0300 	mov.w	r3, #0
 800ddfc:	d10c      	bne.n	800de18 <pow+0x80>
 800ddfe:	19b6      	adds	r6, r6, r6
 800de00:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800de04:	4164      	adcs	r4, r4
 800de06:	42b3      	cmp	r3, r6
 800de08:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800de0c:	41a3      	sbcs	r3, r4
 800de0e:	f0c0 808c 	bcc.w	800df2a <pow+0x192>
 800de12:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800de16:	e028      	b.n	800de6a <pow+0xd2>
 800de18:	4da3      	ldr	r5, [pc, #652]	; (800e0a8 <pow+0x310>)
 800de1a:	42ac      	cmp	r4, r5
 800de1c:	bf08      	it	eq
 800de1e:	429e      	cmpeq	r6, r3
 800de20:	d107      	bne.n	800de32 <pow+0x9a>
 800de22:	1800      	adds	r0, r0, r0
 800de24:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800de28:	417f      	adcs	r7, r7
 800de2a:	4283      	cmp	r3, r0
 800de2c:	4b9f      	ldr	r3, [pc, #636]	; (800e0ac <pow+0x314>)
 800de2e:	41bb      	sbcs	r3, r7
 800de30:	e7ed      	b.n	800de0e <pow+0x76>
 800de32:	19b6      	adds	r6, r6, r6
 800de34:	489e      	ldr	r0, [pc, #632]	; (800e0b0 <pow+0x318>)
 800de36:	4164      	adcs	r4, r4
 800de38:	42b3      	cmp	r3, r6
 800de3a:	eb70 0504 	sbcs.w	r5, r0, r4
 800de3e:	d374      	bcc.n	800df2a <pow+0x192>
 800de40:	4281      	cmp	r1, r0
 800de42:	bf08      	it	eq
 800de44:	429a      	cmpeq	r2, r3
 800de46:	d170      	bne.n	800df2a <pow+0x192>
 800de48:	4a9a      	ldr	r2, [pc, #616]	; (800e0b4 <pow+0x31c>)
 800de4a:	4294      	cmp	r4, r2
 800de4c:	bf08      	it	eq
 800de4e:	429e      	cmpeq	r6, r3
 800de50:	d0df      	beq.n	800de12 <pow+0x7a>
 800de52:	4294      	cmp	r4, r2
 800de54:	ea6f 0707 	mvn.w	r7, r7
 800de58:	bf34      	ite	cc
 800de5a:	2400      	movcc	r4, #0
 800de5c:	2401      	movcs	r4, #1
 800de5e:	0fff      	lsrs	r7, r7, #31
 800de60:	42bc      	cmp	r4, r7
 800de62:	f040 81d9 	bne.w	800e218 <pow+0x480>
 800de66:	ee21 0b01 	vmul.f64	d0, d1, d1
 800de6a:	b006      	add	sp, #24
 800de6c:	ecbd 8b0a 	vpop	{d8-d12}
 800de70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de74:	eb16 0806 	adds.w	r8, r6, r6
 800de78:	eb44 0904 	adc.w	r9, r4, r4
 800de7c:	f118 31ff 	adds.w	r1, r8, #4294967295
 800de80:	f169 0200 	sbc.w	r2, r9, #0
 800de84:	458e      	cmp	lr, r1
 800de86:	4193      	sbcs	r3, r2
 800de88:	d223      	bcs.n	800ded2 <pow+0x13a>
 800de8a:	ee20 0b00 	vmul.f64	d0, d0, d0
 800de8e:	2c00      	cmp	r4, #0
 800de90:	da12      	bge.n	800deb8 <pow+0x120>
 800de92:	4639      	mov	r1, r7
 800de94:	f7ff ff4c 	bl	800dd30 <checkint>
 800de98:	2801      	cmp	r0, #1
 800de9a:	d10d      	bne.n	800deb8 <pow+0x120>
 800de9c:	eeb1 0b40 	vneg.f64	d0, d0
 800dea0:	ea58 0309 	orrs.w	r3, r8, r9
 800dea4:	d10a      	bne.n	800debc <pow+0x124>
 800dea6:	2f00      	cmp	r7, #0
 800dea8:	dadf      	bge.n	800de6a <pow+0xd2>
 800deaa:	b006      	add	sp, #24
 800deac:	ecbd 8b0a 	vpop	{d8-d12}
 800deb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb4:	f001 b830 	b.w	800ef18 <__math_divzero>
 800deb8:	2000      	movs	r0, #0
 800deba:	e7f1      	b.n	800dea0 <pow+0x108>
 800debc:	2f00      	cmp	r7, #0
 800debe:	dad4      	bge.n	800de6a <pow+0xd2>
 800dec0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dec4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dec8:	ed8d 7b00 	vstr	d7, [sp]
 800decc:	ed9d 0b00 	vldr	d0, [sp]
 800ded0:	e7cb      	b.n	800de6a <pow+0xd2>
 800ded2:	2c00      	cmp	r4, #0
 800ded4:	da2c      	bge.n	800df30 <pow+0x198>
 800ded6:	4639      	mov	r1, r7
 800ded8:	f7ff ff2a 	bl	800dd30 <checkint>
 800dedc:	b930      	cbnz	r0, 800deec <pow+0x154>
 800dede:	b006      	add	sp, #24
 800dee0:	ecbd 8b0a 	vpop	{d8-d12}
 800dee4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee8:	f001 b82e 	b.w	800ef48 <__math_invalid>
 800deec:	2801      	cmp	r0, #1
 800deee:	bf14      	ite	ne
 800def0:	2000      	movne	r0, #0
 800def2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800def6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800defa:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800defe:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800df02:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800df06:	2b7f      	cmp	r3, #127	; 0x7f
 800df08:	d92d      	bls.n	800df66 <pow+0x1ce>
 800df0a:	4b67      	ldr	r3, [pc, #412]	; (800e0a8 <pow+0x310>)
 800df0c:	2000      	movs	r0, #0
 800df0e:	429c      	cmp	r4, r3
 800df10:	bf08      	it	eq
 800df12:	4286      	cmpeq	r6, r0
 800df14:	f43f af7d 	beq.w	800de12 <pow+0x7a>
 800df18:	f240 31bd 	movw	r1, #957	; 0x3bd
 800df1c:	428a      	cmp	r2, r1
 800df1e:	d80c      	bhi.n	800df3a <pow+0x1a2>
 800df20:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800df24:	42b0      	cmp	r0, r6
 800df26:	41a3      	sbcs	r3, r4
 800df28:	d204      	bcs.n	800df34 <pow+0x19c>
 800df2a:	ee31 0b00 	vadd.f64	d0, d1, d0
 800df2e:	e79c      	b.n	800de6a <pow+0xd2>
 800df30:	2000      	movs	r0, #0
 800df32:	e7e4      	b.n	800defe <pow+0x166>
 800df34:	ee30 0b41 	vsub.f64	d0, d0, d1
 800df38:	e797      	b.n	800de6a <pow+0xd2>
 800df3a:	2e01      	cmp	r6, #1
 800df3c:	eb74 0303 	sbcs.w	r3, r4, r3
 800df40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800df44:	bf34      	ite	cc
 800df46:	2301      	movcc	r3, #1
 800df48:	2300      	movcs	r3, #0
 800df4a:	4295      	cmp	r5, r2
 800df4c:	bf8c      	ite	hi
 800df4e:	2500      	movhi	r5, #0
 800df50:	2501      	movls	r5, #1
 800df52:	42ab      	cmp	r3, r5
 800df54:	f000 809d 	beq.w	800e092 <pow+0x2fa>
 800df58:	b006      	add	sp, #24
 800df5a:	ecbd 8b0a 	vpop	{d8-d12}
 800df5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df62:	f000 bfd1 	b.w	800ef08 <__math_oflow>
 800df66:	f1bc 0f00 	cmp.w	ip, #0
 800df6a:	d10b      	bne.n	800df84 <pow+0x1ec>
 800df6c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e0a0 <pow+0x308>
 800df70:	ee20 7b07 	vmul.f64	d7, d0, d7
 800df74:	ec53 2b17 	vmov	r2, r3, d7
 800df78:	ee17 6a10 	vmov	r6, s14
 800df7c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800df80:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800df84:	4b4c      	ldr	r3, [pc, #304]	; (800e0b8 <pow+0x320>)
 800df86:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800df8a:	4423      	add	r3, r4
 800df8c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800df90:	1519      	asrs	r1, r3, #20
 800df92:	0d1b      	lsrs	r3, r3, #20
 800df94:	051b      	lsls	r3, r3, #20
 800df96:	eba4 0903 	sub.w	r9, r4, r3
 800df9a:	4b48      	ldr	r3, [pc, #288]	; (800e0bc <pow+0x324>)
 800df9c:	ee04 1a10 	vmov	s8, r1
 800dfa0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800dfa4:	f1b6 0800 	subs.w	r8, r6, #0
 800dfa8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800dfac:	ec49 8b15 	vmov	d5, r8, r9
 800dfb0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800dfb4:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dfb8:	ed93 7b00 	vldr	d7, [r3]
 800dfbc:	ed93 5b02 	vldr	d5, [r3, #8]
 800dfc0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800dfc4:	eea4 2b07 	vfma.f64	d2, d4, d7
 800dfc8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800dfcc:	ee36 ab02 	vadd.f64	d10, d6, d2
 800dfd0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800dfd4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dfd8:	ed93 5b04 	vldr	d5, [r3, #16]
 800dfdc:	ee32 2b06 	vadd.f64	d2, d2, d6
 800dfe0:	ee37 7b02 	vadd.f64	d7, d7, d2
 800dfe4:	ee26 5b05 	vmul.f64	d5, d6, d5
 800dfe8:	ed93 4b08 	vldr	d4, [r3, #32]
 800dfec:	ee26 0b05 	vmul.f64	d0, d6, d5
 800dff0:	eeb0 9b40 	vmov.f64	d9, d0
 800dff4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800dff8:	ed93 5b06 	vldr	d5, [r3, #24]
 800dffc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800e000:	ee26 bb00 	vmul.f64	d11, d6, d0
 800e004:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800e008:	eea6 5b04 	vfma.f64	d5, d6, d4
 800e00c:	ee3a ab48 	vsub.f64	d10, d10, d8
 800e010:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800e014:	ee37 9b09 	vadd.f64	d9, d7, d9
 800e018:	ee3a ab00 	vadd.f64	d10, d10, d0
 800e01c:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e020:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e024:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800e028:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800e02c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800e030:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e034:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e038:	eeab ab05 	vfma.f64	d10, d11, d5
 800e03c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800e040:	ee21 7b06 	vmul.f64	d7, d1, d6
 800e044:	ee17 3a90 	vmov	r3, s15
 800e048:	eeb0 5b47 	vmov.f64	d5, d7
 800e04c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800e050:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800e054:	18b2      	adds	r2, r6, r2
 800e056:	2a3e      	cmp	r2, #62	; 0x3e
 800e058:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800e05c:	ee38 8b46 	vsub.f64	d8, d8, d6
 800e060:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800e064:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800e068:	d92b      	bls.n	800e0c2 <pow+0x32a>
 800e06a:	2a00      	cmp	r2, #0
 800e06c:	da0b      	bge.n	800e086 <pow+0x2ee>
 800e06e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e072:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e076:	2800      	cmp	r0, #0
 800e078:	f43f aef7 	beq.w	800de6a <pow+0xd2>
 800e07c:	eeb1 0b40 	vneg.f64	d0, d0
 800e080:	e6f3      	b.n	800de6a <pow+0xd2>
 800e082:	2000      	movs	r0, #0
 800e084:	e77e      	b.n	800df84 <pow+0x1ec>
 800e086:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800e08a:	d919      	bls.n	800e0c0 <pow+0x328>
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f6bf af63 	bge.w	800df58 <pow+0x1c0>
 800e092:	b006      	add	sp, #24
 800e094:	ecbd 8b0a 	vpop	{d8-d12}
 800e098:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e09c:	f000 bf2c 	b.w	800eef8 <__math_uflow>
 800e0a0:	00000000 	.word	0x00000000
 800e0a4:	43300000 	.word	0x43300000
 800e0a8:	3ff00000 	.word	0x3ff00000
 800e0ac:	fff00000 	.word	0xfff00000
 800e0b0:	ffe00000 	.word	0xffe00000
 800e0b4:	7fe00000 	.word	0x7fe00000
 800e0b8:	c0196aab 	.word	0xc0196aab
 800e0bc:	0800f7c8 	.word	0x0800f7c8
 800e0c0:	2600      	movs	r6, #0
 800e0c2:	495d      	ldr	r1, [pc, #372]	; (800e238 <pow+0x4a0>)
 800e0c4:	ed91 4b02 	vldr	d4, [r1, #8]
 800e0c8:	ed91 3b00 	vldr	d3, [r1]
 800e0cc:	eeb0 6b44 	vmov.f64	d6, d4
 800e0d0:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e0d4:	ee16 5a10 	vmov	r5, s12
 800e0d8:	ee36 6b44 	vsub.f64	d6, d6, d4
 800e0dc:	ed91 4b04 	vldr	d4, [r1, #16]
 800e0e0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800e0e4:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e0e8:	eeb0 0b47 	vmov.f64	d0, d7
 800e0ec:	ed91 7b06 	vldr	d7, [r1, #24]
 800e0f0:	18dc      	adds	r4, r3, r3
 800e0f2:	f104 030f 	add.w	r3, r4, #15
 800e0f6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800e0fa:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e0fe:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800e102:	ee35 0b00 	vadd.f64	d0, d5, d0
 800e106:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e10a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800e10e:	ed91 5b08 	vldr	d5, [r1, #32]
 800e112:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e116:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800e11a:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e11e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800e122:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e126:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e12a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800e12e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800e132:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800e136:	eea0 5b04 	vfma.f64	d5, d0, d4
 800e13a:	1940      	adds	r0, r0, r5
 800e13c:	2700      	movs	r7, #0
 800e13e:	eb17 020c 	adds.w	r2, r7, ip
 800e142:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800e146:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e14a:	2e00      	cmp	r6, #0
 800e14c:	d15f      	bne.n	800e20e <pow+0x476>
 800e14e:	42bd      	cmp	r5, r7
 800e150:	db13      	blt.n	800e17a <pow+0x3e2>
 800e152:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800e156:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800e15a:	4610      	mov	r0, r2
 800e15c:	ec41 0b10 	vmov	d0, r0, r1
 800e160:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e164:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e220 <pow+0x488>
 800e168:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e16c:	b006      	add	sp, #24
 800e16e:	ecbd 8b0a 	vpop	{d8-d12}
 800e172:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e176:	f000 beff 	b.w	800ef78 <__math_check_oflow>
 800e17a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e17e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800e182:	4610      	mov	r0, r2
 800e184:	ec41 0b15 	vmov	d5, r0, r1
 800e188:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e18c:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e190:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e194:	eeb0 3bc7 	vabs.f64	d3, d7
 800e198:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e228 <pow+0x490>
 800e1a4:	d52a      	bpl.n	800e1fc <pow+0x464>
 800e1a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e1aa:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e1b6:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e1ba:	bf48      	it	mi
 800e1bc:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e1c0:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e1c4:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e1c8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e1cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e1d0:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e1d4:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e1d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e0:	d104      	bne.n	800e1ec <pow+0x454>
 800e1e2:	4632      	mov	r2, r6
 800e1e4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e1e8:	ec43 2b17 	vmov	d7, r2, r3
 800e1ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e1f4:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e1f8:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e1fc:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e200:	b006      	add	sp, #24
 800e202:	ecbd 8b0a 	vpop	{d8-d12}
 800e206:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e20a:	f000 beac 	b.w	800ef66 <__math_check_uflow>
 800e20e:	ec43 2b10 	vmov	d0, r2, r3
 800e212:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e216:	e628      	b.n	800de6a <pow+0xd2>
 800e218:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800e230 <pow+0x498>
 800e21c:	e625      	b.n	800de6a <pow+0xd2>
 800e21e:	bf00      	nop
 800e220:	00000000 	.word	0x00000000
 800e224:	7f000000 	.word	0x7f000000
 800e228:	00000000 	.word	0x00000000
 800e22c:	00100000 	.word	0x00100000
	...
 800e238:	080109d8 	.word	0x080109d8
 800e23c:	00000000 	.word	0x00000000

0800e240 <atan>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	eeb0 7b40 	vmov.f64	d7, d0
 800e246:	ee17 5a90 	vmov	r5, s15
 800e24a:	4b73      	ldr	r3, [pc, #460]	; (800e418 <atan+0x1d8>)
 800e24c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800e250:	429c      	cmp	r4, r3
 800e252:	dd13      	ble.n	800e27c <atan+0x3c>
 800e254:	4b71      	ldr	r3, [pc, #452]	; (800e41c <atan+0x1dc>)
 800e256:	429c      	cmp	r4, r3
 800e258:	dc03      	bgt.n	800e262 <atan+0x22>
 800e25a:	d107      	bne.n	800e26c <atan+0x2c>
 800e25c:	ee10 3a10 	vmov	r3, s0
 800e260:	b123      	cbz	r3, 800e26c <atan+0x2c>
 800e262:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e266:	eeb0 0b47 	vmov.f64	d0, d7
 800e26a:	bd38      	pop	{r3, r4, r5, pc}
 800e26c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800e3a8 <atan+0x168>
 800e270:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800e3b0 <atan+0x170>
 800e274:	2d00      	cmp	r5, #0
 800e276:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800e27a:	e7f4      	b.n	800e266 <atan+0x26>
 800e27c:	4b68      	ldr	r3, [pc, #416]	; (800e420 <atan+0x1e0>)
 800e27e:	429c      	cmp	r4, r3
 800e280:	dc11      	bgt.n	800e2a6 <atan+0x66>
 800e282:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e286:	429c      	cmp	r4, r3
 800e288:	dc0a      	bgt.n	800e2a0 <atan+0x60>
 800e28a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800e28e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800e3b8 <atan+0x178>
 800e292:	ee30 6b06 	vadd.f64	d6, d0, d6
 800e296:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800e29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29e:	dce2      	bgt.n	800e266 <atan+0x26>
 800e2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a4:	e013      	b.n	800e2ce <atan+0x8e>
 800e2a6:	f000 f913 	bl	800e4d0 <fabs>
 800e2aa:	4b5e      	ldr	r3, [pc, #376]	; (800e424 <atan+0x1e4>)
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	dc4f      	bgt.n	800e350 <atan+0x110>
 800e2b0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e2b4:	429c      	cmp	r4, r3
 800e2b6:	dc41      	bgt.n	800e33c <atan+0xfc>
 800e2b8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e2bc:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e2c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e2ca:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e2ce:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e3c0 <atan+0x180>
 800e2d2:	ee27 4b07 	vmul.f64	d4, d7, d7
 800e2d6:	ee24 5b04 	vmul.f64	d5, d4, d4
 800e2da:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800e3c8 <atan+0x188>
 800e2de:	eea5 3b06 	vfma.f64	d3, d5, d6
 800e2e2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800e3d0 <atan+0x190>
 800e2e6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e2ea:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800e3d8 <atan+0x198>
 800e2ee:	eea6 3b05 	vfma.f64	d3, d6, d5
 800e2f2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800e3e0 <atan+0x1a0>
 800e2f6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e2fa:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800e3e8 <atan+0x1a8>
 800e2fe:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800e3f0 <atan+0x1b0>
 800e302:	eea6 3b05 	vfma.f64	d3, d6, d5
 800e306:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e3f8 <atan+0x1b8>
 800e30a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800e30e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e400 <atan+0x1c0>
 800e312:	eea2 6b05 	vfma.f64	d6, d2, d5
 800e316:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800e408 <atan+0x1c8>
 800e31a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800e31e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800e410 <atan+0x1d0>
 800e322:	1c5a      	adds	r2, r3, #1
 800e324:	eea2 6b05 	vfma.f64	d6, d2, d5
 800e328:	ee26 6b05 	vmul.f64	d6, d6, d5
 800e32c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800e330:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e334:	d121      	bne.n	800e37a <atan+0x13a>
 800e336:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e33a:	e794      	b.n	800e266 <atan+0x26>
 800e33c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e340:	2301      	movs	r3, #1
 800e342:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e346:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e34a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e34e:	e7be      	b.n	800e2ce <atan+0x8e>
 800e350:	4b35      	ldr	r3, [pc, #212]	; (800e428 <atan+0x1e8>)
 800e352:	429c      	cmp	r4, r3
 800e354:	da0b      	bge.n	800e36e <atan+0x12e>
 800e356:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e35a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e35e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800e362:	eea0 6b07 	vfma.f64	d6, d0, d7
 800e366:	2302      	movs	r3, #2
 800e368:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800e36c:	e7af      	b.n	800e2ce <atan+0x8e>
 800e36e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e372:	2303      	movs	r3, #3
 800e374:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e378:	e7a9      	b.n	800e2ce <atan+0x8e>
 800e37a:	4a2c      	ldr	r2, [pc, #176]	; (800e42c <atan+0x1ec>)
 800e37c:	492c      	ldr	r1, [pc, #176]	; (800e430 <atan+0x1f0>)
 800e37e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e382:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800e386:	ed93 5b00 	vldr	d5, [r3]
 800e38a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e38e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e392:	ed92 6b00 	vldr	d6, [r2]
 800e396:	2d00      	cmp	r5, #0
 800e398:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e39c:	bfb8      	it	lt
 800e39e:	eeb1 7b47 	vneglt.f64	d7, d7
 800e3a2:	e760      	b.n	800e266 <atan+0x26>
 800e3a4:	f3af 8000 	nop.w
 800e3a8:	54442d18 	.word	0x54442d18
 800e3ac:	3ff921fb 	.word	0x3ff921fb
 800e3b0:	54442d18 	.word	0x54442d18
 800e3b4:	bff921fb 	.word	0xbff921fb
 800e3b8:	8800759c 	.word	0x8800759c
 800e3bc:	7e37e43c 	.word	0x7e37e43c
 800e3c0:	e322da11 	.word	0xe322da11
 800e3c4:	3f90ad3a 	.word	0x3f90ad3a
 800e3c8:	24760deb 	.word	0x24760deb
 800e3cc:	3fa97b4b 	.word	0x3fa97b4b
 800e3d0:	a0d03d51 	.word	0xa0d03d51
 800e3d4:	3fb10d66 	.word	0x3fb10d66
 800e3d8:	c54c206e 	.word	0xc54c206e
 800e3dc:	3fb745cd 	.word	0x3fb745cd
 800e3e0:	920083ff 	.word	0x920083ff
 800e3e4:	3fc24924 	.word	0x3fc24924
 800e3e8:	5555550d 	.word	0x5555550d
 800e3ec:	3fd55555 	.word	0x3fd55555
 800e3f0:	52defd9a 	.word	0x52defd9a
 800e3f4:	bfadde2d 	.word	0xbfadde2d
 800e3f8:	2c6a6c2f 	.word	0x2c6a6c2f
 800e3fc:	bfa2b444 	.word	0xbfa2b444
 800e400:	af749a6d 	.word	0xaf749a6d
 800e404:	bfb3b0f2 	.word	0xbfb3b0f2
 800e408:	fe231671 	.word	0xfe231671
 800e40c:	bfbc71c6 	.word	0xbfbc71c6
 800e410:	9998ebc4 	.word	0x9998ebc4
 800e414:	bfc99999 	.word	0xbfc99999
 800e418:	440fffff 	.word	0x440fffff
 800e41c:	7ff00000 	.word	0x7ff00000
 800e420:	3fdbffff 	.word	0x3fdbffff
 800e424:	3ff2ffff 	.word	0x3ff2ffff
 800e428:	40038000 	.word	0x40038000
 800e42c:	08010810 	.word	0x08010810
 800e430:	08010830 	.word	0x08010830
 800e434:	00000000 	.word	0x00000000

0800e438 <cos>:
 800e438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e43a:	eeb0 7b40 	vmov.f64	d7, d0
 800e43e:	ee17 3a90 	vmov	r3, s15
 800e442:	4a21      	ldr	r2, [pc, #132]	; (800e4c8 <cos+0x90>)
 800e444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e448:	4293      	cmp	r3, r2
 800e44a:	dc06      	bgt.n	800e45a <cos+0x22>
 800e44c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800e4c0 <cos+0x88>
 800e450:	b005      	add	sp, #20
 800e452:	f85d eb04 	ldr.w	lr, [sp], #4
 800e456:	f000 b9d7 	b.w	800e808 <__kernel_cos>
 800e45a:	4a1c      	ldr	r2, [pc, #112]	; (800e4cc <cos+0x94>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	dd04      	ble.n	800e46a <cos+0x32>
 800e460:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e464:	b005      	add	sp, #20
 800e466:	f85d fb04 	ldr.w	pc, [sp], #4
 800e46a:	4668      	mov	r0, sp
 800e46c:	f000 f888 	bl	800e580 <__ieee754_rem_pio2>
 800e470:	f000 0003 	and.w	r0, r0, #3
 800e474:	2801      	cmp	r0, #1
 800e476:	d009      	beq.n	800e48c <cos+0x54>
 800e478:	2802      	cmp	r0, #2
 800e47a:	d010      	beq.n	800e49e <cos+0x66>
 800e47c:	b9b0      	cbnz	r0, 800e4ac <cos+0x74>
 800e47e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e482:	ed9d 0b00 	vldr	d0, [sp]
 800e486:	f000 f9bf 	bl	800e808 <__kernel_cos>
 800e48a:	e7eb      	b.n	800e464 <cos+0x2c>
 800e48c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e490:	ed9d 0b00 	vldr	d0, [sp]
 800e494:	f000 fcbc 	bl	800ee10 <__kernel_sin>
 800e498:	eeb1 0b40 	vneg.f64	d0, d0
 800e49c:	e7e2      	b.n	800e464 <cos+0x2c>
 800e49e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e4a2:	ed9d 0b00 	vldr	d0, [sp]
 800e4a6:	f000 f9af 	bl	800e808 <__kernel_cos>
 800e4aa:	e7f5      	b.n	800e498 <cos+0x60>
 800e4ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e4b0:	ed9d 0b00 	vldr	d0, [sp]
 800e4b4:	2001      	movs	r0, #1
 800e4b6:	f000 fcab 	bl	800ee10 <__kernel_sin>
 800e4ba:	e7d3      	b.n	800e464 <cos+0x2c>
 800e4bc:	f3af 8000 	nop.w
	...
 800e4c8:	3fe921fb 	.word	0x3fe921fb
 800e4cc:	7fefffff 	.word	0x7fefffff

0800e4d0 <fabs>:
 800e4d0:	ec51 0b10 	vmov	r0, r1, d0
 800e4d4:	ee10 2a10 	vmov	r2, s0
 800e4d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4dc:	ec43 2b10 	vmov	d0, r2, r3
 800e4e0:	4770      	bx	lr
 800e4e2:	0000      	movs	r0, r0
 800e4e4:	0000      	movs	r0, r0
	...

0800e4e8 <sin>:
 800e4e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4ea:	eeb0 7b40 	vmov.f64	d7, d0
 800e4ee:	ee17 3a90 	vmov	r3, s15
 800e4f2:	4a21      	ldr	r2, [pc, #132]	; (800e578 <sin+0x90>)
 800e4f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	dc07      	bgt.n	800e50c <sin+0x24>
 800e4fc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800e570 <sin+0x88>
 800e500:	2000      	movs	r0, #0
 800e502:	b005      	add	sp, #20
 800e504:	f85d eb04 	ldr.w	lr, [sp], #4
 800e508:	f000 bc82 	b.w	800ee10 <__kernel_sin>
 800e50c:	4a1b      	ldr	r2, [pc, #108]	; (800e57c <sin+0x94>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	dd04      	ble.n	800e51c <sin+0x34>
 800e512:	ee30 0b40 	vsub.f64	d0, d0, d0
 800e516:	b005      	add	sp, #20
 800e518:	f85d fb04 	ldr.w	pc, [sp], #4
 800e51c:	4668      	mov	r0, sp
 800e51e:	f000 f82f 	bl	800e580 <__ieee754_rem_pio2>
 800e522:	f000 0003 	and.w	r0, r0, #3
 800e526:	2801      	cmp	r0, #1
 800e528:	d00a      	beq.n	800e540 <sin+0x58>
 800e52a:	2802      	cmp	r0, #2
 800e52c:	d00f      	beq.n	800e54e <sin+0x66>
 800e52e:	b9c0      	cbnz	r0, 800e562 <sin+0x7a>
 800e530:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e534:	ed9d 0b00 	vldr	d0, [sp]
 800e538:	2001      	movs	r0, #1
 800e53a:	f000 fc69 	bl	800ee10 <__kernel_sin>
 800e53e:	e7ea      	b.n	800e516 <sin+0x2e>
 800e540:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e544:	ed9d 0b00 	vldr	d0, [sp]
 800e548:	f000 f95e 	bl	800e808 <__kernel_cos>
 800e54c:	e7e3      	b.n	800e516 <sin+0x2e>
 800e54e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e552:	ed9d 0b00 	vldr	d0, [sp]
 800e556:	2001      	movs	r0, #1
 800e558:	f000 fc5a 	bl	800ee10 <__kernel_sin>
 800e55c:	eeb1 0b40 	vneg.f64	d0, d0
 800e560:	e7d9      	b.n	800e516 <sin+0x2e>
 800e562:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e566:	ed9d 0b00 	vldr	d0, [sp]
 800e56a:	f000 f94d 	bl	800e808 <__kernel_cos>
 800e56e:	e7f5      	b.n	800e55c <sin+0x74>
	...
 800e578:	3fe921fb 	.word	0x3fe921fb
 800e57c:	7fefffff 	.word	0x7fefffff

0800e580 <__ieee754_rem_pio2>:
 800e580:	b570      	push	{r4, r5, r6, lr}
 800e582:	eeb0 7b40 	vmov.f64	d7, d0
 800e586:	ee17 5a90 	vmov	r5, s15
 800e58a:	4b99      	ldr	r3, [pc, #612]	; (800e7f0 <__ieee754_rem_pio2+0x270>)
 800e58c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e590:	429e      	cmp	r6, r3
 800e592:	b088      	sub	sp, #32
 800e594:	4604      	mov	r4, r0
 800e596:	dc07      	bgt.n	800e5a8 <__ieee754_rem_pio2+0x28>
 800e598:	2200      	movs	r2, #0
 800e59a:	2300      	movs	r3, #0
 800e59c:	ed84 0b00 	vstr	d0, [r4]
 800e5a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	e01b      	b.n	800e5e0 <__ieee754_rem_pio2+0x60>
 800e5a8:	4b92      	ldr	r3, [pc, #584]	; (800e7f4 <__ieee754_rem_pio2+0x274>)
 800e5aa:	429e      	cmp	r6, r3
 800e5ac:	dc3b      	bgt.n	800e626 <__ieee754_rem_pio2+0xa6>
 800e5ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e5b2:	2d00      	cmp	r5, #0
 800e5b4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800e7b0 <__ieee754_rem_pio2+0x230>
 800e5b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e5bc:	dd19      	ble.n	800e5f2 <__ieee754_rem_pio2+0x72>
 800e5be:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e5c2:	429e      	cmp	r6, r3
 800e5c4:	d00e      	beq.n	800e5e4 <__ieee754_rem_pio2+0x64>
 800e5c6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e7b8 <__ieee754_rem_pio2+0x238>
 800e5ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e5ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e5d2:	ed84 5b00 	vstr	d5, [r4]
 800e5d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5da:	ed84 7b02 	vstr	d7, [r4, #8]
 800e5de:	2001      	movs	r0, #1
 800e5e0:	b008      	add	sp, #32
 800e5e2:	bd70      	pop	{r4, r5, r6, pc}
 800e5e4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e7c0 <__ieee754_rem_pio2+0x240>
 800e5e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5ec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e7c8 <__ieee754_rem_pio2+0x248>
 800e5f0:	e7eb      	b.n	800e5ca <__ieee754_rem_pio2+0x4a>
 800e5f2:	429e      	cmp	r6, r3
 800e5f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e5f8:	d00e      	beq.n	800e618 <__ieee754_rem_pio2+0x98>
 800e5fa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800e7b8 <__ieee754_rem_pio2+0x238>
 800e5fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e602:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e606:	ed84 5b00 	vstr	d5, [r4]
 800e60a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e60e:	f04f 30ff 	mov.w	r0, #4294967295
 800e612:	ed84 7b02 	vstr	d7, [r4, #8]
 800e616:	e7e3      	b.n	800e5e0 <__ieee754_rem_pio2+0x60>
 800e618:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e7c0 <__ieee754_rem_pio2+0x240>
 800e61c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e620:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e7c8 <__ieee754_rem_pio2+0x248>
 800e624:	e7eb      	b.n	800e5fe <__ieee754_rem_pio2+0x7e>
 800e626:	4b74      	ldr	r3, [pc, #464]	; (800e7f8 <__ieee754_rem_pio2+0x278>)
 800e628:	429e      	cmp	r6, r3
 800e62a:	dc70      	bgt.n	800e70e <__ieee754_rem_pio2+0x18e>
 800e62c:	f7ff ff50 	bl	800e4d0 <fabs>
 800e630:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e634:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800e7d0 <__ieee754_rem_pio2+0x250>
 800e638:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e63c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e640:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e644:	ee17 0a90 	vmov	r0, s15
 800e648:	eeb1 4b45 	vneg.f64	d4, d5
 800e64c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e7b0 <__ieee754_rem_pio2+0x230>
 800e650:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e654:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e7b8 <__ieee754_rem_pio2+0x238>
 800e658:	281f      	cmp	r0, #31
 800e65a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e65e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e662:	dc08      	bgt.n	800e676 <__ieee754_rem_pio2+0xf6>
 800e664:	4b65      	ldr	r3, [pc, #404]	; (800e7fc <__ieee754_rem_pio2+0x27c>)
 800e666:	1e42      	subs	r2, r0, #1
 800e668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e66c:	42b3      	cmp	r3, r6
 800e66e:	d002      	beq.n	800e676 <__ieee754_rem_pio2+0xf6>
 800e670:	ed84 6b00 	vstr	d6, [r4]
 800e674:	e026      	b.n	800e6c4 <__ieee754_rem_pio2+0x144>
 800e676:	ee16 3a90 	vmov	r3, s13
 800e67a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e67e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e682:	2b10      	cmp	r3, #16
 800e684:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e688:	ddf2      	ble.n	800e670 <__ieee754_rem_pio2+0xf0>
 800e68a:	eeb0 6b40 	vmov.f64	d6, d0
 800e68e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e7c0 <__ieee754_rem_pio2+0x240>
 800e692:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800e7c8 <__ieee754_rem_pio2+0x248>
 800e696:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e69a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e69e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e6a2:	eeb0 7b40 	vmov.f64	d7, d0
 800e6a6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e6aa:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e6ae:	ee13 3a90 	vmov	r3, s7
 800e6b2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e6b6:	1ad3      	subs	r3, r2, r3
 800e6b8:	2b31      	cmp	r3, #49	; 0x31
 800e6ba:	dc17      	bgt.n	800e6ec <__ieee754_rem_pio2+0x16c>
 800e6bc:	eeb0 0b46 	vmov.f64	d0, d6
 800e6c0:	ed84 3b00 	vstr	d3, [r4]
 800e6c4:	ed94 6b00 	vldr	d6, [r4]
 800e6c8:	2d00      	cmp	r5, #0
 800e6ca:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e6ce:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e6d2:	ed84 0b02 	vstr	d0, [r4, #8]
 800e6d6:	da83      	bge.n	800e5e0 <__ieee754_rem_pio2+0x60>
 800e6d8:	eeb1 6b46 	vneg.f64	d6, d6
 800e6dc:	eeb1 0b40 	vneg.f64	d0, d0
 800e6e0:	ed84 6b00 	vstr	d6, [r4]
 800e6e4:	ed84 0b02 	vstr	d0, [r4, #8]
 800e6e8:	4240      	negs	r0, r0
 800e6ea:	e779      	b.n	800e5e0 <__ieee754_rem_pio2+0x60>
 800e6ec:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800e7d8 <__ieee754_rem_pio2+0x258>
 800e6f0:	eeb0 0b46 	vmov.f64	d0, d6
 800e6f4:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e6f8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e6fc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800e7e0 <__ieee754_rem_pio2+0x260>
 800e700:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e704:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e708:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e70c:	e7b0      	b.n	800e670 <__ieee754_rem_pio2+0xf0>
 800e70e:	4b3c      	ldr	r3, [pc, #240]	; (800e800 <__ieee754_rem_pio2+0x280>)
 800e710:	429e      	cmp	r6, r3
 800e712:	dd06      	ble.n	800e722 <__ieee754_rem_pio2+0x1a2>
 800e714:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e718:	ed80 7b02 	vstr	d7, [r0, #8]
 800e71c:	ed80 7b00 	vstr	d7, [r0]
 800e720:	e740      	b.n	800e5a4 <__ieee754_rem_pio2+0x24>
 800e722:	1532      	asrs	r2, r6, #20
 800e724:	ee10 0a10 	vmov	r0, s0
 800e728:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e72c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e730:	ec41 0b17 	vmov	d7, r0, r1
 800e734:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e738:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800e7e8 <__ieee754_rem_pio2+0x268>
 800e73c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e740:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e744:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e748:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e74c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e750:	a902      	add	r1, sp, #8
 800e752:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e756:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e75a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e75e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e762:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e766:	2603      	movs	r6, #3
 800e768:	4608      	mov	r0, r1
 800e76a:	ed91 7b04 	vldr	d7, [r1, #16]
 800e76e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e776:	4633      	mov	r3, r6
 800e778:	f1a1 0108 	sub.w	r1, r1, #8
 800e77c:	f106 36ff 	add.w	r6, r6, #4294967295
 800e780:	d0f3      	beq.n	800e76a <__ieee754_rem_pio2+0x1ea>
 800e782:	4920      	ldr	r1, [pc, #128]	; (800e804 <__ieee754_rem_pio2+0x284>)
 800e784:	9101      	str	r1, [sp, #4]
 800e786:	2102      	movs	r1, #2
 800e788:	9100      	str	r1, [sp, #0]
 800e78a:	4621      	mov	r1, r4
 800e78c:	f000 f8a8 	bl	800e8e0 <__kernel_rem_pio2>
 800e790:	2d00      	cmp	r5, #0
 800e792:	f6bf af25 	bge.w	800e5e0 <__ieee754_rem_pio2+0x60>
 800e796:	ed94 7b00 	vldr	d7, [r4]
 800e79a:	eeb1 7b47 	vneg.f64	d7, d7
 800e79e:	ed84 7b00 	vstr	d7, [r4]
 800e7a2:	ed94 7b02 	vldr	d7, [r4, #8]
 800e7a6:	eeb1 7b47 	vneg.f64	d7, d7
 800e7aa:	ed84 7b02 	vstr	d7, [r4, #8]
 800e7ae:	e79b      	b.n	800e6e8 <__ieee754_rem_pio2+0x168>
 800e7b0:	54400000 	.word	0x54400000
 800e7b4:	3ff921fb 	.word	0x3ff921fb
 800e7b8:	1a626331 	.word	0x1a626331
 800e7bc:	3dd0b461 	.word	0x3dd0b461
 800e7c0:	1a600000 	.word	0x1a600000
 800e7c4:	3dd0b461 	.word	0x3dd0b461
 800e7c8:	2e037073 	.word	0x2e037073
 800e7cc:	3ba3198a 	.word	0x3ba3198a
 800e7d0:	6dc9c883 	.word	0x6dc9c883
 800e7d4:	3fe45f30 	.word	0x3fe45f30
 800e7d8:	2e000000 	.word	0x2e000000
 800e7dc:	3ba3198a 	.word	0x3ba3198a
 800e7e0:	252049c1 	.word	0x252049c1
 800e7e4:	397b839a 	.word	0x397b839a
 800e7e8:	00000000 	.word	0x00000000
 800e7ec:	41700000 	.word	0x41700000
 800e7f0:	3fe921fb 	.word	0x3fe921fb
 800e7f4:	4002d97b 	.word	0x4002d97b
 800e7f8:	413921fb 	.word	0x413921fb
 800e7fc:	08010850 	.word	0x08010850
 800e800:	7fefffff 	.word	0x7fefffff
 800e804:	080108d0 	.word	0x080108d0

0800e808 <__kernel_cos>:
 800e808:	ee10 1a90 	vmov	r1, s1
 800e80c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e814:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e818:	da05      	bge.n	800e826 <__kernel_cos+0x1e>
 800e81a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e81e:	ee17 3a90 	vmov	r3, s15
 800e822:	2b00      	cmp	r3, #0
 800e824:	d03d      	beq.n	800e8a2 <__kernel_cos+0x9a>
 800e826:	ee20 3b00 	vmul.f64	d3, d0, d0
 800e82a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e8a8 <__kernel_cos+0xa0>
 800e82e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e8b0 <__kernel_cos+0xa8>
 800e832:	eea3 6b07 	vfma.f64	d6, d3, d7
 800e836:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e8b8 <__kernel_cos+0xb0>
 800e83a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e83e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e8c0 <__kernel_cos+0xb8>
 800e842:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e846:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e8c8 <__kernel_cos+0xc0>
 800e84a:	4b23      	ldr	r3, [pc, #140]	; (800e8d8 <__kernel_cos+0xd0>)
 800e84c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e850:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800e8d0 <__kernel_cos+0xc8>
 800e854:	4299      	cmp	r1, r3
 800e856:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e85a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e85e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800e862:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e866:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800e86a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e86e:	dc04      	bgt.n	800e87a <__kernel_cos+0x72>
 800e870:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e874:	ee34 0b46 	vsub.f64	d0, d4, d6
 800e878:	4770      	bx	lr
 800e87a:	4b18      	ldr	r3, [pc, #96]	; (800e8dc <__kernel_cos+0xd4>)
 800e87c:	4299      	cmp	r1, r3
 800e87e:	dc0d      	bgt.n	800e89c <__kernel_cos+0x94>
 800e880:	2200      	movs	r2, #0
 800e882:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e886:	ec43 2b15 	vmov	d5, r2, r3
 800e88a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800e88e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e892:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e896:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e89a:	4770      	bx	lr
 800e89c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e8a0:	e7f3      	b.n	800e88a <__kernel_cos+0x82>
 800e8a2:	eeb0 0b44 	vmov.f64	d0, d4
 800e8a6:	4770      	bx	lr
 800e8a8:	be8838d4 	.word	0xbe8838d4
 800e8ac:	bda8fae9 	.word	0xbda8fae9
 800e8b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e8b4:	3e21ee9e 	.word	0x3e21ee9e
 800e8b8:	809c52ad 	.word	0x809c52ad
 800e8bc:	be927e4f 	.word	0xbe927e4f
 800e8c0:	19cb1590 	.word	0x19cb1590
 800e8c4:	3efa01a0 	.word	0x3efa01a0
 800e8c8:	16c15177 	.word	0x16c15177
 800e8cc:	bf56c16c 	.word	0xbf56c16c
 800e8d0:	5555554c 	.word	0x5555554c
 800e8d4:	3fa55555 	.word	0x3fa55555
 800e8d8:	3fd33332 	.word	0x3fd33332
 800e8dc:	3fe90000 	.word	0x3fe90000

0800e8e0 <__kernel_rem_pio2>:
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e4:	ed2d 8b06 	vpush	{d8-d10}
 800e8e8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800e8ec:	460f      	mov	r7, r1
 800e8ee:	9002      	str	r0, [sp, #8]
 800e8f0:	49c5      	ldr	r1, [pc, #788]	; (800ec08 <__kernel_rem_pio2+0x328>)
 800e8f2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800e8f4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800e8f8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	f112 0f14 	cmn.w	r2, #20
 800e902:	bfa8      	it	ge
 800e904:	2018      	movge	r0, #24
 800e906:	f103 31ff 	add.w	r1, r3, #4294967295
 800e90a:	bfb8      	it	lt
 800e90c:	2000      	movlt	r0, #0
 800e90e:	f06f 0417 	mvn.w	r4, #23
 800e912:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800ebf0 <__kernel_rem_pio2+0x310>
 800e916:	bfa4      	itt	ge
 800e918:	f1a2 0a03 	subge.w	sl, r2, #3
 800e91c:	fb9a f0f0 	sdivge	r0, sl, r0
 800e920:	fb00 4404 	mla	r4, r0, r4, r4
 800e924:	1a46      	subs	r6, r0, r1
 800e926:	4414      	add	r4, r2
 800e928:	eb09 0c01 	add.w	ip, r9, r1
 800e92c:	ad1a      	add	r5, sp, #104	; 0x68
 800e92e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800e932:	2200      	movs	r2, #0
 800e934:	4562      	cmp	r2, ip
 800e936:	dd10      	ble.n	800e95a <__kernel_rem_pio2+0x7a>
 800e938:	9a01      	ldr	r2, [sp, #4]
 800e93a:	ab1a      	add	r3, sp, #104	; 0x68
 800e93c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e940:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800e944:	f04f 0c00 	mov.w	ip, #0
 800e948:	45cc      	cmp	ip, r9
 800e94a:	dc26      	bgt.n	800e99a <__kernel_rem_pio2+0xba>
 800e94c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800ebf0 <__kernel_rem_pio2+0x310>
 800e950:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e954:	4616      	mov	r6, r2
 800e956:	2500      	movs	r5, #0
 800e958:	e015      	b.n	800e986 <__kernel_rem_pio2+0xa6>
 800e95a:	42d6      	cmn	r6, r2
 800e95c:	d409      	bmi.n	800e972 <__kernel_rem_pio2+0x92>
 800e95e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800e962:	ee07 3a90 	vmov	s15, r3
 800e966:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e96a:	eca5 7b02 	vstmia	r5!, {d7}
 800e96e:	3201      	adds	r2, #1
 800e970:	e7e0      	b.n	800e934 <__kernel_rem_pio2+0x54>
 800e972:	eeb0 7b46 	vmov.f64	d7, d6
 800e976:	e7f8      	b.n	800e96a <__kernel_rem_pio2+0x8a>
 800e978:	ecb8 5b02 	vldmia	r8!, {d5}
 800e97c:	ed96 6b00 	vldr	d6, [r6]
 800e980:	3501      	adds	r5, #1
 800e982:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e986:	428d      	cmp	r5, r1
 800e988:	f1a6 0608 	sub.w	r6, r6, #8
 800e98c:	ddf4      	ble.n	800e978 <__kernel_rem_pio2+0x98>
 800e98e:	ecaa 7b02 	vstmia	sl!, {d7}
 800e992:	f10c 0c01 	add.w	ip, ip, #1
 800e996:	3208      	adds	r2, #8
 800e998:	e7d6      	b.n	800e948 <__kernel_rem_pio2+0x68>
 800e99a:	ab06      	add	r3, sp, #24
 800e99c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800ebf8 <__kernel_rem_pio2+0x318>
 800e9a0:	ed9f ab97 	vldr	d10, [pc, #604]	; 800ec00 <__kernel_rem_pio2+0x320>
 800e9a4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e9a8:	9303      	str	r3, [sp, #12]
 800e9aa:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800e9ae:	464d      	mov	r5, r9
 800e9b0:	00eb      	lsls	r3, r5, #3
 800e9b2:	9304      	str	r3, [sp, #16]
 800e9b4:	ab92      	add	r3, sp, #584	; 0x248
 800e9b6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e9ba:	f10d 0b18 	add.w	fp, sp, #24
 800e9be:	ab6a      	add	r3, sp, #424	; 0x1a8
 800e9c0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800e9c4:	465e      	mov	r6, fp
 800e9c6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e9ca:	4628      	mov	r0, r5
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	f1a2 0208 	sub.w	r2, r2, #8
 800e9d2:	dc4c      	bgt.n	800ea6e <__kernel_rem_pio2+0x18e>
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	9105      	str	r1, [sp, #20]
 800e9d8:	f000 fb56 	bl	800f088 <scalbn>
 800e9dc:	eeb0 8b40 	vmov.f64	d8, d0
 800e9e0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e9e4:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e9e8:	f000 fada 	bl	800efa0 <floor>
 800e9ec:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e9f0:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e9f4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e9f8:	2c00      	cmp	r4, #0
 800e9fa:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800e9fe:	ee17 8a90 	vmov	r8, s15
 800ea02:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ea06:	9905      	ldr	r1, [sp, #20]
 800ea08:	dd43      	ble.n	800ea92 <__kernel_rem_pio2+0x1b2>
 800ea0a:	1e68      	subs	r0, r5, #1
 800ea0c:	ab06      	add	r3, sp, #24
 800ea0e:	f1c4 0c18 	rsb	ip, r4, #24
 800ea12:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800ea16:	fa46 f20c 	asr.w	r2, r6, ip
 800ea1a:	4490      	add	r8, r2
 800ea1c:	fa02 f20c 	lsl.w	r2, r2, ip
 800ea20:	1ab6      	subs	r6, r6, r2
 800ea22:	f1c4 0217 	rsb	r2, r4, #23
 800ea26:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800ea2a:	4116      	asrs	r6, r2
 800ea2c:	2e00      	cmp	r6, #0
 800ea2e:	dd3f      	ble.n	800eab0 <__kernel_rem_pio2+0x1d0>
 800ea30:	f04f 0c00 	mov.w	ip, #0
 800ea34:	f108 0801 	add.w	r8, r8, #1
 800ea38:	4660      	mov	r0, ip
 800ea3a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800ea3e:	4565      	cmp	r5, ip
 800ea40:	dc6e      	bgt.n	800eb20 <__kernel_rem_pio2+0x240>
 800ea42:	2c00      	cmp	r4, #0
 800ea44:	dd04      	ble.n	800ea50 <__kernel_rem_pio2+0x170>
 800ea46:	2c01      	cmp	r4, #1
 800ea48:	d07f      	beq.n	800eb4a <__kernel_rem_pio2+0x26a>
 800ea4a:	2c02      	cmp	r4, #2
 800ea4c:	f000 8087 	beq.w	800eb5e <__kernel_rem_pio2+0x27e>
 800ea50:	2e02      	cmp	r6, #2
 800ea52:	d12d      	bne.n	800eab0 <__kernel_rem_pio2+0x1d0>
 800ea54:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ea58:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ea5c:	b340      	cbz	r0, 800eab0 <__kernel_rem_pio2+0x1d0>
 800ea5e:	4620      	mov	r0, r4
 800ea60:	9105      	str	r1, [sp, #20]
 800ea62:	f000 fb11 	bl	800f088 <scalbn>
 800ea66:	9905      	ldr	r1, [sp, #20]
 800ea68:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ea6c:	e020      	b.n	800eab0 <__kernel_rem_pio2+0x1d0>
 800ea6e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ea72:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ea76:	3801      	subs	r0, #1
 800ea78:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ea7c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ea80:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ea84:	eca6 0a01 	vstmia	r6!, {s0}
 800ea88:	ed92 0b00 	vldr	d0, [r2]
 800ea8c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ea90:	e79c      	b.n	800e9cc <__kernel_rem_pio2+0xec>
 800ea92:	d105      	bne.n	800eaa0 <__kernel_rem_pio2+0x1c0>
 800ea94:	1e6a      	subs	r2, r5, #1
 800ea96:	ab06      	add	r3, sp, #24
 800ea98:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800ea9c:	15f6      	asrs	r6, r6, #23
 800ea9e:	e7c5      	b.n	800ea2c <__kernel_rem_pio2+0x14c>
 800eaa0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800eaa4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800eaa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaac:	da36      	bge.n	800eb1c <__kernel_rem_pio2+0x23c>
 800eaae:	2600      	movs	r6, #0
 800eab0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab8:	f040 80aa 	bne.w	800ec10 <__kernel_rem_pio2+0x330>
 800eabc:	f105 3bff 	add.w	fp, r5, #4294967295
 800eac0:	4658      	mov	r0, fp
 800eac2:	2200      	movs	r2, #0
 800eac4:	4548      	cmp	r0, r9
 800eac6:	da52      	bge.n	800eb6e <__kernel_rem_pio2+0x28e>
 800eac8:	2a00      	cmp	r2, #0
 800eaca:	f000 8081 	beq.w	800ebd0 <__kernel_rem_pio2+0x2f0>
 800eace:	ab06      	add	r3, sp, #24
 800ead0:	3c18      	subs	r4, #24
 800ead2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	f000 8087 	beq.w	800ebea <__kernel_rem_pio2+0x30a>
 800eadc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800eae0:	4620      	mov	r0, r4
 800eae2:	f000 fad1 	bl	800f088 <scalbn>
 800eae6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800eaea:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800ebf8 <__kernel_rem_pio2+0x318>
 800eaee:	a96a      	add	r1, sp, #424	; 0x1a8
 800eaf0:	f103 0208 	add.w	r2, r3, #8
 800eaf4:	1888      	adds	r0, r1, r2
 800eaf6:	4659      	mov	r1, fp
 800eaf8:	2900      	cmp	r1, #0
 800eafa:	f280 80b7 	bge.w	800ec6c <__kernel_rem_pio2+0x38c>
 800eafe:	4659      	mov	r1, fp
 800eb00:	2900      	cmp	r1, #0
 800eb02:	f2c0 80d5 	blt.w	800ecb0 <__kernel_rem_pio2+0x3d0>
 800eb06:	a86a      	add	r0, sp, #424	; 0x1a8
 800eb08:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800eb0c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800ebf0 <__kernel_rem_pio2+0x310>
 800eb10:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800ec0c <__kernel_rem_pio2+0x32c>
 800eb14:	2400      	movs	r4, #0
 800eb16:	ebab 0001 	sub.w	r0, fp, r1
 800eb1a:	e0be      	b.n	800ec9a <__kernel_rem_pio2+0x3ba>
 800eb1c:	2602      	movs	r6, #2
 800eb1e:	e787      	b.n	800ea30 <__kernel_rem_pio2+0x150>
 800eb20:	f8db 2000 	ldr.w	r2, [fp]
 800eb24:	b958      	cbnz	r0, 800eb3e <__kernel_rem_pio2+0x25e>
 800eb26:	b122      	cbz	r2, 800eb32 <__kernel_rem_pio2+0x252>
 800eb28:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800eb2c:	f8cb 2000 	str.w	r2, [fp]
 800eb30:	2201      	movs	r2, #1
 800eb32:	f10c 0c01 	add.w	ip, ip, #1
 800eb36:	f10b 0b04 	add.w	fp, fp, #4
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	e77f      	b.n	800ea3e <__kernel_rem_pio2+0x15e>
 800eb3e:	ebae 0202 	sub.w	r2, lr, r2
 800eb42:	f8cb 2000 	str.w	r2, [fp]
 800eb46:	4602      	mov	r2, r0
 800eb48:	e7f3      	b.n	800eb32 <__kernel_rem_pio2+0x252>
 800eb4a:	f105 3cff 	add.w	ip, r5, #4294967295
 800eb4e:	ab06      	add	r3, sp, #24
 800eb50:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800eb54:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800eb58:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800eb5c:	e778      	b.n	800ea50 <__kernel_rem_pio2+0x170>
 800eb5e:	f105 3cff 	add.w	ip, r5, #4294967295
 800eb62:	ab06      	add	r3, sp, #24
 800eb64:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800eb68:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800eb6c:	e7f4      	b.n	800eb58 <__kernel_rem_pio2+0x278>
 800eb6e:	ab06      	add	r3, sp, #24
 800eb70:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800eb74:	3801      	subs	r0, #1
 800eb76:	431a      	orrs	r2, r3
 800eb78:	e7a4      	b.n	800eac4 <__kernel_rem_pio2+0x1e4>
 800eb7a:	f10c 0c01 	add.w	ip, ip, #1
 800eb7e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800eb82:	2800      	cmp	r0, #0
 800eb84:	d0f9      	beq.n	800eb7a <__kernel_rem_pio2+0x29a>
 800eb86:	9b04      	ldr	r3, [sp, #16]
 800eb88:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800eb8c:	eb0d 0203 	add.w	r2, sp, r3
 800eb90:	9b01      	ldr	r3, [sp, #4]
 800eb92:	18e8      	adds	r0, r5, r3
 800eb94:	ab1a      	add	r3, sp, #104	; 0x68
 800eb96:	1c6e      	adds	r6, r5, #1
 800eb98:	3a98      	subs	r2, #152	; 0x98
 800eb9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800eb9e:	4465      	add	r5, ip
 800eba0:	42b5      	cmp	r5, r6
 800eba2:	f6ff af05 	blt.w	800e9b0 <__kernel_rem_pio2+0xd0>
 800eba6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800ebaa:	f8dd e008 	ldr.w	lr, [sp, #8]
 800ebae:	ee07 3a90 	vmov	s15, r3
 800ebb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ebb6:	f04f 0c00 	mov.w	ip, #0
 800ebba:	eca0 7b02 	vstmia	r0!, {d7}
 800ebbe:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ebf0 <__kernel_rem_pio2+0x310>
 800ebc2:	4680      	mov	r8, r0
 800ebc4:	458c      	cmp	ip, r1
 800ebc6:	dd07      	ble.n	800ebd8 <__kernel_rem_pio2+0x2f8>
 800ebc8:	eca2 7b02 	vstmia	r2!, {d7}
 800ebcc:	3601      	adds	r6, #1
 800ebce:	e7e7      	b.n	800eba0 <__kernel_rem_pio2+0x2c0>
 800ebd0:	9a03      	ldr	r2, [sp, #12]
 800ebd2:	f04f 0c01 	mov.w	ip, #1
 800ebd6:	e7d2      	b.n	800eb7e <__kernel_rem_pio2+0x29e>
 800ebd8:	ecbe 5b02 	vldmia	lr!, {d5}
 800ebdc:	ed38 6b02 	vldmdb	r8!, {d6}
 800ebe0:	f10c 0c01 	add.w	ip, ip, #1
 800ebe4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ebe8:	e7ec      	b.n	800ebc4 <__kernel_rem_pio2+0x2e4>
 800ebea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebee:	e76e      	b.n	800eace <__kernel_rem_pio2+0x1ee>
	...
 800ebfc:	3e700000 	.word	0x3e700000
 800ec00:	00000000 	.word	0x00000000
 800ec04:	41700000 	.word	0x41700000
 800ec08:	08011288 	.word	0x08011288
 800ec0c:	08011248 	.word	0x08011248
 800ec10:	4260      	negs	r0, r4
 800ec12:	eeb0 0b48 	vmov.f64	d0, d8
 800ec16:	f000 fa37 	bl	800f088 <scalbn>
 800ec1a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800edf8 <__kernel_rem_pio2+0x518>
 800ec1e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec26:	db18      	blt.n	800ec5a <__kernel_rem_pio2+0x37a>
 800ec28:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800ee00 <__kernel_rem_pio2+0x520>
 800ec2c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ec30:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ec34:	aa06      	add	r2, sp, #24
 800ec36:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800ec3a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800ec3e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ec42:	f105 0b01 	add.w	fp, r5, #1
 800ec46:	ee10 3a10 	vmov	r3, s0
 800ec4a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ec4e:	ee17 3a10 	vmov	r3, s14
 800ec52:	3418      	adds	r4, #24
 800ec54:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800ec58:	e740      	b.n	800eadc <__kernel_rem_pio2+0x1fc>
 800ec5a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ec5e:	aa06      	add	r2, sp, #24
 800ec60:	ee10 3a10 	vmov	r3, s0
 800ec64:	46ab      	mov	fp, r5
 800ec66:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800ec6a:	e737      	b.n	800eadc <__kernel_rem_pio2+0x1fc>
 800ec6c:	ac06      	add	r4, sp, #24
 800ec6e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800ec72:	9401      	str	r4, [sp, #4]
 800ec74:	ee07 4a90 	vmov	s15, r4
 800ec78:	3901      	subs	r1, #1
 800ec7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec7e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ec82:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ec86:	ed20 7b02 	vstmdb	r0!, {d7}
 800ec8a:	e735      	b.n	800eaf8 <__kernel_rem_pio2+0x218>
 800ec8c:	ecbc 5b02 	vldmia	ip!, {d5}
 800ec90:	ecb5 6b02 	vldmia	r5!, {d6}
 800ec94:	3401      	adds	r4, #1
 800ec96:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ec9a:	454c      	cmp	r4, r9
 800ec9c:	dc01      	bgt.n	800eca2 <__kernel_rem_pio2+0x3c2>
 800ec9e:	4284      	cmp	r4, r0
 800eca0:	ddf4      	ble.n	800ec8c <__kernel_rem_pio2+0x3ac>
 800eca2:	ac42      	add	r4, sp, #264	; 0x108
 800eca4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800eca8:	ed80 7b00 	vstr	d7, [r0]
 800ecac:	3901      	subs	r1, #1
 800ecae:	e727      	b.n	800eb00 <__kernel_rem_pio2+0x220>
 800ecb0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800ecb2:	2902      	cmp	r1, #2
 800ecb4:	dc0a      	bgt.n	800eccc <__kernel_rem_pio2+0x3ec>
 800ecb6:	2900      	cmp	r1, #0
 800ecb8:	dc2c      	bgt.n	800ed14 <__kernel_rem_pio2+0x434>
 800ecba:	d045      	beq.n	800ed48 <__kernel_rem_pio2+0x468>
 800ecbc:	f008 0007 	and.w	r0, r8, #7
 800ecc0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800ecc4:	ecbd 8b06 	vpop	{d8-d10}
 800ecc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eccc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800ecce:	2a03      	cmp	r2, #3
 800ecd0:	d1f4      	bne.n	800ecbc <__kernel_rem_pio2+0x3dc>
 800ecd2:	aa42      	add	r2, sp, #264	; 0x108
 800ecd4:	4413      	add	r3, r2
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	4619      	mov	r1, r3
 800ecda:	4658      	mov	r0, fp
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	f1a1 0108 	sub.w	r1, r1, #8
 800ece2:	dc54      	bgt.n	800ed8e <__kernel_rem_pio2+0x4ae>
 800ece4:	4659      	mov	r1, fp
 800ece6:	2901      	cmp	r1, #1
 800ece8:	f1a2 0208 	sub.w	r2, r2, #8
 800ecec:	dc5f      	bgt.n	800edae <__kernel_rem_pio2+0x4ce>
 800ecee:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800ee08 <__kernel_rem_pio2+0x528>
 800ecf2:	3308      	adds	r3, #8
 800ecf4:	f1bb 0f01 	cmp.w	fp, #1
 800ecf8:	dc69      	bgt.n	800edce <__kernel_rem_pio2+0x4ee>
 800ecfa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800ecfe:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800ed02:	2e00      	cmp	r6, #0
 800ed04:	d16a      	bne.n	800eddc <__kernel_rem_pio2+0x4fc>
 800ed06:	ed87 5b00 	vstr	d5, [r7]
 800ed0a:	ed87 6b02 	vstr	d6, [r7, #8]
 800ed0e:	ed87 7b04 	vstr	d7, [r7, #16]
 800ed12:	e7d3      	b.n	800ecbc <__kernel_rem_pio2+0x3dc>
 800ed14:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ee08 <__kernel_rem_pio2+0x528>
 800ed18:	ab42      	add	r3, sp, #264	; 0x108
 800ed1a:	441a      	add	r2, r3
 800ed1c:	465b      	mov	r3, fp
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	da26      	bge.n	800ed70 <__kernel_rem_pio2+0x490>
 800ed22:	b35e      	cbz	r6, 800ed7c <__kernel_rem_pio2+0x49c>
 800ed24:	eeb1 7b46 	vneg.f64	d7, d6
 800ed28:	ed87 7b00 	vstr	d7, [r7]
 800ed2c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800ed30:	aa44      	add	r2, sp, #272	; 0x110
 800ed32:	2301      	movs	r3, #1
 800ed34:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ed38:	459b      	cmp	fp, r3
 800ed3a:	da22      	bge.n	800ed82 <__kernel_rem_pio2+0x4a2>
 800ed3c:	b10e      	cbz	r6, 800ed42 <__kernel_rem_pio2+0x462>
 800ed3e:	eeb1 7b47 	vneg.f64	d7, d7
 800ed42:	ed87 7b02 	vstr	d7, [r7, #8]
 800ed46:	e7b9      	b.n	800ecbc <__kernel_rem_pio2+0x3dc>
 800ed48:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ee08 <__kernel_rem_pio2+0x528>
 800ed4c:	ab42      	add	r3, sp, #264	; 0x108
 800ed4e:	441a      	add	r2, r3
 800ed50:	f1bb 0f00 	cmp.w	fp, #0
 800ed54:	da05      	bge.n	800ed62 <__kernel_rem_pio2+0x482>
 800ed56:	b10e      	cbz	r6, 800ed5c <__kernel_rem_pio2+0x47c>
 800ed58:	eeb1 7b47 	vneg.f64	d7, d7
 800ed5c:	ed87 7b00 	vstr	d7, [r7]
 800ed60:	e7ac      	b.n	800ecbc <__kernel_rem_pio2+0x3dc>
 800ed62:	ed32 6b02 	vldmdb	r2!, {d6}
 800ed66:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ed6e:	e7ef      	b.n	800ed50 <__kernel_rem_pio2+0x470>
 800ed70:	ed32 7b02 	vldmdb	r2!, {d7}
 800ed74:	3b01      	subs	r3, #1
 800ed76:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ed7a:	e7d0      	b.n	800ed1e <__kernel_rem_pio2+0x43e>
 800ed7c:	eeb0 7b46 	vmov.f64	d7, d6
 800ed80:	e7d2      	b.n	800ed28 <__kernel_rem_pio2+0x448>
 800ed82:	ecb2 6b02 	vldmia	r2!, {d6}
 800ed86:	3301      	adds	r3, #1
 800ed88:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ed8c:	e7d4      	b.n	800ed38 <__kernel_rem_pio2+0x458>
 800ed8e:	ed91 7b00 	vldr	d7, [r1]
 800ed92:	ed91 5b02 	vldr	d5, [r1, #8]
 800ed96:	3801      	subs	r0, #1
 800ed98:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ed9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800eda0:	ed81 6b00 	vstr	d6, [r1]
 800eda4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800eda8:	ed81 7b02 	vstr	d7, [r1, #8]
 800edac:	e796      	b.n	800ecdc <__kernel_rem_pio2+0x3fc>
 800edae:	ed92 7b00 	vldr	d7, [r2]
 800edb2:	ed92 5b02 	vldr	d5, [r2, #8]
 800edb6:	3901      	subs	r1, #1
 800edb8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800edbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800edc0:	ed82 6b00 	vstr	d6, [r2]
 800edc4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800edc8:	ed82 7b02 	vstr	d7, [r2, #8]
 800edcc:	e78b      	b.n	800ece6 <__kernel_rem_pio2+0x406>
 800edce:	ed33 6b02 	vldmdb	r3!, {d6}
 800edd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800edd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800edda:	e78b      	b.n	800ecf4 <__kernel_rem_pio2+0x414>
 800eddc:	eeb1 5b45 	vneg.f64	d5, d5
 800ede0:	eeb1 6b46 	vneg.f64	d6, d6
 800ede4:	ed87 5b00 	vstr	d5, [r7]
 800ede8:	eeb1 7b47 	vneg.f64	d7, d7
 800edec:	ed87 6b02 	vstr	d6, [r7, #8]
 800edf0:	e78d      	b.n	800ed0e <__kernel_rem_pio2+0x42e>
 800edf2:	bf00      	nop
 800edf4:	f3af 8000 	nop.w
 800edf8:	00000000 	.word	0x00000000
 800edfc:	41700000 	.word	0x41700000
 800ee00:	00000000 	.word	0x00000000
 800ee04:	3e700000 	.word	0x3e700000
	...

0800ee10 <__kernel_sin>:
 800ee10:	ee10 3a90 	vmov	r3, s1
 800ee14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee18:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ee1c:	da04      	bge.n	800ee28 <__kernel_sin+0x18>
 800ee1e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ee22:	ee17 3a90 	vmov	r3, s15
 800ee26:	b35b      	cbz	r3, 800ee80 <__kernel_sin+0x70>
 800ee28:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ee2c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ee30:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800ee88 <__kernel_sin+0x78>
 800ee34:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800ee90 <__kernel_sin+0x80>
 800ee38:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ee3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800ee98 <__kernel_sin+0x88>
 800ee40:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ee44:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eea0 <__kernel_sin+0x90>
 800ee48:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ee4c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800eea8 <__kernel_sin+0x98>
 800ee50:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ee54:	b930      	cbnz	r0, 800ee64 <__kernel_sin+0x54>
 800ee56:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eeb0 <__kernel_sin+0xa0>
 800ee5a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ee5e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ee62:	4770      	bx	lr
 800ee64:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800ee68:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ee6c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ee70:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ee74:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800eeb8 <__kernel_sin+0xa8>
 800ee78:	eea5 1b07 	vfma.f64	d1, d5, d7
 800ee7c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	f3af 8000 	nop.w
 800ee88:	5acfd57c 	.word	0x5acfd57c
 800ee8c:	3de5d93a 	.word	0x3de5d93a
 800ee90:	8a2b9ceb 	.word	0x8a2b9ceb
 800ee94:	be5ae5e6 	.word	0xbe5ae5e6
 800ee98:	57b1fe7d 	.word	0x57b1fe7d
 800ee9c:	3ec71de3 	.word	0x3ec71de3
 800eea0:	19c161d5 	.word	0x19c161d5
 800eea4:	bf2a01a0 	.word	0xbf2a01a0
 800eea8:	1110f8a6 	.word	0x1110f8a6
 800eeac:	3f811111 	.word	0x3f811111
 800eeb0:	55555549 	.word	0x55555549
 800eeb4:	bfc55555 	.word	0xbfc55555
 800eeb8:	55555549 	.word	0x55555549
 800eebc:	3fc55555 	.word	0x3fc55555

0800eec0 <with_errno>:
 800eec0:	b513      	push	{r0, r1, r4, lr}
 800eec2:	4604      	mov	r4, r0
 800eec4:	ed8d 0b00 	vstr	d0, [sp]
 800eec8:	f7fa fd9c 	bl	8009a04 <__errno>
 800eecc:	ed9d 0b00 	vldr	d0, [sp]
 800eed0:	6004      	str	r4, [r0, #0]
 800eed2:	b002      	add	sp, #8
 800eed4:	bd10      	pop	{r4, pc}

0800eed6 <xflow>:
 800eed6:	b082      	sub	sp, #8
 800eed8:	b158      	cbz	r0, 800eef2 <xflow+0x1c>
 800eeda:	eeb1 7b40 	vneg.f64	d7, d0
 800eede:	ed8d 7b00 	vstr	d7, [sp]
 800eee2:	ed9d 7b00 	vldr	d7, [sp]
 800eee6:	2022      	movs	r0, #34	; 0x22
 800eee8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800eeec:	b002      	add	sp, #8
 800eeee:	f7ff bfe7 	b.w	800eec0 <with_errno>
 800eef2:	eeb0 7b40 	vmov.f64	d7, d0
 800eef6:	e7f2      	b.n	800eede <xflow+0x8>

0800eef8 <__math_uflow>:
 800eef8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef00 <__math_uflow+0x8>
 800eefc:	f7ff bfeb 	b.w	800eed6 <xflow>
 800ef00:	00000000 	.word	0x00000000
 800ef04:	10000000 	.word	0x10000000

0800ef08 <__math_oflow>:
 800ef08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef10 <__math_oflow+0x8>
 800ef0c:	f7ff bfe3 	b.w	800eed6 <xflow>
 800ef10:	00000000 	.word	0x00000000
 800ef14:	70000000 	.word	0x70000000

0800ef18 <__math_divzero>:
 800ef18:	b082      	sub	sp, #8
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ef20:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800ef24:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800ef28:	ed8d 7b00 	vstr	d7, [sp]
 800ef2c:	ed9d 0b00 	vldr	d0, [sp]
 800ef30:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800ef40 <__math_divzero+0x28>
 800ef34:	2022      	movs	r0, #34	; 0x22
 800ef36:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800ef3a:	b002      	add	sp, #8
 800ef3c:	f7ff bfc0 	b.w	800eec0 <with_errno>
	...

0800ef48 <__math_invalid>:
 800ef48:	eeb0 7b40 	vmov.f64	d7, d0
 800ef4c:	eeb4 7b47 	vcmp.f64	d7, d7
 800ef50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef54:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ef58:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800ef5c:	d602      	bvs.n	800ef64 <__math_invalid+0x1c>
 800ef5e:	2021      	movs	r0, #33	; 0x21
 800ef60:	f7ff bfae 	b.w	800eec0 <with_errno>
 800ef64:	4770      	bx	lr

0800ef66 <__math_check_uflow>:
 800ef66:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ef6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6e:	d102      	bne.n	800ef76 <__math_check_uflow+0x10>
 800ef70:	2022      	movs	r0, #34	; 0x22
 800ef72:	f7ff bfa5 	b.w	800eec0 <with_errno>
 800ef76:	4770      	bx	lr

0800ef78 <__math_check_oflow>:
 800ef78:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ef98 <__math_check_oflow+0x20>
 800ef7c:	eeb0 7bc0 	vabs.f64	d7, d0
 800ef80:	eeb4 7b46 	vcmp.f64	d7, d6
 800ef84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef88:	dd02      	ble.n	800ef90 <__math_check_oflow+0x18>
 800ef8a:	2022      	movs	r0, #34	; 0x22
 800ef8c:	f7ff bf98 	b.w	800eec0 <with_errno>
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	f3af 8000 	nop.w
 800ef98:	ffffffff 	.word	0xffffffff
 800ef9c:	7fefffff 	.word	0x7fefffff

0800efa0 <floor>:
 800efa0:	ee10 1a90 	vmov	r1, s1
 800efa4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800efa8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800efac:	2b13      	cmp	r3, #19
 800efae:	b530      	push	{r4, r5, lr}
 800efb0:	ee10 0a10 	vmov	r0, s0
 800efb4:	ee10 5a10 	vmov	r5, s0
 800efb8:	dc31      	bgt.n	800f01e <floor+0x7e>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	da15      	bge.n	800efea <floor+0x4a>
 800efbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800f078 <floor+0xd8>
 800efc2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800efc6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800efca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efce:	dd07      	ble.n	800efe0 <floor+0x40>
 800efd0:	2900      	cmp	r1, #0
 800efd2:	da4e      	bge.n	800f072 <floor+0xd2>
 800efd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800efd8:	4318      	orrs	r0, r3
 800efda:	d001      	beq.n	800efe0 <floor+0x40>
 800efdc:	4928      	ldr	r1, [pc, #160]	; (800f080 <floor+0xe0>)
 800efde:	2000      	movs	r0, #0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4602      	mov	r2, r0
 800efe4:	ec43 2b10 	vmov	d0, r2, r3
 800efe8:	e020      	b.n	800f02c <floor+0x8c>
 800efea:	4a26      	ldr	r2, [pc, #152]	; (800f084 <floor+0xe4>)
 800efec:	411a      	asrs	r2, r3
 800efee:	ea01 0402 	and.w	r4, r1, r2
 800eff2:	4304      	orrs	r4, r0
 800eff4:	d01a      	beq.n	800f02c <floor+0x8c>
 800eff6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800f078 <floor+0xd8>
 800effa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800effe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	ddeb      	ble.n	800efe0 <floor+0x40>
 800f008:	2900      	cmp	r1, #0
 800f00a:	bfbe      	ittt	lt
 800f00c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800f010:	fa40 f303 	asrlt.w	r3, r0, r3
 800f014:	18c9      	addlt	r1, r1, r3
 800f016:	ea21 0102 	bic.w	r1, r1, r2
 800f01a:	2000      	movs	r0, #0
 800f01c:	e7e0      	b.n	800efe0 <floor+0x40>
 800f01e:	2b33      	cmp	r3, #51	; 0x33
 800f020:	dd05      	ble.n	800f02e <floor+0x8e>
 800f022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f026:	d101      	bne.n	800f02c <floor+0x8c>
 800f028:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f02c:	bd30      	pop	{r4, r5, pc}
 800f02e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800f032:	f04f 32ff 	mov.w	r2, #4294967295
 800f036:	40e2      	lsrs	r2, r4
 800f038:	4202      	tst	r2, r0
 800f03a:	d0f7      	beq.n	800f02c <floor+0x8c>
 800f03c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800f078 <floor+0xd8>
 800f040:	ee30 0b07 	vadd.f64	d0, d0, d7
 800f044:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04c:	ddc8      	ble.n	800efe0 <floor+0x40>
 800f04e:	2900      	cmp	r1, #0
 800f050:	da02      	bge.n	800f058 <floor+0xb8>
 800f052:	2b14      	cmp	r3, #20
 800f054:	d103      	bne.n	800f05e <floor+0xbe>
 800f056:	3101      	adds	r1, #1
 800f058:	ea20 0002 	bic.w	r0, r0, r2
 800f05c:	e7c0      	b.n	800efe0 <floor+0x40>
 800f05e:	2401      	movs	r4, #1
 800f060:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800f064:	fa04 f303 	lsl.w	r3, r4, r3
 800f068:	4418      	add	r0, r3
 800f06a:	42a8      	cmp	r0, r5
 800f06c:	bf38      	it	cc
 800f06e:	1909      	addcc	r1, r1, r4
 800f070:	e7f2      	b.n	800f058 <floor+0xb8>
 800f072:	2000      	movs	r0, #0
 800f074:	4601      	mov	r1, r0
 800f076:	e7b3      	b.n	800efe0 <floor+0x40>
 800f078:	8800759c 	.word	0x8800759c
 800f07c:	7e37e43c 	.word	0x7e37e43c
 800f080:	bff00000 	.word	0xbff00000
 800f084:	000fffff 	.word	0x000fffff

0800f088 <scalbn>:
 800f088:	ee10 1a90 	vmov	r1, s1
 800f08c:	b510      	push	{r4, lr}
 800f08e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f092:	b98c      	cbnz	r4, 800f0b8 <scalbn+0x30>
 800f094:	ee10 3a10 	vmov	r3, s0
 800f098:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f09c:	430b      	orrs	r3, r1
 800f09e:	d011      	beq.n	800f0c4 <scalbn+0x3c>
 800f0a0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800f168 <scalbn+0xe0>
 800f0a4:	4b3c      	ldr	r3, [pc, #240]	; (800f198 <scalbn+0x110>)
 800f0a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f0aa:	4298      	cmp	r0, r3
 800f0ac:	da0b      	bge.n	800f0c6 <scalbn+0x3e>
 800f0ae:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800f170 <scalbn+0xe8>
 800f0b2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f0b6:	e005      	b.n	800f0c4 <scalbn+0x3c>
 800f0b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800f0bc:	429c      	cmp	r4, r3
 800f0be:	d107      	bne.n	800f0d0 <scalbn+0x48>
 800f0c0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800f0c4:	bd10      	pop	{r4, pc}
 800f0c6:	ee10 1a90 	vmov	r1, s1
 800f0ca:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800f0ce:	3c36      	subs	r4, #54	; 0x36
 800f0d0:	4404      	add	r4, r0
 800f0d2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800f0d6:	429c      	cmp	r4, r3
 800f0d8:	dd0d      	ble.n	800f0f6 <scalbn+0x6e>
 800f0da:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800f178 <scalbn+0xf0>
 800f0de:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800f180 <scalbn+0xf8>
 800f0e2:	eeb0 6b47 	vmov.f64	d6, d7
 800f0e6:	ee10 3a90 	vmov	r3, s1
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	fe27 7b05 	vselge.f64	d7, d7, d5
 800f0f0:	ee27 0b06 	vmul.f64	d0, d7, d6
 800f0f4:	e7e6      	b.n	800f0c4 <scalbn+0x3c>
 800f0f6:	2c00      	cmp	r4, #0
 800f0f8:	dd0a      	ble.n	800f110 <scalbn+0x88>
 800f0fa:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f0fe:	ec53 2b10 	vmov	r2, r3, d0
 800f102:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f106:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f10a:	ec43 2b10 	vmov	d0, r2, r3
 800f10e:	e7d9      	b.n	800f0c4 <scalbn+0x3c>
 800f110:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800f114:	da19      	bge.n	800f14a <scalbn+0xc2>
 800f116:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f11a:	4298      	cmp	r0, r3
 800f11c:	ee10 3a90 	vmov	r3, s1
 800f120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f124:	dd09      	ble.n	800f13a <scalbn+0xb2>
 800f126:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800f178 <scalbn+0xf0>
 800f12a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800f180 <scalbn+0xf8>
 800f12e:	eeb0 7b40 	vmov.f64	d7, d0
 800f132:	2b00      	cmp	r3, #0
 800f134:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800f138:	e7bb      	b.n	800f0b2 <scalbn+0x2a>
 800f13a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800f170 <scalbn+0xe8>
 800f13e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800f188 <scalbn+0x100>
 800f142:	eeb0 7b40 	vmov.f64	d7, d0
 800f146:	2b00      	cmp	r3, #0
 800f148:	e7f4      	b.n	800f134 <scalbn+0xac>
 800f14a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800f14e:	ec53 2b10 	vmov	r2, r3, d0
 800f152:	3436      	adds	r4, #54	; 0x36
 800f154:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800f158:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800f15c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800f190 <scalbn+0x108>
 800f160:	ec43 2b10 	vmov	d0, r2, r3
 800f164:	e7a5      	b.n	800f0b2 <scalbn+0x2a>
 800f166:	bf00      	nop
 800f168:	00000000 	.word	0x00000000
 800f16c:	43500000 	.word	0x43500000
 800f170:	c2f8f359 	.word	0xc2f8f359
 800f174:	01a56e1f 	.word	0x01a56e1f
 800f178:	8800759c 	.word	0x8800759c
 800f17c:	7e37e43c 	.word	0x7e37e43c
 800f180:	8800759c 	.word	0x8800759c
 800f184:	fe37e43c 	.word	0xfe37e43c
 800f188:	c2f8f359 	.word	0xc2f8f359
 800f18c:	81a56e1f 	.word	0x81a56e1f
 800f190:	00000000 	.word	0x00000000
 800f194:	3c900000 	.word	0x3c900000
 800f198:	ffff3cb0 	.word	0xffff3cb0

0800f19c <_init>:
 800f19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f19e:	bf00      	nop
 800f1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1a2:	bc08      	pop	{r3}
 800f1a4:	469e      	mov	lr, r3
 800f1a6:	4770      	bx	lr

0800f1a8 <_fini>:
 800f1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1aa:	bf00      	nop
 800f1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ae:	bc08      	pop	{r3}
 800f1b0:	469e      	mov	lr, r3
 800f1b2:	4770      	bx	lr
